
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d20  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001e00  80001e00  00002200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002200  80002200  00002600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002284  80002284  00002684  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002288  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002794  00002d14  2**0
                  ALLOC
  9 .bss          00000128  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d9c0  00000640  00000640  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000748  00000000  00000000  00002db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 0000110a  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c766  00000000  00000000  0000460a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001f33  00000000  00000000  00010d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004577  00000000  00000000  00012ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000011a4  00000000  00000000  0001721c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000021e8  00000000  00000000  000183c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000212a  00000000  00000000  0001a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0053059b  00000000  00000000  0001c6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000690  00000000  00000000  0054cc6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	15 0c       	ld.w	r12,r10++

Disassembly of section .text:

80000008 <semaphore_insert_after>:
#include "include/kernel/semaphore.h"

int16_t semaphore_insert_after(semaphore * position, semaphore * new_semaphore)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	ef 4b ff f8 	st.w	r7[-8],r11
	new_semaphore->nextsemaphore = position->nextsemaphore;
80000018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000001c:	70 39       	ld.w	r9,r8[0xc]
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	91 39       	st.w	r8[0xc],r9
	new_semaphore->prevsemaphore = position;
80000024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000028:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000002c:	91 49       	st.w	r8[0x10],r9
	
	position->nextsemaphore = new_semaphore;
8000002e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000032:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000036:	91 39       	st.w	r8[0xc],r9
	new_semaphore->nextsemaphore->prevsemaphore = new_semaphore;
80000038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000003c:	70 38       	ld.w	r8,r8[0xc]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	91 49       	st.w	r8[0x10],r9
}
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	d7 03       	nop

8000004c <semaphoreAdd>:

int16_t semaphoreAdd(semaphore * handle)
{
8000004c:	eb cd 40 80 	pushm	r7,lr
80000050:	1a 97       	mov	r7,sp
80000052:	20 2d       	sub	sp,8
80000054:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = -1;
80000058:	3f f8       	mov	r8,-1
8000005a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( SEMAPHORES == NULL )
8000005e:	49 48       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000060:	70 08       	ld.w	r8,r8[0x0]
80000062:	58 08       	cp.w	r8,0
80000064:	c1 31       	brne	8000008a <semaphoreAdd+0x3e>
	{
		SEMAPHORES = handle;
80000066:	49 28       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000068:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000006c:	91 09       	st.w	r8[0x0],r9
		SEMAPHORES->nextsemaphore = SEMAPHORES;
8000006e:	49 08       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000070:	70 08       	ld.w	r8,r8[0x0]
80000072:	48 f9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
80000074:	72 09       	ld.w	r9,r9[0x0]
80000076:	91 39       	st.w	r8[0xc],r9
		SEMAPHORES->prevsemaphore = SEMAPHORES;
80000078:	48 d8       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000007a:	70 08       	ld.w	r8,r8[0x0]
8000007c:	48 c9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
8000007e:	72 09       	ld.w	r9,r9[0x0]
80000080:	91 49       	st.w	r8[0x10],r9
		
		result = 1;
80000082:	30 18       	mov	r8,1
80000084:	ef 58 ff fe 	st.h	r7[-2],r8
80000088:	c0 c8       	rjmp	800000a0 <semaphoreAdd+0x54>
	}
	else
	{
		semaphore_insert_after(SEMAPHORES->prevsemaphore, handle);
8000008a:	48 98       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000008c:	70 08       	ld.w	r8,r8[0x0]
8000008e:	70 48       	ld.w	r8,r8[0x10]
80000090:	ee fb ff f8 	ld.w	r11,r7[-8]
80000094:	10 9c       	mov	r12,r8
80000096:	f0 1f 00 07 	mcall	800000b0 <semaphoreAdd+0x64>
		
		result = 1;
8000009a:	30 18       	mov	r8,1
8000009c:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
800000a0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800000a4:	10 9c       	mov	r12,r8
800000a6:	2f ed       	sub	sp,-8
800000a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800000ac:	00 00       	add	r0,r0
800000ae:	06 1c       	sub	r12,r3
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	00 08       	add	r8,r0

800000b4 <ROSA_semaphoreCreate>:

int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * handle, uint8_t ceiling)
{
800000b4:	eb cd 40 80 	pushm	r7,lr
800000b8:	1a 97       	mov	r7,sp
800000ba:	20 3d       	sub	sp,12
800000bc:	ef 4c ff f8 	st.w	r7[-8],r12
800000c0:	16 98       	mov	r8,r11
800000c2:	ef 68 ff f4 	st.b	r7[-12],r8
	//interruptDisable();
	int16_t result = -1;
800000c6:	3f f8       	mov	r8,-1
800000c8:	ef 58 ff fe 	st.h	r7[-2],r8
	(*handle) = calloc(1, sizeof(semaphore));
800000cc:	31 4b       	mov	r11,20
800000ce:	30 1c       	mov	r12,1
800000d0:	f0 1f 00 11 	mcall	80000114 <ROSA_semaphoreCreate+0x60>
800000d4:	18 98       	mov	r8,r12
800000d6:	10 99       	mov	r9,r8
800000d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000dc:	91 09       	st.w	r8[0x0],r9
	(*handle)->ceiling = ceiling;
800000de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000e2:	70 09       	ld.w	r9,r8[0x0]
800000e4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800000e8:	b2 88       	st.b	r9[0x0],r8
	result = abs(*handle);
800000ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ee:	70 08       	ld.w	r8,r8[0x0]
800000f0:	10 9c       	mov	r12,r8
800000f2:	f0 1f 00 0a 	mcall	80000118 <ROSA_semaphoreCreate+0x64>
800000f6:	18 98       	mov	r8,r12
800000f8:	ef 58 ff fe 	st.h	r7[-2],r8
	semaphoreAdd(*handle);
800000fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000100:	70 08       	ld.w	r8,r8[0x0]
80000102:	10 9c       	mov	r12,r8
80000104:	f0 1f 00 06 	mcall	8000011c <ROSA_semaphoreCreate+0x68>
	//interruptEnable();
	
	return result;
80000108:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000010c:	10 9c       	mov	r12,r8
8000010e:	2f dd       	sub	sp,-12
80000110:	e3 cd 80 80 	ldm	sp++,r7,pc
80000114:	80 00       	ld.sh	r0,r0[0x0]
80000116:	15 90       	ld.ub	r0,r10[0x1]
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	15 8c       	ld.ub	r12,r10[0x0]
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	00 4c       	or	r12,r0

80000120 <usart_options>:
80000120:	00 00 e1 00 08 04 00 00 00 00 00 00 68 6f 67 53     ............hogS
80000130:	00 00 00 00 66 73 64 6a 00 00 00 00 74 65 73 74     ....fsdj....test
80000140:	00 00 00 00                                         ....

80000144 <init_tc>:
ROSA_taskHandle_t task_handle_30;
ROSA_taskHandle_t task_handle_31;
ROSA_taskHandle_t task_handle_32;

void init_tc()
{
80000144:	eb cd 40 80 	pushm	r7,lr
80000148:	1a 97       	mov	r7,sp
	*((unsigned int*)0xFFFF3844) = 0x0000C002;				// set waveform options
8000014a:	fe 78 38 44 	mov	r8,-51132
8000014e:	e0 69 c0 02 	mov	r9,49154
80000152:	91 09       	st.w	r8[0x0],r9
	*((unsigned int*)0xFFFF385C) = 0x000036D0;				// initialize CV to 0
80000154:	fe 78 38 5c 	mov	r8,-51108
80000158:	e0 69 36 d0 	mov	r9,14032
8000015c:	91 09       	st.w	r8[0x0],r9
	*((unsigned int*)0xFFFF3840) = 0x00000004 | 0x00000001; //start
8000015e:	fe 78 38 40 	mov	r8,-51136
80000162:	30 59       	mov	r9,5
80000164:	91 09       	st.w	r8[0x0],r9
}
80000166:	e3 cd 80 80 	ldm	sp++,r7,pc
8000016a:	d7 03       	nop

8000016c <toggle_1>:

void toggle_1(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                     
8000016c:	eb cd 40 80 	pushm	r7,lr
80000170:	1a 97       	mov	r7,sp
80000172:	33 dc       	mov	r12,61
80000174:	f0 1f 00 02 	mcall	8000017c <toggle_1+0x10>
80000178:	cf db       	rjmp	80000172 <toggle_1+0x6>
8000017a:	00 00       	add	r0,r0
8000017c:	80 00       	ld.sh	r0,r0[0x0]
8000017e:	11 5c       	ld.sh	r12,--r8

80000180 <toggle_2>:
void toggle_2(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                     
80000180:	eb cd 40 80 	pushm	r7,lr
80000184:	1a 97       	mov	r7,sp
80000186:	33 ec       	mov	r12,62
80000188:	f0 1f 00 02 	mcall	80000190 <toggle_2+0x10>
8000018c:	cf db       	rjmp	80000186 <toggle_2+0x6>
8000018e:	00 00       	add	r0,r0
80000190:	80 00       	ld.sh	r0,r0[0x0]
80000192:	11 5c       	ld.sh	r12,--r8

80000194 <toggle_3>:
void toggle_3(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                     
80000194:	eb cd 40 80 	pushm	r7,lr
80000198:	1a 97       	mov	r7,sp
8000019a:	33 3c       	mov	r12,51
8000019c:	f0 1f 00 02 	mcall	800001a4 <toggle_3+0x10>
800001a0:	cf db       	rjmp	8000019a <toggle_3+0x6>
800001a2:	00 00       	add	r0,r0
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	11 5c       	ld.sh	r12,--r8

800001a8 <toggle_4>:
void toggle_4(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                     
800001a8:	eb cd 40 80 	pushm	r7,lr
800001ac:	1a 97       	mov	r7,sp
800001ae:	33 4c       	mov	r12,52
800001b0:	f0 1f 00 02 	mcall	800001b8 <toggle_4+0x10>
800001b4:	cf db       	rjmp	800001ae <toggle_4+0x6>
800001b6:	00 00       	add	r0,r0
800001b8:	80 00       	ld.sh	r0,r0[0x0]
800001ba:	11 5c       	ld.sh	r12,--r8

800001bc <toggle_5>:
void toggle_5(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                     
800001bc:	eb cd 40 80 	pushm	r7,lr
800001c0:	1a 97       	mov	r7,sp
800001c2:	33 5c       	mov	r12,53
800001c4:	f0 1f 00 02 	mcall	800001cc <toggle_5+0x10>
800001c8:	cf db       	rjmp	800001c2 <toggle_5+0x6>
800001ca:	00 00       	add	r0,r0
800001cc:	80 00       	ld.sh	r0,r0[0x0]
800001ce:	11 5c       	ld.sh	r12,--r8

800001d0 <toggle_6>:
void toggle_6(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                     
800001d0:	eb cd 40 80 	pushm	r7,lr
800001d4:	1a 97       	mov	r7,sp
800001d6:	33 cc       	mov	r12,60
800001d8:	f0 1f 00 02 	mcall	800001e0 <toggle_6+0x10>
800001dc:	cf db       	rjmp	800001d6 <toggle_6+0x6>
800001de:	00 00       	add	r0,r0
800001e0:	80 00       	ld.sh	r0,r0[0x0]
800001e2:	11 5c       	ld.sh	r12,--r8

800001e4 <toggle_7>:
void toggle_7(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                     
800001e4:	eb cd 40 80 	pushm	r7,lr
800001e8:	1a 97       	mov	r7,sp
800001ea:	33 dc       	mov	r12,61
800001ec:	f0 1f 00 02 	mcall	800001f4 <toggle_7+0x10>
800001f0:	cf db       	rjmp	800001ea <toggle_7+0x6>
800001f2:	00 00       	add	r0,r0
800001f4:	80 00       	ld.sh	r0,r0[0x0]
800001f6:	11 5c       	ld.sh	r12,--r8

800001f8 <toggle_8>:
void toggle_8(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                     
800001f8:	eb cd 40 80 	pushm	r7,lr
800001fc:	1a 97       	mov	r7,sp
800001fe:	33 ec       	mov	r12,62
80000200:	f0 1f 00 02 	mcall	80000208 <toggle_8+0x10>
80000204:	cf db       	rjmp	800001fe <toggle_8+0x6>
80000206:	00 00       	add	r0,r0
80000208:	80 00       	ld.sh	r0,r0[0x0]
8000020a:	11 5c       	ld.sh	r12,--r8

8000020c <toggle_9>:
void toggle_9(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                     
8000020c:	eb cd 40 80 	pushm	r7,lr
80000210:	1a 97       	mov	r7,sp
80000212:	33 3c       	mov	r12,51
80000214:	f0 1f 00 02 	mcall	8000021c <toggle_9+0x10>
80000218:	cf db       	rjmp	80000212 <toggle_9+0x6>
8000021a:	00 00       	add	r0,r0
8000021c:	80 00       	ld.sh	r0,r0[0x0]
8000021e:	11 5c       	ld.sh	r12,--r8

80000220 <toggle_10>:
void toggle_10(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                    
80000220:	eb cd 40 80 	pushm	r7,lr
80000224:	1a 97       	mov	r7,sp
80000226:	33 4c       	mov	r12,52
80000228:	f0 1f 00 02 	mcall	80000230 <toggle_10+0x10>
8000022c:	cf db       	rjmp	80000226 <toggle_10+0x6>
8000022e:	00 00       	add	r0,r0
80000230:	80 00       	ld.sh	r0,r0[0x0]
80000232:	11 5c       	ld.sh	r12,--r8

80000234 <toggle_11>:
void toggle_11(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                    
80000234:	eb cd 40 80 	pushm	r7,lr
80000238:	1a 97       	mov	r7,sp
8000023a:	33 5c       	mov	r12,53
8000023c:	f0 1f 00 02 	mcall	80000244 <toggle_11+0x10>
80000240:	cf db       	rjmp	8000023a <toggle_11+0x6>
80000242:	00 00       	add	r0,r0
80000244:	80 00       	ld.sh	r0,r0[0x0]
80000246:	11 5c       	ld.sh	r12,--r8

80000248 <toggle_12>:
void toggle_12(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                    
80000248:	eb cd 40 80 	pushm	r7,lr
8000024c:	1a 97       	mov	r7,sp
8000024e:	33 cc       	mov	r12,60
80000250:	f0 1f 00 02 	mcall	80000258 <toggle_12+0x10>
80000254:	cf db       	rjmp	8000024e <toggle_12+0x6>
80000256:	00 00       	add	r0,r0
80000258:	80 00       	ld.sh	r0,r0[0x0]
8000025a:	11 5c       	ld.sh	r12,--r8

8000025c <toggle_13>:
void toggle_13(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                    
8000025c:	eb cd 40 80 	pushm	r7,lr
80000260:	1a 97       	mov	r7,sp
80000262:	33 dc       	mov	r12,61
80000264:	f0 1f 00 02 	mcall	8000026c <toggle_13+0x10>
80000268:	cf db       	rjmp	80000262 <toggle_13+0x6>
8000026a:	00 00       	add	r0,r0
8000026c:	80 00       	ld.sh	r0,r0[0x0]
8000026e:	11 5c       	ld.sh	r12,--r8

80000270 <toggle_14>:
void toggle_14(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                    
80000270:	eb cd 40 80 	pushm	r7,lr
80000274:	1a 97       	mov	r7,sp
80000276:	33 ec       	mov	r12,62
80000278:	f0 1f 00 02 	mcall	80000280 <toggle_14+0x10>
8000027c:	cf db       	rjmp	80000276 <toggle_14+0x6>
8000027e:	00 00       	add	r0,r0
80000280:	80 00       	ld.sh	r0,r0[0x0]
80000282:	11 5c       	ld.sh	r12,--r8

80000284 <toggle_15>:
void toggle_15(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                    
80000284:	eb cd 40 80 	pushm	r7,lr
80000288:	1a 97       	mov	r7,sp
8000028a:	33 3c       	mov	r12,51
8000028c:	f0 1f 00 02 	mcall	80000294 <toggle_15+0x10>
80000290:	cf db       	rjmp	8000028a <toggle_15+0x6>
80000292:	00 00       	add	r0,r0
80000294:	80 00       	ld.sh	r0,r0[0x0]
80000296:	11 5c       	ld.sh	r12,--r8

80000298 <toggle_16>:
void toggle_16(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                    
80000298:	eb cd 40 80 	pushm	r7,lr
8000029c:	1a 97       	mov	r7,sp
8000029e:	33 4c       	mov	r12,52
800002a0:	f0 1f 00 02 	mcall	800002a8 <toggle_16+0x10>
800002a4:	cf db       	rjmp	8000029e <toggle_16+0x6>
800002a6:	00 00       	add	r0,r0
800002a8:	80 00       	ld.sh	r0,r0[0x0]
800002aa:	11 5c       	ld.sh	r12,--r8

800002ac <toggle_17>:
void toggle_17(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                    
800002ac:	eb cd 40 80 	pushm	r7,lr
800002b0:	1a 97       	mov	r7,sp
800002b2:	33 5c       	mov	r12,53
800002b4:	f0 1f 00 02 	mcall	800002bc <toggle_17+0x10>
800002b8:	cf db       	rjmp	800002b2 <toggle_17+0x6>
800002ba:	00 00       	add	r0,r0
800002bc:	80 00       	ld.sh	r0,r0[0x0]
800002be:	11 5c       	ld.sh	r12,--r8

800002c0 <toggle_18>:
void toggle_18(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                    
800002c0:	eb cd 40 80 	pushm	r7,lr
800002c4:	1a 97       	mov	r7,sp
800002c6:	33 cc       	mov	r12,60
800002c8:	f0 1f 00 02 	mcall	800002d0 <toggle_18+0x10>
800002cc:	cf db       	rjmp	800002c6 <toggle_18+0x6>
800002ce:	00 00       	add	r0,r0
800002d0:	80 00       	ld.sh	r0,r0[0x0]
800002d2:	11 5c       	ld.sh	r12,--r8

800002d4 <toggle_19>:
void toggle_19(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                    
800002d4:	eb cd 40 80 	pushm	r7,lr
800002d8:	1a 97       	mov	r7,sp
800002da:	33 dc       	mov	r12,61
800002dc:	f0 1f 00 02 	mcall	800002e4 <toggle_19+0x10>
800002e0:	cf db       	rjmp	800002da <toggle_19+0x6>
800002e2:	00 00       	add	r0,r0
800002e4:	80 00       	ld.sh	r0,r0[0x0]
800002e6:	11 5c       	ld.sh	r12,--r8

800002e8 <toggle_20>:
void toggle_20(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                    
800002e8:	eb cd 40 80 	pushm	r7,lr
800002ec:	1a 97       	mov	r7,sp
800002ee:	33 ec       	mov	r12,62
800002f0:	f0 1f 00 02 	mcall	800002f8 <toggle_20+0x10>
800002f4:	cf db       	rjmp	800002ee <toggle_20+0x6>
800002f6:	00 00       	add	r0,r0
800002f8:	80 00       	ld.sh	r0,r0[0x0]
800002fa:	11 5c       	ld.sh	r12,--r8

800002fc <toggle_21>:
void toggle_21(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                    
800002fc:	eb cd 40 80 	pushm	r7,lr
80000300:	1a 97       	mov	r7,sp
80000302:	33 3c       	mov	r12,51
80000304:	f0 1f 00 02 	mcall	8000030c <toggle_21+0x10>
80000308:	cf db       	rjmp	80000302 <toggle_21+0x6>
8000030a:	00 00       	add	r0,r0
8000030c:	80 00       	ld.sh	r0,r0[0x0]
8000030e:	11 5c       	ld.sh	r12,--r8

80000310 <toggle_22>:
void toggle_22(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                    
80000310:	eb cd 40 80 	pushm	r7,lr
80000314:	1a 97       	mov	r7,sp
80000316:	33 4c       	mov	r12,52
80000318:	f0 1f 00 02 	mcall	80000320 <toggle_22+0x10>
8000031c:	cf db       	rjmp	80000316 <toggle_22+0x6>
8000031e:	00 00       	add	r0,r0
80000320:	80 00       	ld.sh	r0,r0[0x0]
80000322:	11 5c       	ld.sh	r12,--r8

80000324 <toggle_23>:
void toggle_23(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                    
80000324:	eb cd 40 80 	pushm	r7,lr
80000328:	1a 97       	mov	r7,sp
8000032a:	33 5c       	mov	r12,53
8000032c:	f0 1f 00 02 	mcall	80000334 <toggle_23+0x10>
80000330:	cf db       	rjmp	8000032a <toggle_23+0x6>
80000332:	00 00       	add	r0,r0
80000334:	80 00       	ld.sh	r0,r0[0x0]
80000336:	11 5c       	ld.sh	r12,--r8

80000338 <toggle_24>:
void toggle_24(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                    
80000338:	eb cd 40 80 	pushm	r7,lr
8000033c:	1a 97       	mov	r7,sp
8000033e:	33 cc       	mov	r12,60
80000340:	f0 1f 00 02 	mcall	80000348 <toggle_24+0x10>
80000344:	cf db       	rjmp	8000033e <toggle_24+0x6>
80000346:	00 00       	add	r0,r0
80000348:	80 00       	ld.sh	r0,r0[0x0]
8000034a:	11 5c       	ld.sh	r12,--r8

8000034c <toggle_25>:
void toggle_25(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                    
8000034c:	eb cd 40 80 	pushm	r7,lr
80000350:	1a 97       	mov	r7,sp
80000352:	33 dc       	mov	r12,61
80000354:	f0 1f 00 02 	mcall	8000035c <toggle_25+0x10>
80000358:	cf db       	rjmp	80000352 <toggle_25+0x6>
8000035a:	00 00       	add	r0,r0
8000035c:	80 00       	ld.sh	r0,r0[0x0]
8000035e:	11 5c       	ld.sh	r12,--r8

80000360 <toggle_26>:
void toggle_26(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                    
80000360:	eb cd 40 80 	pushm	r7,lr
80000364:	1a 97       	mov	r7,sp
80000366:	33 ec       	mov	r12,62
80000368:	f0 1f 00 02 	mcall	80000370 <toggle_26+0x10>
8000036c:	cf db       	rjmp	80000366 <toggle_26+0x6>
8000036e:	00 00       	add	r0,r0
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	11 5c       	ld.sh	r12,--r8

80000374 <toggle_27>:
void toggle_27(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                    
80000374:	eb cd 40 80 	pushm	r7,lr
80000378:	1a 97       	mov	r7,sp
8000037a:	33 3c       	mov	r12,51
8000037c:	f0 1f 00 02 	mcall	80000384 <toggle_27+0x10>
80000380:	cf db       	rjmp	8000037a <toggle_27+0x6>
80000382:	00 00       	add	r0,r0
80000384:	80 00       	ld.sh	r0,r0[0x0]
80000386:	11 5c       	ld.sh	r12,--r8

80000388 <toggle_28>:
void toggle_28(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                    
80000388:	eb cd 40 80 	pushm	r7,lr
8000038c:	1a 97       	mov	r7,sp
8000038e:	33 4c       	mov	r12,52
80000390:	f0 1f 00 02 	mcall	80000398 <toggle_28+0x10>
80000394:	cf db       	rjmp	8000038e <toggle_28+0x6>
80000396:	00 00       	add	r0,r0
80000398:	80 00       	ld.sh	r0,r0[0x0]
8000039a:	11 5c       	ld.sh	r12,--r8

8000039c <toggle_29>:
void toggle_29(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                    
8000039c:	eb cd 40 80 	pushm	r7,lr
800003a0:	1a 97       	mov	r7,sp
800003a2:	33 5c       	mov	r12,53
800003a4:	f0 1f 00 02 	mcall	800003ac <toggle_29+0x10>
800003a8:	cf db       	rjmp	800003a2 <toggle_29+0x6>
800003aa:	00 00       	add	r0,r0
800003ac:	80 00       	ld.sh	r0,r0[0x0]
800003ae:	11 5c       	ld.sh	r12,--r8

800003b0 <toggle_30>:
void toggle_30(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                    
800003b0:	eb cd 40 80 	pushm	r7,lr
800003b4:	1a 97       	mov	r7,sp
800003b6:	33 cc       	mov	r12,60
800003b8:	f0 1f 00 02 	mcall	800003c0 <toggle_30+0x10>
800003bc:	cf db       	rjmp	800003b6 <toggle_30+0x6>
800003be:	00 00       	add	r0,r0
800003c0:	80 00       	ld.sh	r0,r0[0x0]
800003c2:	11 5c       	ld.sh	r12,--r8

800003c4 <toggle_31>:
void toggle_31(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                    
800003c4:	eb cd 40 80 	pushm	r7,lr
800003c8:	1a 97       	mov	r7,sp
800003ca:	33 dc       	mov	r12,61
800003cc:	f0 1f 00 02 	mcall	800003d4 <toggle_31+0x10>
800003d0:	cf db       	rjmp	800003ca <toggle_31+0x6>
800003d2:	00 00       	add	r0,r0
800003d4:	80 00       	ld.sh	r0,r0[0x0]
800003d6:	11 5c       	ld.sh	r12,--r8

800003d8 <toggle_32>:
void toggle_32(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }  
800003d8:	eb cd 40 80 	pushm	r7,lr
800003dc:	1a 97       	mov	r7,sp
800003de:	33 ec       	mov	r12,62
800003e0:	f0 1f 00 02 	mcall	800003e8 <toggle_32+0x10>
800003e4:	cf db       	rjmp	800003de <toggle_32+0x6>
800003e6:	00 00       	add	r0,r0
800003e8:	80 00       	ld.sh	r0,r0[0x0]
800003ea:	11 5c       	ld.sh	r12,--r8

800003ec <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800003ec:	eb cd 40 80 	pushm	r7,lr
800003f0:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800003f2:	f0 1f 00 7d 	mcall	800005e4 <main+0x1f8>
	//ROSA_taskCreate(& task2_handle,					"tsk2", task2, STACK_SIZE, 3);
	//ROSA_taskCreate(& task3_handle,					"tsk3", task3, STACK_SIZE, 3);
	//ROSA_taskCreate(& task4_handle,					"tsk4", task4, STACK_SIZE, 3);
	//ROSA_taskCreate(& arbiter_task_handle,			"arbt", arbiter_task, STACK_SIZE, 1);
	
	ROSA_taskCreate(& task_handle_1, "fsdj", toggle_1, STACK_SIZE, 3);
800003f6:	30 38       	mov	r8,3
800003f8:	34 09       	mov	r9,64
800003fa:	4f ca       	lddpc	r10,800005e8 <main+0x1fc>
800003fc:	4f cb       	lddpc	r11,800005ec <main+0x200>
800003fe:	4f dc       	lddpc	r12,800005f0 <main+0x204>
80000400:	f0 1f 00 7d 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_2, "test", toggle_2, STACK_SIZE, 3);
80000404:	30 38       	mov	r8,3
80000406:	34 09       	mov	r9,64
80000408:	4f ca       	lddpc	r10,800005f8 <main+0x20c>
8000040a:	4f db       	lddpc	r11,800005fc <main+0x210>
8000040c:	4f dc       	lddpc	r12,80000600 <main+0x214>
8000040e:	f0 1f 00 7a 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_3, "test", toggle_3, STACK_SIZE, 3);
80000412:	30 38       	mov	r8,3
80000414:	34 09       	mov	r9,64
80000416:	4f ca       	lddpc	r10,80000604 <main+0x218>
80000418:	4f 9b       	lddpc	r11,800005fc <main+0x210>
8000041a:	4f cc       	lddpc	r12,80000608 <main+0x21c>
8000041c:	f0 1f 00 76 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_4, "test", toggle_4, STACK_SIZE, 3);
80000420:	30 38       	mov	r8,3
80000422:	34 09       	mov	r9,64
80000424:	4f aa       	lddpc	r10,8000060c <main+0x220>
80000426:	4f 6b       	lddpc	r11,800005fc <main+0x210>
80000428:	4f ac       	lddpc	r12,80000610 <main+0x224>
8000042a:	f0 1f 00 73 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_5, "test", toggle_5, STACK_SIZE, 3);
8000042e:	30 38       	mov	r8,3
80000430:	34 09       	mov	r9,64
80000432:	4f 9a       	lddpc	r10,80000614 <main+0x228>
80000434:	4f 2b       	lddpc	r11,800005fc <main+0x210>
80000436:	4f 9c       	lddpc	r12,80000618 <main+0x22c>
80000438:	f0 1f 00 6f 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_6, "test", toggle_6, STACK_SIZE, 3);
8000043c:	30 38       	mov	r8,3
8000043e:	34 09       	mov	r9,64
80000440:	4f 7a       	lddpc	r10,8000061c <main+0x230>
80000442:	4e fb       	lddpc	r11,800005fc <main+0x210>
80000444:	4f 7c       	lddpc	r12,80000620 <main+0x234>
80000446:	f0 1f 00 6c 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_7, "test", toggle_7, STACK_SIZE, 3);
8000044a:	30 38       	mov	r8,3
8000044c:	34 09       	mov	r9,64
8000044e:	4f 6a       	lddpc	r10,80000624 <main+0x238>
80000450:	4e bb       	lddpc	r11,800005fc <main+0x210>
80000452:	4f 6c       	lddpc	r12,80000628 <main+0x23c>
80000454:	f0 1f 00 68 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_8, "test", toggle_8, STACK_SIZE, 3);
80000458:	30 38       	mov	r8,3
8000045a:	34 09       	mov	r9,64
8000045c:	4f 4a       	lddpc	r10,8000062c <main+0x240>
8000045e:	4e 8b       	lddpc	r11,800005fc <main+0x210>
80000460:	4f 4c       	lddpc	r12,80000630 <main+0x244>
80000462:	f0 1f 00 65 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_9, "test", toggle_9, STACK_SIZE, 3);
80000466:	30 38       	mov	r8,3
80000468:	34 09       	mov	r9,64
8000046a:	4f 3a       	lddpc	r10,80000634 <main+0x248>
8000046c:	4e 4b       	lddpc	r11,800005fc <main+0x210>
8000046e:	4f 3c       	lddpc	r12,80000638 <main+0x24c>
80000470:	f0 1f 00 61 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_10, "test", toggle_10, STACK_SIZE, 3);
80000474:	30 38       	mov	r8,3
80000476:	34 09       	mov	r9,64
80000478:	4f 1a       	lddpc	r10,8000063c <main+0x250>
8000047a:	4e 1b       	lddpc	r11,800005fc <main+0x210>
8000047c:	4f 1c       	lddpc	r12,80000640 <main+0x254>
8000047e:	f0 1f 00 5e 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_11, "test", toggle_11, STACK_SIZE, 3);
80000482:	30 38       	mov	r8,3
80000484:	34 09       	mov	r9,64
80000486:	4f 0a       	lddpc	r10,80000644 <main+0x258>
80000488:	4d db       	lddpc	r11,800005fc <main+0x210>
8000048a:	4f 0c       	lddpc	r12,80000648 <main+0x25c>
8000048c:	f0 1f 00 5a 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_12, "test", toggle_12, STACK_SIZE, 3);
80000490:	30 38       	mov	r8,3
80000492:	34 09       	mov	r9,64
80000494:	4e ea       	lddpc	r10,8000064c <main+0x260>
80000496:	4d ab       	lddpc	r11,800005fc <main+0x210>
80000498:	4e ec       	lddpc	r12,80000650 <main+0x264>
8000049a:	f0 1f 00 57 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_13, "test", toggle_13, STACK_SIZE, 3);
8000049e:	30 38       	mov	r8,3
800004a0:	34 09       	mov	r9,64
800004a2:	4e da       	lddpc	r10,80000654 <main+0x268>
800004a4:	4d 6b       	lddpc	r11,800005fc <main+0x210>
800004a6:	4e dc       	lddpc	r12,80000658 <main+0x26c>
800004a8:	f0 1f 00 53 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_14, "test", toggle_14, STACK_SIZE, 3);
800004ac:	30 38       	mov	r8,3
800004ae:	34 09       	mov	r9,64
800004b0:	4e ba       	lddpc	r10,8000065c <main+0x270>
800004b2:	4d 3b       	lddpc	r11,800005fc <main+0x210>
800004b4:	4e bc       	lddpc	r12,80000660 <main+0x274>
800004b6:	f0 1f 00 50 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_15, "test", toggle_15, STACK_SIZE, 3);
800004ba:	30 38       	mov	r8,3
800004bc:	34 09       	mov	r9,64
800004be:	4e aa       	lddpc	r10,80000664 <main+0x278>
800004c0:	4c fb       	lddpc	r11,800005fc <main+0x210>
800004c2:	4e ac       	lddpc	r12,80000668 <main+0x27c>
800004c4:	f0 1f 00 4c 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_16, "test", toggle_16, STACK_SIZE, 3);
800004c8:	30 38       	mov	r8,3
800004ca:	34 09       	mov	r9,64
800004cc:	4e 8a       	lddpc	r10,8000066c <main+0x280>
800004ce:	4c cb       	lddpc	r11,800005fc <main+0x210>
800004d0:	4e 8c       	lddpc	r12,80000670 <main+0x284>
800004d2:	f0 1f 00 49 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_17, "test", toggle_17, STACK_SIZE, 3);
800004d6:	30 38       	mov	r8,3
800004d8:	34 09       	mov	r9,64
800004da:	4e 7a       	lddpc	r10,80000674 <main+0x288>
800004dc:	4c 8b       	lddpc	r11,800005fc <main+0x210>
800004de:	4e 7c       	lddpc	r12,80000678 <main+0x28c>
800004e0:	f0 1f 00 45 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_18, "test", toggle_18, STACK_SIZE, 3);
800004e4:	30 38       	mov	r8,3
800004e6:	34 09       	mov	r9,64
800004e8:	4e 5a       	lddpc	r10,8000067c <main+0x290>
800004ea:	4c 5b       	lddpc	r11,800005fc <main+0x210>
800004ec:	4e 5c       	lddpc	r12,80000680 <main+0x294>
800004ee:	f0 1f 00 42 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_19, "test", toggle_19, STACK_SIZE, 3);
800004f2:	30 38       	mov	r8,3
800004f4:	34 09       	mov	r9,64
800004f6:	4e 4a       	lddpc	r10,80000684 <main+0x298>
800004f8:	4c 1b       	lddpc	r11,800005fc <main+0x210>
800004fa:	4e 4c       	lddpc	r12,80000688 <main+0x29c>
800004fc:	f0 1f 00 3e 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_20, "test", toggle_20, STACK_SIZE, 3);
80000500:	30 38       	mov	r8,3
80000502:	34 09       	mov	r9,64
80000504:	4e 2a       	lddpc	r10,8000068c <main+0x2a0>
80000506:	4b eb       	lddpc	r11,800005fc <main+0x210>
80000508:	4e 2c       	lddpc	r12,80000690 <main+0x2a4>
8000050a:	f0 1f 00 3b 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_21, "test", toggle_21, STACK_SIZE, 3);
8000050e:	30 38       	mov	r8,3
80000510:	34 09       	mov	r9,64
80000512:	4e 1a       	lddpc	r10,80000694 <main+0x2a8>
80000514:	4b ab       	lddpc	r11,800005fc <main+0x210>
80000516:	4e 1c       	lddpc	r12,80000698 <main+0x2ac>
80000518:	f0 1f 00 37 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_22, "test", toggle_22, STACK_SIZE, 3);
8000051c:	30 38       	mov	r8,3
8000051e:	34 09       	mov	r9,64
80000520:	4d fa       	lddpc	r10,8000069c <main+0x2b0>
80000522:	4b 7b       	lddpc	r11,800005fc <main+0x210>
80000524:	4d fc       	lddpc	r12,800006a0 <main+0x2b4>
80000526:	f0 1f 00 34 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_23, "test", toggle_23, STACK_SIZE, 3);
8000052a:	30 38       	mov	r8,3
8000052c:	34 09       	mov	r9,64
8000052e:	4d ea       	lddpc	r10,800006a4 <main+0x2b8>
80000530:	4b 3b       	lddpc	r11,800005fc <main+0x210>
80000532:	4d ec       	lddpc	r12,800006a8 <main+0x2bc>
80000534:	f0 1f 00 30 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_24, "test", toggle_24, STACK_SIZE, 3);
80000538:	30 38       	mov	r8,3
8000053a:	34 09       	mov	r9,64
8000053c:	4d ca       	lddpc	r10,800006ac <main+0x2c0>
8000053e:	4b 0b       	lddpc	r11,800005fc <main+0x210>
80000540:	4d cc       	lddpc	r12,800006b0 <main+0x2c4>
80000542:	f0 1f 00 2d 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_25, "test", toggle_25, STACK_SIZE, 3);
80000546:	30 38       	mov	r8,3
80000548:	34 09       	mov	r9,64
8000054a:	4d ba       	lddpc	r10,800006b4 <main+0x2c8>
8000054c:	4a cb       	lddpc	r11,800005fc <main+0x210>
8000054e:	4d bc       	lddpc	r12,800006b8 <main+0x2cc>
80000550:	f0 1f 00 29 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_26, "test", toggle_26, STACK_SIZE, 3);
80000554:	30 38       	mov	r8,3
80000556:	34 09       	mov	r9,64
80000558:	4d 9a       	lddpc	r10,800006bc <main+0x2d0>
8000055a:	4a 9b       	lddpc	r11,800005fc <main+0x210>
8000055c:	4d 9c       	lddpc	r12,800006c0 <main+0x2d4>
8000055e:	f0 1f 00 26 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_27, "test", toggle_27, STACK_SIZE, 3);
80000562:	30 38       	mov	r8,3
80000564:	34 09       	mov	r9,64
80000566:	4d 8a       	lddpc	r10,800006c4 <main+0x2d8>
80000568:	4a 5b       	lddpc	r11,800005fc <main+0x210>
8000056a:	4d 8c       	lddpc	r12,800006c8 <main+0x2dc>
8000056c:	f0 1f 00 22 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_28, "test", toggle_28, STACK_SIZE, 3);
80000570:	30 38       	mov	r8,3
80000572:	34 09       	mov	r9,64
80000574:	4d 6a       	lddpc	r10,800006cc <main+0x2e0>
80000576:	4a 2b       	lddpc	r11,800005fc <main+0x210>
80000578:	4d 6c       	lddpc	r12,800006d0 <main+0x2e4>
8000057a:	f0 1f 00 1f 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_29, "test", toggle_29, STACK_SIZE, 3);
8000057e:	30 38       	mov	r8,3
80000580:	34 09       	mov	r9,64
80000582:	4d 5a       	lddpc	r10,800006d4 <main+0x2e8>
80000584:	49 eb       	lddpc	r11,800005fc <main+0x210>
80000586:	4d 5c       	lddpc	r12,800006d8 <main+0x2ec>
80000588:	f0 1f 00 1b 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_30, "test", toggle_30, STACK_SIZE, 3);
8000058c:	30 38       	mov	r8,3
8000058e:	34 09       	mov	r9,64
80000590:	4d 3a       	lddpc	r10,800006dc <main+0x2f0>
80000592:	49 bb       	lddpc	r11,800005fc <main+0x210>
80000594:	4d 3c       	lddpc	r12,800006e0 <main+0x2f4>
80000596:	f0 1f 00 18 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_31, "test", toggle_31, STACK_SIZE, 3);
8000059a:	30 38       	mov	r8,3
8000059c:	34 09       	mov	r9,64
8000059e:	4d 2a       	lddpc	r10,800006e4 <main+0x2f8>
800005a0:	49 7b       	lddpc	r11,800005fc <main+0x210>
800005a2:	4d 2c       	lddpc	r12,800006e8 <main+0x2fc>
800005a4:	f0 1f 00 14 	mcall	800005f4 <main+0x208>
	ROSA_taskCreate(& task_handle_32, "test", toggle_32, STACK_SIZE, 3);
800005a8:	30 38       	mov	r8,3
800005aa:	34 09       	mov	r9,64
800005ac:	4d 0a       	lddpc	r10,800006ec <main+0x300>
800005ae:	49 4b       	lddpc	r11,800005fc <main+0x210>
800005b0:	4d 0c       	lddpc	r12,800006f0 <main+0x304>
800005b2:	f0 1f 00 11 	mcall	800005f4 <main+0x208>
	
	ROSA_semaphoreCreate(& S1, 2);
800005b6:	30 2b       	mov	r11,2
800005b8:	4c fc       	lddpc	r12,800006f4 <main+0x308>
800005ba:	f0 1f 00 50 	mcall	800006f8 <main+0x30c>
	ROSA_semaphoreCreate(& S2, 2);
800005be:	30 2b       	mov	r11,2
800005c0:	4c fc       	lddpc	r12,800006fc <main+0x310>
800005c2:	f0 1f 00 4e 	mcall	800006f8 <main+0x30c>
	ROSA_semaphoreCreate(& S3, 2);
800005c6:	30 2b       	mov	r11,2
800005c8:	4c ec       	lddpc	r12,80000700 <main+0x314>
800005ca:	f0 1f 00 4c 	mcall	800006f8 <main+0x30c>
	ROSA_semaphoreCreate(& S4, 1);
800005ce:	30 1b       	mov	r11,1
800005d0:	4c dc       	lddpc	r12,80000704 <main+0x318>
800005d2:	f0 1f 00 4a 	mcall	800006f8 <main+0x30c>
	
	init_tc();
800005d6:	f0 1f 00 4d 	mcall	80000708 <main+0x31c>
	
	timerStart();
800005da:	f0 1f 00 4d 	mcall	8000070c <main+0x320>
	ROSA_start();
800005de:	f0 1f 00 4d 	mcall	80000710 <main+0x324>
	/* Execution will never return here */
	while(1);
800005e2:	c0 08       	rjmp	800005e2 <main+0x1f6>
800005e4:	80 00       	ld.sh	r0,r0[0x0]
800005e6:	07 70       	ld.ub	r0,--r3
800005e8:	80 00       	ld.sh	r0,r0[0x0]
800005ea:	01 6c       	ld.uh	r12,--r0
800005ec:	80 00       	ld.sh	r0,r0[0x0]
800005ee:	01 34       	ld.ub	r4,r0++
800005f0:	00 00       	add	r0,r0
800005f2:	05 b4       	ld.ub	r4,r2[0x3]
800005f4:	80 00       	ld.sh	r0,r0[0x0]
800005f6:	09 98       	ld.ub	r8,r4[0x1]
800005f8:	80 00       	ld.sh	r0,r0[0x0]
800005fa:	01 80       	ld.ub	r0,r0[0x0]
800005fc:	80 00       	ld.sh	r0,r0[0x0]
800005fe:	01 3c       	ld.ub	r12,r0++
80000600:	00 00       	add	r0,r0
80000602:	05 98       	ld.ub	r8,r2[0x1]
80000604:	80 00       	ld.sh	r0,r0[0x0]
80000606:	01 94       	ld.ub	r4,r0[0x1]
80000608:	00 00       	add	r0,r0
8000060a:	05 8c       	ld.ub	r12,r2[0x0]
8000060c:	80 00       	ld.sh	r0,r0[0x0]
8000060e:	01 a8       	ld.ub	r8,r0[0x2]
80000610:	00 00       	add	r0,r0
80000612:	05 80       	ld.ub	r0,r2[0x0]
80000614:	80 00       	ld.sh	r0,r0[0x0]
80000616:	01 bc       	ld.ub	r12,r0[0x3]
80000618:	00 00       	add	r0,r0
8000061a:	05 d0       	ld.ub	r0,r2[0x5]
8000061c:	80 00       	ld.sh	r0,r0[0x0]
8000061e:	01 d0       	ld.ub	r0,r0[0x5]
80000620:	00 00       	add	r0,r0
80000622:	05 78       	ld.ub	r8,--r2
80000624:	80 00       	ld.sh	r0,r0[0x0]
80000626:	01 e4       	ld.ub	r4,r0[0x6]
80000628:	00 00       	add	r0,r0
8000062a:	05 d4       	ld.ub	r4,r2[0x5]
8000062c:	80 00       	ld.sh	r0,r0[0x0]
8000062e:	01 f8       	ld.ub	r8,r0[0x7]
80000630:	00 00       	add	r0,r0
80000632:	05 a8       	ld.ub	r8,r2[0x2]
80000634:	80 00       	ld.sh	r0,r0[0x0]
80000636:	02 0c       	add	r12,r1
80000638:	00 00       	add	r0,r0
8000063a:	05 90       	ld.ub	r0,r2[0x1]
8000063c:	80 00       	ld.sh	r0,r0[0x0]
8000063e:	02 20       	rsub	r0,r1
80000640:	00 00       	add	r0,r0
80000642:	05 f8       	ld.ub	r8,r2[0x7]
80000644:	80 00       	ld.sh	r0,r0[0x0]
80000646:	02 34       	cp.w	r4,r1
80000648:	00 00       	add	r0,r0
8000064a:	05 94       	ld.ub	r4,r2[0x1]
8000064c:	80 00       	ld.sh	r0,r0[0x0]
8000064e:	02 48       	or	r8,r1
80000650:	00 00       	add	r0,r0
80000652:	05 c8       	ld.ub	r8,r2[0x4]
80000654:	80 00       	ld.sh	r0,r0[0x0]
80000656:	02 5c       	eor	r12,r1
80000658:	00 00       	add	r0,r0
8000065a:	05 88       	ld.ub	r8,r2[0x0]
8000065c:	80 00       	ld.sh	r0,r0[0x0]
8000065e:	02 70       	tst	r0,r1
80000660:	00 00       	add	r0,r0
80000662:	05 ac       	ld.ub	r12,r2[0x2]
80000664:	80 00       	ld.sh	r0,r0[0x0]
80000666:	02 84       	andn	r4,r1
80000668:	00 00       	add	r0,r0
8000066a:	05 e8       	ld.ub	r8,r2[0x6]
8000066c:	80 00       	ld.sh	r0,r0[0x0]
8000066e:	02 98       	mov	r8,r1
80000670:	00 00       	add	r0,r0
80000672:	05 ec       	ld.ub	r12,r2[0x6]
80000674:	80 00       	ld.sh	r0,r0[0x0]
80000676:	02 ac       	st.w	r1++,r12
80000678:	00 00       	add	r0,r0
8000067a:	05 7c       	ld.ub	r12,--r2
8000067c:	80 00       	ld.sh	r0,r0[0x0]
8000067e:	02 c0       	st.b	r1++,r0
80000680:	00 00       	add	r0,r0
80000682:	05 f4       	ld.ub	r4,r2[0x7]
80000684:	80 00       	ld.sh	r0,r0[0x0]
80000686:	02 d4       	st.w	--r1,r4
80000688:	00 00       	add	r0,r0
8000068a:	05 bc       	ld.ub	r12,r2[0x3]
8000068c:	80 00       	ld.sh	r0,r0[0x0]
8000068e:	02 e8       	st.h	--r1,r8
80000690:	00 00       	add	r0,r0
80000692:	05 b8       	ld.ub	r8,r2[0x3]
80000694:	80 00       	ld.sh	r0,r0[0x0]
80000696:	02 fc       	st.b	--r1,r12
80000698:	00 00       	add	r0,r0
8000069a:	05 a4       	ld.ub	r4,r2[0x2]
8000069c:	80 00       	ld.sh	r0,r0[0x0]
8000069e:	03 10       	ld.sh	r0,r1++
800006a0:	00 00       	add	r0,r0
800006a2:	05 d8       	ld.ub	r8,r2[0x5]
800006a4:	80 00       	ld.sh	r0,r0[0x0]
800006a6:	03 24       	ld.uh	r4,r1++
800006a8:	00 00       	add	r0,r0
800006aa:	05 f0       	ld.ub	r0,r2[0x7]
800006ac:	80 00       	ld.sh	r0,r0[0x0]
800006ae:	03 38       	ld.ub	r8,r1++
800006b0:	00 00       	add	r0,r0
800006b2:	05 b0       	ld.ub	r0,r2[0x3]
800006b4:	80 00       	ld.sh	r0,r0[0x0]
800006b6:	03 4c       	ld.w	r12,--r1
800006b8:	00 00       	add	r0,r0
800006ba:	05 dc       	ld.ub	r12,r2[0x5]
800006bc:	80 00       	ld.sh	r0,r0[0x0]
800006be:	03 60       	ld.uh	r0,--r1
800006c0:	00 00       	add	r0,r0
800006c2:	06 0c       	add	r12,r3
800006c4:	80 00       	ld.sh	r0,r0[0x0]
800006c6:	03 74       	ld.ub	r4,--r1
800006c8:	00 00       	add	r0,r0
800006ca:	05 c4       	ld.ub	r4,r2[0x4]
800006cc:	80 00       	ld.sh	r0,r0[0x0]
800006ce:	03 88       	ld.ub	r8,r1[0x0]
800006d0:	00 00       	add	r0,r0
800006d2:	05 fc       	ld.ub	r12,r2[0x7]
800006d4:	80 00       	ld.sh	r0,r0[0x0]
800006d6:	03 9c       	ld.ub	r12,r1[0x1]
800006d8:	00 00       	add	r0,r0
800006da:	05 e0       	ld.ub	r0,r2[0x6]
800006dc:	80 00       	ld.sh	r0,r0[0x0]
800006de:	03 b0       	ld.ub	r0,r1[0x3]
800006e0:	00 00       	add	r0,r0
800006e2:	05 a0       	ld.ub	r0,r2[0x2]
800006e4:	80 00       	ld.sh	r0,r0[0x0]
800006e6:	03 c4       	ld.ub	r4,r1[0x4]
800006e8:	00 00       	add	r0,r0
800006ea:	06 00       	add	r0,r3
800006ec:	80 00       	ld.sh	r0,r0[0x0]
800006ee:	03 d8       	ld.ub	r8,r1[0x5]
800006f0:	00 00       	add	r0,r0
800006f2:	05 e4       	ld.ub	r4,r2[0x6]
800006f4:	00 00       	add	r0,r0
800006f6:	05 20       	ld.uh	r0,r2++
800006f8:	80 00       	ld.sh	r0,r0[0x0]
800006fa:	00 b4       	st.h	r0++,r4
800006fc:	00 00       	add	r0,r0
800006fe:	05 24       	ld.uh	r4,r2++
80000700:	00 00       	add	r0,r0
80000702:	05 28       	ld.uh	r8,r2++
80000704:	00 00       	add	r0,r0
80000706:	05 2c       	ld.uh	r12,r2++
80000708:	80 00       	ld.sh	r0,r0[0x0]
8000070a:	01 44       	ld.w	r4,--r0
8000070c:	80 00       	ld.sh	r0,r0[0x0]
8000070e:	14 82       	andn	r2,r10
80000710:	80 00       	ld.sh	r0,r0[0x0]
80000712:	0c 20       	rsub	r0,r6

80000714 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000714:	eb cd 40 80 	pushm	r7,lr
80000718:	1a 97       	mov	r7,sp
	interruptDisable;
	contextSaveFromISR();	  //Save the task context
8000071a:	f0 1f 00 0c 	mcall	80000748 <ROSA_yieldFromISR+0x34>
	system_ticks ++;
8000071e:	48 c8       	lddpc	r8,8000074c <ROSA_yieldFromISR+0x38>
80000720:	f0 ea 00 00 	ld.d	r10,r8[0]
80000724:	30 18       	mov	r8,1
80000726:	30 09       	mov	r9,0
80000728:	f4 08 00 08 	add	r8,r10,r8
8000072c:	f6 09 00 49 	adc	r9,r11,r9
80000730:	48 7a       	lddpc	r10,8000074c <ROSA_yieldFromISR+0x38>
80000732:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
80000736:	f0 1f 00 07 	mcall	80000750 <ROSA_yieldFromISR+0x3c>
	contextRestoreFromISR();  //...and switch over to it.
8000073a:	f0 1f 00 07 	mcall	80000754 <ROSA_yieldFromISR+0x40>
	interruptEnable();
8000073e:	f0 1f 00 07 	mcall	80000758 <ROSA_yieldFromISR+0x44>
}
80000742:	e3 cd 80 80 	ldm	sp++,r7,pc
80000746:	00 00       	add	r0,r0
80000748:	80 00       	ld.sh	r0,r0[0x0]
8000074a:	1f 7e       	ld.ub	lr,--pc
8000074c:	00 00       	add	r0,r0
8000074e:	06 2c       	rsub	r12,r3
80000750:	80 00       	ld.sh	r0,r0[0x0]
80000752:	0d 00       	ld.w	r0,r6++
80000754:	80 00       	ld.sh	r0,r0[0x0]
80000756:	1f b8       	ld.ub	r8,pc[0x3]
80000758:	80 00       	ld.sh	r0,r0[0x0]
8000075a:	1f 6a       	ld.uh	r10,--pc

8000075c <usart_options>:
8000075c:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
8000076c:	00 00 00 00                                         ....

80000770 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000770:	eb cd 40 80 	pushm	r7,lr
80000774:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000776:	f0 1f 00 1d 	mcall	800007e8 <ROSA_init+0x78>
	buttonInit();								//Buttons
8000077a:	f0 1f 00 1d 	mcall	800007ec <ROSA_init+0x7c>
	joystickInit();								//Joystick
8000077e:	f0 1f 00 1d 	mcall	800007f0 <ROSA_init+0x80>
	potInit();									//Potentiometer
80000782:	f0 1f 00 1d 	mcall	800007f4 <ROSA_init+0x84>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000786:	e0 6a 1b 00 	mov	r10,6912
8000078a:	ea 1a 00 b7 	orh	r10,0xb7
8000078e:	49 bb       	lddpc	r11,800007f8 <ROSA_init+0x88>
80000790:	fe 7c 14 00 	mov	r12,-60416
80000794:	f0 1f 00 1a 	mcall	800007fc <ROSA_init+0x8c>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST				= NULL;
80000798:	49 a8       	lddpc	r8,80000800 <ROSA_init+0x90>
8000079a:	30 09       	mov	r9,0
8000079c:	91 09       	st.w	r8[0x0],r9
	SUSPENDEDLIST		= NULL;
8000079e:	49 a8       	lddpc	r8,80000804 <ROSA_init+0x94>
800007a0:	30 09       	mov	r9,0
800007a2:	91 09       	st.w	r8[0x0],r9
	EXECTASK			= NULL;
800007a4:	49 98       	lddpc	r8,80000808 <ROSA_init+0x98>
800007a6:	30 09       	mov	r9,0
800007a8:	91 09       	st.w	r8[0x0],r9
	//ROUNDROBIN_end		= NULL;
	SEMAPHORES			= NULL;
800007aa:	49 98       	lddpc	r8,8000080c <ROSA_init+0x9c>
800007ac:	30 09       	mov	r9,0
800007ae:	91 09       	st.w	r8[0x0],r9
	
#if IDLE_TASK_ENABLED
	IDLETASK = NULL;
800007b0:	49 88       	lddpc	r8,80000810 <ROSA_init+0xa0>
800007b2:	30 09       	mov	r9,0
800007b4:	91 09       	st.w	r8[0x0],r9
	ROSA_taskCreate(&IDLETASK, "idle", idle, 0x40, 255);
800007b6:	e0 68 00 ff 	mov	r8,255
800007ba:	34 09       	mov	r9,64
800007bc:	49 6a       	lddpc	r10,80000814 <ROSA_init+0xa4>
800007be:	49 7b       	lddpc	r11,80000818 <ROSA_init+0xa8>
800007c0:	49 4c       	lddpc	r12,80000810 <ROSA_init+0xa0>
800007c2:	f0 1f 00 17 	mcall	8000081c <ROSA_init+0xac>
	//taskUninstall(IDLETASK);
#endif
	
	//initialize system time
	system_ticks = 0;
800007c6:	49 7a       	lddpc	r10,80000820 <ROSA_init+0xb0>
800007c8:	30 08       	mov	r8,0
800007ca:	30 09       	mov	r9,0
800007cc:	f4 e9 00 00 	st.d	r10[0],r8
	round_robin_ticks = 0;
800007d0:	49 5a       	lddpc	r10,80000824 <ROSA_init+0xb4>
800007d2:	30 08       	mov	r8,0
800007d4:	30 09       	mov	r9,0
800007d6:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Initialize the timer to 1 ms period.
	//...
	interruptInit();
800007da:	f0 1f 00 14 	mcall	80000828 <ROSA_init+0xb8>
	timerInit(1);
800007de:	30 1c       	mov	r12,1
800007e0:	f0 1f 00 13 	mcall	8000082c <ROSA_init+0xbc>
	//...
}
800007e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800007e8:	80 00       	ld.sh	r0,r0[0x0]
800007ea:	10 b0       	st.h	r8++,r0
800007ec:	80 00       	ld.sh	r0,r0[0x0]
800007ee:	0f 08       	ld.w	r8,r7++
800007f0:	80 00       	ld.sh	r0,r0[0x0]
800007f2:	0f 30       	ld.ub	r0,r7++
800007f4:	80 00       	ld.sh	r0,r0[0x0]
800007f6:	11 7c       	ld.ub	r12,--r8
800007f8:	80 00       	ld.sh	r0,r0[0x0]
800007fa:	07 5c       	ld.sh	r12,--r3
800007fc:	80 00       	ld.sh	r0,r0[0x0]
800007fe:	13 30       	ld.ub	r0,r9++
80000800:	00 00       	add	r0,r0
80000802:	06 14       	sub	r4,r3
80000804:	00 00       	add	r0,r0
80000806:	06 18       	sub	r8,r3
80000808:	00 00       	add	r0,r0
8000080a:	06 20       	rsub	r0,r3
8000080c:	00 00       	add	r0,r0
8000080e:	06 1c       	sub	r12,r3
80000810:	00 00       	add	r0,r0
80000812:	06 10       	sub	r0,r3
80000814:	80 00       	ld.sh	r0,r0[0x0]
80000816:	0c 18       	sub	r8,r6
80000818:	80 00       	ld.sh	r0,r0[0x0]
8000081a:	07 68       	ld.uh	r8,--r3
8000081c:	80 00       	ld.sh	r0,r0[0x0]
8000081e:	09 98       	ld.ub	r8,r4[0x1]
80000820:	00 00       	add	r0,r0
80000822:	06 2c       	rsub	r12,r3
80000824:	00 00       	add	r0,r0
80000826:	06 24       	rsub	r4,r3
80000828:	80 00       	ld.sh	r0,r0[0x0]
8000082a:	1f 48       	ld.w	r8,--pc
8000082c:	80 00       	ld.sh	r0,r0[0x0]
8000082e:	14 54       	eor	r4,r10

80000830 <insert_after>:
		//ROUNDROBIN_end = NULL;
	//}
//}

uint16_t insert_after( tcb * position, tcb * new_task )
{
80000830:	eb cd 40 80 	pushm	r7,lr
80000834:	1a 97       	mov	r7,sp
80000836:	20 3d       	sub	sp,12
80000838:	ef 4c ff f8 	st.w	r7[-8],r12
8000083c:	ef 4b ff f4 	st.w	r7[-12],r11
	uint16_t result = -1;
80000840:	3f f8       	mov	r8,-1
80000842:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( position != NULL )
80000846:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000084a:	58 08       	cp.w	r8,0
8000084c:	c2 10       	breq	8000088e <insert_after+0x5e>
	{
		new_task->prevtcb = position;
8000084e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000852:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000856:	f1 49 00 64 	st.w	r8[100],r9
		new_task->nexttcb = position->nexttcb;
8000085a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000085e:	70 09       	ld.w	r9,r8[0x0]
80000860:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000864:	91 09       	st.w	r8[0x0],r9
		
		position->nexttcb = new_task;
80000866:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000086a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000086e:	91 09       	st.w	r8[0x0],r9
		if( new_task->nexttcb != NULL )
80000870:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000874:	70 08       	ld.w	r8,r8[0x0]
80000876:	58 08       	cp.w	r8,0
80000878:	c0 80       	breq	80000888 <insert_after+0x58>
		{
			(new_task->nexttcb)->prevtcb = new_task;
8000087a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000087e:	70 08       	ld.w	r8,r8[0x0]
80000880:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000884:	f1 49 00 64 	st.w	r8[100],r9
		}
		result = 1;
80000888:	30 18       	mov	r8,1
8000088a:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	return result;
8000088e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000892:	10 9c       	mov	r12,r8
80000894:	2f dd       	sub	sp,-12
80000896:	e3 cd 80 80 	ldm	sp++,r7,pc
8000089a:	d7 03       	nop

8000089c <taskInstall>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

uint16_t taskInstall(tcb * task)
{
8000089c:	eb cd 40 80 	pushm	r7,lr
800008a0:	1a 97       	mov	r7,sp
800008a2:	20 3d       	sub	sp,12
800008a4:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
800008a8:	3f f8       	mov	r8,-1
800008aa:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( TCBLIST == NULL )
800008ae:	4b 98       	lddpc	r8,80000990 <taskInstall+0xf4>
800008b0:	70 08       	ld.w	r8,r8[0x0]
800008b2:	58 08       	cp.w	r8,0
800008b4:	c1 41       	brne	800008dc <taskInstall+0x40>
	{
		TCBLIST		  = task;
800008b6:	4b 78       	lddpc	r8,80000990 <taskInstall+0xf4>
800008b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800008bc:	91 09       	st.w	r8[0x0],r9
		task->nexttcb = task;
800008be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008c2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800008c6:	91 09       	st.w	r8[0x0],r9
		task->prevtcb = task;
800008c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800008d0:	f1 49 00 64 	st.w	r8[100],r9

//#if ROUND_ROBIN_MODE_ENABLED
		//ROUNDROBIN_end = NULL; // shouldn't be necessary, but is safer
//#endif

		result = 1;
800008d4:	30 18       	mov	r8,1
800008d6:	ef 58 ff fa 	st.h	r7[-6],r8
800008da:	c5 58       	rjmp	80000984 <taskInstall+0xe8>
	}
	//if this task should be inserted before the first task in the list
	else if( task->effective_priority < TCBLIST->effective_priority )
800008dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008e0:	f1 39 00 69 	ld.ub	r9,r8[105]
800008e4:	4a b8       	lddpc	r8,80000990 <taskInstall+0xf4>
800008e6:	70 08       	ld.w	r8,r8[0x0]
800008e8:	f1 38 00 69 	ld.ub	r8,r8[105]
800008ec:	f0 09 18 00 	cp.b	r9,r8
800008f0:	c1 12       	brcc	80000912 <taskInstall+0x76>
	{
		insert_after(TCBLIST->prevtcb, task);
800008f2:	4a 88       	lddpc	r8,80000990 <taskInstall+0xf4>
800008f4:	70 08       	ld.w	r8,r8[0x0]
800008f6:	71 98       	ld.w	r8,r8[0x64]
800008f8:	ee fb ff f4 	ld.w	r11,r7[-12]
800008fc:	10 9c       	mov	r12,r8
800008fe:	f0 1f 00 26 	mcall	80000994 <taskInstall+0xf8>
		TCBLIST = task;
80000902:	4a 48       	lddpc	r8,80000990 <taskInstall+0xf4>
80000904:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000908:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
8000090a:	30 18       	mov	r8,1
8000090c:	ef 58 ff fa 	st.h	r7[-6],r8
80000910:	c3 a8       	rjmp	80000984 <taskInstall+0xe8>
	}
	else if( task->effective_priority >= (TCBLIST->prevtcb)->effective_priority )
80000912:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000916:	f1 39 00 69 	ld.ub	r9,r8[105]
8000091a:	49 e8       	lddpc	r8,80000990 <taskInstall+0xf4>
8000091c:	70 08       	ld.w	r8,r8[0x0]
8000091e:	71 98       	ld.w	r8,r8[0x64]
80000920:	f1 38 00 69 	ld.ub	r8,r8[105]
80000924:	f0 09 18 00 	cp.b	r9,r8
80000928:	c0 a3       	brcs	8000093c <taskInstall+0xa0>
	{
		insert_after(TCBLIST->prevtcb, task);
8000092a:	49 a8       	lddpc	r8,80000990 <taskInstall+0xf4>
8000092c:	70 08       	ld.w	r8,r8[0x0]
8000092e:	71 98       	ld.w	r8,r8[0x64]
80000930:	ee fb ff f4 	ld.w	r11,r7[-12]
80000934:	10 9c       	mov	r12,r8
80000936:	f0 1f 00 18 	mcall	80000994 <taskInstall+0xf8>
8000093a:	c2 58       	rjmp	80000984 <taskInstall+0xe8>
	}
	else
	{
		iterator = TCBLIST;
8000093c:	49 58       	lddpc	r8,80000990 <taskInstall+0xf4>
8000093e:	70 08       	ld.w	r8,r8[0x0]
80000940:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->effective_priority >= iterator->effective_priority )
80000944:	c0 68       	rjmp	80000950 <taskInstall+0xb4>
		{
			iterator = iterator->nexttcb;
80000946:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000094a:	70 08       	ld.w	r8,r8[0x0]
8000094c:	ef 48 ff fc 	st.w	r7[-4],r8
		insert_after(TCBLIST->prevtcb, task);
	}
	else
	{
		iterator = TCBLIST;
		while( iterator && task->effective_priority >= iterator->effective_priority )
80000950:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000954:	58 08       	cp.w	r8,0
80000956:	c0 c0       	breq	8000096e <taskInstall+0xd2>
80000958:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000095c:	f1 39 00 69 	ld.ub	r9,r8[105]
80000960:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000964:	f1 38 00 69 	ld.ub	r8,r8[105]
80000968:	f0 09 18 00 	cp.b	r9,r8
8000096c:	ce d2       	brcc	80000946 <taskInstall+0xaa>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
8000096e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000972:	71 98       	ld.w	r8,r8[0x64]
80000974:	ee fb ff f4 	ld.w	r11,r7[-12]
80000978:	10 9c       	mov	r12,r8
8000097a:	f0 1f 00 07 	mcall	80000994 <taskInstall+0xf8>
		
		result = 1;
8000097e:	30 18       	mov	r8,1
80000980:	ef 58 ff fa 	st.h	r7[-6],r8
	//{
		//ROUNDROBIN_end = task;
	//}
//#endif

	return result;
80000984:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000988:	10 9c       	mov	r12,r8
8000098a:	2f dd       	sub	sp,-12
8000098c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000990:	00 00       	add	r0,r0
80000992:	06 14       	sub	r4,r3
80000994:	80 00       	ld.sh	r0,r0[0x0]
80000996:	08 30       	cp.w	r0,r4

80000998 <ROSA_taskCreate>:
	
	return result;
}

uint16_t ROSA_taskCreate(ROSA_taskHandle_t* th, char* id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000998:	eb cd 40 80 	pushm	r7,lr
8000099c:	1a 97       	mov	r7,sp
8000099e:	20 8d       	sub	sp,32
800009a0:	ef 4c ff f0 	st.w	r7[-16],r12
800009a4:	ef 4b ff ec 	st.w	r7[-20],r11
800009a8:	ef 4a ff e8 	st.w	r7[-24],r10
800009ac:	ef 49 ff e4 	st.w	r7[-28],r9
800009b0:	ef 68 ff e0 	st.b	r7[-32],r8
	uint16_t result = 0;
800009b4:	30 08       	mov	r8,0
800009b6:	ef 58 ff f6 	st.h	r7[-10],r8
	
	if(! *th)
800009ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009be:	70 08       	ld.w	r8,r8[0x0]
800009c0:	58 08       	cp.w	r8,0
800009c2:	c6 91       	brne	80000a94 <ROSA_taskCreate+0xfc>
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
800009c4:	37 8b       	mov	r11,120
800009c6:	30 1c       	mov	r12,1
800009c8:	f0 1f 00 36 	mcall	80000aa0 <ROSA_taskCreate+0x108>
800009cc:	18 98       	mov	r8,r12
800009ce:	10 99       	mov	r9,r8
800009d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009d4:	91 09       	st.w	r8[0x0],r9
		tcb* temp = *th;
800009d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009da:	70 08       	ld.w	r8,r8[0x0]
800009dc:	ef 48 ff f8 	st.w	r7[-8],r8
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
800009e0:	30 08       	mov	r8,0
800009e2:	ef 48 ff fc 	st.w	r7[-4],r8
800009e6:	c1 48       	rjmp	80000a0e <ROSA_taskCreate+0x76>
		{
			temp->id[i] = id[i];		//copy task id
800009e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800009ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009f0:	ee fa ff ec 	ld.w	r10,r7[-20]
800009f4:	f4 08 00 08 	add	r8,r10,r8
800009f8:	11 88       	ld.ub	r8,r8[0x0]
800009fa:	ee fa ff f8 	ld.w	r10,r7[-8]
800009fe:	f4 09 00 09 	add	r9,r10,r9
80000a02:	b2 c8       	st.b	r9[0x4],r8
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
		tcb* temp = *th;
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80000a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a08:	2f f8       	sub	r8,-1
80000a0a:	ef 48 ff fc 	st.w	r7[-4],r8
80000a0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a12:	58 38       	cp.w	r8,3
80000a14:	fe 9a ff ea 	brle	800009e8 <ROSA_taskCreate+0x50>
		{
			temp->id[i] = id[i];		//copy task id
		}
		
		temp->staddr = taskFunction;
80000a18:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a20:	91 29       	st.w	r8[0x8],r9
		temp->retaddr = (int)taskFunction;
80000a22:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000a26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a2a:	91 99       	st.w	r8[0x24],r9
		
		temp->datasize = stackSize;
80000a2c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80000a30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a34:	91 49       	st.w	r8[0x10],r9
		temp->dataarea = (int*)calloc(stackSize, sizeof(int)) + stackSize;
80000a36:	30 4b       	mov	r11,4
80000a38:	ee fc ff e4 	ld.w	r12,r7[-28]
80000a3c:	f0 1f 00 19 	mcall	80000aa0 <ROSA_taskCreate+0x108>
80000a40:	18 98       	mov	r8,r12
80000a42:	10 99       	mov	r9,r8
80000a44:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000a48:	a3 68       	lsl	r8,0x2
80000a4a:	10 09       	add	r9,r8
80000a4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a50:	91 39       	st.w	r8[0xc],r9
		temp->saveusp = temp->dataarea;
80000a52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a56:	70 39       	ld.w	r9,r8[0xc]
80000a58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a5c:	91 59       	st.w	r8[0x14],r9
		
		temp->savesr = ROSA_INITIALSR;
80000a5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a62:	fc 19 00 1c 	movh	r9,0x1c
80000a66:	91 89       	st.w	r8[0x20],r9
		
		temp->priority = priority;
80000a68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a6c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000a70:	f3 68 00 68 	st.b	r9[104],r8
		temp->effective_priority = priority;
80000a74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a78:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000a7c:	f3 68 00 69 	st.b	r9[105],r8
		
		contextInit(temp);
80000a80:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a84:	f0 1f 00 08 	mcall	80000aa4 <ROSA_taskCreate+0x10c>
		
		taskInstall(* th);
80000a88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a8c:	70 08       	ld.w	r8,r8[0x0]
80000a8e:	10 9c       	mov	r12,r8
80000a90:	f0 1f 00 06 	mcall	80000aa8 <ROSA_taskCreate+0x110>
	}
	return result;
80000a94:	ef 08 ff f6 	ld.sh	r8,r7[-10]
}
80000a98:	10 9c       	mov	r12,r8
80000a9a:	2f 8d       	sub	sp,-32
80000a9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000aa0:	80 00       	ld.sh	r0,r0[0x0]
80000aa2:	15 90       	ld.ub	r0,r10[0x1]
80000aa4:	80 00       	ld.sh	r0,r0[0x0]
80000aa6:	0c 56       	eor	r6,r6
80000aa8:	80 00       	ld.sh	r0,r0[0x0]
80000aaa:	08 9c       	mov	r12,r4

80000aac <taskUninstall>:
	
	return result;
}

uint16_t taskUninstall( tcb * task )
{
80000aac:	eb cd 40 80 	pushm	r7,lr
80000ab0:	1a 97       	mov	r7,sp
80000ab2:	20 2d       	sub	sp,8
80000ab4:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000ab8:	3f f8       	mov	r8,-1
80000aba:	ef 58 ff fe 	st.h	r7[-2],r8
		//}
	//}
//#endif
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
80000abe:	49 78       	lddpc	r8,80000b18 <taskUninstall+0x6c>
80000ac0:	70 09       	ld.w	r9,r8[0x0]
80000ac2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ac6:	10 39       	cp.w	r9,r8
80000ac8:	c0 c1       	brne	80000ae0 <taskUninstall+0x34>
80000aca:	49 48       	lddpc	r8,80000b18 <taskUninstall+0x6c>
80000acc:	70 08       	ld.w	r8,r8[0x0]
80000ace:	71 99       	ld.w	r9,r8[0x64]
80000ad0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ad4:	10 39       	cp.w	r9,r8
80000ad6:	c0 51       	brne	80000ae0 <taskUninstall+0x34>
	{
		TCBLIST	= NULL;
80000ad8:	49 08       	lddpc	r8,80000b18 <taskUninstall+0x6c>
80000ada:	30 09       	mov	r9,0
80000adc:	91 09       	st.w	r8[0x0],r9
		//}
	//}
//#endif
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
80000ade:	c0 c8       	rjmp	80000af6 <taskUninstall+0x4a>
	{
		TCBLIST	= NULL;
	}
	else if( TCBLIST == task )
80000ae0:	48 e8       	lddpc	r8,80000b18 <taskUninstall+0x6c>
80000ae2:	70 09       	ld.w	r9,r8[0x0]
80000ae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ae8:	10 39       	cp.w	r9,r8
80000aea:	c0 61       	brne	80000af6 <taskUninstall+0x4a>
	{
		TCBLIST = TCBLIST->nexttcb;
80000aec:	48 b8       	lddpc	r8,80000b18 <taskUninstall+0x6c>
80000aee:	70 08       	ld.w	r8,r8[0x0]
80000af0:	70 09       	ld.w	r9,r8[0x0]
80000af2:	48 a8       	lddpc	r8,80000b18 <taskUninstall+0x6c>
80000af4:	91 09       	st.w	r8[0x0],r9
	}
	
	result = remove(task);
80000af6:	ee fc ff f8 	ld.w	r12,r7[-8]
80000afa:	f0 1f 00 09 	mcall	80000b1c <taskUninstall+0x70>
80000afe:	18 98       	mov	r8,r12
80000b00:	5c 88       	casts.h	r8
80000b02:	ef 58 ff fe 	st.h	r7[-2],r8
	
	result = 1;
80000b06:	30 18       	mov	r8,1
80000b08:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000b0c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000b10:	10 9c       	mov	r12,r8
80000b12:	2f ed       	sub	sp,-8
80000b14:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b18:	00 00       	add	r0,r0
80000b1a:	06 14       	sub	r4,r3
80000b1c:	80 00       	ld.sh	r0,r0[0x0]
80000b1e:	0b b0       	ld.ub	r0,r5[0x3]

80000b20 <taskUnsuspend>:

uint16_t taskUnsuspend( tcb * task )
{
80000b20:	eb cd 40 80 	pushm	r7,lr
80000b24:	1a 97       	mov	r7,sp
80000b26:	20 2d       	sub	sp,8
80000b28:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000b2c:	3f f8       	mov	r8,-1
80000b2e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80000b32:	49 e8       	lddpc	r8,80000ba8 <taskUnsuspend+0x88>
80000b34:	70 09       	ld.w	r9,r8[0x0]
80000b36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b3a:	10 39       	cp.w	r9,r8
80000b3c:	c0 c1       	brne	80000b54 <taskUnsuspend+0x34>
80000b3e:	49 b8       	lddpc	r8,80000ba8 <taskUnsuspend+0x88>
80000b40:	70 08       	ld.w	r8,r8[0x0]
80000b42:	71 99       	ld.w	r9,r8[0x64]
80000b44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b48:	10 39       	cp.w	r9,r8
80000b4a:	c0 51       	brne	80000b54 <taskUnsuspend+0x34>
	{
		SUSPENDEDLIST		= NULL;
80000b4c:	49 78       	lddpc	r8,80000ba8 <taskUnsuspend+0x88>
80000b4e:	30 09       	mov	r9,0
80000b50:	91 09       	st.w	r8[0x0],r9
uint16_t taskUnsuspend( tcb * task )
{
	uint16_t result = -1;
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80000b52:	c1 c8       	rjmp	80000b8a <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST		= NULL;
	}
	else if( SUSPENDEDLIST == task )
80000b54:	49 58       	lddpc	r8,80000ba8 <taskUnsuspend+0x88>
80000b56:	70 09       	ld.w	r9,r8[0x0]
80000b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b5c:	10 39       	cp.w	r9,r8
80000b5e:	c0 71       	brne	80000b6c <taskUnsuspend+0x4c>
	{
		SUSPENDEDLIST = SUSPENDEDLIST->nexttcb;
80000b60:	49 28       	lddpc	r8,80000ba8 <taskUnsuspend+0x88>
80000b62:	70 08       	ld.w	r8,r8[0x0]
80000b64:	70 09       	ld.w	r9,r8[0x0]
80000b66:	49 18       	lddpc	r8,80000ba8 <taskUnsuspend+0x88>
80000b68:	91 09       	st.w	r8[0x0],r9
80000b6a:	c1 08       	rjmp	80000b8a <taskUnsuspend+0x6a>
	}
	else if( SUSPENDEDLIST->prevtcb == task )
80000b6c:	48 f8       	lddpc	r8,80000ba8 <taskUnsuspend+0x88>
80000b6e:	70 08       	ld.w	r8,r8[0x0]
80000b70:	71 99       	ld.w	r9,r8[0x64]
80000b72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b76:	10 39       	cp.w	r9,r8
80000b78:	c0 91       	brne	80000b8a <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST->prevtcb = (SUSPENDEDLIST->prevtcb)->prevtcb;
80000b7a:	48 c8       	lddpc	r8,80000ba8 <taskUnsuspend+0x88>
80000b7c:	70 08       	ld.w	r8,r8[0x0]
80000b7e:	48 b9       	lddpc	r9,80000ba8 <taskUnsuspend+0x88>
80000b80:	72 09       	ld.w	r9,r9[0x0]
80000b82:	73 99       	ld.w	r9,r9[0x64]
80000b84:	73 99       	ld.w	r9,r9[0x64]
80000b86:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	result = remove(task);
80000b8a:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b8e:	f0 1f 00 08 	mcall	80000bac <taskUnsuspend+0x8c>
80000b92:	18 98       	mov	r8,r12
80000b94:	5c 88       	casts.h	r8
80000b96:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000b9a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000b9e:	10 9c       	mov	r12,r8
80000ba0:	2f ed       	sub	sp,-8
80000ba2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ba6:	00 00       	add	r0,r0
80000ba8:	00 00       	add	r0,r0
80000baa:	06 18       	sub	r8,r3
80000bac:	80 00       	ld.sh	r0,r0[0x0]
80000bae:	0b b0       	ld.ub	r0,r5[0x3]

80000bb0 <remove>:

uint16_t remove(tcb * removed_task)
{
80000bb0:	eb cd 40 80 	pushm	r7,lr
80000bb4:	1a 97       	mov	r7,sp
80000bb6:	20 2d       	sub	sp,8
80000bb8:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000bbc:	3f f8       	mov	r8,-1
80000bbe:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( removed_task->prevtcb != NULL )
80000bc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bc6:	71 98       	ld.w	r8,r8[0x64]
80000bc8:	58 08       	cp.w	r8,0
80000bca:	c0 80       	breq	80000bda <remove+0x2a>
	{
		(removed_task->prevtcb)->nexttcb = removed_task->nexttcb;
80000bcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bd0:	71 98       	ld.w	r8,r8[0x64]
80000bd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bd6:	72 09       	ld.w	r9,r9[0x0]
80000bd8:	91 09       	st.w	r8[0x0],r9
	}
	
	if( removed_task->nexttcb != NULL )
80000bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bde:	70 08       	ld.w	r8,r8[0x0]
80000be0:	58 08       	cp.w	r8,0
80000be2:	c0 90       	breq	80000bf4 <remove+0x44>
	{
		(removed_task->nexttcb)->prevtcb = removed_task->prevtcb;
80000be4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000be8:	70 08       	ld.w	r8,r8[0x0]
80000bea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bee:	73 99       	ld.w	r9,r9[0x64]
80000bf0:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	// nullify pointers
	removed_task->prevtcb = NULL;
80000bf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bf8:	30 09       	mov	r9,0
80000bfa:	f1 49 00 64 	st.w	r8[100],r9
	removed_task->nexttcb = NULL;
80000bfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c02:	30 09       	mov	r9,0
80000c04:	91 09       	st.w	r8[0x0],r9
		
	result = 1;
80000c06:	30 18       	mov	r8,1
80000c08:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000c0c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000c10:	10 9c       	mov	r12,r8
80000c12:	2f ed       	sub	sp,-8
80000c14:	e3 cd 80 80 	ldm	sp++,r7,pc

80000c18 <idle>:
	return result;
}

#if IDLE_TASK_ENABLED
void idle(void)
{
80000c18:	eb cd 40 80 	pushm	r7,lr
80000c1c:	1a 97       	mov	r7,sp
	while(1);
80000c1e:	c0 08       	rjmp	80000c1e <idle+0x6>

80000c20 <ROSA_start>:
80000c20:	4b 5c       	lddpc	r12,80000cf4 <_yield+0xa>
80000c22:	4b 6b       	lddpc	r11,80000cf8 <_yield+0xe>
80000c24:	78 0c       	ld.w	r12,r12[0x0]
80000c26:	97 0c       	st.w	r11[0x0],r12
80000c28:	78 50       	ld.w	r0,r12[0x14]
80000c2a:	1a d0       	st.w	--sp,r0
80000c2c:	e5 cd 20 00 	ldmts	sp,sp
80000c30:	1b 00       	ld.w	r0,sp++
80000c32:	78 2e       	ld.w	lr,r12[0x8]
80000c34:	78 80       	ld.w	r0,r12[0x20]
80000c36:	e3 b0 00 00 	mtsr	0x0,r0
80000c3a:	79 80       	ld.w	r0,r12[0x60]
80000c3c:	79 71       	ld.w	r1,r12[0x5c]
80000c3e:	79 62       	ld.w	r2,r12[0x58]
80000c40:	79 53       	ld.w	r3,r12[0x54]
80000c42:	79 44       	ld.w	r4,r12[0x50]
80000c44:	79 35       	ld.w	r5,r12[0x4c]
80000c46:	79 26       	ld.w	r6,r12[0x48]
80000c48:	79 17       	ld.w	r7,r12[0x44]
80000c4a:	79 08       	ld.w	r8,r12[0x40]
80000c4c:	78 f9       	ld.w	r9,r12[0x3c]
80000c4e:	78 ea       	ld.w	r10,r12[0x38]
80000c50:	78 db       	ld.w	r11,r12[0x34]
80000c52:	78 cc       	ld.w	r12,r12[0x30]
80000c54:	1c 9f       	mov	pc,lr

80000c56 <contextInit>:
80000c56:	78 20       	ld.w	r0,r12[0x8]
80000c58:	99 a0       	st.w	r12[0x28],r0
80000c5a:	30 00       	mov	r0,0
80000c5c:	f9 40 00 60 	st.w	r12[96],r0
80000c60:	f9 40 00 5c 	st.w	r12[92],r0
80000c64:	f9 40 00 58 	st.w	r12[88],r0
80000c68:	f9 40 00 54 	st.w	r12[84],r0
80000c6c:	f9 40 00 50 	st.w	r12[80],r0
80000c70:	f9 40 00 4c 	st.w	r12[76],r0
80000c74:	f9 40 00 48 	st.w	r12[72],r0
80000c78:	f9 40 00 44 	st.w	r12[68],r0
80000c7c:	f9 40 00 40 	st.w	r12[64],r0
80000c80:	99 f0       	st.w	r12[0x3c],r0
80000c82:	99 e0       	st.w	r12[0x38],r0
80000c84:	99 d0       	st.w	r12[0x34],r0
80000c86:	99 c0       	st.w	r12[0x30],r0
80000c88:	1c 9f       	mov	pc,lr

80000c8a <contextSave>:
80000c8a:	d2 01       	pushm	r12
80000c8c:	49 bc       	lddpc	r12,80000cf8 <_yield+0xe>
80000c8e:	78 0c       	ld.w	r12,r12[0x0]
80000c90:	99 60       	st.w	r12[0x18],r0
80000c92:	99 71       	st.w	r12[0x1c],r1
80000c94:	1b 00       	ld.w	r0,sp++
80000c96:	99 c0       	st.w	r12[0x30],r0
80000c98:	7a 00       	ld.w	r0,sp[0x0]
80000c9a:	99 80       	st.w	r12[0x20],r0
80000c9c:	33 40       	mov	r0,52
80000c9e:	18 00       	add	r0,r12
80000ca0:	ed c0 0f ff 	stmts	r0,r0-r11
80000ca4:	1a 90       	mov	r0,sp
80000ca6:	1a d0       	st.w	--sp,r0
80000ca8:	ed cd 20 00 	stmts	sp,sp
80000cac:	1b 01       	ld.w	r1,sp++
80000cae:	62 00       	ld.w	r0,r1[0x0]
80000cb0:	99 90       	st.w	r12[0x24],r0
80000cb2:	99 a0       	st.w	r12[0x28],r0
80000cb4:	2f c1       	sub	r1,-4
80000cb6:	99 51       	st.w	r12[0x14],r1
80000cb8:	1c 9f       	mov	pc,lr

80000cba <contextRestore>:
80000cba:	49 0c       	lddpc	r12,80000cf8 <_yield+0xe>
80000cbc:	78 0c       	ld.w	r12,r12[0x0]
80000cbe:	78 51       	ld.w	r1,r12[0x14]
80000cc0:	1a d1       	st.w	--sp,r1
80000cc2:	e5 cd 20 00 	ldmts	sp,sp
80000cc6:	1b 01       	ld.w	r1,sp++
80000cc8:	78 ae       	ld.w	lr,r12[0x28]
80000cca:	78 90       	ld.w	r0,r12[0x24]
80000ccc:	9b 10       	st.w	sp[0x4],r0
80000cce:	33 40       	mov	r0,52
80000cd0:	18 00       	add	r0,r12
80000cd2:	e5 c0 0f ff 	ldmts	r0,r0-r11
80000cd6:	78 80       	ld.w	r0,r12[0x20]
80000cd8:	9b 00       	st.w	sp[0x0],r0
80000cda:	78 60       	ld.w	r0,r12[0x18]
80000cdc:	78 71       	ld.w	r1,r12[0x1c]
80000cde:	78 cc       	ld.w	r12,r12[0x30]
80000ce0:	d6 13       	rets

80000ce2 <ROSA_yield>:
80000ce2:	d4 01       	pushm	lr
80000ce4:	fe ce ff fa 	sub	lr,pc,-6
80000ce8:	d7 33       	scall

80000cea <_yield>:
80000cea:	cd 0f       	rcall	80000c8a <contextSave>
80000cec:	f0 1f 00 04 	mcall	80000cfc <_yield+0x12>
80000cf0:	ce 5f       	rcall	80000cba <contextRestore>
80000cf2:	00 00       	add	r0,r0
80000cf4:	00 00       	add	r0,r0
80000cf6:	06 14       	sub	r4,r3
80000cf8:	00 00       	add	r0,r0
80000cfa:	06 20       	rsub	r0,r3
80000cfc:	80 00       	ld.sh	r0,r0[0x0]
80000cfe:	0d 00       	ld.w	r0,r6++

80000d00 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000d00:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80000d04:	1a 97       	mov	r7,sp
// for handling possible round robin configuration
/*******************************************************************/
#if ROUND_ROBIN_MODE_ENABLED
	//if( ROUNDROBIN_end )
	//{
		round_robin_ticks ++;
80000d06:	4b b8       	lddpc	r8,80000df0 <scheduler+0xf0>
80000d08:	f0 ea 00 00 	ld.d	r10,r8[0]
80000d0c:	30 18       	mov	r8,1
80000d0e:	30 09       	mov	r9,0
80000d10:	f4 08 00 08 	add	r8,r10,r8
80000d14:	f6 09 00 49 	adc	r9,r11,r9
80000d18:	4b 6a       	lddpc	r10,80000df0 <scheduler+0xf0>
80000d1a:	f4 e9 00 00 	st.d	r10[0],r8
		
		if( round_robin_ticks >= MAX_ROUND_ROBIN_TICKS )
80000d1e:	4b 58       	lddpc	r8,80000df0 <scheduler+0xf0>
80000d20:	f0 e8 00 00 	ld.d	r8,r8[0]
80000d24:	58 98       	cp.w	r8,9
80000d26:	5c 29       	cpc	r9
80000d28:	e0 88 00 21 	brls	80000d6a <scheduler+0x6a>
		{
			// this really should be possible to optimize
			taskUninstall(EXECTASK);
80000d2c:	4b 28       	lddpc	r8,80000df4 <scheduler+0xf4>
80000d2e:	70 08       	ld.w	r8,r8[0x0]
80000d30:	10 9c       	mov	r12,r8
80000d32:	f0 1f 00 32 	mcall	80000df8 <scheduler+0xf8>
			taskInstall(EXECTASK);
80000d36:	4b 08       	lddpc	r8,80000df4 <scheduler+0xf4>
80000d38:	70 08       	ld.w	r8,r8[0x0]
80000d3a:	10 9c       	mov	r12,r8
80000d3c:	f0 1f 00 30 	mcall	80000dfc <scheduler+0xfc>
			//TCBLIST = TCBLIST->nexttcb;
			//remove(EXECTASK);
			//insert_after(ROUNDROBIN_end, EXECTASK);
			//ROUNDROBIN_end = EXECTASK;
			
			round_robin_ticks = 0;
80000d40:	4a ca       	lddpc	r10,80000df0 <scheduler+0xf0>
80000d42:	30 08       	mov	r8,0
80000d44:	30 09       	mov	r9,0
80000d46:	f4 e9 00 00 	st.d	r10[0],r8
		}
	//}
#endif
/*******************************************************************/
	
	while( SUSPENDEDLIST && SUSPENDEDLIST->back_online_time <= system_ticks )
80000d4a:	c1 18       	rjmp	80000d6c <scheduler+0x6c>
	{
		iterator = SUSPENDEDLIST;
80000d4c:	4a d8       	lddpc	r8,80000e00 <scheduler+0x100>
80000d4e:	70 09       	ld.w	r9,r8[0x0]
80000d50:	4a d8       	lddpc	r8,80000e04 <scheduler+0x104>
80000d52:	91 09       	st.w	r8[0x0],r9
		taskUnsuspend(iterator);
80000d54:	4a c8       	lddpc	r8,80000e04 <scheduler+0x104>
80000d56:	70 08       	ld.w	r8,r8[0x0]
80000d58:	10 9c       	mov	r12,r8
80000d5a:	f0 1f 00 2c 	mcall	80000e08 <scheduler+0x108>
		taskInstall(iterator);
80000d5e:	4a a8       	lddpc	r8,80000e04 <scheduler+0x104>
80000d60:	70 08       	ld.w	r8,r8[0x0]
80000d62:	10 9c       	mov	r12,r8
80000d64:	f0 1f 00 26 	mcall	80000dfc <scheduler+0xfc>
80000d68:	c0 28       	rjmp	80000d6c <scheduler+0x6c>
		}
	//}
#endif
/*******************************************************************/
	
	while( SUSPENDEDLIST && SUSPENDEDLIST->back_online_time <= system_ticks )
80000d6a:	d7 03       	nop
80000d6c:	4a 58       	lddpc	r8,80000e00 <scheduler+0x100>
80000d6e:	70 08       	ld.w	r8,r8[0x0]
80000d70:	58 08       	cp.w	r8,0
80000d72:	c0 d0       	breq	80000d8c <scheduler+0x8c>
80000d74:	4a 38       	lddpc	r8,80000e00 <scheduler+0x100>
80000d76:	70 08       	ld.w	r8,r8[0x0]
80000d78:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000d7c:	4a 48       	lddpc	r8,80000e0c <scheduler+0x10c>
80000d7e:	f0 e8 00 00 	ld.d	r8,r8[0]
80000d82:	10 3a       	cp.w	r10,r8
80000d84:	f2 0b 13 00 	cpc	r11,r9
80000d88:	fe 98 ff e2 	brls	80000d4c <scheduler+0x4c>
		iterator = SUSPENDEDLIST;
		taskUnsuspend(iterator);
		taskInstall(iterator);
	}
	
	context_switch_time = *(uint32_t*)(0xFFFF3850);
80000d8c:	fe 78 38 50 	mov	r8,-51120
80000d90:	70 08       	ld.w	r8,r8[0x0]
80000d92:	10 90       	mov	r0,r8
80000d94:	30 01       	mov	r1,0
80000d96:	49 f8       	lddpc	r8,80000e10 <scheduler+0x110>
80000d98:	f0 e1 00 00 	st.d	r8[0],r0
	
	EXECTASK = TCBLIST;
80000d9c:	49 e8       	lddpc	r8,80000e14 <scheduler+0x114>
80000d9e:	70 09       	ld.w	r9,r8[0x0]
80000da0:	49 58       	lddpc	r8,80000df4 <scheduler+0xf4>
80000da2:	91 09       	st.w	r8[0x0],r9

	context_switch_time = *(uint32_t*)(0xFFFF3850) - context_switch_time;
80000da4:	fe 78 38 50 	mov	r8,-51120
80000da8:	70 08       	ld.w	r8,r8[0x0]
80000daa:	10 92       	mov	r2,r8
80000dac:	30 03       	mov	r3,0
80000dae:	49 98       	lddpc	r8,80000e10 <scheduler+0x110>
80000db0:	f0 e8 00 00 	ld.d	r8,r8[0]
80000db4:	e4 08 01 08 	sub	r8,r2,r8
80000db8:	e6 09 01 49 	sbc	r9,r3,r9
80000dbc:	49 5a       	lddpc	r10,80000e10 <scheduler+0x110>
80000dbe:	f4 e9 00 00 	st.d	r10[0],r8
	if(context_switch_time < 10000)
80000dc2:	49 48       	lddpc	r8,80000e10 <scheduler+0x110>
80000dc4:	f0 e8 00 00 	ld.d	r8,r8[0]
80000dc8:	e0 48 27 0f 	cp.w	r8,9999
80000dcc:	5c 29       	cpc	r9
80000dce:	e0 8b 00 0f 	brhi	80000dec <scheduler+0xec>
	{
		total_context_switch_time += context_switch_time;
80000dd2:	49 28       	lddpc	r8,80000e18 <scheduler+0x118>
80000dd4:	f0 ea 00 00 	ld.d	r10,r8[0]
80000dd8:	48 e8       	lddpc	r8,80000e10 <scheduler+0x110>
80000dda:	f0 e8 00 00 	ld.d	r8,r8[0]
80000dde:	f4 08 00 08 	add	r8,r10,r8
80000de2:	f6 09 00 49 	adc	r9,r11,r9
80000de6:	48 da       	lddpc	r10,80000e18 <scheduler+0x118>
80000de8:	f4 e9 00 00 	st.d	r10[0],r8
	}

}
80000dec:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80000df0:	00 00       	add	r0,r0
80000df2:	06 24       	rsub	r4,r3
80000df4:	00 00       	add	r0,r0
80000df6:	06 20       	rsub	r0,r3
80000df8:	80 00       	ld.sh	r0,r0[0x0]
80000dfa:	0a ac       	st.w	r5++,r12
80000dfc:	80 00       	ld.sh	r0,r0[0x0]
80000dfe:	08 9c       	mov	r12,r4
80000e00:	00 00       	add	r0,r0
80000e02:	06 18       	sub	r8,r3
80000e04:	00 00       	add	r0,r0
80000e06:	06 34       	cp.w	r4,r3
80000e08:	80 00       	ld.sh	r0,r0[0x0]
80000e0a:	0b 20       	ld.uh	r0,r5++
80000e0c:	00 00       	add	r0,r0
80000e0e:	06 2c       	rsub	r12,r3
80000e10:	00 00       	add	r0,r0
80000e12:	05 70       	ld.ub	r0,--r2
80000e14:	00 00       	add	r0,r0
80000e16:	06 14       	sub	r4,r3
80000e18:	00 00       	add	r0,r0
80000e1a:	05 68       	ld.uh	r8,--r2

80000e1c <C.0.9446>:
80000e1c:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000e2c <timerISR>:
80000e2c:	eb cd 40 80 	pushm	r7,lr
80000e30:	1a 97       	mov	r7,sp
80000e32:	20 2d       	sub	sp,8
80000e34:	fe 78 38 00 	mov	r8,-51200
80000e38:	ef 48 ff fc 	st.w	r7[-4],r8
80000e3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e40:	70 88       	ld.w	r8,r8[0x20]
80000e42:	ef 48 ff f8 	st.w	r7[-8],r8
80000e46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e4a:	e2 18 00 10 	andl	r8,0x10,COH
80000e4e:	c0 30       	breq	80000e54 <timerISR+0x28>
80000e50:	f0 1f 00 03 	mcall	80000e5c <timerISR+0x30>
80000e54:	2f ed       	sub	sp,-8
80000e56:	e3 cd 40 80 	ldm	sp++,r7,lr
80000e5a:	d6 03       	rete
80000e5c:	80 00       	ld.sh	r0,r0[0x0]
80000e5e:	07 14       	ld.sh	r4,r3++

80000e60 <timerPeriodSet>:
80000e60:	eb cd 40 80 	pushm	r7,lr
80000e64:	1a 97       	mov	r7,sp
80000e66:	20 7d       	sub	sp,28
80000e68:	ef 4c ff e4 	st.w	r7[-28],r12
80000e6c:	4a 48       	lddpc	r8,80000efc <timerPeriodSet+0x9c>
80000e6e:	ee ca 00 18 	sub	r10,r7,24
80000e72:	10 9b       	mov	r11,r8
80000e74:	f6 e8 00 00 	ld.d	r8,r11[0]
80000e78:	f4 e9 00 00 	st.d	r10[0],r8
80000e7c:	f6 e8 00 08 	ld.d	r8,r11[8]
80000e80:	f4 e9 00 08 	st.d	r10[8],r8
80000e84:	30 48       	mov	r8,4
80000e86:	ef 48 ff fc 	st.w	r7[-4],r8
80000e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e8e:	20 18       	sub	r8,1
80000e90:	a3 68       	lsl	r8,0x2
80000e92:	ee 08 00 08 	add	r8,r7,r8
80000e96:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000e9a:	e0 68 1b 00 	mov	r8,6912
80000e9e:	ea 18 00 b7 	orh	r8,0xb7
80000ea2:	f0 09 0c 08 	divs	r8,r8,r9
80000ea6:	10 99       	mov	r9,r8
80000ea8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000eac:	b1 39       	mul	r9,r8
80000eae:	e0 68 4d d3 	mov	r8,19923
80000eb2:	ea 18 10 62 	orh	r8,0x1062
80000eb6:	f2 08 06 48 	mulu.d	r8,r9,r8
80000eba:	f2 08 16 06 	lsr	r8,r9,0x6
80000ebe:	ef 48 ff f8 	st.w	r7[-8],r8
80000ec2:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ec6:	f0 1f 00 0f 	mcall	80000f00 <timerPeriodSet+0xa0>
80000eca:	ee fc ff f8 	ld.w	r12,r7[-8]
80000ece:	f0 1f 00 0e 	mcall	80000f04 <timerPeriodSet+0xa4>
80000ed2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ed6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000eda:	f2 08 02 4a 	mul	r10,r9,r8
80000ede:	e0 68 9f 81 	mov	r8,40833
80000ee2:	ea 18 16 5e 	orh	r8,0x165e
80000ee6:	f4 08 04 48 	muls.d	r8,r10,r8
80000eea:	b5 49       	asr	r9,0x14
80000eec:	f4 08 14 1f 	asr	r8,r10,0x1f
80000ef0:	f2 08 01 08 	sub	r8,r9,r8
80000ef4:	10 9c       	mov	r12,r8
80000ef6:	2f 9d       	sub	sp,-28
80000ef8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000efc:	80 00       	ld.sh	r0,r0[0x0]
80000efe:	0e 1c       	sub	r12,r7
80000f00:	80 00       	ld.sh	r0,r0[0x0]
80000f02:	14 c8       	st.b	r10++,r8
80000f04:	80 00       	ld.sh	r0,r0[0x0]
80000f06:	14 b2       	st.h	r10++,r2

80000f08 <buttonInit>:
80000f08:	eb cd 40 80 	pushm	r7,lr
80000f0c:	1a 97       	mov	r7,sp
80000f0e:	30 1b       	mov	r11,1
80000f10:	35 8c       	mov	r12,88
80000f12:	f0 1f 00 07 	mcall	80000f2c <buttonInit+0x24>
80000f16:	30 1b       	mov	r11,1
80000f18:	35 5c       	mov	r12,85
80000f1a:	f0 1f 00 05 	mcall	80000f2c <buttonInit+0x24>
80000f1e:	30 1b       	mov	r11,1
80000f20:	35 2c       	mov	r12,82
80000f22:	f0 1f 00 03 	mcall	80000f2c <buttonInit+0x24>
80000f26:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f2a:	00 00       	add	r0,r0
80000f2c:	80 00       	ld.sh	r0,r0[0x0]
80000f2e:	0f 68       	ld.uh	r8,--r7

80000f30 <joystickInit>:
80000f30:	eb cd 40 80 	pushm	r7,lr
80000f34:	1a 97       	mov	r7,sp
80000f36:	30 1b       	mov	r11,1
80000f38:	31 bc       	mov	r12,27
80000f3a:	f0 1f 00 0b 	mcall	80000f64 <joystickInit+0x34>
80000f3e:	30 1b       	mov	r11,1
80000f40:	31 9c       	mov	r12,25
80000f42:	f0 1f 00 09 	mcall	80000f64 <joystickInit+0x34>
80000f46:	30 1b       	mov	r11,1
80000f48:	31 cc       	mov	r12,28
80000f4a:	f0 1f 00 07 	mcall	80000f64 <joystickInit+0x34>
80000f4e:	30 1b       	mov	r11,1
80000f50:	31 4c       	mov	r12,20
80000f52:	f0 1f 00 05 	mcall	80000f64 <joystickInit+0x34>
80000f56:	30 1b       	mov	r11,1
80000f58:	31 ac       	mov	r12,26
80000f5a:	f0 1f 00 03 	mcall	80000f64 <joystickInit+0x34>
80000f5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f62:	00 00       	add	r0,r0
80000f64:	80 00       	ld.sh	r0,r0[0x0]
80000f66:	0f 68       	ld.uh	r8,--r7

80000f68 <gpioInit>:
80000f68:	eb cd 40 80 	pushm	r7,lr
80000f6c:	1a 97       	mov	r7,sp
80000f6e:	20 7d       	sub	sp,28
80000f70:	ef 4c ff ec 	st.w	r7[-20],r12
80000f74:	ef 4b ff e8 	st.w	r7[-24],r11
80000f78:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f7c:	a5 58       	asr	r8,0x5
80000f7e:	ef 48 ff f4 	st.w	r7[-12],r8
80000f82:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000f8a:	ef 48 ff fc 	st.w	r7[-4],r8
80000f8e:	30 19       	mov	r9,1
80000f90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f94:	f2 08 09 48 	lsl	r8,r9,r8
80000f98:	ef 48 ff f8 	st.w	r7[-8],r8
80000f9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fa0:	a9 68       	lsl	r8,0x8
80000fa2:	e0 28 f0 00 	sub	r8,61440
80000fa6:	ef 48 ff f0 	st.w	r7[-16],r8
80000faa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fae:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fb2:	91 19       	st.w	r8[0x4],r9
80000fb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fbc:	91 69       	st.w	r8[0x18],r9
80000fbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fc2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fc6:	91 a9       	st.w	r8[0x28],r9
80000fc8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000fcc:	ef 48 ff e4 	st.w	r7[-28],r8
80000fd0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000fd4:	58 08       	cp.w	r8,0
80000fd6:	c0 60       	breq	80000fe2 <gpioInit+0x7a>
80000fd8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000fdc:	58 18       	cp.w	r8,1
80000fde:	c0 90       	breq	80000ff0 <gpioInit+0x88>
80000fe0:	c0 f8       	rjmp	80000ffe <gpioInit+0x96>
80000fe2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fe6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fea:	f1 49 00 44 	st.w	r8[68],r9
80000fee:	c0 e8       	rjmp	8000100a <gpioInit+0xa2>
80000ff0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ff4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ff8:	f1 49 00 48 	st.w	r8[72],r9
80000ffc:	c0 78       	rjmp	8000100a <gpioInit+0xa2>
80000ffe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001002:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001006:	f1 49 00 48 	st.w	r8[72],r9
8000100a:	2f 9d       	sub	sp,-28
8000100c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001010 <gpioSet>:
80001010:	eb cd 40 80 	pushm	r7,lr
80001014:	1a 97       	mov	r7,sp
80001016:	20 5d       	sub	sp,20
80001018:	ef 4c ff ec 	st.w	r7[-20],r12
8000101c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001020:	a5 58       	asr	r8,0x5
80001022:	ef 48 ff f4 	st.w	r7[-12],r8
80001026:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000102a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000102e:	ef 48 ff fc 	st.w	r7[-4],r8
80001032:	30 19       	mov	r9,1
80001034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001038:	f2 08 09 48 	lsl	r8,r9,r8
8000103c:	ef 48 ff f8 	st.w	r7[-8],r8
80001040:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001044:	a9 68       	lsl	r8,0x8
80001046:	e0 28 f0 00 	sub	r8,61440
8000104a:	ef 48 ff f0 	st.w	r7[-16],r8
8000104e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001052:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001056:	f1 49 00 54 	st.w	r8[84],r9
8000105a:	2f bd       	sub	sp,-20
8000105c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001060 <gpioToggle>:
80001060:	eb cd 40 80 	pushm	r7,lr
80001064:	1a 97       	mov	r7,sp
80001066:	20 5d       	sub	sp,20
80001068:	ef 4c ff ec 	st.w	r7[-20],r12
8000106c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001070:	a5 58       	asr	r8,0x5
80001072:	ef 48 ff f4 	st.w	r7[-12],r8
80001076:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000107a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000107e:	ef 48 ff fc 	st.w	r7[-4],r8
80001082:	30 19       	mov	r9,1
80001084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001088:	f2 08 09 48 	lsl	r8,r9,r8
8000108c:	ef 48 ff f8 	st.w	r7[-8],r8
80001090:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001094:	a9 68       	lsl	r8,0x8
80001096:	e0 28 f0 00 	sub	r8,61440
8000109a:	ef 48 ff f0 	st.w	r7[-16],r8
8000109e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800010a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800010a6:	f1 49 00 5c 	st.w	r8[92],r9
800010aa:	2f bd       	sub	sp,-20
800010ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800010b0 <ledInit>:
800010b0:	eb cd 40 80 	pushm	r7,lr
800010b4:	1a 97       	mov	r7,sp
800010b6:	20 9d       	sub	sp,36
800010b8:	49 e8       	lddpc	r8,80001130 <ledInit+0x80>
800010ba:	ee cb 00 24 	sub	r11,r7,36
800010be:	10 9a       	mov	r10,r8
800010c0:	f4 e8 00 00 	ld.d	r8,r10[0]
800010c4:	f6 e9 00 00 	st.d	r11[0],r8
800010c8:	f4 e8 00 08 	ld.d	r8,r10[8]
800010cc:	f6 e9 00 08 	st.d	r11[8],r8
800010d0:	f4 e8 00 10 	ld.d	r8,r10[16]
800010d4:	f6 e9 00 10 	st.d	r11[16],r8
800010d8:	f4 e8 00 18 	ld.d	r8,r10[24]
800010dc:	f6 e9 00 18 	st.d	r11[24],r8
800010e0:	30 08       	mov	r8,0
800010e2:	ef 48 ff fc 	st.w	r7[-4],r8
800010e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010ea:	a3 68       	lsl	r8,0x2
800010ec:	ee 08 00 08 	add	r8,r7,r8
800010f0:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800010f4:	10 9c       	mov	r12,r8
800010f6:	f0 1f 00 10 	mcall	80001134 <ledInit+0x84>
800010fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010fe:	a3 68       	lsl	r8,0x2
80001100:	ee 08 00 08 	add	r8,r7,r8
80001104:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001108:	30 0b       	mov	r11,0
8000110a:	10 9c       	mov	r12,r8
8000110c:	f0 1f 00 0b 	mcall	80001138 <ledInit+0x88>
80001110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001114:	58 78       	cp.w	r8,7
80001116:	5f 18       	srne	r8
80001118:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000111c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001120:	2f f8       	sub	r8,-1
80001122:	ef 48 ff fc 	st.w	r7[-4],r8
80001126:	58 09       	cp.w	r9,0
80001128:	cd f1       	brne	800010e6 <ledInit+0x36>
8000112a:	2f 7d       	sub	sp,-36
8000112c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001130:	80 00       	ld.sh	r0,r0[0x0]
80001132:	22 00       	sub	r0,32
80001134:	80 00       	ld.sh	r0,r0[0x0]
80001136:	11 3c       	ld.ub	r12,r8++
80001138:	80 00       	ld.sh	r0,r0[0x0]
8000113a:	0f 68       	ld.uh	r8,--r7

8000113c <ledOff>:
8000113c:	eb cd 40 80 	pushm	r7,lr
80001140:	1a 97       	mov	r7,sp
80001142:	20 1d       	sub	sp,4
80001144:	ef 4c ff fc 	st.w	r7[-4],r12
80001148:	ee fc ff fc 	ld.w	r12,r7[-4]
8000114c:	f0 1f 00 03 	mcall	80001158 <ledOff+0x1c>
80001150:	2f fd       	sub	sp,-4
80001152:	e3 cd 80 80 	ldm	sp++,r7,pc
80001156:	00 00       	add	r0,r0
80001158:	80 00       	ld.sh	r0,r0[0x0]
8000115a:	10 10       	sub	r0,r8

8000115c <ledToggle>:
8000115c:	eb cd 40 80 	pushm	r7,lr
80001160:	1a 97       	mov	r7,sp
80001162:	20 1d       	sub	sp,4
80001164:	ef 4c ff fc 	st.w	r7[-4],r12
80001168:	ee fc ff fc 	ld.w	r12,r7[-4]
8000116c:	f0 1f 00 03 	mcall	80001178 <ledToggle+0x1c>
80001170:	2f fd       	sub	sp,-4
80001172:	e3 cd 80 80 	ldm	sp++,r7,pc
80001176:	00 00       	add	r0,r0
80001178:	80 00       	ld.sh	r0,r0[0x0]
8000117a:	10 60       	and	r0,r8

8000117c <potInit>:
8000117c:	d3 01       	pushm	r11-r12
8000117e:	e0 6c 10 00 	mov	r12,4096
80001182:	ea 1c ff ff 	orh	r12,0xffff
80001186:	31 6b       	mov	r11,22
80001188:	99 2b       	st.w	r12[0x8],r11
8000118a:	99 6b       	st.w	r12[0x18],r11
8000118c:	99 6b       	st.w	r12[0x18],r11
8000118e:	e0 6c 3c 00 	mov	r12,15360
80001192:	ea 1c ff ff 	orh	r12,0xffff
80001196:	30 1b       	mov	r11,1
80001198:	99 0b       	st.w	r12[0x0],r11
8000119a:	e0 6b 0f 1f 	mov	r11,3871
8000119e:	b1 6b       	lsl	r11,0x10
800011a0:	99 1b       	st.w	r12[0x4],r11
800011a2:	30 2b       	mov	r11,2
800011a4:	99 4b       	st.w	r12[0x10],r11
800011a6:	d3 02       	popm	r11-r12
800011a8:	1c 9f       	mov	pc,lr

800011aa <potGetValue>:
800011aa:	d1 81       	pushm	r10-r11
800011ac:	e0 6c 3c 00 	mov	r12,15360
800011b0:	ea 1c ff ff 	orh	r12,0xffff
800011b4:	30 2b       	mov	r11,2
800011b6:	99 0b       	st.w	r12[0x0],r11

800011b8 <a1>:
800011b8:	78 7a       	ld.w	r10,r12[0x1c]
800011ba:	16 7a       	tst	r10,r11
800011bc:	cf e0       	breq	800011b8 <a1>
800011be:	78 dc       	ld.w	r12,r12[0x34]
800011c0:	d1 82       	popm	r10-r11
800011c2:	1c 9f       	mov	pc,lr

800011c4 <usartReset>:
800011c4:	eb cd 40 80 	pushm	r7,lr
800011c8:	1a 97       	mov	r7,sp
800011ca:	20 3d       	sub	sp,12
800011cc:	ef 4c ff f8 	st.w	r7[-8],r12
800011d0:	f0 1f 00 16 	mcall	80001228 <usartReset+0x64>
800011d4:	18 98       	mov	r8,r12
800011d6:	ef 48 ff fc 	st.w	r7[-4],r8
800011da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800011de:	58 08       	cp.w	r8,0
800011e0:	c0 30       	breq	800011e6 <usartReset+0x22>
800011e2:	f0 1f 00 13 	mcall	8000122c <usartReset+0x68>
800011e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800011ea:	3f f8       	mov	r8,-1
800011ec:	93 38       	st.w	r9[0xc],r8
800011ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011f2:	70 58       	ld.w	r8,r8[0x14]
800011f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800011f8:	58 08       	cp.w	r8,0
800011fa:	c0 30       	breq	80001200 <usartReset+0x3c>
800011fc:	f0 1f 00 0d 	mcall	80001230 <usartReset+0x6c>
80001200:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001204:	30 08       	mov	r8,0
80001206:	93 18       	st.w	r9[0x4],r8
80001208:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000120c:	30 08       	mov	r8,0
8000120e:	93 98       	st.w	r9[0x24],r8
80001210:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001214:	30 08       	mov	r8,0
80001216:	93 a8       	st.w	r9[0x28],r8
80001218:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000121c:	ea 68 61 0c 	mov	r8,680204
80001220:	93 08       	st.w	r9[0x0],r8
80001222:	2f dd       	sub	sp,-12
80001224:	e3 cd 80 80 	ldm	sp++,r7,pc
80001228:	80 00       	ld.sh	r0,r0[0x0]
8000122a:	1f 6e       	ld.uh	lr,--pc
8000122c:	80 00       	ld.sh	r0,r0[0x0]
8000122e:	1f 66       	ld.uh	r6,--pc
80001230:	80 00       	ld.sh	r0,r0[0x0]
80001232:	1f 6a       	ld.uh	r10,--pc

80001234 <usartSetBaudrate>:
80001234:	eb cd 40 80 	pushm	r7,lr
80001238:	1a 97       	mov	r7,sp
8000123a:	20 bd       	sub	sp,44
8000123c:	ef 4c ff ec 	st.w	r7[-20],r12
80001240:	ef 4b ff e8 	st.w	r7[-24],r11
80001244:	ef 4a ff e4 	st.w	r7[-28],r10
80001248:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000124c:	f0 09 15 04 	lsl	r9,r8,0x4
80001250:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001254:	10 39       	cp.w	r9,r8
80001256:	e0 8b 00 06 	brhi	80001262 <usartSetBaudrate+0x2e>
8000125a:	31 09       	mov	r9,16
8000125c:	ef 49 ff d4 	st.w	r7[-44],r9
80001260:	c0 48       	rjmp	80001268 <usartSetBaudrate+0x34>
80001262:	30 88       	mov	r8,8
80001264:	ef 48 ff d4 	st.w	r7[-44],r8
80001268:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000126c:	ef 49 ff f0 	st.w	r7[-16],r9
80001270:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001274:	f0 0a 15 03 	lsl	r10,r8,0x3
80001278:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000127c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001280:	f2 08 02 48 	mul	r8,r9,r8
80001284:	a1 98       	lsr	r8,0x1
80001286:	10 0a       	add	r10,r8
80001288:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000128c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001290:	f2 08 02 48 	mul	r8,r9,r8
80001294:	f4 08 0d 08 	divu	r8,r10,r8
80001298:	ef 48 ff f4 	st.w	r7[-12],r8
8000129c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012a0:	a3 98       	lsr	r8,0x3
800012a2:	ef 48 ff f8 	st.w	r7[-8],r8
800012a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012aa:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800012ae:	ef 48 ff fc 	st.w	r7[-4],r8
800012b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012b6:	58 08       	cp.w	r8,0
800012b8:	c0 70       	breq	800012c6 <usartSetBaudrate+0x92>
800012ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012be:	e0 48 ff ff 	cp.w	r8,65535
800012c2:	e0 88 00 06 	brls	800012ce <usartSetBaudrate+0x9a>
800012c6:	30 18       	mov	r8,1
800012c8:	ef 48 ff d8 	st.w	r7[-40],r8
800012cc:	c2 c8       	rjmp	80001324 <usartSetBaudrate+0xf0>
800012ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800012d2:	70 18       	ld.w	r8,r8[0x4]
800012d4:	10 99       	mov	r9,r8
800012d6:	e4 19 ff f7 	andh	r9,0xfff7
800012da:	e0 19 fe cf 	andl	r9,0xfecf
800012de:	ef 49 ff dc 	st.w	r7[-36],r9
800012e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012e6:	59 08       	cp.w	r8,16
800012e8:	c0 60       	breq	800012f4 <usartSetBaudrate+0xc0>
800012ea:	e8 68 00 00 	mov	r8,524288
800012ee:	ef 48 ff e0 	st.w	r7[-32],r8
800012f2:	c0 48       	rjmp	800012fa <usartSetBaudrate+0xc6>
800012f4:	30 09       	mov	r9,0
800012f6:	ef 49 ff e0 	st.w	r7[-32],r9
800012fa:	ee f9 ff dc 	ld.w	r9,r7[-36]
800012fe:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001302:	10 49       	or	r9,r8
80001304:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001308:	91 19       	st.w	r8[0x4],r9
8000130a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000130e:	f0 09 15 10 	lsl	r9,r8,0x10
80001312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001316:	10 49       	or	r9,r8
80001318:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000131c:	91 89       	st.w	r8[0x20],r9
8000131e:	30 09       	mov	r9,0
80001320:	ef 49 ff d8 	st.w	r7[-40],r9
80001324:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001328:	10 9c       	mov	r12,r8
8000132a:	2f 5d       	sub	sp,-44
8000132c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001330 <usartInit>:
80001330:	eb cd 40 80 	pushm	r7,lr
80001334:	1a 97       	mov	r7,sp
80001336:	20 4d       	sub	sp,16
80001338:	ef 4c ff f8 	st.w	r7[-8],r12
8000133c:	ef 4b ff f4 	st.w	r7[-12],r11
80001340:	ef 4a ff f0 	st.w	r7[-16],r10
80001344:	fe 78 10 00 	mov	r8,-61440
80001348:	ef 48 ff fc 	st.w	r7[-4],r8
8000134c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001350:	30 18       	mov	r8,1
80001352:	93 28       	st.w	r9[0x8],r8
80001354:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001358:	30 28       	mov	r8,2
8000135a:	93 28       	st.w	r9[0x8],r8
8000135c:	ee fc ff f8 	ld.w	r12,r7[-8]
80001360:	f0 1f 00 3b 	mcall	8000144c <usartInit+0x11c>
80001364:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001368:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000136c:	70 08       	ld.w	r8,r8[0x0]
8000136e:	12 9a       	mov	r10,r9
80001370:	10 9b       	mov	r11,r8
80001372:	ee fc ff f8 	ld.w	r12,r7[-8]
80001376:	f0 1f 00 37 	mcall	80001450 <usartInit+0x120>
8000137a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000137e:	11 c9       	ld.ub	r9,r8[0x4]
80001380:	30 98       	mov	r8,9
80001382:	f0 09 18 00 	cp.b	r9,r8
80001386:	c0 a1       	brne	8000139a <usartInit+0x6a>
80001388:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000138c:	70 18       	ld.w	r8,r8[0x4]
8000138e:	10 99       	mov	r9,r8
80001390:	b1 b9       	sbr	r9,0x11
80001392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001396:	91 19       	st.w	r8[0x4],r9
80001398:	c0 d8       	rjmp	800013b2 <usartInit+0x82>
8000139a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000139e:	70 19       	ld.w	r9,r8[0x4]
800013a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013a4:	11 c8       	ld.ub	r8,r8[0x4]
800013a6:	20 58       	sub	r8,5
800013a8:	a7 68       	lsl	r8,0x6
800013aa:	10 49       	or	r9,r8
800013ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013b0:	91 19       	st.w	r8[0x4],r9
800013b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013b6:	70 1a       	ld.w	r10,r8[0x4]
800013b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013bc:	11 d8       	ld.ub	r8,r8[0x5]
800013be:	f0 09 15 09 	lsl	r9,r8,0x9
800013c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013c6:	f1 38 00 08 	ld.ub	r8,r8[8]
800013ca:	af 68       	lsl	r8,0xe
800013cc:	f3 e8 10 08 	or	r8,r9,r8
800013d0:	f5 e8 10 09 	or	r9,r10,r8
800013d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013d8:	91 19       	st.w	r8[0x4],r9
800013da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013de:	90 39       	ld.sh	r9,r8[0x6]
800013e0:	30 28       	mov	r8,2
800013e2:	f0 09 19 00 	cp.h	r9,r8
800013e6:	e0 88 00 14 	brls	8000140e <usartInit+0xde>
800013ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013ee:	70 18       	ld.w	r8,r8[0x4]
800013f0:	10 99       	mov	r9,r8
800013f2:	ad b9       	sbr	r9,0xd
800013f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013f8:	91 19       	st.w	r8[0x4],r9
800013fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013fe:	90 38       	ld.sh	r8,r8[0x6]
80001400:	5c 78       	castu.h	r8
80001402:	20 28       	sub	r8,2
80001404:	10 99       	mov	r9,r8
80001406:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000140a:	91 a9       	st.w	r8[0x28],r9
8000140c:	c0 d8       	rjmp	80001426 <usartInit+0xf6>
8000140e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001412:	70 19       	ld.w	r9,r8[0x4]
80001414:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001418:	90 38       	ld.sh	r8,r8[0x6]
8000141a:	5c 78       	castu.h	r8
8000141c:	ad 68       	lsl	r8,0xc
8000141e:	10 49       	or	r9,r8
80001420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001424:	91 19       	st.w	r8[0x4],r9
80001426:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000142a:	70 18       	ld.w	r8,r8[0x4]
8000142c:	10 99       	mov	r9,r8
8000142e:	e0 19 ff f0 	andl	r9,0xfff0
80001432:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001436:	91 19       	st.w	r8[0x4],r9
80001438:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000143c:	35 08       	mov	r8,80
8000143e:	93 08       	st.w	r9[0x0],r8
80001440:	30 08       	mov	r8,0
80001442:	10 9c       	mov	r12,r8
80001444:	2f cd       	sub	sp,-16
80001446:	e3 cd 80 80 	ldm	sp++,r7,pc
8000144a:	00 00       	add	r0,r0
8000144c:	80 00       	ld.sh	r0,r0[0x0]
8000144e:	11 c4       	ld.ub	r4,r8[0x4]
80001450:	80 00       	ld.sh	r0,r0[0x0]
80001452:	12 34       	cp.w	r4,r9

80001454 <timerInit>:
80001454:	d5 01       	pushm	r11,lr
80001456:	d2 01       	pushm	r12
80001458:	f0 1f 00 28 	mcall	800014f8 <timerClearInterrupt+0x10>
8000145c:	f0 1f 00 28 	mcall	800014fc <timerClearInterrupt+0x14>
80001460:	e0 6c 38 00 	mov	r12,14336
80001464:	ea 1c ff ff 	orh	r12,0xffff
80001468:	e0 6b c0 00 	mov	r11,49152
8000146c:	ea 1b 00 00 	orh	r11,0x0
80001470:	99 1b       	st.w	r12[0x4],r11
80001472:	30 1b       	mov	r11,1
80001474:	a5 6b       	lsl	r11,0x4
80001476:	99 9b       	st.w	r12[0x24],r11
80001478:	d2 02       	popm	r12
8000147a:	f0 1f 00 22 	mcall	80001500 <timerClearInterrupt+0x18>
8000147e:	d5 02       	popm	r11,lr
80001480:	1c 9f       	mov	pc,lr

80001482 <timerReset>:
80001482:	d3 01       	pushm	r11-r12
80001484:	e0 6c 38 00 	mov	r12,14336
80001488:	ea 1c ff ff 	orh	r12,0xffff
8000148c:	30 5b       	mov	r11,5
8000148e:	99 0b       	st.w	r12[0x0],r11
80001490:	e0 6b 00 08 	mov	r11,8
80001494:	ea 1b 00 00 	orh	r11,0x0
80001498:	76 0b       	ld.w	r11,r11[0x0]
8000149a:	99 7b       	st.w	r12[0x1c],r11
8000149c:	d3 02       	popm	r11-r12
8000149e:	1c 9f       	mov	pc,lr

800014a0 <timerStop>:
800014a0:	d3 01       	pushm	r11-r12
800014a2:	e0 6c 38 00 	mov	r12,14336
800014a6:	ea 1c ff ff 	orh	r12,0xffff
800014aa:	30 2b       	mov	r11,2
800014ac:	99 0b       	st.w	r12[0x0],r11
800014ae:	d3 02       	popm	r11-r12
800014b0:	1c 9f       	mov	pc,lr

800014b2 <timerRCSet>:
800014b2:	d3 01       	pushm	r11-r12
800014b4:	49 4b       	lddpc	r11,80001504 <timerClearInterrupt+0x1c>
800014b6:	97 0c       	st.w	r11[0x0],r12
800014b8:	e0 6c 38 00 	mov	r12,14336
800014bc:	ea 1c ff ff 	orh	r12,0xffff
800014c0:	76 0b       	ld.w	r11,r11[0x0]
800014c2:	99 7b       	st.w	r12[0x1c],r11
800014c4:	d3 02       	popm	r11-r12
800014c6:	1c 9f       	mov	pc,lr

800014c8 <timerPrescaleSet>:
800014c8:	d3 81       	pushm	r10-r12
800014ca:	49 0b       	lddpc	r11,80001508 <timerClearInterrupt+0x20>
800014cc:	97 0c       	st.w	r11[0x0],r12
800014ce:	e0 6c 38 00 	mov	r12,14336
800014d2:	ea 1c ff ff 	orh	r12,0xffff
800014d6:	78 1a       	ld.w	r10,r12[0x4]
800014d8:	3f 8b       	mov	r11,-8
800014da:	16 6a       	and	r10,r11
800014dc:	48 bb       	lddpc	r11,80001508 <timerClearInterrupt+0x20>
800014de:	76 0b       	ld.w	r11,r11[0x0]
800014e0:	14 4b       	or	r11,r10
800014e2:	99 1b       	st.w	r12[0x4],r11
800014e4:	d3 82       	popm	r10-r12
800014e6:	1c 9f       	mov	pc,lr

800014e8 <timerClearInterrupt>:
800014e8:	d2 01       	pushm	r12
800014ea:	e0 6c 38 00 	mov	r12,14336
800014ee:	ea 1c ff ff 	orh	r12,0xffff
800014f2:	78 8c       	ld.w	r12,r12[0x20]
800014f4:	d2 02       	popm	r12
800014f6:	1c 9f       	mov	pc,lr
800014f8:	80 00       	ld.sh	r0,r0[0x0]
800014fa:	1f 66       	ld.uh	r6,--pc
800014fc:	80 00       	ld.sh	r0,r0[0x0]
800014fe:	14 e8       	st.h	--r10,r8
80001500:	80 00       	ld.sh	r0,r0[0x0]
80001502:	0e 60       	and	r0,r7
80001504:	00 00       	add	r0,r0
80001506:	00 08       	add	r8,r0
80001508:	00 00       	add	r0,r0
8000150a:	00 0c       	add	r12,r0

8000150c <_stext>:
8000150c:	49 7d       	lddpc	sp,80001568 <udata_end+0x4>
8000150e:	49 80       	lddpc	r0,8000156c <udata_end+0x8>
80001510:	1a d0       	st.w	--sp,r0
80001512:	e5 cd 20 00 	ldmts	sp,sp
80001516:	1b 00       	ld.w	r0,sp++
80001518:	49 60       	lddpc	r0,80001570 <udata_end+0xc>
8000151a:	e3 b0 00 01 	mtsr	0x4,r0
8000151e:	d5 53       	csrf	0x15
80001520:	e0 6c 0c 00 	mov	r12,3072
80001524:	ea 1c ff ff 	orh	r12,0xffff
80001528:	e0 6b 01 07 	mov	r11,263
8000152c:	99 ab       	st.w	r12[0x28],r11
8000152e:	30 4b       	mov	r11,4
80001530:	99 0b       	st.w	r12[0x0],r11
80001532:	e0 6a 00 80 	mov	r10,128

80001536 <xw8>:
80001536:	79 5b       	ld.w	r11,r12[0x54]
80001538:	14 7b       	tst	r11,r10
8000153a:	cf e0       	breq	80001536 <xw8>
8000153c:	30 5b       	mov	r11,5
8000153e:	99 0b       	st.w	r12[0x0],r11

80001540 <idata_>:
80001540:	48 d0       	lddpc	r0,80001574 <udata_end+0x10>
80001542:	48 e1       	lddpc	r1,80001578 <udata_end+0x14>
80001544:	02 30       	cp.w	r0,r1
80001546:	c0 62       	brcc	80001552 <idata_end>
80001548:	48 d2       	lddpc	r2,8000157c <udata_end+0x18>

8000154a <idata_loop>:
8000154a:	05 04       	ld.w	r4,r2++
8000154c:	00 a4       	st.w	r0++,r4
8000154e:	02 30       	cp.w	r0,r1
80001550:	cf d3       	brcs	8000154a <idata_loop>

80001552 <idata_end>:
80001552:	48 c0       	lddpc	r0,80001580 <udata_end+0x1c>
80001554:	48 c1       	lddpc	r1,80001584 <udata_end+0x20>
80001556:	02 30       	cp.w	r0,r1
80001558:	c0 62       	brcc	80001564 <udata_end>
8000155a:	30 02       	mov	r2,0
8000155c:	30 03       	mov	r3,0

8000155e <udata_loop>:
8000155e:	00 a2       	st.w	r0++,r2
80001560:	02 30       	cp.w	r0,r1
80001562:	cf e3       	brcs	8000155e <udata_loop>

80001564 <udata_end>:
80001564:	48 9f       	lddpc	pc,80001588 <udata_end+0x24>
80001566:	00 00       	add	r0,r0
80001568:	00 01       	add	r1,r0
8000156a:	00 00       	add	r0,r0
8000156c:	00 00       	add	r0,r0
8000156e:	f0 00       	*unknown*
80001570:	80 00       	ld.sh	r0,r0[0x0]
80001572:	1e 00       	add	r0,pc
80001574:	00 00       	add	r0,r0
80001576:	00 08       	add	r8,r0
80001578:	00 00       	add	r0,r0
8000157a:	05 18       	ld.sh	r8,r2++
8000157c:	80 00       	ld.sh	r0,r0[0x0]
8000157e:	22 88       	sub	r8,40
80001580:	00 00       	add	r0,r0
80001582:	05 18       	ld.sh	r8,r2++
80001584:	00 00       	add	r0,r0
80001586:	06 40       	or	r0,r3
80001588:	80 00       	ld.sh	r0,r0[0x0]
8000158a:	03 ec       	ld.ub	r12,r1[0x6]

8000158c <abs>:
8000158c:	5c 4c       	abs	r12
8000158e:	5e fc       	retal	r12

80001590 <calloc>:
80001590:	d4 01       	pushm	lr
80001592:	48 48       	lddpc	r8,800015a0 <calloc+0x10>
80001594:	16 9a       	mov	r10,r11
80001596:	18 9b       	mov	r11,r12
80001598:	70 0c       	ld.w	r12,r8[0x0]
8000159a:	f0 1f 00 03 	mcall	800015a4 <calloc+0x14>
8000159e:	d8 02       	popm	pc
800015a0:	00 00       	add	r0,r0
800015a2:	01 00       	ld.w	r0,r0++
800015a4:	80 00       	ld.sh	r0,r0[0x0]
800015a6:	15 a8       	ld.ub	r8,r10[0x2]

800015a8 <_calloc_r>:
800015a8:	d4 21       	pushm	r4-r7,lr
800015aa:	f4 0b 02 4b 	mul	r11,r10,r11
800015ae:	f0 1f 00 15 	mcall	80001600 <_calloc_r+0x58>
800015b2:	18 97       	mov	r7,r12
800015b4:	c2 30       	breq	800015fa <_calloc_r+0x52>
800015b6:	f8 fa ff fc 	ld.w	r10,r12[-4]
800015ba:	e0 1a ff fc 	andl	r10,0xfffc
800015be:	20 4a       	sub	r10,4
800015c0:	e0 4a 00 24 	cp.w	r10,36
800015c4:	e0 8b 00 18 	brhi	800015f4 <_calloc_r+0x4c>
800015c8:	18 98       	mov	r8,r12
800015ca:	59 3a       	cp.w	r10,19
800015cc:	e0 88 00 0f 	brls	800015ea <_calloc_r+0x42>
800015d0:	30 09       	mov	r9,0
800015d2:	10 a9       	st.w	r8++,r9
800015d4:	10 a9       	st.w	r8++,r9
800015d6:	59 ba       	cp.w	r10,27
800015d8:	e0 88 00 09 	brls	800015ea <_calloc_r+0x42>
800015dc:	10 a9       	st.w	r8++,r9
800015de:	10 a9       	st.w	r8++,r9
800015e0:	e0 4a 00 24 	cp.w	r10,36
800015e4:	c0 31       	brne	800015ea <_calloc_r+0x42>
800015e6:	10 a9       	st.w	r8++,r9
800015e8:	10 a9       	st.w	r8++,r9
800015ea:	30 09       	mov	r9,0
800015ec:	10 a9       	st.w	r8++,r9
800015ee:	91 19       	st.w	r8[0x4],r9
800015f0:	91 09       	st.w	r8[0x0],r9
800015f2:	c0 48       	rjmp	800015fa <_calloc_r+0x52>
800015f4:	30 0b       	mov	r11,0
800015f6:	f0 1f 00 04 	mcall	80001604 <_calloc_r+0x5c>
800015fa:	0e 9c       	mov	r12,r7
800015fc:	d8 22       	popm	r4-r7,pc
800015fe:	00 00       	add	r0,r0
80001600:	80 00       	ld.sh	r0,r0[0x0]
80001602:	16 08       	add	r8,r11
80001604:	80 00       	ld.sh	r0,r0[0x0]
80001606:	1a 58       	eor	r8,sp

80001608 <_malloc_r>:
80001608:	d4 31       	pushm	r0-r7,lr
8000160a:	f6 c8 ff f5 	sub	r8,r11,-11
8000160e:	18 95       	mov	r5,r12
80001610:	10 97       	mov	r7,r8
80001612:	e0 17 ff f8 	andl	r7,0xfff8
80001616:	59 68       	cp.w	r8,22
80001618:	f9 b7 08 10 	movls	r7,16
8000161c:	16 37       	cp.w	r7,r11
8000161e:	5f 38       	srlo	r8
80001620:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001624:	c0 50       	breq	8000162e <_malloc_r+0x26>
80001626:	30 c8       	mov	r8,12
80001628:	99 38       	st.w	r12[0xc],r8
8000162a:	e0 8f 01 f3 	bral	80001a10 <_malloc_r+0x408>
8000162e:	f0 1f 00 50 	mcall	8000176c <_malloc_r+0x164>
80001632:	e0 47 01 f7 	cp.w	r7,503
80001636:	e0 8b 00 1c 	brhi	8000166e <_malloc_r+0x66>
8000163a:	ee 03 16 03 	lsr	r3,r7,0x3
8000163e:	4c d8       	lddpc	r8,80001770 <_malloc_r+0x168>
80001640:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001644:	70 36       	ld.w	r6,r8[0xc]
80001646:	10 36       	cp.w	r6,r8
80001648:	c0 61       	brne	80001654 <_malloc_r+0x4c>
8000164a:	ec c8 ff f8 	sub	r8,r6,-8
8000164e:	70 36       	ld.w	r6,r8[0xc]
80001650:	10 36       	cp.w	r6,r8
80001652:	c0 c0       	breq	8000166a <_malloc_r+0x62>
80001654:	6c 18       	ld.w	r8,r6[0x4]
80001656:	e0 18 ff fc 	andl	r8,0xfffc
8000165a:	6c 3a       	ld.w	r10,r6[0xc]
8000165c:	ec 08 00 09 	add	r9,r6,r8
80001660:	0a 9c       	mov	r12,r5
80001662:	6c 28       	ld.w	r8,r6[0x8]
80001664:	95 28       	st.w	r10[0x8],r8
80001666:	91 3a       	st.w	r8[0xc],r10
80001668:	c4 68       	rjmp	800016f4 <_malloc_r+0xec>
8000166a:	2f e3       	sub	r3,-2
8000166c:	c4 c8       	rjmp	80001704 <_malloc_r+0xfc>
8000166e:	ee 03 16 09 	lsr	r3,r7,0x9
80001672:	c0 41       	brne	8000167a <_malloc_r+0x72>
80001674:	ee 03 16 03 	lsr	r3,r7,0x3
80001678:	c2 68       	rjmp	800016c4 <_malloc_r+0xbc>
8000167a:	58 43       	cp.w	r3,4
8000167c:	e0 8b 00 06 	brhi	80001688 <_malloc_r+0x80>
80001680:	ee 03 16 06 	lsr	r3,r7,0x6
80001684:	2c 83       	sub	r3,-56
80001686:	c1 f8       	rjmp	800016c4 <_malloc_r+0xbc>
80001688:	59 43       	cp.w	r3,20
8000168a:	e0 8b 00 04 	brhi	80001692 <_malloc_r+0x8a>
8000168e:	2a 53       	sub	r3,-91
80001690:	c1 a8       	rjmp	800016c4 <_malloc_r+0xbc>
80001692:	e0 43 00 54 	cp.w	r3,84
80001696:	e0 8b 00 06 	brhi	800016a2 <_malloc_r+0x9a>
8000169a:	ee 03 16 0c 	lsr	r3,r7,0xc
8000169e:	29 23       	sub	r3,-110
800016a0:	c1 28       	rjmp	800016c4 <_malloc_r+0xbc>
800016a2:	e0 43 01 54 	cp.w	r3,340
800016a6:	e0 8b 00 06 	brhi	800016b2 <_malloc_r+0xaa>
800016aa:	ee 03 16 0f 	lsr	r3,r7,0xf
800016ae:	28 93       	sub	r3,-119
800016b0:	c0 a8       	rjmp	800016c4 <_malloc_r+0xbc>
800016b2:	e0 43 05 54 	cp.w	r3,1364
800016b6:	e0 88 00 04 	brls	800016be <_malloc_r+0xb6>
800016ba:	37 e3       	mov	r3,126
800016bc:	c0 48       	rjmp	800016c4 <_malloc_r+0xbc>
800016be:	ee 03 16 12 	lsr	r3,r7,0x12
800016c2:	28 43       	sub	r3,-124
800016c4:	4a ba       	lddpc	r10,80001770 <_malloc_r+0x168>
800016c6:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800016ca:	74 36       	ld.w	r6,r10[0xc]
800016cc:	c1 98       	rjmp	800016fe <_malloc_r+0xf6>
800016ce:	6c 19       	ld.w	r9,r6[0x4]
800016d0:	e0 19 ff fc 	andl	r9,0xfffc
800016d4:	f2 07 01 0b 	sub	r11,r9,r7
800016d8:	58 fb       	cp.w	r11,15
800016da:	e0 8a 00 04 	brle	800016e2 <_malloc_r+0xda>
800016de:	20 13       	sub	r3,1
800016e0:	c1 18       	rjmp	80001702 <_malloc_r+0xfa>
800016e2:	6c 38       	ld.w	r8,r6[0xc]
800016e4:	58 0b       	cp.w	r11,0
800016e6:	c0 b5       	brlt	800016fc <_malloc_r+0xf4>
800016e8:	6c 2a       	ld.w	r10,r6[0x8]
800016ea:	ec 09 00 09 	add	r9,r6,r9
800016ee:	0a 9c       	mov	r12,r5
800016f0:	91 2a       	st.w	r8[0x8],r10
800016f2:	95 38       	st.w	r10[0xc],r8
800016f4:	72 18       	ld.w	r8,r9[0x4]
800016f6:	a1 a8       	sbr	r8,0x0
800016f8:	93 18       	st.w	r9[0x4],r8
800016fa:	cb c8       	rjmp	80001872 <_malloc_r+0x26a>
800016fc:	10 96       	mov	r6,r8
800016fe:	14 36       	cp.w	r6,r10
80001700:	ce 71       	brne	800016ce <_malloc_r+0xc6>
80001702:	2f f3       	sub	r3,-1
80001704:	49 ba       	lddpc	r10,80001770 <_malloc_r+0x168>
80001706:	f4 cc ff f8 	sub	r12,r10,-8
8000170a:	78 26       	ld.w	r6,r12[0x8]
8000170c:	18 36       	cp.w	r6,r12
8000170e:	c6 e0       	breq	800017ea <_malloc_r+0x1e2>
80001710:	6c 19       	ld.w	r9,r6[0x4]
80001712:	e0 19 ff fc 	andl	r9,0xfffc
80001716:	f2 07 01 08 	sub	r8,r9,r7
8000171a:	58 f8       	cp.w	r8,15
8000171c:	e0 89 00 90 	brgt	8000183c <_malloc_r+0x234>
80001720:	99 3c       	st.w	r12[0xc],r12
80001722:	99 2c       	st.w	r12[0x8],r12
80001724:	58 08       	cp.w	r8,0
80001726:	c0 55       	brlt	80001730 <_malloc_r+0x128>
80001728:	ec 09 00 09 	add	r9,r6,r9
8000172c:	0a 9c       	mov	r12,r5
8000172e:	ce 3b       	rjmp	800016f4 <_malloc_r+0xec>
80001730:	e0 49 01 ff 	cp.w	r9,511
80001734:	e0 8b 00 13 	brhi	8000175a <_malloc_r+0x152>
80001738:	a3 99       	lsr	r9,0x3
8000173a:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000173e:	70 2b       	ld.w	r11,r8[0x8]
80001740:	8d 38       	st.w	r6[0xc],r8
80001742:	8d 2b       	st.w	r6[0x8],r11
80001744:	97 36       	st.w	r11[0xc],r6
80001746:	91 26       	st.w	r8[0x8],r6
80001748:	a3 49       	asr	r9,0x2
8000174a:	74 18       	ld.w	r8,r10[0x4]
8000174c:	30 1b       	mov	r11,1
8000174e:	f6 09 09 49 	lsl	r9,r11,r9
80001752:	f1 e9 10 09 	or	r9,r8,r9
80001756:	95 19       	st.w	r10[0x4],r9
80001758:	c4 98       	rjmp	800017ea <_malloc_r+0x1e2>
8000175a:	f2 0a 16 09 	lsr	r10,r9,0x9
8000175e:	58 4a       	cp.w	r10,4
80001760:	e0 8b 00 0a 	brhi	80001774 <_malloc_r+0x16c>
80001764:	f2 0a 16 06 	lsr	r10,r9,0x6
80001768:	2c 8a       	sub	r10,-56
8000176a:	c2 38       	rjmp	800017b0 <_malloc_r+0x1a8>
8000176c:	80 00       	ld.sh	r0,r0[0x0]
8000176e:	1a 66       	and	r6,sp
80001770:	00 00       	add	r0,r0
80001772:	01 04       	ld.w	r4,r0++
80001774:	59 4a       	cp.w	r10,20
80001776:	e0 8b 00 04 	brhi	8000177e <_malloc_r+0x176>
8000177a:	2a 5a       	sub	r10,-91
8000177c:	c1 a8       	rjmp	800017b0 <_malloc_r+0x1a8>
8000177e:	e0 4a 00 54 	cp.w	r10,84
80001782:	e0 8b 00 06 	brhi	8000178e <_malloc_r+0x186>
80001786:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000178a:	29 2a       	sub	r10,-110
8000178c:	c1 28       	rjmp	800017b0 <_malloc_r+0x1a8>
8000178e:	e0 4a 01 54 	cp.w	r10,340
80001792:	e0 8b 00 06 	brhi	8000179e <_malloc_r+0x196>
80001796:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000179a:	28 9a       	sub	r10,-119
8000179c:	c0 a8       	rjmp	800017b0 <_malloc_r+0x1a8>
8000179e:	e0 4a 05 54 	cp.w	r10,1364
800017a2:	e0 88 00 04 	brls	800017aa <_malloc_r+0x1a2>
800017a6:	37 ea       	mov	r10,126
800017a8:	c0 48       	rjmp	800017b0 <_malloc_r+0x1a8>
800017aa:	f2 0a 16 12 	lsr	r10,r9,0x12
800017ae:	28 4a       	sub	r10,-124
800017b0:	4c 8b       	lddpc	r11,800018d0 <_malloc_r+0x2c8>
800017b2:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800017b6:	68 28       	ld.w	r8,r4[0x8]
800017b8:	08 38       	cp.w	r8,r4
800017ba:	c0 e1       	brne	800017d6 <_malloc_r+0x1ce>
800017bc:	76 19       	ld.w	r9,r11[0x4]
800017be:	a3 4a       	asr	r10,0x2
800017c0:	30 1e       	mov	lr,1
800017c2:	fc 0a 09 4a 	lsl	r10,lr,r10
800017c6:	f3 ea 10 0a 	or	r10,r9,r10
800017ca:	10 99       	mov	r9,r8
800017cc:	97 1a       	st.w	r11[0x4],r10
800017ce:	c0 a8       	rjmp	800017e2 <_malloc_r+0x1da>
800017d0:	70 28       	ld.w	r8,r8[0x8]
800017d2:	08 38       	cp.w	r8,r4
800017d4:	c0 60       	breq	800017e0 <_malloc_r+0x1d8>
800017d6:	70 1a       	ld.w	r10,r8[0x4]
800017d8:	e0 1a ff fc 	andl	r10,0xfffc
800017dc:	14 39       	cp.w	r9,r10
800017de:	cf 93       	brcs	800017d0 <_malloc_r+0x1c8>
800017e0:	70 39       	ld.w	r9,r8[0xc]
800017e2:	8d 39       	st.w	r6[0xc],r9
800017e4:	8d 28       	st.w	r6[0x8],r8
800017e6:	91 36       	st.w	r8[0xc],r6
800017e8:	93 26       	st.w	r9[0x8],r6
800017ea:	e6 08 14 02 	asr	r8,r3,0x2
800017ee:	30 1b       	mov	r11,1
800017f0:	4b 84       	lddpc	r4,800018d0 <_malloc_r+0x2c8>
800017f2:	f6 08 09 4b 	lsl	r11,r11,r8
800017f6:	68 18       	ld.w	r8,r4[0x4]
800017f8:	10 3b       	cp.w	r11,r8
800017fa:	e0 8b 00 6f 	brhi	800018d8 <_malloc_r+0x2d0>
800017fe:	f7 e8 00 09 	and	r9,r11,r8
80001802:	c0 b1       	brne	80001818 <_malloc_r+0x210>
80001804:	e0 13 ff fc 	andl	r3,0xfffc
80001808:	a1 7b       	lsl	r11,0x1
8000180a:	2f c3       	sub	r3,-4
8000180c:	c0 38       	rjmp	80001812 <_malloc_r+0x20a>
8000180e:	2f c3       	sub	r3,-4
80001810:	a1 7b       	lsl	r11,0x1
80001812:	f7 e8 00 09 	and	r9,r11,r8
80001816:	cf c0       	breq	8000180e <_malloc_r+0x206>
80001818:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000181c:	06 92       	mov	r2,r3
8000181e:	1c 91       	mov	r1,lr
80001820:	62 36       	ld.w	r6,r1[0xc]
80001822:	c2 e8       	rjmp	8000187e <_malloc_r+0x276>
80001824:	6c 1a       	ld.w	r10,r6[0x4]
80001826:	e0 1a ff fc 	andl	r10,0xfffc
8000182a:	f4 07 01 08 	sub	r8,r10,r7
8000182e:	58 f8       	cp.w	r8,15
80001830:	e0 8a 00 15 	brle	8000185a <_malloc_r+0x252>
80001834:	6c 3a       	ld.w	r10,r6[0xc]
80001836:	6c 29       	ld.w	r9,r6[0x8]
80001838:	95 29       	st.w	r10[0x8],r9
8000183a:	93 3a       	st.w	r9[0xc],r10
8000183c:	0e 99       	mov	r9,r7
8000183e:	ec 07 00 07 	add	r7,r6,r7
80001842:	a1 a9       	sbr	r9,0x0
80001844:	99 37       	st.w	r12[0xc],r7
80001846:	99 27       	st.w	r12[0x8],r7
80001848:	8d 19       	st.w	r6[0x4],r9
8000184a:	ee 08 09 08 	st.w	r7[r8],r8
8000184e:	8f 2c       	st.w	r7[0x8],r12
80001850:	8f 3c       	st.w	r7[0xc],r12
80001852:	a1 a8       	sbr	r8,0x0
80001854:	0a 9c       	mov	r12,r5
80001856:	8f 18       	st.w	r7[0x4],r8
80001858:	c0 d8       	rjmp	80001872 <_malloc_r+0x26a>
8000185a:	6c 39       	ld.w	r9,r6[0xc]
8000185c:	58 08       	cp.w	r8,0
8000185e:	c0 f5       	brlt	8000187c <_malloc_r+0x274>
80001860:	ec 0a 00 0a 	add	r10,r6,r10
80001864:	74 18       	ld.w	r8,r10[0x4]
80001866:	a1 a8       	sbr	r8,0x0
80001868:	0a 9c       	mov	r12,r5
8000186a:	95 18       	st.w	r10[0x4],r8
8000186c:	6c 28       	ld.w	r8,r6[0x8]
8000186e:	93 28       	st.w	r9[0x8],r8
80001870:	91 39       	st.w	r8[0xc],r9
80001872:	f0 1f 00 19 	mcall	800018d4 <_malloc_r+0x2cc>
80001876:	ec cc ff f8 	sub	r12,r6,-8
8000187a:	d8 32       	popm	r0-r7,pc
8000187c:	12 96       	mov	r6,r9
8000187e:	02 36       	cp.w	r6,r1
80001880:	cd 21       	brne	80001824 <_malloc_r+0x21c>
80001882:	2f f2       	sub	r2,-1
80001884:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001888:	c0 30       	breq	8000188e <_malloc_r+0x286>
8000188a:	2f 81       	sub	r1,-8
8000188c:	cc ab       	rjmp	80001820 <_malloc_r+0x218>
8000188e:	1c 98       	mov	r8,lr
80001890:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001894:	c0 81       	brne	800018a4 <_malloc_r+0x29c>
80001896:	68 19       	ld.w	r9,r4[0x4]
80001898:	f6 08 11 ff 	rsub	r8,r11,-1
8000189c:	f3 e8 00 08 	and	r8,r9,r8
800018a0:	89 18       	st.w	r4[0x4],r8
800018a2:	c0 78       	rjmp	800018b0 <_malloc_r+0x2a8>
800018a4:	f0 c9 00 08 	sub	r9,r8,8
800018a8:	20 13       	sub	r3,1
800018aa:	70 08       	ld.w	r8,r8[0x0]
800018ac:	12 38       	cp.w	r8,r9
800018ae:	cf 10       	breq	80001890 <_malloc_r+0x288>
800018b0:	a1 7b       	lsl	r11,0x1
800018b2:	68 18       	ld.w	r8,r4[0x4]
800018b4:	10 3b       	cp.w	r11,r8
800018b6:	e0 8b 00 11 	brhi	800018d8 <_malloc_r+0x2d0>
800018ba:	58 0b       	cp.w	r11,0
800018bc:	c0 e0       	breq	800018d8 <_malloc_r+0x2d0>
800018be:	04 93       	mov	r3,r2
800018c0:	c0 38       	rjmp	800018c6 <_malloc_r+0x2be>
800018c2:	2f c3       	sub	r3,-4
800018c4:	a1 7b       	lsl	r11,0x1
800018c6:	f7 e8 00 09 	and	r9,r11,r8
800018ca:	ca 71       	brne	80001818 <_malloc_r+0x210>
800018cc:	cf bb       	rjmp	800018c2 <_malloc_r+0x2ba>
800018ce:	00 00       	add	r0,r0
800018d0:	00 00       	add	r0,r0
800018d2:	01 04       	ld.w	r4,r0++
800018d4:	80 00       	ld.sh	r0,r0[0x0]
800018d6:	1a 68       	and	r8,sp
800018d8:	68 23       	ld.w	r3,r4[0x8]
800018da:	66 12       	ld.w	r2,r3[0x4]
800018dc:	e0 12 ff fc 	andl	r2,0xfffc
800018e0:	0e 32       	cp.w	r2,r7
800018e2:	5f 39       	srlo	r9
800018e4:	e4 07 01 08 	sub	r8,r2,r7
800018e8:	58 f8       	cp.w	r8,15
800018ea:	5f aa       	srle	r10
800018ec:	f5 e9 10 09 	or	r9,r10,r9
800018f0:	e0 80 00 a2 	breq	80001a34 <_malloc_r+0x42c>
800018f4:	4c 88       	lddpc	r8,80001a14 <_malloc_r+0x40c>
800018f6:	70 01       	ld.w	r1,r8[0x0]
800018f8:	4c 88       	lddpc	r8,80001a18 <_malloc_r+0x410>
800018fa:	2f 01       	sub	r1,-16
800018fc:	70 08       	ld.w	r8,r8[0x0]
800018fe:	0e 01       	add	r1,r7
80001900:	5b f8       	cp.w	r8,-1
80001902:	c0 40       	breq	8000190a <_malloc_r+0x302>
80001904:	28 11       	sub	r1,-127
80001906:	e0 11 ff 80 	andl	r1,0xff80
8000190a:	02 9b       	mov	r11,r1
8000190c:	0a 9c       	mov	r12,r5
8000190e:	f0 1f 00 44 	mcall	80001a1c <_malloc_r+0x414>
80001912:	18 96       	mov	r6,r12
80001914:	5b fc       	cp.w	r12,-1
80001916:	c6 e0       	breq	800019f2 <_malloc_r+0x3ea>
80001918:	e6 02 00 08 	add	r8,r3,r2
8000191c:	10 3c       	cp.w	r12,r8
8000191e:	c0 32       	brcc	80001924 <_malloc_r+0x31c>
80001920:	08 33       	cp.w	r3,r4
80001922:	c6 81       	brne	800019f2 <_malloc_r+0x3ea>
80001924:	4b fa       	lddpc	r10,80001a20 <_malloc_r+0x418>
80001926:	74 09       	ld.w	r9,r10[0x0]
80001928:	e2 09 00 09 	add	r9,r1,r9
8000192c:	95 09       	st.w	r10[0x0],r9
8000192e:	10 36       	cp.w	r6,r8
80001930:	c0 a1       	brne	80001944 <_malloc_r+0x33c>
80001932:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001936:	c0 71       	brne	80001944 <_malloc_r+0x33c>
80001938:	e2 02 00 02 	add	r2,r1,r2
8000193c:	68 28       	ld.w	r8,r4[0x8]
8000193e:	a1 a2       	sbr	r2,0x0
80001940:	91 12       	st.w	r8[0x4],r2
80001942:	c4 c8       	rjmp	800019da <_malloc_r+0x3d2>
80001944:	4b 5a       	lddpc	r10,80001a18 <_malloc_r+0x410>
80001946:	74 0b       	ld.w	r11,r10[0x0]
80001948:	5b fb       	cp.w	r11,-1
8000194a:	c0 31       	brne	80001950 <_malloc_r+0x348>
8000194c:	95 06       	st.w	r10[0x0],r6
8000194e:	c0 68       	rjmp	8000195a <_malloc_r+0x352>
80001950:	ec 09 00 09 	add	r9,r6,r9
80001954:	4b 3a       	lddpc	r10,80001a20 <_malloc_r+0x418>
80001956:	10 19       	sub	r9,r8
80001958:	95 09       	st.w	r10[0x0],r9
8000195a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000195e:	f0 09 11 08 	rsub	r9,r8,8
80001962:	58 08       	cp.w	r8,0
80001964:	f2 08 17 10 	movne	r8,r9
80001968:	ed d8 e1 06 	addne	r6,r6,r8
8000196c:	28 08       	sub	r8,-128
8000196e:	ec 01 00 01 	add	r1,r6,r1
80001972:	0a 9c       	mov	r12,r5
80001974:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001978:	f0 01 01 01 	sub	r1,r8,r1
8000197c:	02 9b       	mov	r11,r1
8000197e:	f0 1f 00 28 	mcall	80001a1c <_malloc_r+0x414>
80001982:	4a 88       	lddpc	r8,80001a20 <_malloc_r+0x418>
80001984:	5b fc       	cp.w	r12,-1
80001986:	ec 0c 17 00 	moveq	r12,r6
8000198a:	f9 b1 00 00 	moveq	r1,0
8000198e:	70 09       	ld.w	r9,r8[0x0]
80001990:	0c 1c       	sub	r12,r6
80001992:	89 26       	st.w	r4[0x8],r6
80001994:	02 0c       	add	r12,r1
80001996:	12 01       	add	r1,r9
80001998:	a1 ac       	sbr	r12,0x0
8000199a:	91 01       	st.w	r8[0x0],r1
8000199c:	8d 1c       	st.w	r6[0x4],r12
8000199e:	08 33       	cp.w	r3,r4
800019a0:	c1 d0       	breq	800019da <_malloc_r+0x3d2>
800019a2:	58 f2       	cp.w	r2,15
800019a4:	e0 8b 00 05 	brhi	800019ae <_malloc_r+0x3a6>
800019a8:	30 18       	mov	r8,1
800019aa:	8d 18       	st.w	r6[0x4],r8
800019ac:	c2 38       	rjmp	800019f2 <_malloc_r+0x3ea>
800019ae:	30 59       	mov	r9,5
800019b0:	20 c2       	sub	r2,12
800019b2:	e0 12 ff f8 	andl	r2,0xfff8
800019b6:	e6 02 00 08 	add	r8,r3,r2
800019ba:	91 29       	st.w	r8[0x8],r9
800019bc:	91 19       	st.w	r8[0x4],r9
800019be:	66 18       	ld.w	r8,r3[0x4]
800019c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800019c4:	e5 e8 10 08 	or	r8,r2,r8
800019c8:	87 18       	st.w	r3[0x4],r8
800019ca:	58 f2       	cp.w	r2,15
800019cc:	e0 88 00 07 	brls	800019da <_malloc_r+0x3d2>
800019d0:	e6 cb ff f8 	sub	r11,r3,-8
800019d4:	0a 9c       	mov	r12,r5
800019d6:	f0 1f 00 14 	mcall	80001a24 <_malloc_r+0x41c>
800019da:	49 49       	lddpc	r9,80001a28 <_malloc_r+0x420>
800019dc:	72 0a       	ld.w	r10,r9[0x0]
800019de:	49 18       	lddpc	r8,80001a20 <_malloc_r+0x418>
800019e0:	70 08       	ld.w	r8,r8[0x0]
800019e2:	14 38       	cp.w	r8,r10
800019e4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800019e8:	49 19       	lddpc	r9,80001a2c <_malloc_r+0x424>
800019ea:	72 0a       	ld.w	r10,r9[0x0]
800019ec:	14 38       	cp.w	r8,r10
800019ee:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800019f2:	68 28       	ld.w	r8,r4[0x8]
800019f4:	70 18       	ld.w	r8,r8[0x4]
800019f6:	e0 18 ff fc 	andl	r8,0xfffc
800019fa:	0e 38       	cp.w	r8,r7
800019fc:	5f 39       	srlo	r9
800019fe:	0e 18       	sub	r8,r7
80001a00:	58 f8       	cp.w	r8,15
80001a02:	5f aa       	srle	r10
80001a04:	f5 e9 10 09 	or	r9,r10,r9
80001a08:	c1 60       	breq	80001a34 <_malloc_r+0x42c>
80001a0a:	0a 9c       	mov	r12,r5
80001a0c:	f0 1f 00 09 	mcall	80001a30 <_malloc_r+0x428>
80001a10:	d8 3a       	popm	r0-r7,pc,r12=0
80001a12:	00 00       	add	r0,r0
80001a14:	00 00       	add	r0,r0
80001a16:	05 38       	ld.ub	r8,r2++
80001a18:	00 00       	add	r0,r0
80001a1a:	05 10       	ld.sh	r0,r2++
80001a1c:	80 00       	ld.sh	r0,r0[0x0]
80001a1e:	1a 6c       	and	r12,sp
80001a20:	00 00       	add	r0,r0
80001a22:	05 3c       	ld.ub	r12,r2++
80001a24:	80 00       	ld.sh	r0,r0[0x0]
80001a26:	1b 88       	ld.ub	r8,sp[0x0]
80001a28:	00 00       	add	r0,r0
80001a2a:	05 34       	ld.ub	r4,r2++
80001a2c:	00 00       	add	r0,r0
80001a2e:	05 30       	ld.ub	r0,r2++
80001a30:	80 00       	ld.sh	r0,r0[0x0]
80001a32:	1a 68       	and	r8,sp
80001a34:	68 26       	ld.w	r6,r4[0x8]
80001a36:	a1 a8       	sbr	r8,0x0
80001a38:	0e 99       	mov	r9,r7
80001a3a:	a1 a9       	sbr	r9,0x0
80001a3c:	8d 19       	st.w	r6[0x4],r9
80001a3e:	ec 07 00 07 	add	r7,r6,r7
80001a42:	0a 9c       	mov	r12,r5
80001a44:	89 27       	st.w	r4[0x8],r7
80001a46:	8f 18       	st.w	r7[0x4],r8
80001a48:	f0 1f 00 03 	mcall	80001a54 <_malloc_r+0x44c>
80001a4c:	ec cc ff f8 	sub	r12,r6,-8
80001a50:	d8 32       	popm	r0-r7,pc
80001a52:	00 00       	add	r0,r0
80001a54:	80 00       	ld.sh	r0,r0[0x0]
80001a56:	1a 68       	and	r8,sp

80001a58 <memset>:
80001a58:	18 98       	mov	r8,r12
80001a5a:	c0 38       	rjmp	80001a60 <memset+0x8>
80001a5c:	10 cb       	st.b	r8++,r11
80001a5e:	20 1a       	sub	r10,1
80001a60:	58 0a       	cp.w	r10,0
80001a62:	cf d1       	brne	80001a5c <memset+0x4>
80001a64:	5e fc       	retal	r12

80001a66 <__malloc_lock>:
80001a66:	5e fc       	retal	r12

80001a68 <__malloc_unlock>:
80001a68:	5e fc       	retal	r12
80001a6a:	d7 03       	nop

80001a6c <_sbrk_r>:
80001a6c:	d4 21       	pushm	r4-r7,lr
80001a6e:	30 08       	mov	r8,0
80001a70:	18 97       	mov	r7,r12
80001a72:	48 76       	lddpc	r6,80001a8c <_sbrk_r+0x20>
80001a74:	16 9c       	mov	r12,r11
80001a76:	8d 08       	st.w	r6[0x0],r8
80001a78:	f0 1f 00 06 	mcall	80001a90 <_sbrk_r+0x24>
80001a7c:	5b fc       	cp.w	r12,-1
80001a7e:	c0 51       	brne	80001a88 <_sbrk_r+0x1c>
80001a80:	6c 08       	ld.w	r8,r6[0x0]
80001a82:	58 08       	cp.w	r8,0
80001a84:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001a88:	d8 22       	popm	r4-r7,pc
80001a8a:	00 00       	add	r0,r0
80001a8c:	00 00       	add	r0,r0
80001a8e:	06 38       	cp.w	r8,r3
80001a90:	80 00       	ld.sh	r0,r0[0x0]
80001a92:	1a 94       	mov	r4,sp

80001a94 <_sbrk>:
80001a94:	d4 01       	pushm	lr
80001a96:	48 c8       	lddpc	r8,80001ac4 <_sbrk+0x30>
80001a98:	70 09       	ld.w	r9,r8[0x0]
80001a9a:	58 09       	cp.w	r9,0
80001a9c:	c0 31       	brne	80001aa2 <_sbrk+0xe>
80001a9e:	48 b9       	lddpc	r9,80001ac8 <_sbrk+0x34>
80001aa0:	91 09       	st.w	r8[0x0],r9
80001aa2:	48 99       	lddpc	r9,80001ac4 <_sbrk+0x30>
80001aa4:	48 aa       	lddpc	r10,80001acc <_sbrk+0x38>
80001aa6:	72 08       	ld.w	r8,r9[0x0]
80001aa8:	f0 0c 00 0c 	add	r12,r8,r12
80001aac:	14 3c       	cp.w	r12,r10
80001aae:	e0 8b 00 04 	brhi	80001ab6 <_sbrk+0x22>
80001ab2:	93 0c       	st.w	r9[0x0],r12
80001ab4:	c0 68       	rjmp	80001ac0 <_sbrk+0x2c>
80001ab6:	f0 1f 00 07 	mcall	80001ad0 <_sbrk+0x3c>
80001aba:	30 c8       	mov	r8,12
80001abc:	99 08       	st.w	r12[0x0],r8
80001abe:	3f f8       	mov	r8,-1
80001ac0:	10 9c       	mov	r12,r8
80001ac2:	d8 02       	popm	pc
80001ac4:	00 00       	add	r0,r0
80001ac6:	05 64       	ld.uh	r4,--r2
80001ac8:	00 00       	add	r0,r0
80001aca:	06 40       	or	r0,r3
80001acc:	00 00       	add	r0,r0
80001ace:	e0 00       	*unknown*
80001ad0:	80 00       	ld.sh	r0,r0[0x0]
80001ad2:	1a d4       	st.w	--sp,r4

80001ad4 <__errno>:
80001ad4:	48 28       	lddpc	r8,80001adc <__errno+0x8>
80001ad6:	70 0c       	ld.w	r12,r8[0x0]
80001ad8:	2f 4c       	sub	r12,-12
80001ada:	5e fc       	retal	r12
80001adc:	00 00       	add	r0,r0
80001ade:	01 00       	ld.w	r0,r0++

80001ae0 <_malloc_trim_r>:
80001ae0:	d4 21       	pushm	r4-r7,lr
80001ae2:	16 95       	mov	r5,r11
80001ae4:	18 97       	mov	r7,r12
80001ae6:	f0 1f 00 23 	mcall	80001b70 <_malloc_trim_r+0x90>
80001aea:	4a 34       	lddpc	r4,80001b74 <_malloc_trim_r+0x94>
80001aec:	68 28       	ld.w	r8,r4[0x8]
80001aee:	70 16       	ld.w	r6,r8[0x4]
80001af0:	e0 16 ff fc 	andl	r6,0xfffc
80001af4:	ec c8 ff 91 	sub	r8,r6,-111
80001af8:	f0 05 01 05 	sub	r5,r8,r5
80001afc:	e0 15 ff 80 	andl	r5,0xff80
80001b00:	ea c5 00 80 	sub	r5,r5,128
80001b04:	e0 45 00 7f 	cp.w	r5,127
80001b08:	e0 8a 00 23 	brle	80001b4e <_malloc_trim_r+0x6e>
80001b0c:	30 0b       	mov	r11,0
80001b0e:	0e 9c       	mov	r12,r7
80001b10:	f0 1f 00 1a 	mcall	80001b78 <_malloc_trim_r+0x98>
80001b14:	68 28       	ld.w	r8,r4[0x8]
80001b16:	0c 08       	add	r8,r6
80001b18:	10 3c       	cp.w	r12,r8
80001b1a:	c1 a1       	brne	80001b4e <_malloc_trim_r+0x6e>
80001b1c:	ea 0b 11 00 	rsub	r11,r5,0
80001b20:	0e 9c       	mov	r12,r7
80001b22:	f0 1f 00 16 	mcall	80001b78 <_malloc_trim_r+0x98>
80001b26:	5b fc       	cp.w	r12,-1
80001b28:	c1 71       	brne	80001b56 <_malloc_trim_r+0x76>
80001b2a:	30 0b       	mov	r11,0
80001b2c:	0e 9c       	mov	r12,r7
80001b2e:	f0 1f 00 13 	mcall	80001b78 <_malloc_trim_r+0x98>
80001b32:	68 28       	ld.w	r8,r4[0x8]
80001b34:	f8 08 01 09 	sub	r9,r12,r8
80001b38:	58 f9       	cp.w	r9,15
80001b3a:	e0 8a 00 0a 	brle	80001b4e <_malloc_trim_r+0x6e>
80001b3e:	a1 a9       	sbr	r9,0x0
80001b40:	91 19       	st.w	r8[0x4],r9
80001b42:	48 f8       	lddpc	r8,80001b7c <_malloc_trim_r+0x9c>
80001b44:	70 09       	ld.w	r9,r8[0x0]
80001b46:	48 f8       	lddpc	r8,80001b80 <_malloc_trim_r+0xa0>
80001b48:	f8 09 01 09 	sub	r9,r12,r9
80001b4c:	91 09       	st.w	r8[0x0],r9
80001b4e:	0e 9c       	mov	r12,r7
80001b50:	f0 1f 00 0d 	mcall	80001b84 <_malloc_trim_r+0xa4>
80001b54:	d8 2a       	popm	r4-r7,pc,r12=0
80001b56:	68 28       	ld.w	r8,r4[0x8]
80001b58:	0a 16       	sub	r6,r5
80001b5a:	a1 a6       	sbr	r6,0x0
80001b5c:	91 16       	st.w	r8[0x4],r6
80001b5e:	48 98       	lddpc	r8,80001b80 <_malloc_trim_r+0xa0>
80001b60:	70 09       	ld.w	r9,r8[0x0]
80001b62:	0a 19       	sub	r9,r5
80001b64:	0e 9c       	mov	r12,r7
80001b66:	91 09       	st.w	r8[0x0],r9
80001b68:	f0 1f 00 07 	mcall	80001b84 <_malloc_trim_r+0xa4>
80001b6c:	da 2a       	popm	r4-r7,pc,r12=1
80001b6e:	00 00       	add	r0,r0
80001b70:	80 00       	ld.sh	r0,r0[0x0]
80001b72:	1a 66       	and	r6,sp
80001b74:	00 00       	add	r0,r0
80001b76:	01 04       	ld.w	r4,r0++
80001b78:	80 00       	ld.sh	r0,r0[0x0]
80001b7a:	1a 6c       	and	r12,sp
80001b7c:	00 00       	add	r0,r0
80001b7e:	05 10       	ld.sh	r0,r2++
80001b80:	00 00       	add	r0,r0
80001b82:	05 3c       	ld.ub	r12,r2++
80001b84:	80 00       	ld.sh	r0,r0[0x0]
80001b86:	1a 68       	and	r8,sp

80001b88 <_free_r>:
80001b88:	d4 21       	pushm	r4-r7,lr
80001b8a:	16 96       	mov	r6,r11
80001b8c:	18 97       	mov	r7,r12
80001b8e:	58 0b       	cp.w	r11,0
80001b90:	e0 80 00 c8 	breq	80001d20 <_free_r+0x198>
80001b94:	f0 1f 00 4c 	mcall	80001cc4 <_free_r+0x13c>
80001b98:	20 86       	sub	r6,8
80001b9a:	4c ca       	lddpc	r10,80001cc8 <_free_r+0x140>
80001b9c:	6c 18       	ld.w	r8,r6[0x4]
80001b9e:	74 2e       	ld.w	lr,r10[0x8]
80001ba0:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001ba4:	a1 c8       	cbr	r8,0x0
80001ba6:	ec 08 00 09 	add	r9,r6,r8
80001baa:	72 1b       	ld.w	r11,r9[0x4]
80001bac:	e0 1b ff fc 	andl	r11,0xfffc
80001bb0:	1c 39       	cp.w	r9,lr
80001bb2:	c1 d1       	brne	80001bec <_free_r+0x64>
80001bb4:	f6 08 00 08 	add	r8,r11,r8
80001bb8:	58 0c       	cp.w	r12,0
80001bba:	c0 81       	brne	80001bca <_free_r+0x42>
80001bbc:	6c 09       	ld.w	r9,r6[0x0]
80001bbe:	12 16       	sub	r6,r9
80001bc0:	12 08       	add	r8,r9
80001bc2:	6c 3b       	ld.w	r11,r6[0xc]
80001bc4:	6c 29       	ld.w	r9,r6[0x8]
80001bc6:	97 29       	st.w	r11[0x8],r9
80001bc8:	93 3b       	st.w	r9[0xc],r11
80001bca:	10 99       	mov	r9,r8
80001bcc:	95 26       	st.w	r10[0x8],r6
80001bce:	a1 a9       	sbr	r9,0x0
80001bd0:	8d 19       	st.w	r6[0x4],r9
80001bd2:	4b f9       	lddpc	r9,80001ccc <_free_r+0x144>
80001bd4:	72 09       	ld.w	r9,r9[0x0]
80001bd6:	12 38       	cp.w	r8,r9
80001bd8:	c0 63       	brcs	80001be4 <_free_r+0x5c>
80001bda:	4b e8       	lddpc	r8,80001cd0 <_free_r+0x148>
80001bdc:	0e 9c       	mov	r12,r7
80001bde:	70 0b       	ld.w	r11,r8[0x0]
80001be0:	f0 1f 00 3d 	mcall	80001cd4 <_free_r+0x14c>
80001be4:	0e 9c       	mov	r12,r7
80001be6:	f0 1f 00 3d 	mcall	80001cd8 <_free_r+0x150>
80001bea:	d8 22       	popm	r4-r7,pc
80001bec:	93 1b       	st.w	r9[0x4],r11
80001bee:	58 0c       	cp.w	r12,0
80001bf0:	c0 30       	breq	80001bf6 <_free_r+0x6e>
80001bf2:	30 0c       	mov	r12,0
80001bf4:	c1 08       	rjmp	80001c14 <_free_r+0x8c>
80001bf6:	6c 0e       	ld.w	lr,r6[0x0]
80001bf8:	f4 c5 ff f8 	sub	r5,r10,-8
80001bfc:	1c 16       	sub	r6,lr
80001bfe:	1c 08       	add	r8,lr
80001c00:	6c 2e       	ld.w	lr,r6[0x8]
80001c02:	0a 3e       	cp.w	lr,r5
80001c04:	f9 bc 00 01 	moveq	r12,1
80001c08:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001c0c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001c10:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001c14:	f2 0b 00 0e 	add	lr,r9,r11
80001c18:	7c 1e       	ld.w	lr,lr[0x4]
80001c1a:	ed be 00 00 	bld	lr,0x0
80001c1e:	c1 30       	breq	80001c44 <_free_r+0xbc>
80001c20:	16 08       	add	r8,r11
80001c22:	58 0c       	cp.w	r12,0
80001c24:	c0 c1       	brne	80001c3c <_free_r+0xb4>
80001c26:	4a 9e       	lddpc	lr,80001cc8 <_free_r+0x140>
80001c28:	72 2b       	ld.w	r11,r9[0x8]
80001c2a:	2f 8e       	sub	lr,-8
80001c2c:	1c 3b       	cp.w	r11,lr
80001c2e:	c0 71       	brne	80001c3c <_free_r+0xb4>
80001c30:	97 36       	st.w	r11[0xc],r6
80001c32:	97 26       	st.w	r11[0x8],r6
80001c34:	8d 2b       	st.w	r6[0x8],r11
80001c36:	8d 3b       	st.w	r6[0xc],r11
80001c38:	30 1c       	mov	r12,1
80001c3a:	c0 58       	rjmp	80001c44 <_free_r+0xbc>
80001c3c:	72 2b       	ld.w	r11,r9[0x8]
80001c3e:	72 39       	ld.w	r9,r9[0xc]
80001c40:	93 2b       	st.w	r9[0x8],r11
80001c42:	97 39       	st.w	r11[0xc],r9
80001c44:	10 99       	mov	r9,r8
80001c46:	ec 08 09 08 	st.w	r6[r8],r8
80001c4a:	a1 a9       	sbr	r9,0x0
80001c4c:	8d 19       	st.w	r6[0x4],r9
80001c4e:	58 0c       	cp.w	r12,0
80001c50:	c6 51       	brne	80001d1a <_free_r+0x192>
80001c52:	e0 48 01 ff 	cp.w	r8,511
80001c56:	e0 8b 00 13 	brhi	80001c7c <_free_r+0xf4>
80001c5a:	a3 98       	lsr	r8,0x3
80001c5c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001c60:	72 2b       	ld.w	r11,r9[0x8]
80001c62:	8d 39       	st.w	r6[0xc],r9
80001c64:	8d 2b       	st.w	r6[0x8],r11
80001c66:	97 36       	st.w	r11[0xc],r6
80001c68:	93 26       	st.w	r9[0x8],r6
80001c6a:	a3 48       	asr	r8,0x2
80001c6c:	74 19       	ld.w	r9,r10[0x4]
80001c6e:	30 1b       	mov	r11,1
80001c70:	f6 08 09 48 	lsl	r8,r11,r8
80001c74:	f3 e8 10 08 	or	r8,r9,r8
80001c78:	95 18       	st.w	r10[0x4],r8
80001c7a:	c5 08       	rjmp	80001d1a <_free_r+0x192>
80001c7c:	f0 0b 16 09 	lsr	r11,r8,0x9
80001c80:	58 4b       	cp.w	r11,4
80001c82:	e0 8b 00 06 	brhi	80001c8e <_free_r+0x106>
80001c86:	f0 0b 16 06 	lsr	r11,r8,0x6
80001c8a:	2c 8b       	sub	r11,-56
80001c8c:	c2 b8       	rjmp	80001ce2 <_free_r+0x15a>
80001c8e:	59 4b       	cp.w	r11,20
80001c90:	e0 8b 00 04 	brhi	80001c98 <_free_r+0x110>
80001c94:	2a 5b       	sub	r11,-91
80001c96:	c2 68       	rjmp	80001ce2 <_free_r+0x15a>
80001c98:	e0 4b 00 54 	cp.w	r11,84
80001c9c:	e0 8b 00 06 	brhi	80001ca8 <_free_r+0x120>
80001ca0:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001ca4:	29 2b       	sub	r11,-110
80001ca6:	c1 e8       	rjmp	80001ce2 <_free_r+0x15a>
80001ca8:	e0 4b 01 54 	cp.w	r11,340
80001cac:	e0 8b 00 06 	brhi	80001cb8 <_free_r+0x130>
80001cb0:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001cb4:	28 9b       	sub	r11,-119
80001cb6:	c1 68       	rjmp	80001ce2 <_free_r+0x15a>
80001cb8:	e0 4b 05 54 	cp.w	r11,1364
80001cbc:	e0 88 00 10 	brls	80001cdc <_free_r+0x154>
80001cc0:	37 eb       	mov	r11,126
80001cc2:	c1 08       	rjmp	80001ce2 <_free_r+0x15a>
80001cc4:	80 00       	ld.sh	r0,r0[0x0]
80001cc6:	1a 66       	and	r6,sp
80001cc8:	00 00       	add	r0,r0
80001cca:	01 04       	ld.w	r4,r0++
80001ccc:	00 00       	add	r0,r0
80001cce:	05 0c       	ld.w	r12,r2++
80001cd0:	00 00       	add	r0,r0
80001cd2:	05 38       	ld.ub	r8,r2++
80001cd4:	80 00       	ld.sh	r0,r0[0x0]
80001cd6:	1a e0       	st.h	--sp,r0
80001cd8:	80 00       	ld.sh	r0,r0[0x0]
80001cda:	1a 68       	and	r8,sp
80001cdc:	f0 0b 16 12 	lsr	r11,r8,0x12
80001ce0:	28 4b       	sub	r11,-124
80001ce2:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001ce6:	78 29       	ld.w	r9,r12[0x8]
80001ce8:	18 39       	cp.w	r9,r12
80001cea:	c0 e1       	brne	80001d06 <_free_r+0x17e>
80001cec:	74 18       	ld.w	r8,r10[0x4]
80001cee:	a3 4b       	asr	r11,0x2
80001cf0:	30 1c       	mov	r12,1
80001cf2:	f8 0b 09 4b 	lsl	r11,r12,r11
80001cf6:	f1 eb 10 0b 	or	r11,r8,r11
80001cfa:	12 98       	mov	r8,r9
80001cfc:	95 1b       	st.w	r10[0x4],r11
80001cfe:	c0 a8       	rjmp	80001d12 <_free_r+0x18a>
80001d00:	72 29       	ld.w	r9,r9[0x8]
80001d02:	18 39       	cp.w	r9,r12
80001d04:	c0 60       	breq	80001d10 <_free_r+0x188>
80001d06:	72 1a       	ld.w	r10,r9[0x4]
80001d08:	e0 1a ff fc 	andl	r10,0xfffc
80001d0c:	14 38       	cp.w	r8,r10
80001d0e:	cf 93       	brcs	80001d00 <_free_r+0x178>
80001d10:	72 38       	ld.w	r8,r9[0xc]
80001d12:	8d 38       	st.w	r6[0xc],r8
80001d14:	8d 29       	st.w	r6[0x8],r9
80001d16:	93 36       	st.w	r9[0xc],r6
80001d18:	91 26       	st.w	r8[0x8],r6
80001d1a:	0e 9c       	mov	r12,r7
80001d1c:	f0 1f 00 02 	mcall	80001d24 <_free_r+0x19c>
80001d20:	d8 22       	popm	r4-r7,pc
80001d22:	00 00       	add	r0,r0
80001d24:	80 00       	ld.sh	r0,r0[0x0]
80001d26:	1a 68       	and	r8,sp

Disassembly of section .exception:

80001e00 <_evba>:
	...

80001e28 <_handle_Privilege_Violation>:
80001e28:	c7 a8       	rjmp	80001f1c <privilegedCalls>
	...

80001f00 <_handle_Supervisor_Call>:
80001f00:	1c 9f       	mov	pc,lr

80001f02 <_int0>:
80001f02:	e0 6c 08 00 	mov	r12,2048
80001f06:	ea 1c ff ff 	orh	r12,0xffff
80001f0a:	f8 fc 01 38 	ld.w	r12,r12[312]
80001f0e:	e0 1c 00 01 	andl	r12,0x1
80001f12:	58 1c       	cp.w	r12,1
80001f14:	c0 31       	brne	80001f1a <_int0_exit>
80001f16:	4b 9c       	lddpc	r12,80001ff8 <contextRestoreFromISR+0x40>
80001f18:	18 9f       	mov	pc,r12

80001f1a <_int0_exit>:
80001f1a:	d6 03       	rete

80001f1c <privilegedCalls>:
80001f1c:	d3 01       	pushm	r11-r12
80001f1e:	7a 3b       	ld.w	r11,sp[0xc]
80001f20:	16 9c       	mov	r12,r11
80001f22:	2f ec       	sub	r12,-2
80001f24:	9b 3c       	st.w	sp[0xc],r12

80001f26 <priv_interruptdisable>:
80001f26:	4b 6c       	lddpc	r12,80001ffc <contextRestoreFromISR+0x44>
80001f28:	18 3b       	cp.w	r11,r12
80001f2a:	c0 61       	brne	80001f36 <priv_interruptenable>
80001f2c:	7a 2c       	ld.w	r12,sp[0x8]
80001f2e:	b1 ac       	sbr	r12,0x10
80001f30:	9b 2c       	st.w	sp[0x8],r12
80001f32:	d3 02       	popm	r11-r12
80001f34:	d6 03       	rete

80001f36 <priv_interruptenable>:
80001f36:	4b 3c       	lddpc	r12,80002000 <contextRestoreFromISR+0x48>
80001f38:	18 3b       	cp.w	r11,r12
80001f3a:	c0 61       	brne	80001f46 <privexception>
80001f3c:	7a 2c       	ld.w	r12,sp[0x8]
80001f3e:	b1 cc       	cbr	r12,0x10
80001f40:	9b 2c       	st.w	sp[0x8],r12
80001f42:	d3 02       	popm	r11-r12
80001f44:	d6 03       	rete

80001f46 <privexception>:
80001f46:	c0 08       	rjmp	80001f46 <privexception>

80001f48 <interruptInit>:
80001f48:	d7 01       	pushm	r11-r12,lr
80001f4a:	fe cb 00 48 	sub	r11,pc,72
80001f4e:	4a ec       	lddpc	r12,80002004 <contextRestoreFromISR+0x4c>
80001f50:	18 1b       	sub	r11,r12
80001f52:	30 0c       	mov	r12,0
80001f54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e
80001f58:	e0 6c 08 38 	mov	r12,2104
80001f5c:	ea 1c ff ff 	orh	r12,0xffff
80001f60:	99 0b       	st.w	r12[0x0],r11
80001f62:	d7 02       	popm	r11-r12,lr
80001f64:	1c 9f       	mov	pc,lr

80001f66 <interruptDisable>:
80001f66:	d3 03       	ssrf	0x10
80001f68:	1c 9f       	mov	pc,lr

80001f6a <interruptEnable>:
80001f6a:	d5 03       	csrf	0x10
80001f6c:	1c 9f       	mov	pc,lr

80001f6e <isInterruptEnabled>:
80001f6e:	e1 bc 00 00 	mfsr	r12,0x0
80001f72:	b1 8c       	lsr	r12,0x10
80001f74:	e0 1c 00 01 	andl	r12,0x1
80001f78:	ec 1c 00 01 	eorl	r12,0x1
80001f7c:	1c 9f       	mov	pc,lr

80001f7e <contextSaveFromISR>:
80001f7e:	4a 3c       	lddpc	r12,80002008 <contextRestoreFromISR+0x50>
80001f80:	78 0c       	ld.w	r12,r12[0x0]
80001f82:	99 60       	st.w	r12[0x18],r0
80001f84:	7a 90       	ld.w	r0,sp[0x24]
80001f86:	99 c0       	st.w	r12[0x30],r0
80001f88:	7a 60       	ld.w	r0,sp[0x18]
80001f8a:	99 80       	st.w	r12[0x20],r0
80001f8c:	7a d8       	ld.w	r8,sp[0x34]
80001f8e:	7a c9       	ld.w	r9,sp[0x30]
80001f90:	7a ba       	ld.w	r10,sp[0x2c]
80001f92:	7a ab       	ld.w	r11,sp[0x28]
80001f94:	33 40       	mov	r0,52
80001f96:	18 00       	add	r0,r12
80001f98:	ed c0 0f ff 	stmts	r0,r0-r11
80001f9c:	7a 50       	ld.w	r0,sp[0x14]
80001f9e:	f9 40 00 44 	st.w	r12[68],r0
80001fa2:	7a 70       	ld.w	r0,sp[0x1c]
80001fa4:	99 90       	st.w	r12[0x24],r0
80001fa6:	7a 80       	ld.w	r0,sp[0x20]
80001fa8:	99 a0       	st.w	r12[0x28],r0
80001faa:	1a 90       	mov	r0,sp
80001fac:	1a d0       	st.w	--sp,r0
80001fae:	ed cd 20 00 	stmts	sp,sp
80001fb2:	1b 00       	ld.w	r0,sp++
80001fb4:	99 50       	st.w	r12[0x14],r0
80001fb6:	1c 9f       	mov	pc,lr

80001fb8 <contextRestoreFromISR>:
80001fb8:	49 4c       	lddpc	r12,80002008 <contextRestoreFromISR+0x50>
80001fba:	78 0c       	ld.w	r12,r12[0x0]
80001fbc:	78 50       	ld.w	r0,r12[0x14]
80001fbe:	1a d0       	st.w	--sp,r0
80001fc0:	e5 cd 20 00 	ldmts	sp,sp
80001fc4:	1b 00       	ld.w	r0,sp++
80001fc6:	78 a0       	ld.w	r0,r12[0x28]
80001fc8:	9b 80       	st.w	sp[0x20],r0
80001fca:	78 90       	ld.w	r0,r12[0x24]
80001fcc:	9b 70       	st.w	sp[0x1c],r0
80001fce:	33 40       	mov	r0,52
80001fd0:	18 00       	add	r0,r12
80001fd2:	e5 c0 0f ff 	ldmts	r0,r0-r11
80001fd6:	78 80       	ld.w	r0,r12[0x20]
80001fd8:	9b 60       	st.w	sp[0x18],r0
80001fda:	78 c0       	ld.w	r0,r12[0x30]
80001fdc:	9b 90       	st.w	sp[0x24],r0
80001fde:	9b ab       	st.w	sp[0x28],r11
80001fe0:	9b ba       	st.w	sp[0x2c],r10
80001fe2:	9b c9       	st.w	sp[0x30],r9
80001fe4:	9b d8       	st.w	sp[0x34],r8
80001fe6:	79 10       	ld.w	r0,r12[0x44]
80001fe8:	9b 50       	st.w	sp[0x14],r0
80001fea:	78 60       	ld.w	r0,r12[0x18]
80001fec:	d4 01       	pushm	lr
80001fee:	f0 1f 00 08 	mcall	8000200c <contextRestoreFromISR+0x54>
80001ff2:	d4 02       	popm	lr
80001ff4:	1c 9f       	mov	pc,lr
80001ff6:	00 00       	add	r0,r0
80001ff8:	80 00       	ld.sh	r0,r0[0x0]
80001ffa:	0e 2c       	rsub	r12,r7
80001ffc:	80 00       	ld.sh	r0,r0[0x0]
80001ffe:	1f 66       	ld.uh	r6,--pc
80002000:	80 00       	ld.sh	r0,r0[0x0]
80002002:	1f 6a       	ld.uh	r10,--pc
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	1e 00       	add	r0,pc
80002008:	00 00       	add	r0,r0
8000200a:	06 20       	rsub	r0,r3
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	14 82       	andn	r2,r10
	...
