
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002cf8  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002e00  80002e00  00003200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80003200  80003200  00003600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80003284  80003284  00003684  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80003288  00003808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80003794  00003d14  2**0
                  ALLOC
  9 .bss          00000128  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d9c0  00000640  00000640  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00003d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000007b0  00000000  00000000  00003dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000011e7  00000000  00000000  00004580  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000d191  00000000  00000000  00005767  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000212c  00000000  00000000  000128f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000489f  00000000  00000000  00014a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001274  00000000  00000000  000192c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000022b1  00000000  00000000  0001a538  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00002265  00000000  00000000  0001c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 005306ab  00000000  00000000  0001ea4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000006e8  00000000  00000000  0054f0f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	24 cc       	sub	r12,76

Disassembly of section .text:

80000008 <semaphore_insert_after>:
#include "include/kernel/semaphore.h"

int16_t semaphore_insert_after(semaphore * position, semaphore * new_semaphore)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	ef 4b ff f8 	st.w	r7[-8],r11
	new_semaphore->nextsemaphore = position->nextsemaphore;
80000018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000001c:	70 39       	ld.w	r9,r8[0xc]
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	91 39       	st.w	r8[0xc],r9
	new_semaphore->prevsemaphore = position;
80000024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000028:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000002c:	91 49       	st.w	r8[0x10],r9
	
	position->nextsemaphore = new_semaphore;
8000002e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000032:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000036:	91 39       	st.w	r8[0xc],r9
	new_semaphore->nextsemaphore->prevsemaphore = new_semaphore;
80000038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000003c:	70 38       	ld.w	r8,r8[0xc]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	91 49       	st.w	r8[0x10],r9
}
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	d7 03       	nop

8000004c <semaphoreAdd>:

int16_t semaphoreAdd(semaphore * handle)
{
8000004c:	eb cd 40 80 	pushm	r7,lr
80000050:	1a 97       	mov	r7,sp
80000052:	20 2d       	sub	sp,8
80000054:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = -1;
80000058:	3f f8       	mov	r8,-1
8000005a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( SEMAPHORES == NULL )
8000005e:	49 48       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000060:	70 08       	ld.w	r8,r8[0x0]
80000062:	58 08       	cp.w	r8,0
80000064:	c1 31       	brne	8000008a <semaphoreAdd+0x3e>
	{
		SEMAPHORES = handle;
80000066:	49 28       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000068:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000006c:	91 09       	st.w	r8[0x0],r9
		SEMAPHORES->nextsemaphore = SEMAPHORES;
8000006e:	49 08       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000070:	70 08       	ld.w	r8,r8[0x0]
80000072:	48 f9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
80000074:	72 09       	ld.w	r9,r9[0x0]
80000076:	91 39       	st.w	r8[0xc],r9
		SEMAPHORES->prevsemaphore = SEMAPHORES;
80000078:	48 d8       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000007a:	70 08       	ld.w	r8,r8[0x0]
8000007c:	48 c9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
8000007e:	72 09       	ld.w	r9,r9[0x0]
80000080:	91 49       	st.w	r8[0x10],r9
		
		result = 1;
80000082:	30 18       	mov	r8,1
80000084:	ef 58 ff fe 	st.h	r7[-2],r8
80000088:	c0 c8       	rjmp	800000a0 <semaphoreAdd+0x54>
	}
	else
	{
		semaphore_insert_after(SEMAPHORES->prevsemaphore, handle);
8000008a:	48 98       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000008c:	70 08       	ld.w	r8,r8[0x0]
8000008e:	70 48       	ld.w	r8,r8[0x10]
80000090:	ee fb ff f8 	ld.w	r11,r7[-8]
80000094:	10 9c       	mov	r12,r8
80000096:	f0 1f 00 07 	mcall	800000b0 <semaphoreAdd+0x64>
		
		result = 1;
8000009a:	30 18       	mov	r8,1
8000009c:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
800000a0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800000a4:	10 9c       	mov	r12,r8
800000a6:	2f ed       	sub	sp,-8
800000a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800000ac:	00 00       	add	r0,r0
800000ae:	06 1c       	sub	r12,r3
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	00 08       	add	r8,r0

800000b4 <ROSA_semaphoreCreate>:

int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * handle, uint8_t ceiling)
{
800000b4:	eb cd 40 80 	pushm	r7,lr
800000b8:	1a 97       	mov	r7,sp
800000ba:	20 3d       	sub	sp,12
800000bc:	ef 4c ff f8 	st.w	r7[-8],r12
800000c0:	16 98       	mov	r8,r11
800000c2:	ef 68 ff f4 	st.b	r7[-12],r8
	//interruptDisable();
	int16_t result = -1;
800000c6:	3f f8       	mov	r8,-1
800000c8:	ef 58 ff fe 	st.h	r7[-2],r8
	(*handle) = calloc(1, sizeof(semaphore));
800000cc:	31 4b       	mov	r11,20
800000ce:	30 1c       	mov	r12,1
800000d0:	f0 1f 00 11 	mcall	80000114 <ROSA_semaphoreCreate+0x60>
800000d4:	18 98       	mov	r8,r12
800000d6:	10 99       	mov	r9,r8
800000d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000dc:	91 09       	st.w	r8[0x0],r9
	(*handle)->ceiling = ceiling;
800000de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000e2:	70 09       	ld.w	r9,r8[0x0]
800000e4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800000e8:	b2 88       	st.b	r9[0x0],r8
	result = abs(*handle);
800000ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ee:	70 08       	ld.w	r8,r8[0x0]
800000f0:	10 9c       	mov	r12,r8
800000f2:	f0 1f 00 0a 	mcall	80000118 <ROSA_semaphoreCreate+0x64>
800000f6:	18 98       	mov	r8,r12
800000f8:	ef 58 ff fe 	st.h	r7[-2],r8
	semaphoreAdd(*handle);
800000fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000100:	70 08       	ld.w	r8,r8[0x0]
80000102:	10 9c       	mov	r12,r8
80000104:	f0 1f 00 06 	mcall	8000011c <ROSA_semaphoreCreate+0x68>
	//interruptEnable();
	
	return result;
80000108:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000010c:	10 9c       	mov	r12,r8
8000010e:	2f dd       	sub	sp,-12
80000110:	e3 cd 80 80 	ldm	sp++,r7,pc
80000114:	80 00       	ld.sh	r0,r0[0x0]
80000116:	25 50       	sub	r0,85
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	25 4c       	sub	r12,84
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	00 4c       	or	r12,r0

80000120 <semaphoreSetCurrentTask>:

int16_t semaphoreSetCurrentTask( semaphore * semaphore_handle, tcb * task_handle )
{
80000120:	eb cd 40 80 	pushm	r7,lr
80000124:	1a 97       	mov	r7,sp
80000126:	20 3d       	sub	sp,12
80000128:	ef 4c ff f8 	st.w	r7[-8],r12
8000012c:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = 0;
80000130:	30 08       	mov	r8,0
80000132:	ef 58 ff fe 	st.h	r7[-2],r8
	
	semaphore_handle->current_task = task_handle;
80000136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000013a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000013e:	91 19       	st.w	r8[0x4],r9
	semaphore_handle->task_priority = task_handle->effective_priority;
80000140:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000144:	f1 38 00 69 	ld.ub	r8,r8[105]
80000148:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000014c:	b2 98       	st.b	r9[0x1],r8
	if( task_handle->effective_priority > semaphore_handle->ceiling )
8000014e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000152:	f1 39 00 69 	ld.ub	r9,r8[105]
80000156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000015a:	11 88       	ld.ub	r8,r8[0x0]
8000015c:	f0 09 18 00 	cp.b	r9,r8
80000160:	e0 88 00 09 	brls	80000172 <semaphoreSetCurrentTask+0x52>
	{
		task_handle->effective_priority = semaphore_handle->ceiling;
80000164:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000168:	11 88       	ld.ub	r8,r8[0x0]
8000016a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000016e:	f3 68 00 69 	st.b	r9[105],r8
	}
	
	return result;
80000172:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000176:	10 9c       	mov	r12,r8
80000178:	2f dd       	sub	sp,-12
8000017a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000017e <semaphoreUnsetCurrentTask>:

int16_t semaphoreUnsetCurrentTask( semaphore * semaphore_handle )
{
8000017e:	eb cd 40 80 	pushm	r7,lr
80000182:	1a 97       	mov	r7,sp
80000184:	20 2d       	sub	sp,8
80000186:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = 0;
8000018a:	30 08       	mov	r8,0
8000018c:	ef 58 ff fe 	st.h	r7[-2],r8
	
	semaphore_handle->current_task->effective_priority = semaphore_handle->task_priority;
80000190:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000194:	70 19       	ld.w	r9,r8[0x4]
80000196:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000019a:	11 98       	ld.ub	r8,r8[0x1]
8000019c:	f3 68 00 69 	st.b	r9[105],r8
	semaphore_handle->current_task = NULL;
800001a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a4:	30 09       	mov	r9,0
800001a6:	91 19       	st.w	r8[0x4],r9
	
	return result;
800001a8:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800001ac:	10 9c       	mov	r12,r8
800001ae:	2f ed       	sub	sp,-8
800001b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800001b4 <semaphoreBlockTask>:

int16_t semaphoreBlockTask( semaphore * semaphore_handle, tcb * new_task )
{
800001b4:	eb cd 40 80 	pushm	r7,lr
800001b8:	1a 97       	mov	r7,sp
800001ba:	20 3d       	sub	sp,12
800001bc:	ef 4c ff f8 	st.w	r7[-8],r12
800001c0:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = -1;
800001c4:	3f f8       	mov	r8,-1
800001c6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	new_task->blocking_semaphore = semaphore_handle;
800001ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800001ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001d2:	f1 49 00 74 	st.w	r8[116],r9
	
	if( semaphore_handle->BLOCKEDLIST == NULL )
800001d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001da:	70 28       	ld.w	r8,r8[0x8]
800001dc:	58 08       	cp.w	r8,0
800001de:	c1 71       	brne	8000020c <semaphoreBlockTask+0x58>
	{
		semaphore_handle->BLOCKEDLIST = new_task;
800001e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800001e8:	91 29       	st.w	r8[0x8],r9
		semaphore_handle->BLOCKEDLIST->nexttcb = new_task;
800001ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ee:	70 28       	ld.w	r8,r8[0x8]
800001f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800001f4:	91 09       	st.w	r8[0x0],r9
		semaphore_handle->BLOCKEDLIST->prevtcb = new_task;
800001f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fa:	70 28       	ld.w	r8,r8[0x8]
800001fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000200:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000204:	30 18       	mov	r8,1
80000206:	ef 58 ff fe 	st.h	r7[-2],r8
8000020a:	c0 d8       	rjmp	80000224 <semaphoreBlockTask+0x70>
	}
	else
	{
		insert_after(semaphore_handle->BLOCKEDLIST->prevtcb, new_task);
8000020c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000210:	70 28       	ld.w	r8,r8[0x8]
80000212:	71 98       	ld.w	r8,r8[0x64]
80000214:	ee fb ff f4 	ld.w	r11,r7[-12]
80000218:	10 9c       	mov	r12,r8
8000021a:	f0 1f 00 06 	mcall	80000230 <semaphoreBlockTask+0x7c>
		
		result = 1;
8000021e:	30 18       	mov	r8,1
80000220:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
80000224:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000228:	10 9c       	mov	r12,r8
8000022a:	2f dd       	sub	sp,-12
8000022c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000230:	80 00       	ld.sh	r0,r0[0x0]
80000232:	12 44       	or	r4,r9

80000234 <semaphoreUnblockTask>:

int16_t semaphoreUnblockTask( semaphore * semaphore_handle, tcb * task_handle )
{
80000234:	eb cd 40 80 	pushm	r7,lr
80000238:	1a 97       	mov	r7,sp
8000023a:	20 3d       	sub	sp,12
8000023c:	ef 4c ff f8 	st.w	r7[-8],r12
80000240:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = 0;
80000244:	30 08       	mov	r8,0
80000246:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// only one blocked task
	if( semaphore_handle->BLOCKEDLIST == semaphore_handle->BLOCKEDLIST->nexttcb )
8000024a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000024e:	70 29       	ld.w	r9,r8[0x8]
80000250:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000254:	70 28       	ld.w	r8,r8[0x8]
80000256:	70 08       	ld.w	r8,r8[0x0]
80000258:	10 39       	cp.w	r9,r8
8000025a:	c0 61       	brne	80000266 <semaphoreUnblockTask+0x32>
	{
		semaphore_handle->BLOCKEDLIST = NULL;
8000025c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000260:	30 09       	mov	r9,0
80000262:	91 29       	st.w	r8[0x8],r9
80000264:	c0 f8       	rjmp	80000282 <semaphoreUnblockTask+0x4e>
	}
	// more than one blocked task
	else if( task_handle == semaphore_handle->BLOCKEDLIST )
80000266:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000026a:	70 29       	ld.w	r9,r8[0x8]
8000026c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000270:	10 39       	cp.w	r9,r8
80000272:	c0 81       	brne	80000282 <semaphoreUnblockTask+0x4e>
	{
		semaphore_handle->BLOCKEDLIST = semaphore_handle->BLOCKEDLIST->nexttcb;
80000274:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000278:	70 28       	ld.w	r8,r8[0x8]
8000027a:	70 09       	ld.w	r9,r8[0x0]
8000027c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000280:	91 29       	st.w	r8[0x8],r9
	}
	
	remove( task_handle );
80000282:	ee fc ff f4 	ld.w	r12,r7[-12]
80000286:	f0 1f 00 07 	mcall	800002a0 <semaphoreUnblockTask+0x6c>
	
	task_handle->blocking_semaphore = NULL;
8000028a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000028e:	30 09       	mov	r9,0
80000290:	f1 49 00 74 	st.w	r8[116],r9
	
	return result;
80000294:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000298:	10 9c       	mov	r12,r8
8000029a:	2f dd       	sub	sp,-12
8000029c:	e3 cd 80 80 	ldm	sp++,r7,pc
800002a0:	80 00       	ld.sh	r0,r0[0x0]
800002a2:	17 08       	ld.w	r8,r11++

800002a4 <ROSA_semaphoreLock>:
{
	return (handle->current_task != NULL);
}

int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t handle)
{
800002a4:	eb cd 40 80 	pushm	r7,lr
800002a8:	1a 97       	mov	r7,sp
800002aa:	20 2d       	sub	sp,8
800002ac:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
800002b0:	f0 1f 00 25 	mcall	80000344 <ROSA_semaphoreLock+0xa0>
	int16_t result = 0;
800002b4:	30 08       	mov	r8,0
800002b6:	ef 58 ff fe 	st.h	r7[-2],r8
	if( handle->current_task == NULL )
800002ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002be:	70 18       	ld.w	r8,r8[0x4]
800002c0:	58 08       	cp.w	r8,0
800002c2:	c1 61       	brne	800002ee <ROSA_semaphoreLock+0x4a>
	{
		// If the semaphore is not locked, executing task can lock it
		// Task inherits the priority ceiling of the semaphore
		// Dynamic priority of the task is changed if priority of the task is lower than the ceiling of the semaphore
		
		taskUninstall(EXECTASK);
800002c4:	4a 18       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002c6:	70 08       	ld.w	r8,r8[0x0]
800002c8:	10 9c       	mov	r12,r8
800002ca:	f0 1f 00 21 	mcall	8000034c <ROSA_semaphoreLock+0xa8>
		semaphoreSetCurrentTask(handle, EXECTASK);
800002ce:	49 f8       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002d0:	70 08       	ld.w	r8,r8[0x0]
800002d2:	10 9b       	mov	r11,r8
800002d4:	ee fc ff f8 	ld.w	r12,r7[-8]
800002d8:	f0 1f 00 1e 	mcall	80000350 <ROSA_semaphoreLock+0xac>
		taskInstall(EXECTASK);
800002dc:	49 b8       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002de:	70 08       	ld.w	r8,r8[0x0]
800002e0:	10 9c       	mov	r12,r8
800002e2:	f0 1f 00 1d 	mcall	80000354 <ROSA_semaphoreLock+0xb0>

		result = 1;
800002e6:	30 18       	mov	r8,1
800002e8:	ef 58 ff fe 	st.h	r7[-2],r8
800002ec:	c2 48       	rjmp	80000334 <ROSA_semaphoreLock+0x90>
	}
	else if( EXECTASK != handle->current_task )
800002ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002f2:	70 19       	ld.w	r9,r8[0x4]
800002f4:	49 58       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002f6:	70 08       	ld.w	r8,r8[0x0]
800002f8:	10 39       	cp.w	r9,r8
800002fa:	c1 30       	breq	80000320 <ROSA_semaphoreLock+0x7c>
	{
		// If the semaphore is locked, executing task cannot lock it
		// Task is put into the waiting queue for the specific semaphore
		// Task is also removed from the ready list
		
		taskUninstall(EXECTASK);
800002fc:	49 38       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002fe:	70 08       	ld.w	r8,r8[0x0]
80000300:	10 9c       	mov	r12,r8
80000302:	f0 1f 00 13 	mcall	8000034c <ROSA_semaphoreLock+0xa8>
		semaphoreBlockTask(handle, EXECTASK);
80000306:	49 18       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
80000308:	70 08       	ld.w	r8,r8[0x0]
8000030a:	10 9b       	mov	r11,r8
8000030c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000310:	f0 1f 00 12 	mcall	80000358 <ROSA_semaphoreLock+0xb4>
		
		result = 1;
80000314:	30 18       	mov	r8,1
80000316:	ef 58 ff fe 	st.h	r7[-2],r8
		ROSA_yield();
8000031a:	f0 1f 00 11 	mcall	8000035c <ROSA_semaphoreLock+0xb8>
8000031e:	c0 b8       	rjmp	80000334 <ROSA_semaphoreLock+0x90>
	}
	else if( EXECTASK == handle->current_task)
80000320:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000324:	70 19       	ld.w	r9,r8[0x4]
80000326:	48 98       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
80000328:	70 08       	ld.w	r8,r8[0x0]
8000032a:	10 39       	cp.w	r9,r8
8000032c:	c0 41       	brne	80000334 <ROSA_semaphoreLock+0x90>
	{
		result = 2;
8000032e:	30 28       	mov	r8,2
80000330:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	interruptEnable();
80000334:	f0 1f 00 0b 	mcall	80000360 <ROSA_semaphoreLock+0xbc>
	
	return result;
80000338:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000033c:	10 9c       	mov	r12,r8
8000033e:	2f ed       	sub	sp,-8
80000340:	e3 cd 80 80 	ldm	sp++,r7,pc
80000344:	80 00       	ld.sh	r0,r0[0x0]
80000346:	2f 66       	sub	r6,-10
80000348:	00 00       	add	r0,r0
8000034a:	06 20       	rsub	r0,r3
8000034c:	80 00       	ld.sh	r0,r0[0x0]
8000034e:	15 fc       	ld.ub	r12,r10[0x7]
80000350:	80 00       	ld.sh	r0,r0[0x0]
80000352:	01 20       	ld.uh	r0,r0++
80000354:	80 00       	ld.sh	r0,r0[0x0]
80000356:	12 b0       	st.h	r9++,r0
80000358:	80 00       	ld.sh	r0,r0[0x0]
8000035a:	01 b4       	ld.ub	r4,r0[0x3]
8000035c:	80 00       	ld.sh	r0,r0[0x0]
8000035e:	1b ce       	ld.ub	lr,sp[0x4]
80000360:	80 00       	ld.sh	r0,r0[0x0]
80000362:	2f 6a       	sub	r10,-10

80000364 <ROSA_semaphoreUnlock>:

int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t handle)
{
80000364:	eb cd 40 80 	pushm	r7,lr
80000368:	1a 97       	mov	r7,sp
8000036a:	20 3d       	sub	sp,12
8000036c:	ef 4c ff f4 	st.w	r7[-12],r12
	interruptDisable();
80000370:	f0 1f 00 21 	mcall	800003f4 <ROSA_semaphoreUnlock+0x90>
	int16_t result = 0;
80000374:	30 08       	mov	r8,0
80000376:	ef 58 ff fa 	st.h	r7[-6],r8
	if( handle->current_task == EXECTASK )
8000037a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000037e:	70 19       	ld.w	r9,r8[0x4]
80000380:	49 e8       	lddpc	r8,800003f8 <ROSA_semaphoreUnlock+0x94>
80000382:	70 08       	ld.w	r8,r8[0x0]
80000384:	10 39       	cp.w	r9,r8
80000386:	c2 c1       	brne	800003de <ROSA_semaphoreUnlock+0x7a>
	{
		// If the semaphore is locked, unlock it, change the priority of the task to the last effective priority
		// Set the pointer to the current task to NULL
		
		taskUninstall(EXECTASK);			// take EXECTASK out of TCBLIST
80000388:	49 c8       	lddpc	r8,800003f8 <ROSA_semaphoreUnlock+0x94>
8000038a:	70 08       	ld.w	r8,r8[0x0]
8000038c:	10 9c       	mov	r12,r8
8000038e:	f0 1f 00 1c 	mcall	800003fc <ROSA_semaphoreUnlock+0x98>
		semaphoreUnsetCurrentTask(handle);	// update effective priority and current_task metadata
80000392:	ee fc ff f4 	ld.w	r12,r7[-12]
80000396:	f0 1f 00 1b 	mcall	80000400 <ROSA_semaphoreUnlock+0x9c>
		taskInstall(EXECTASK);				// put EXECTASK back in TCBLIST
8000039a:	49 88       	lddpc	r8,800003f8 <ROSA_semaphoreUnlock+0x94>
8000039c:	70 08       	ld.w	r8,r8[0x0]
8000039e:	10 9c       	mov	r12,r8
800003a0:	f0 1f 00 19 	mcall	80000404 <ROSA_semaphoreUnlock+0xa0>
		
		if(handle->BLOCKEDLIST != NULL)
800003a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003a8:	70 28       	ld.w	r8,r8[0x8]
800003aa:	58 08       	cp.w	r8,0
800003ac:	c1 60       	breq	800003d8 <ROSA_semaphoreUnlock+0x74>
		{
			// If there are still some task waiting to take the semaphore, take the first one from the waiting queue
			// Put the task back to ready list
		
			tcb * temp = handle->BLOCKEDLIST;
800003ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003b2:	70 28       	ld.w	r8,r8[0x8]
800003b4:	ef 48 ff fc 	st.w	r7[-4],r8
			semaphoreUnblockTask( handle, temp );
800003b8:	ee fb ff fc 	ld.w	r11,r7[-4]
800003bc:	ee fc ff f4 	ld.w	r12,r7[-12]
800003c0:	f0 1f 00 12 	mcall	80000408 <ROSA_semaphoreUnlock+0xa4>
			semaphoreSetCurrentTask( handle, temp );
800003c4:	ee fb ff fc 	ld.w	r11,r7[-4]
800003c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800003cc:	f0 1f 00 10 	mcall	8000040c <ROSA_semaphoreUnlock+0xa8>
		
			taskInstall( temp );
800003d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800003d4:	f0 1f 00 0c 	mcall	80000404 <ROSA_semaphoreUnlock+0xa0>
		}

		result = 1;
800003d8:	30 18       	mov	r8,1
800003da:	ef 58 ff fa 	st.h	r7[-6],r8
	}

	ROSA_yield();
800003de:	f0 1f 00 0d 	mcall	80000410 <ROSA_semaphoreUnlock+0xac>
	interruptEnable();
800003e2:	f0 1f 00 0d 	mcall	80000414 <ROSA_semaphoreUnlock+0xb0>
	
	return result;
800003e6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
800003ea:	10 9c       	mov	r12,r8
800003ec:	2f dd       	sub	sp,-12
800003ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800003f2:	00 00       	add	r0,r0
800003f4:	80 00       	ld.sh	r0,r0[0x0]
800003f6:	2f 66       	sub	r6,-10
800003f8:	00 00       	add	r0,r0
800003fa:	06 20       	rsub	r0,r3
800003fc:	80 00       	ld.sh	r0,r0[0x0]
800003fe:	15 fc       	ld.ub	r12,r10[0x7]
80000400:	80 00       	ld.sh	r0,r0[0x0]
80000402:	01 7e       	ld.ub	lr,--r0
80000404:	80 00       	ld.sh	r0,r0[0x0]
80000406:	12 b0       	st.h	r9++,r0
80000408:	80 00       	ld.sh	r0,r0[0x0]
8000040a:	02 34       	cp.w	r4,r1
8000040c:	80 00       	ld.sh	r0,r0[0x0]
8000040e:	01 20       	ld.uh	r0,r0++
80000410:	80 00       	ld.sh	r0,r0[0x0]
80000412:	1b ce       	ld.ub	lr,sp[0x4]
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	2f 6a       	sub	r10,-10

80000418 <semaphoreEvictCurrentTask>:

int16_t semaphoreEvictCurrentTask(ROSA_semaphoreHandle_t handle)
{
80000418:	eb cd 40 80 	pushm	r7,lr
8000041c:	1a 97       	mov	r7,sp
8000041e:	20 3d       	sub	sp,12
80000420:	ef 4c ff f4 	st.w	r7[-12],r12
	int16_t result = 0;
80000424:	30 08       	mov	r8,0
80000426:	ef 58 ff fa 	st.h	r7[-6],r8
	
	tcb * temp;
	
	// if the semaphore exists and has a task is holding it
	if( handle && handle->current_task != NULL )
8000042a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000042e:	58 08       	cp.w	r8,0
80000430:	c2 70       	breq	8000047e <semaphoreEvictCurrentTask+0x66>
80000432:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000436:	70 18       	ld.w	r8,r8[0x4]
80000438:	58 08       	cp.w	r8,0
8000043a:	c2 20       	breq	8000047e <semaphoreEvictCurrentTask+0x66>
	{
		handle->current_task = NULL;
8000043c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000440:	30 09       	mov	r9,0
80000442:	91 19       	st.w	r8[0x4],r9
		
		if( handle->BLOCKEDLIST != NULL )
80000444:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000448:	70 28       	ld.w	r8,r8[0x8]
8000044a:	58 08       	cp.w	r8,0
8000044c:	c1 60       	breq	80000478 <semaphoreEvictCurrentTask+0x60>
		{
			temp = handle->BLOCKEDLIST;
8000044e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000452:	70 28       	ld.w	r8,r8[0x8]
80000454:	ef 48 ff fc 	st.w	r7[-4],r8
			semaphoreUnblockTask(handle, temp);
80000458:	ee fb ff fc 	ld.w	r11,r7[-4]
8000045c:	ee fc ff f4 	ld.w	r12,r7[-12]
80000460:	f0 1f 00 0b 	mcall	8000048c <semaphoreEvictCurrentTask+0x74>
			semaphoreSetCurrentTask(handle, temp);
80000464:	ee fb ff fc 	ld.w	r11,r7[-4]
80000468:	ee fc ff f4 	ld.w	r12,r7[-12]
8000046c:	f0 1f 00 09 	mcall	80000490 <semaphoreEvictCurrentTask+0x78>
			taskInstall(temp);
80000470:	ee fc ff fc 	ld.w	r12,r7[-4]
80000474:	f0 1f 00 08 	mcall	80000494 <semaphoreEvictCurrentTask+0x7c>
		}
		
		result = 1;
80000478:	30 18       	mov	r8,1
8000047a:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	return result;
8000047e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80000482:	10 9c       	mov	r12,r8
80000484:	2f dd       	sub	sp,-12
80000486:	e3 cd 80 80 	ldm	sp++,r7,pc
8000048a:	00 00       	add	r0,r0
8000048c:	80 00       	ld.sh	r0,r0[0x0]
8000048e:	02 34       	cp.w	r4,r1
80000490:	80 00       	ld.sh	r0,r0[0x0]
80000492:	01 20       	ld.uh	r0,r0++
80000494:	80 00       	ld.sh	r0,r0[0x0]
80000496:	12 b0       	st.h	r9++,r0

80000498 <usart_options>:
80000498:	00 00 e1 00 08 04 00 00 00 00 00 00 68 6f 67 53     ............hogS
800004a8:	00 00 00 00 74 73 6b 31 00 00 00 00 6c 65 64 33     ....tsk1....led3
800004b8:	00 00 00 00 6c 65 64 35 00 00 00 00 6c 65 64 37     ....led5....led7
800004c8:	00 00 00 00 74 73 6b 32 00 00 00 00 74 73 6b 33     ....tsk2....tsk3
800004d8:	00 00 00 00 74 73 6b 34 00 00 00 00 61 72 62 74     ....tsk4....arbt
800004e8:	00 00 00 00 66 73 64 6a 00 00 00 00 74 65 73 74     ....fsdj....test
800004f8:	00 00 00 00                                         ....

800004fc <toggle_1>:
	*((unsigned int*)0xFFFF3844) = 0x0000C002;				// set waveform options
	*((unsigned int*)0xFFFF385C) = 0x000036D0;				// initialize CV to 0
	*((unsigned int*)0xFFFF3840) = 0x00000004 | 0x00000001; //start
}

void toggle_1(void){ while(1){ ledToggle(LED0_GPIO); delay_ms(30); } }                                                                                            
800004fc:	eb cd 40 80 	pushm	r7,lr
80000500:	1a 97       	mov	r7,sp
80000502:	33 bc       	mov	r12,59
80000504:	f0 1f 00 03 	mcall	80000510 <toggle_1+0x14>
80000508:	31 ec       	mov	r12,30
8000050a:	f0 1f 00 03 	mcall	80000514 <toggle_1+0x18>
8000050e:	cf ab       	rjmp	80000502 <toggle_1+0x6>
80000510:	80 00       	ld.sh	r0,r0[0x0]
80000512:	21 1c       	sub	r12,17
80000514:	80 00       	ld.sh	r0,r0[0x0]
80000516:	1e 30       	cp.w	r0,pc

80000518 <toggle_2>:
void toggle_2(void){ while(1){ ledToggle(LED1_GPIO); delay_ms(30); } }                                                                                            
80000518:	eb cd 40 80 	pushm	r7,lr
8000051c:	1a 97       	mov	r7,sp
8000051e:	33 cc       	mov	r12,60
80000520:	f0 1f 00 03 	mcall	8000052c <toggle_2+0x14>
80000524:	31 ec       	mov	r12,30
80000526:	f0 1f 00 03 	mcall	80000530 <toggle_2+0x18>
8000052a:	cf ab       	rjmp	8000051e <toggle_2+0x6>
8000052c:	80 00       	ld.sh	r0,r0[0x0]
8000052e:	21 1c       	sub	r12,17
80000530:	80 00       	ld.sh	r0,r0[0x0]
80000532:	1e 30       	cp.w	r0,pc

80000534 <toggle_3>:
void toggle_3(void){ while(1){ ledToggle(LED2_GPIO); delay_ms(30); } }                                                                                            
80000534:	eb cd 40 80 	pushm	r7,lr
80000538:	1a 97       	mov	r7,sp
8000053a:	33 dc       	mov	r12,61
8000053c:	f0 1f 00 03 	mcall	80000548 <toggle_3+0x14>
80000540:	31 ec       	mov	r12,30
80000542:	f0 1f 00 03 	mcall	8000054c <toggle_3+0x18>
80000546:	cf ab       	rjmp	8000053a <toggle_3+0x6>
80000548:	80 00       	ld.sh	r0,r0[0x0]
8000054a:	21 1c       	sub	r12,17
8000054c:	80 00       	ld.sh	r0,r0[0x0]
8000054e:	1e 30       	cp.w	r0,pc

80000550 <toggle_4>:
void toggle_4(void){ while(1){ ledToggle(LED3_GPIO); delay_ms(30); } }                                                                                            
80000550:	eb cd 40 80 	pushm	r7,lr
80000554:	1a 97       	mov	r7,sp
80000556:	33 ec       	mov	r12,62
80000558:	f0 1f 00 03 	mcall	80000564 <toggle_4+0x14>
8000055c:	31 ec       	mov	r12,30
8000055e:	f0 1f 00 03 	mcall	80000568 <toggle_4+0x18>
80000562:	cf ab       	rjmp	80000556 <toggle_4+0x6>
80000564:	80 00       	ld.sh	r0,r0[0x0]
80000566:	21 1c       	sub	r12,17
80000568:	80 00       	ld.sh	r0,r0[0x0]
8000056a:	1e 30       	cp.w	r0,pc

8000056c <toggle_5>:
void toggle_5(void){ while(1){ ledToggle(LED4_GPIO); delay_ms(30); } }                                                                                            
8000056c:	eb cd 40 80 	pushm	r7,lr
80000570:	1a 97       	mov	r7,sp
80000572:	33 3c       	mov	r12,51
80000574:	f0 1f 00 03 	mcall	80000580 <toggle_5+0x14>
80000578:	31 ec       	mov	r12,30
8000057a:	f0 1f 00 03 	mcall	80000584 <toggle_5+0x18>
8000057e:	cf ab       	rjmp	80000572 <toggle_5+0x6>
80000580:	80 00       	ld.sh	r0,r0[0x0]
80000582:	21 1c       	sub	r12,17
80000584:	80 00       	ld.sh	r0,r0[0x0]
80000586:	1e 30       	cp.w	r0,pc

80000588 <toggle_6>:
void toggle_6(void){ while(1){ ledToggle(LED5_GPIO); delay_ms(30); } }                                                                                            
80000588:	eb cd 40 80 	pushm	r7,lr
8000058c:	1a 97       	mov	r7,sp
8000058e:	33 4c       	mov	r12,52
80000590:	f0 1f 00 03 	mcall	8000059c <toggle_6+0x14>
80000594:	31 ec       	mov	r12,30
80000596:	f0 1f 00 03 	mcall	800005a0 <toggle_6+0x18>
8000059a:	cf ab       	rjmp	8000058e <toggle_6+0x6>
8000059c:	80 00       	ld.sh	r0,r0[0x0]
8000059e:	21 1c       	sub	r12,17
800005a0:	80 00       	ld.sh	r0,r0[0x0]
800005a2:	1e 30       	cp.w	r0,pc

800005a4 <toggle_7>:
void toggle_7(void){ while(1){ ledToggle(LED6_GPIO); delay_ms(30); } }                                                                                            
800005a4:	eb cd 40 80 	pushm	r7,lr
800005a8:	1a 97       	mov	r7,sp
800005aa:	33 5c       	mov	r12,53
800005ac:	f0 1f 00 03 	mcall	800005b8 <toggle_7+0x14>
800005b0:	31 ec       	mov	r12,30
800005b2:	f0 1f 00 03 	mcall	800005bc <toggle_7+0x18>
800005b6:	cf ab       	rjmp	800005aa <toggle_7+0x6>
800005b8:	80 00       	ld.sh	r0,r0[0x0]
800005ba:	21 1c       	sub	r12,17
800005bc:	80 00       	ld.sh	r0,r0[0x0]
800005be:	1e 30       	cp.w	r0,pc

800005c0 <toggle_8>:
void toggle_8(void){ while(1){ ledToggle(LED7_GPIO); delay_ms(30); } }                                                                                            
800005c0:	eb cd 40 80 	pushm	r7,lr
800005c4:	1a 97       	mov	r7,sp
800005c6:	33 6c       	mov	r12,54
800005c8:	f0 1f 00 03 	mcall	800005d4 <toggle_8+0x14>
800005cc:	31 ec       	mov	r12,30
800005ce:	f0 1f 00 03 	mcall	800005d8 <toggle_8+0x18>
800005d2:	cf ab       	rjmp	800005c6 <toggle_8+0x6>
800005d4:	80 00       	ld.sh	r0,r0[0x0]
800005d6:	21 1c       	sub	r12,17
800005d8:	80 00       	ld.sh	r0,r0[0x0]
800005da:	1e 30       	cp.w	r0,pc

800005dc <toggle_9>:
void toggle_9(void){ while(1){ ledToggle(LED0_GPIO); delay_ms(30); } }                                                                                            
800005dc:	eb cd 40 80 	pushm	r7,lr
800005e0:	1a 97       	mov	r7,sp
800005e2:	33 bc       	mov	r12,59
800005e4:	f0 1f 00 03 	mcall	800005f0 <toggle_9+0x14>
800005e8:	31 ec       	mov	r12,30
800005ea:	f0 1f 00 03 	mcall	800005f4 <toggle_9+0x18>
800005ee:	cf ab       	rjmp	800005e2 <toggle_9+0x6>
800005f0:	80 00       	ld.sh	r0,r0[0x0]
800005f2:	21 1c       	sub	r12,17
800005f4:	80 00       	ld.sh	r0,r0[0x0]
800005f6:	1e 30       	cp.w	r0,pc

800005f8 <toggle_10>:
void toggle_10(void){ while(1){ ledToggle(LED1_GPIO); delay_ms(30); } }                                                                                           
800005f8:	eb cd 40 80 	pushm	r7,lr
800005fc:	1a 97       	mov	r7,sp
800005fe:	33 cc       	mov	r12,60
80000600:	f0 1f 00 03 	mcall	8000060c <toggle_10+0x14>
80000604:	31 ec       	mov	r12,30
80000606:	f0 1f 00 03 	mcall	80000610 <toggle_10+0x18>
8000060a:	cf ab       	rjmp	800005fe <toggle_10+0x6>
8000060c:	80 00       	ld.sh	r0,r0[0x0]
8000060e:	21 1c       	sub	r12,17
80000610:	80 00       	ld.sh	r0,r0[0x0]
80000612:	1e 30       	cp.w	r0,pc

80000614 <toggle_11>:
void toggle_11(void){ while(1){ ledToggle(LED2_GPIO); delay_ms(30); } }                                                                                           
80000614:	eb cd 40 80 	pushm	r7,lr
80000618:	1a 97       	mov	r7,sp
8000061a:	33 dc       	mov	r12,61
8000061c:	f0 1f 00 03 	mcall	80000628 <toggle_11+0x14>
80000620:	31 ec       	mov	r12,30
80000622:	f0 1f 00 03 	mcall	8000062c <toggle_11+0x18>
80000626:	cf ab       	rjmp	8000061a <toggle_11+0x6>
80000628:	80 00       	ld.sh	r0,r0[0x0]
8000062a:	21 1c       	sub	r12,17
8000062c:	80 00       	ld.sh	r0,r0[0x0]
8000062e:	1e 30       	cp.w	r0,pc

80000630 <toggle_12>:
void toggle_12(void){ while(1){ ledToggle(LED3_GPIO); delay_ms(30); } }                                                                                           
80000630:	eb cd 40 80 	pushm	r7,lr
80000634:	1a 97       	mov	r7,sp
80000636:	33 ec       	mov	r12,62
80000638:	f0 1f 00 03 	mcall	80000644 <toggle_12+0x14>
8000063c:	31 ec       	mov	r12,30
8000063e:	f0 1f 00 03 	mcall	80000648 <toggle_12+0x18>
80000642:	cf ab       	rjmp	80000636 <toggle_12+0x6>
80000644:	80 00       	ld.sh	r0,r0[0x0]
80000646:	21 1c       	sub	r12,17
80000648:	80 00       	ld.sh	r0,r0[0x0]
8000064a:	1e 30       	cp.w	r0,pc

8000064c <toggle_13>:
void toggle_13(void){ while(1){ ledToggle(LED4_GPIO); delay_ms(30); } }                                                                                           
8000064c:	eb cd 40 80 	pushm	r7,lr
80000650:	1a 97       	mov	r7,sp
80000652:	33 3c       	mov	r12,51
80000654:	f0 1f 00 03 	mcall	80000660 <toggle_13+0x14>
80000658:	31 ec       	mov	r12,30
8000065a:	f0 1f 00 03 	mcall	80000664 <toggle_13+0x18>
8000065e:	cf ab       	rjmp	80000652 <toggle_13+0x6>
80000660:	80 00       	ld.sh	r0,r0[0x0]
80000662:	21 1c       	sub	r12,17
80000664:	80 00       	ld.sh	r0,r0[0x0]
80000666:	1e 30       	cp.w	r0,pc

80000668 <toggle_14>:
void toggle_14(void){ while(1){ ledToggle(LED5_GPIO); delay_ms(30); } }                                                                                           
80000668:	eb cd 40 80 	pushm	r7,lr
8000066c:	1a 97       	mov	r7,sp
8000066e:	33 4c       	mov	r12,52
80000670:	f0 1f 00 03 	mcall	8000067c <toggle_14+0x14>
80000674:	31 ec       	mov	r12,30
80000676:	f0 1f 00 03 	mcall	80000680 <toggle_14+0x18>
8000067a:	cf ab       	rjmp	8000066e <toggle_14+0x6>
8000067c:	80 00       	ld.sh	r0,r0[0x0]
8000067e:	21 1c       	sub	r12,17
80000680:	80 00       	ld.sh	r0,r0[0x0]
80000682:	1e 30       	cp.w	r0,pc

80000684 <toggle_15>:
void toggle_15(void){ while(1){ ledToggle(LED6_GPIO); delay_ms(30); } }                                                                                           
80000684:	eb cd 40 80 	pushm	r7,lr
80000688:	1a 97       	mov	r7,sp
8000068a:	33 5c       	mov	r12,53
8000068c:	f0 1f 00 03 	mcall	80000698 <toggle_15+0x14>
80000690:	31 ec       	mov	r12,30
80000692:	f0 1f 00 03 	mcall	8000069c <toggle_15+0x18>
80000696:	cf ab       	rjmp	8000068a <toggle_15+0x6>
80000698:	80 00       	ld.sh	r0,r0[0x0]
8000069a:	21 1c       	sub	r12,17
8000069c:	80 00       	ld.sh	r0,r0[0x0]
8000069e:	1e 30       	cp.w	r0,pc

800006a0 <toggle_16>:
void toggle_16(void){ while(1){ ledToggle(LED7_GPIO); delay_ms(30); } }                                                                                           
800006a0:	eb cd 40 80 	pushm	r7,lr
800006a4:	1a 97       	mov	r7,sp
800006a6:	33 6c       	mov	r12,54
800006a8:	f0 1f 00 03 	mcall	800006b4 <toggle_16+0x14>
800006ac:	31 ec       	mov	r12,30
800006ae:	f0 1f 00 03 	mcall	800006b8 <toggle_16+0x18>
800006b2:	cf ab       	rjmp	800006a6 <toggle_16+0x6>
800006b4:	80 00       	ld.sh	r0,r0[0x0]
800006b6:	21 1c       	sub	r12,17
800006b8:	80 00       	ld.sh	r0,r0[0x0]
800006ba:	1e 30       	cp.w	r0,pc

800006bc <toggle_17>:
void toggle_17(void){ while(1){ ledToggle(LED0_GPIO); delay_ms(30); } }                                                                                           
800006bc:	eb cd 40 80 	pushm	r7,lr
800006c0:	1a 97       	mov	r7,sp
800006c2:	33 bc       	mov	r12,59
800006c4:	f0 1f 00 03 	mcall	800006d0 <toggle_17+0x14>
800006c8:	31 ec       	mov	r12,30
800006ca:	f0 1f 00 03 	mcall	800006d4 <toggle_17+0x18>
800006ce:	cf ab       	rjmp	800006c2 <toggle_17+0x6>
800006d0:	80 00       	ld.sh	r0,r0[0x0]
800006d2:	21 1c       	sub	r12,17
800006d4:	80 00       	ld.sh	r0,r0[0x0]
800006d6:	1e 30       	cp.w	r0,pc

800006d8 <toggle_18>:
void toggle_18(void){ while(1){ ledToggle(LED1_GPIO); delay_ms(30); } }                                                                                           
800006d8:	eb cd 40 80 	pushm	r7,lr
800006dc:	1a 97       	mov	r7,sp
800006de:	33 cc       	mov	r12,60
800006e0:	f0 1f 00 03 	mcall	800006ec <toggle_18+0x14>
800006e4:	31 ec       	mov	r12,30
800006e6:	f0 1f 00 03 	mcall	800006f0 <toggle_18+0x18>
800006ea:	cf ab       	rjmp	800006de <toggle_18+0x6>
800006ec:	80 00       	ld.sh	r0,r0[0x0]
800006ee:	21 1c       	sub	r12,17
800006f0:	80 00       	ld.sh	r0,r0[0x0]
800006f2:	1e 30       	cp.w	r0,pc

800006f4 <toggle_19>:
void toggle_19(void){ while(1){ ledToggle(LED2_GPIO); delay_ms(30); } }                                                                                           
800006f4:	eb cd 40 80 	pushm	r7,lr
800006f8:	1a 97       	mov	r7,sp
800006fa:	33 dc       	mov	r12,61
800006fc:	f0 1f 00 03 	mcall	80000708 <toggle_19+0x14>
80000700:	31 ec       	mov	r12,30
80000702:	f0 1f 00 03 	mcall	8000070c <toggle_19+0x18>
80000706:	cf ab       	rjmp	800006fa <toggle_19+0x6>
80000708:	80 00       	ld.sh	r0,r0[0x0]
8000070a:	21 1c       	sub	r12,17
8000070c:	80 00       	ld.sh	r0,r0[0x0]
8000070e:	1e 30       	cp.w	r0,pc

80000710 <toggle_20>:
void toggle_20(void){ while(1){ ledToggle(LED3_GPIO); delay_ms(30); } }                                                                                           
80000710:	eb cd 40 80 	pushm	r7,lr
80000714:	1a 97       	mov	r7,sp
80000716:	33 ec       	mov	r12,62
80000718:	f0 1f 00 03 	mcall	80000724 <toggle_20+0x14>
8000071c:	31 ec       	mov	r12,30
8000071e:	f0 1f 00 03 	mcall	80000728 <toggle_20+0x18>
80000722:	cf ab       	rjmp	80000716 <toggle_20+0x6>
80000724:	80 00       	ld.sh	r0,r0[0x0]
80000726:	21 1c       	sub	r12,17
80000728:	80 00       	ld.sh	r0,r0[0x0]
8000072a:	1e 30       	cp.w	r0,pc

8000072c <toggle_21>:
void toggle_21(void){ while(1){ ledToggle(LED4_GPIO); delay_ms(30); } }                                                                                           
8000072c:	eb cd 40 80 	pushm	r7,lr
80000730:	1a 97       	mov	r7,sp
80000732:	33 3c       	mov	r12,51
80000734:	f0 1f 00 03 	mcall	80000740 <toggle_21+0x14>
80000738:	31 ec       	mov	r12,30
8000073a:	f0 1f 00 03 	mcall	80000744 <toggle_21+0x18>
8000073e:	cf ab       	rjmp	80000732 <toggle_21+0x6>
80000740:	80 00       	ld.sh	r0,r0[0x0]
80000742:	21 1c       	sub	r12,17
80000744:	80 00       	ld.sh	r0,r0[0x0]
80000746:	1e 30       	cp.w	r0,pc

80000748 <toggle_22>:
void toggle_22(void){ while(1){ ledToggle(LED5_GPIO); delay_ms(30); } }                                                                                           
80000748:	eb cd 40 80 	pushm	r7,lr
8000074c:	1a 97       	mov	r7,sp
8000074e:	33 4c       	mov	r12,52
80000750:	f0 1f 00 03 	mcall	8000075c <toggle_22+0x14>
80000754:	31 ec       	mov	r12,30
80000756:	f0 1f 00 03 	mcall	80000760 <toggle_22+0x18>
8000075a:	cf ab       	rjmp	8000074e <toggle_22+0x6>
8000075c:	80 00       	ld.sh	r0,r0[0x0]
8000075e:	21 1c       	sub	r12,17
80000760:	80 00       	ld.sh	r0,r0[0x0]
80000762:	1e 30       	cp.w	r0,pc

80000764 <toggle_23>:
void toggle_23(void){ while(1){ ledToggle(LED6_GPIO); delay_ms(30); } }                                                                                           
80000764:	eb cd 40 80 	pushm	r7,lr
80000768:	1a 97       	mov	r7,sp
8000076a:	33 5c       	mov	r12,53
8000076c:	f0 1f 00 03 	mcall	80000778 <toggle_23+0x14>
80000770:	31 ec       	mov	r12,30
80000772:	f0 1f 00 03 	mcall	8000077c <toggle_23+0x18>
80000776:	cf ab       	rjmp	8000076a <toggle_23+0x6>
80000778:	80 00       	ld.sh	r0,r0[0x0]
8000077a:	21 1c       	sub	r12,17
8000077c:	80 00       	ld.sh	r0,r0[0x0]
8000077e:	1e 30       	cp.w	r0,pc

80000780 <toggle_24>:
void toggle_24(void){ while(1){ ledToggle(LED7_GPIO); delay_ms(30); } }                                                                                           
80000780:	eb cd 40 80 	pushm	r7,lr
80000784:	1a 97       	mov	r7,sp
80000786:	33 6c       	mov	r12,54
80000788:	f0 1f 00 03 	mcall	80000794 <toggle_24+0x14>
8000078c:	31 ec       	mov	r12,30
8000078e:	f0 1f 00 03 	mcall	80000798 <toggle_24+0x18>
80000792:	cf ab       	rjmp	80000786 <toggle_24+0x6>
80000794:	80 00       	ld.sh	r0,r0[0x0]
80000796:	21 1c       	sub	r12,17
80000798:	80 00       	ld.sh	r0,r0[0x0]
8000079a:	1e 30       	cp.w	r0,pc

8000079c <toggle_25>:
void toggle_25(void){ while(1){ ledToggle(LED0_GPIO); delay_ms(30); } }                                                                                           
8000079c:	eb cd 40 80 	pushm	r7,lr
800007a0:	1a 97       	mov	r7,sp
800007a2:	33 bc       	mov	r12,59
800007a4:	f0 1f 00 03 	mcall	800007b0 <toggle_25+0x14>
800007a8:	31 ec       	mov	r12,30
800007aa:	f0 1f 00 03 	mcall	800007b4 <toggle_25+0x18>
800007ae:	cf ab       	rjmp	800007a2 <toggle_25+0x6>
800007b0:	80 00       	ld.sh	r0,r0[0x0]
800007b2:	21 1c       	sub	r12,17
800007b4:	80 00       	ld.sh	r0,r0[0x0]
800007b6:	1e 30       	cp.w	r0,pc

800007b8 <toggle_26>:
void toggle_26(void){ while(1){ ledToggle(LED1_GPIO); delay_ms(30); } }                                                                                           
800007b8:	eb cd 40 80 	pushm	r7,lr
800007bc:	1a 97       	mov	r7,sp
800007be:	33 cc       	mov	r12,60
800007c0:	f0 1f 00 03 	mcall	800007cc <toggle_26+0x14>
800007c4:	31 ec       	mov	r12,30
800007c6:	f0 1f 00 03 	mcall	800007d0 <toggle_26+0x18>
800007ca:	cf ab       	rjmp	800007be <toggle_26+0x6>
800007cc:	80 00       	ld.sh	r0,r0[0x0]
800007ce:	21 1c       	sub	r12,17
800007d0:	80 00       	ld.sh	r0,r0[0x0]
800007d2:	1e 30       	cp.w	r0,pc

800007d4 <toggle_27>:
void toggle_27(void){ while(1){ ledToggle(LED2_GPIO); delay_ms(30); } }                                                                                           
800007d4:	eb cd 40 80 	pushm	r7,lr
800007d8:	1a 97       	mov	r7,sp
800007da:	33 dc       	mov	r12,61
800007dc:	f0 1f 00 03 	mcall	800007e8 <toggle_27+0x14>
800007e0:	31 ec       	mov	r12,30
800007e2:	f0 1f 00 03 	mcall	800007ec <toggle_27+0x18>
800007e6:	cf ab       	rjmp	800007da <toggle_27+0x6>
800007e8:	80 00       	ld.sh	r0,r0[0x0]
800007ea:	21 1c       	sub	r12,17
800007ec:	80 00       	ld.sh	r0,r0[0x0]
800007ee:	1e 30       	cp.w	r0,pc

800007f0 <toggle_28>:
void toggle_28(void){ while(1){ ledToggle(LED3_GPIO); delay_ms(30); } }                                                                                           
800007f0:	eb cd 40 80 	pushm	r7,lr
800007f4:	1a 97       	mov	r7,sp
800007f6:	33 ec       	mov	r12,62
800007f8:	f0 1f 00 03 	mcall	80000804 <toggle_28+0x14>
800007fc:	31 ec       	mov	r12,30
800007fe:	f0 1f 00 03 	mcall	80000808 <toggle_28+0x18>
80000802:	cf ab       	rjmp	800007f6 <toggle_28+0x6>
80000804:	80 00       	ld.sh	r0,r0[0x0]
80000806:	21 1c       	sub	r12,17
80000808:	80 00       	ld.sh	r0,r0[0x0]
8000080a:	1e 30       	cp.w	r0,pc

8000080c <toggle_29>:
void toggle_29(void){ while(1){ ledToggle(LED4_GPIO); delay_ms(30); } }                                                                                           
8000080c:	eb cd 40 80 	pushm	r7,lr
80000810:	1a 97       	mov	r7,sp
80000812:	33 3c       	mov	r12,51
80000814:	f0 1f 00 03 	mcall	80000820 <toggle_29+0x14>
80000818:	31 ec       	mov	r12,30
8000081a:	f0 1f 00 03 	mcall	80000824 <toggle_29+0x18>
8000081e:	cf ab       	rjmp	80000812 <toggle_29+0x6>
80000820:	80 00       	ld.sh	r0,r0[0x0]
80000822:	21 1c       	sub	r12,17
80000824:	80 00       	ld.sh	r0,r0[0x0]
80000826:	1e 30       	cp.w	r0,pc

80000828 <toggle_30>:
void toggle_30(void){ while(1){ ledToggle(LED5_GPIO); delay_ms(30); } }                                                                                           
80000828:	eb cd 40 80 	pushm	r7,lr
8000082c:	1a 97       	mov	r7,sp
8000082e:	33 4c       	mov	r12,52
80000830:	f0 1f 00 03 	mcall	8000083c <toggle_30+0x14>
80000834:	31 ec       	mov	r12,30
80000836:	f0 1f 00 03 	mcall	80000840 <toggle_30+0x18>
8000083a:	cf ab       	rjmp	8000082e <toggle_30+0x6>
8000083c:	80 00       	ld.sh	r0,r0[0x0]
8000083e:	21 1c       	sub	r12,17
80000840:	80 00       	ld.sh	r0,r0[0x0]
80000842:	1e 30       	cp.w	r0,pc

80000844 <toggle_31>:
void toggle_31(void){ while(1){ ledToggle(LED6_GPIO); delay_ms(30); } }                                                                                           
80000844:	eb cd 40 80 	pushm	r7,lr
80000848:	1a 97       	mov	r7,sp
8000084a:	33 5c       	mov	r12,53
8000084c:	f0 1f 00 03 	mcall	80000858 <toggle_31+0x14>
80000850:	31 ec       	mov	r12,30
80000852:	f0 1f 00 03 	mcall	8000085c <toggle_31+0x18>
80000856:	cf ab       	rjmp	8000084a <toggle_31+0x6>
80000858:	80 00       	ld.sh	r0,r0[0x0]
8000085a:	21 1c       	sub	r12,17
8000085c:	80 00       	ld.sh	r0,r0[0x0]
8000085e:	1e 30       	cp.w	r0,pc

80000860 <toggle_32>:
void toggle_32(void){ while(1){ ledToggle(LED7_GPIO); delay_ms(30); } }
80000860:	eb cd 40 80 	pushm	r7,lr
80000864:	1a 97       	mov	r7,sp
80000866:	33 6c       	mov	r12,54
80000868:	f0 1f 00 03 	mcall	80000874 <toggle_32+0x14>
8000086c:	31 ec       	mov	r12,30
8000086e:	f0 1f 00 03 	mcall	80000878 <toggle_32+0x18>
80000872:	cf ab       	rjmp	80000866 <toggle_32+0x6>
80000874:	80 00       	ld.sh	r0,r0[0x0]
80000876:	21 1c       	sub	r12,17
80000878:	80 00       	ld.sh	r0,r0[0x0]
8000087a:	1e 30       	cp.w	r0,pc

8000087c <hog_semaphores_task>:

void hog_semaphores_task(void)
{
8000087c:	eb cd 40 80 	pushm	r7,lr
80000880:	1a 97       	mov	r7,sp
	while(1)
	{
		ledOn(LED6_GPIO);
80000882:	33 5c       	mov	r12,53
80000884:	f0 1f 00 1b 	mcall	800008f0 <hog_semaphores_task+0x74>
		ROSA_semaphoreLock(S1);
80000888:	49 b8       	lddpc	r8,800008f4 <hog_semaphores_task+0x78>
8000088a:	70 08       	ld.w	r8,r8[0x0]
8000088c:	10 9c       	mov	r12,r8
8000088e:	f0 1f 00 1b 	mcall	800008f8 <hog_semaphores_task+0x7c>
		ROSA_delay(400);
80000892:	e0 6a 01 90 	mov	r10,400
80000896:	30 0b       	mov	r11,0
80000898:	f0 1f 00 19 	mcall	800008fc <hog_semaphores_task+0x80>
		ROSA_semaphoreLock(S2);
8000089c:	49 98       	lddpc	r8,80000900 <hog_semaphores_task+0x84>
8000089e:	70 08       	ld.w	r8,r8[0x0]
800008a0:	10 9c       	mov	r12,r8
800008a2:	f0 1f 00 16 	mcall	800008f8 <hog_semaphores_task+0x7c>
		ROSA_delay(400);
800008a6:	e0 6a 01 90 	mov	r10,400
800008aa:	30 0b       	mov	r11,0
800008ac:	f0 1f 00 14 	mcall	800008fc <hog_semaphores_task+0x80>
		ROSA_semaphoreLock(S3);
800008b0:	49 58       	lddpc	r8,80000904 <hog_semaphores_task+0x88>
800008b2:	70 08       	ld.w	r8,r8[0x0]
800008b4:	10 9c       	mov	r12,r8
800008b6:	f0 1f 00 11 	mcall	800008f8 <hog_semaphores_task+0x7c>
		ROSA_delay(400);
800008ba:	e0 6a 01 90 	mov	r10,400
800008be:	30 0b       	mov	r11,0
800008c0:	f0 1f 00 0f 	mcall	800008fc <hog_semaphores_task+0x80>
		ROSA_semaphoreLock(S4);
800008c4:	49 18       	lddpc	r8,80000908 <hog_semaphores_task+0x8c>
800008c6:	70 08       	ld.w	r8,r8[0x0]
800008c8:	10 9c       	mov	r12,r8
800008ca:	f0 1f 00 0c 	mcall	800008f8 <hog_semaphores_task+0x7c>
		//ROSA_semaphoreUnlock(S3);
		//ROSA_semaphoreUnlock(S2);
		//ROSA_semaphoreUnlock(S1);
		//ROSA_semaphoreUnlock(S4);

		ROSA_delay(800);
800008ce:	e0 6a 03 20 	mov	r10,800
800008d2:	30 0b       	mov	r11,0
800008d4:	f0 1f 00 0a 	mcall	800008fc <hog_semaphores_task+0x80>
		ledOff(LED6_GPIO);
800008d8:	33 5c       	mov	r12,53
800008da:	f0 1f 00 0d 	mcall	8000090c <hog_semaphores_task+0x90>

		hog_semaphores_task_handle = NULL;
800008de:	48 d8       	lddpc	r8,80000910 <hog_semaphores_task+0x94>
800008e0:	30 09       	mov	r9,0
800008e2:	91 09       	st.w	r8[0x0],r9
		ROSA_taskDelete(hog_semaphores_task_handle);
800008e4:	48 b8       	lddpc	r8,80000910 <hog_semaphores_task+0x94>
800008e6:	70 08       	ld.w	r8,r8[0x0]
800008e8:	10 9c       	mov	r12,r8
800008ea:	f0 1f 00 0b 	mcall	80000914 <hog_semaphores_task+0x98>
	}
800008ee:	cc ab       	rjmp	80000882 <hog_semaphores_task+0x6>
800008f0:	80 00       	ld.sh	r0,r0[0x0]
800008f2:	20 dc       	sub	r12,13
800008f4:	00 00       	add	r0,r0
800008f6:	05 20       	ld.uh	r0,r2++
800008f8:	80 00       	ld.sh	r0,r0[0x0]
800008fa:	02 a4       	st.w	r1++,r4
800008fc:	80 00       	ld.sh	r0,r0[0x0]
800008fe:	17 70       	ld.ub	r0,--r11
80000900:	00 00       	add	r0,r0
80000902:	05 24       	ld.uh	r4,r2++
80000904:	00 00       	add	r0,r0
80000906:	05 28       	ld.uh	r8,r2++
80000908:	00 00       	add	r0,r0
8000090a:	05 2c       	ld.uh	r12,r2++
8000090c:	80 00       	ld.sh	r0,r0[0x0]
8000090e:	20 fc       	sub	r12,15
80000910:	00 00       	add	r0,r0
80000912:	05 84       	ld.ub	r4,r2[0x0]
80000914:	80 00       	ld.sh	r0,r0[0x0]
80000916:	18 a8       	st.w	r12++,r8

80000918 <task1>:
}

void task1(void)
{
80000918:	eb cd 40 80 	pushm	r7,lr
8000091c:	1a 97       	mov	r7,sp
8000091e:	20 2d       	sub	sp,8
	uint64_t time = ROSA_getTickCount();
80000920:	f0 1f 00 0e 	mcall	80000958 <task1+0x40>
80000924:	14 98       	mov	r8,r10
80000926:	16 99       	mov	r9,r11
80000928:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S1);
8000092c:	48 c8       	lddpc	r8,8000095c <task1+0x44>
8000092e:	70 08       	ld.w	r8,r8[0x0]
80000930:	10 9c       	mov	r12,r8
80000932:	f0 1f 00 0c 	mcall	80000960 <task1+0x48>
		ledToggle(LED0_GPIO);
80000936:	33 bc       	mov	r12,59
80000938:	f0 1f 00 0b 	mcall	80000964 <task1+0x4c>
		ROSA_delayUntil(& time, 100);
8000093c:	ee c8 00 08 	sub	r8,r7,8
80000940:	36 4a       	mov	r10,100
80000942:	30 0b       	mov	r11,0
80000944:	10 9c       	mov	r12,r8
80000946:	f0 1f 00 09 	mcall	80000968 <task1+0x50>
		ROSA_semaphoreUnlock(S1);
8000094a:	48 58       	lddpc	r8,8000095c <task1+0x44>
8000094c:	70 08       	ld.w	r8,r8[0x0]
8000094e:	10 9c       	mov	r12,r8
80000950:	f0 1f 00 07 	mcall	8000096c <task1+0x54>
	}
80000954:	ce cb       	rjmp	8000092c <task1+0x14>
80000956:	00 00       	add	r0,r0
80000958:	80 00       	ld.sh	r0,r0[0x0]
8000095a:	12 2c       	rsub	r12,r9
8000095c:	00 00       	add	r0,r0
8000095e:	05 20       	ld.uh	r0,r2++
80000960:	80 00       	ld.sh	r0,r0[0x0]
80000962:	02 a4       	st.w	r1++,r4
80000964:	80 00       	ld.sh	r0,r0[0x0]
80000966:	21 1c       	sub	r12,17
80000968:	80 00       	ld.sh	r0,r0[0x0]
8000096a:	17 ec       	ld.ub	r12,r11[0x6]
8000096c:	80 00       	ld.sh	r0,r0[0x0]
8000096e:	03 64       	ld.uh	r4,--r1

80000970 <task2>:
}

void task2(void)
{
80000970:	eb cd 40 80 	pushm	r7,lr
80000974:	1a 97       	mov	r7,sp
80000976:	20 2d       	sub	sp,8
	ROSA_delay(5);
80000978:	30 5a       	mov	r10,5
8000097a:	30 0b       	mov	r11,0
8000097c:	f0 1f 00 0f 	mcall	800009b8 <task2+0x48>
	uint64_t time = ROSA_getTickCount();
80000980:	f0 1f 00 0f 	mcall	800009bc <task2+0x4c>
80000984:	14 98       	mov	r8,r10
80000986:	16 99       	mov	r9,r11
80000988:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S2);
8000098c:	48 d8       	lddpc	r8,800009c0 <task2+0x50>
8000098e:	70 08       	ld.w	r8,r8[0x0]
80000990:	10 9c       	mov	r12,r8
80000992:	f0 1f 00 0d 	mcall	800009c4 <task2+0x54>
		ledToggle(LED1_GPIO);
80000996:	33 cc       	mov	r12,60
80000998:	f0 1f 00 0c 	mcall	800009c8 <task2+0x58>
		ROSA_delayUntil(& time, 100);
8000099c:	ee c8 00 08 	sub	r8,r7,8
800009a0:	36 4a       	mov	r10,100
800009a2:	30 0b       	mov	r11,0
800009a4:	10 9c       	mov	r12,r8
800009a6:	f0 1f 00 0a 	mcall	800009cc <task2+0x5c>
		ROSA_semaphoreUnlock(S2);
800009aa:	48 68       	lddpc	r8,800009c0 <task2+0x50>
800009ac:	70 08       	ld.w	r8,r8[0x0]
800009ae:	10 9c       	mov	r12,r8
800009b0:	f0 1f 00 08 	mcall	800009d0 <task2+0x60>
	}
800009b4:	ce cb       	rjmp	8000098c <task2+0x1c>
800009b6:	00 00       	add	r0,r0
800009b8:	80 00       	ld.sh	r0,r0[0x0]
800009ba:	17 70       	ld.ub	r0,--r11
800009bc:	80 00       	ld.sh	r0,r0[0x0]
800009be:	12 2c       	rsub	r12,r9
800009c0:	00 00       	add	r0,r0
800009c2:	05 24       	ld.uh	r4,r2++
800009c4:	80 00       	ld.sh	r0,r0[0x0]
800009c6:	02 a4       	st.w	r1++,r4
800009c8:	80 00       	ld.sh	r0,r0[0x0]
800009ca:	21 1c       	sub	r12,17
800009cc:	80 00       	ld.sh	r0,r0[0x0]
800009ce:	17 ec       	ld.ub	r12,r11[0x6]
800009d0:	80 00       	ld.sh	r0,r0[0x0]
800009d2:	03 64       	ld.uh	r4,--r1

800009d4 <task3>:
}

void task3(void)
{
800009d4:	eb cd 40 80 	pushm	r7,lr
800009d8:	1a 97       	mov	r7,sp
800009da:	20 2d       	sub	sp,8
	ROSA_delay(10);
800009dc:	30 aa       	mov	r10,10
800009de:	30 0b       	mov	r11,0
800009e0:	f0 1f 00 0f 	mcall	80000a1c <task3+0x48>
	uint64_t time = ROSA_getTickCount();
800009e4:	f0 1f 00 0f 	mcall	80000a20 <task3+0x4c>
800009e8:	14 98       	mov	r8,r10
800009ea:	16 99       	mov	r9,r11
800009ec:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S3);
800009f0:	48 d8       	lddpc	r8,80000a24 <task3+0x50>
800009f2:	70 08       	ld.w	r8,r8[0x0]
800009f4:	10 9c       	mov	r12,r8
800009f6:	f0 1f 00 0d 	mcall	80000a28 <task3+0x54>
		ledToggle(LED2_GPIO);
800009fa:	33 dc       	mov	r12,61
800009fc:	f0 1f 00 0c 	mcall	80000a2c <task3+0x58>
		ROSA_delayUntil(& time, 100);
80000a00:	ee c8 00 08 	sub	r8,r7,8
80000a04:	36 4a       	mov	r10,100
80000a06:	30 0b       	mov	r11,0
80000a08:	10 9c       	mov	r12,r8
80000a0a:	f0 1f 00 0a 	mcall	80000a30 <task3+0x5c>
		ROSA_semaphoreUnlock(S3);
80000a0e:	48 68       	lddpc	r8,80000a24 <task3+0x50>
80000a10:	70 08       	ld.w	r8,r8[0x0]
80000a12:	10 9c       	mov	r12,r8
80000a14:	f0 1f 00 08 	mcall	80000a34 <task3+0x60>
	}
80000a18:	ce cb       	rjmp	800009f0 <task3+0x1c>
80000a1a:	00 00       	add	r0,r0
80000a1c:	80 00       	ld.sh	r0,r0[0x0]
80000a1e:	17 70       	ld.ub	r0,--r11
80000a20:	80 00       	ld.sh	r0,r0[0x0]
80000a22:	12 2c       	rsub	r12,r9
80000a24:	00 00       	add	r0,r0
80000a26:	05 28       	ld.uh	r8,r2++
80000a28:	80 00       	ld.sh	r0,r0[0x0]
80000a2a:	02 a4       	st.w	r1++,r4
80000a2c:	80 00       	ld.sh	r0,r0[0x0]
80000a2e:	21 1c       	sub	r12,17
80000a30:	80 00       	ld.sh	r0,r0[0x0]
80000a32:	17 ec       	ld.ub	r12,r11[0x6]
80000a34:	80 00       	ld.sh	r0,r0[0x0]
80000a36:	03 64       	ld.uh	r4,--r1

80000a38 <task4>:
}

void task4(void)
{
80000a38:	eb cd 40 80 	pushm	r7,lr
80000a3c:	1a 97       	mov	r7,sp
80000a3e:	20 2d       	sub	sp,8
	ROSA_delay(15);
80000a40:	30 fa       	mov	r10,15
80000a42:	30 0b       	mov	r11,0
80000a44:	f0 1f 00 0f 	mcall	80000a80 <task4+0x48>
	uint64_t time = ROSA_getTickCount();
80000a48:	f0 1f 00 0f 	mcall	80000a84 <task4+0x4c>
80000a4c:	14 98       	mov	r8,r10
80000a4e:	16 99       	mov	r9,r11
80000a50:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S4);
80000a54:	48 d8       	lddpc	r8,80000a88 <task4+0x50>
80000a56:	70 08       	ld.w	r8,r8[0x0]
80000a58:	10 9c       	mov	r12,r8
80000a5a:	f0 1f 00 0d 	mcall	80000a8c <task4+0x54>
		ledToggle(LED3_GPIO);
80000a5e:	33 ec       	mov	r12,62
80000a60:	f0 1f 00 0c 	mcall	80000a90 <task4+0x58>
		ROSA_delayUntil(& time, 100);
80000a64:	ee c8 00 08 	sub	r8,r7,8
80000a68:	36 4a       	mov	r10,100
80000a6a:	30 0b       	mov	r11,0
80000a6c:	10 9c       	mov	r12,r8
80000a6e:	f0 1f 00 0a 	mcall	80000a94 <task4+0x5c>
		ROSA_semaphoreUnlock(S4);
80000a72:	48 68       	lddpc	r8,80000a88 <task4+0x50>
80000a74:	70 08       	ld.w	r8,r8[0x0]
80000a76:	10 9c       	mov	r12,r8
80000a78:	f0 1f 00 08 	mcall	80000a98 <task4+0x60>
	}
80000a7c:	ce cb       	rjmp	80000a54 <task4+0x1c>
80000a7e:	00 00       	add	r0,r0
80000a80:	80 00       	ld.sh	r0,r0[0x0]
80000a82:	17 70       	ld.ub	r0,--r11
80000a84:	80 00       	ld.sh	r0,r0[0x0]
80000a86:	12 2c       	rsub	r12,r9
80000a88:	00 00       	add	r0,r0
80000a8a:	05 2c       	ld.uh	r12,r2++
80000a8c:	80 00       	ld.sh	r0,r0[0x0]
80000a8e:	02 a4       	st.w	r1++,r4
80000a90:	80 00       	ld.sh	r0,r0[0x0]
80000a92:	21 1c       	sub	r12,17
80000a94:	80 00       	ld.sh	r0,r0[0x0]
80000a96:	17 ec       	ld.ub	r12,r11[0x6]
80000a98:	80 00       	ld.sh	r0,r0[0x0]
80000a9a:	03 64       	ld.uh	r4,--r1

80000a9c <arbiter_task>:
}

void arbiter_task(void)
{
80000a9c:	eb cd 40 80 	pushm	r7,lr
80000aa0:	1a 97       	mov	r7,sp
80000aa2:	c0 28       	rjmp	80000aa6 <arbiter_task+0xa>
		ROSA_delay(2000);
		if( hog_semaphores_task_handle == NULL )
		{
			ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 2);
		}
	}
80000aa4:	d7 03       	nop

void arbiter_task(void)
{
	while(1)
	{
		ROSA_delay(2000);
80000aa6:	e0 6a 07 d0 	mov	r10,2000
80000aaa:	30 0b       	mov	r11,0
80000aac:	f0 1f 00 07 	mcall	80000ac8 <arbiter_task+0x2c>
		if( hog_semaphores_task_handle == NULL )
80000ab0:	48 78       	lddpc	r8,80000acc <arbiter_task+0x30>
80000ab2:	70 08       	ld.w	r8,r8[0x0]
80000ab4:	58 08       	cp.w	r8,0
80000ab6:	cf 71       	brne	80000aa4 <arbiter_task+0x8>
		{
			ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 2);
80000ab8:	30 28       	mov	r8,2
80000aba:	34 09       	mov	r9,64
80000abc:	48 5a       	lddpc	r10,80000ad0 <arbiter_task+0x34>
80000abe:	48 6b       	lddpc	r11,80000ad4 <arbiter_task+0x38>
80000ac0:	48 3c       	lddpc	r12,80000acc <arbiter_task+0x30>
80000ac2:	f0 1f 00 06 	mcall	80000ad8 <arbiter_task+0x3c>
		}
	}
80000ac6:	cf 0b       	rjmp	80000aa6 <arbiter_task+0xa>
80000ac8:	80 00       	ld.sh	r0,r0[0x0]
80000aca:	17 70       	ld.ub	r0,--r11
80000acc:	00 00       	add	r0,r0
80000ace:	05 84       	ld.ub	r4,r2[0x0]
80000ad0:	80 00       	ld.sh	r0,r0[0x0]
80000ad2:	08 7c       	tst	r12,r4
80000ad4:	80 00       	ld.sh	r0,r0[0x0]
80000ad6:	04 a4       	st.w	r2++,r4
80000ad8:	80 00       	ld.sh	r0,r0[0x0]
80000ada:	13 bc       	ld.ub	r12,r9[0x3]

80000adc <semaphores_task>:
ROSA_taskHandle_t led3_task_handle = NULL;
ROSA_taskHandle_t led5_task_handle = NULL;
ROSA_taskHandle_t led7_task_handle = NULL;

void semaphores_task(void)
{
80000adc:	eb cd 40 80 	pushm	r7,lr
80000ae0:	1a 97       	mov	r7,sp
	while(1)
	{
		ROSA_semaphoreLock(S3);
80000ae2:	4a 58       	lddpc	r8,80000b74 <semaphores_task+0x98>
80000ae4:	70 08       	ld.w	r8,r8[0x0]
80000ae6:	10 9c       	mov	r12,r8
80000ae8:	f0 1f 00 24 	mcall	80000b78 <semaphores_task+0x9c>
		ledOn(LED0_GPIO);
80000aec:	33 bc       	mov	r12,59
80000aee:	f0 1f 00 24 	mcall	80000b7c <semaphores_task+0xa0>
		delay_ms(1000);
80000af2:	e0 6c 03 e8 	mov	r12,1000
80000af6:	f0 1f 00 23 	mcall	80000b80 <semaphores_task+0xa4>
		
		ROSA_semaphoreLock(S2);
80000afa:	4a 38       	lddpc	r8,80000b84 <semaphores_task+0xa8>
80000afc:	70 08       	ld.w	r8,r8[0x0]
80000afe:	10 9c       	mov	r12,r8
80000b00:	f0 1f 00 1e 	mcall	80000b78 <semaphores_task+0x9c>
		ledOn(LED1_GPIO);
80000b04:	33 cc       	mov	r12,60
80000b06:	f0 1f 00 1e 	mcall	80000b7c <semaphores_task+0xa0>
		delay_ms(1000);
80000b0a:	e0 6c 03 e8 	mov	r12,1000
80000b0e:	f0 1f 00 1d 	mcall	80000b80 <semaphores_task+0xa4>

		ROSA_semaphoreLock(S1);
80000b12:	49 e8       	lddpc	r8,80000b88 <semaphores_task+0xac>
80000b14:	70 08       	ld.w	r8,r8[0x0]
80000b16:	10 9c       	mov	r12,r8
80000b18:	f0 1f 00 18 	mcall	80000b78 <semaphores_task+0x9c>
		ledOn(LED2_GPIO);
80000b1c:	33 dc       	mov	r12,61
80000b1e:	f0 1f 00 18 	mcall	80000b7c <semaphores_task+0xa0>
		delay_ms(1000);
80000b22:	e0 6c 03 e8 	mov	r12,1000
80000b26:	f0 1f 00 17 	mcall	80000b80 <semaphores_task+0xa4>
		
		ledOff(LED2_GPIO);
80000b2a:	33 dc       	mov	r12,61
80000b2c:	f0 1f 00 18 	mcall	80000b8c <semaphores_task+0xb0>
		ROSA_semaphoreUnlock(S1);
80000b30:	49 68       	lddpc	r8,80000b88 <semaphores_task+0xac>
80000b32:	70 08       	ld.w	r8,r8[0x0]
80000b34:	10 9c       	mov	r12,r8
80000b36:	f0 1f 00 17 	mcall	80000b90 <semaphores_task+0xb4>
		delay_ms(1000);
80000b3a:	e0 6c 03 e8 	mov	r12,1000
80000b3e:	f0 1f 00 11 	mcall	80000b80 <semaphores_task+0xa4>

		ledOff(LED1_GPIO);
80000b42:	33 cc       	mov	r12,60
80000b44:	f0 1f 00 12 	mcall	80000b8c <semaphores_task+0xb0>
		ROSA_semaphoreUnlock(S2);
80000b48:	48 f8       	lddpc	r8,80000b84 <semaphores_task+0xa8>
80000b4a:	70 08       	ld.w	r8,r8[0x0]
80000b4c:	10 9c       	mov	r12,r8
80000b4e:	f0 1f 00 11 	mcall	80000b90 <semaphores_task+0xb4>
		delay_ms(1000);
80000b52:	e0 6c 03 e8 	mov	r12,1000
80000b56:	f0 1f 00 0b 	mcall	80000b80 <semaphores_task+0xa4>
		
		ledOff(LED0_GPIO);
80000b5a:	33 bc       	mov	r12,59
80000b5c:	f0 1f 00 0c 	mcall	80000b8c <semaphores_task+0xb0>
		ROSA_semaphoreUnlock(S3);
80000b60:	48 58       	lddpc	r8,80000b74 <semaphores_task+0x98>
80000b62:	70 08       	ld.w	r8,r8[0x0]
80000b64:	10 9c       	mov	r12,r8
80000b66:	f0 1f 00 0b 	mcall	80000b90 <semaphores_task+0xb4>
		delay_ms(1000);
80000b6a:	e0 6c 03 e8 	mov	r12,1000
80000b6e:	f0 1f 00 05 	mcall	80000b80 <semaphores_task+0xa4>
	}
80000b72:	cb 8b       	rjmp	80000ae2 <semaphores_task+0x6>
80000b74:	00 00       	add	r0,r0
80000b76:	05 28       	ld.uh	r8,r2++
80000b78:	80 00       	ld.sh	r0,r0[0x0]
80000b7a:	02 a4       	st.w	r1++,r4
80000b7c:	80 00       	ld.sh	r0,r0[0x0]
80000b7e:	20 dc       	sub	r12,13
80000b80:	80 00       	ld.sh	r0,r0[0x0]
80000b82:	1e 30       	cp.w	r0,pc
80000b84:	00 00       	add	r0,r0
80000b86:	05 24       	ld.uh	r4,r2++
80000b88:	00 00       	add	r0,r0
80000b8a:	05 20       	ld.uh	r0,r2++
80000b8c:	80 00       	ld.sh	r0,r0[0x0]
80000b8e:	20 fc       	sub	r12,15
80000b90:	80 00       	ld.sh	r0,r0[0x0]
80000b92:	03 64       	ld.uh	r4,--r1

80000b94 <led3_task>:
}

void led3_task(void)
{
80000b94:	eb cd 40 80 	pushm	r7,lr
80000b98:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED3_GPIO);
80000b9a:	33 ec       	mov	r12,62
80000b9c:	f0 1f 00 04 	mcall	80000bac <led3_task+0x18>
		ROSA_delay(100);
80000ba0:	36 4a       	mov	r10,100
80000ba2:	30 0b       	mov	r11,0
80000ba4:	f0 1f 00 03 	mcall	80000bb0 <led3_task+0x1c>
	}
80000ba8:	cf 9b       	rjmp	80000b9a <led3_task+0x6>
80000baa:	00 00       	add	r0,r0
80000bac:	80 00       	ld.sh	r0,r0[0x0]
80000bae:	21 1c       	sub	r12,17
80000bb0:	80 00       	ld.sh	r0,r0[0x0]
80000bb2:	17 70       	ld.ub	r0,--r11

80000bb4 <led5_task>:
}

void led5_task(void)
{
80000bb4:	eb cd 40 80 	pushm	r7,lr
80000bb8:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED5_GPIO);
80000bba:	33 4c       	mov	r12,52
80000bbc:	f0 1f 00 04 	mcall	80000bcc <led5_task+0x18>
		ROSA_delay(100);
80000bc0:	36 4a       	mov	r10,100
80000bc2:	30 0b       	mov	r11,0
80000bc4:	f0 1f 00 03 	mcall	80000bd0 <led5_task+0x1c>
	}
80000bc8:	cf 9b       	rjmp	80000bba <led5_task+0x6>
80000bca:	00 00       	add	r0,r0
80000bcc:	80 00       	ld.sh	r0,r0[0x0]
80000bce:	21 1c       	sub	r12,17
80000bd0:	80 00       	ld.sh	r0,r0[0x0]
80000bd2:	17 70       	ld.ub	r0,--r11

80000bd4 <led7_task>:
}

void led7_task(void)
{
80000bd4:	eb cd 40 80 	pushm	r7,lr
80000bd8:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED7_GPIO);
80000bda:	33 6c       	mov	r12,54
80000bdc:	f0 1f 00 04 	mcall	80000bec <led7_task+0x18>
		ROSA_delay(100);
80000be0:	36 4a       	mov	r10,100
80000be2:	30 0b       	mov	r11,0
80000be4:	f0 1f 00 03 	mcall	80000bf0 <led7_task+0x1c>
	}
80000be8:	cf 9b       	rjmp	80000bda <led7_task+0x6>
80000bea:	00 00       	add	r0,r0
80000bec:	80 00       	ld.sh	r0,r0[0x0]
80000bee:	21 1c       	sub	r12,17
80000bf0:	80 00       	ld.sh	r0,r0[0x0]
80000bf2:	17 70       	ld.ub	r0,--r11

80000bf4 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000bf4:	eb cd 40 80 	pushm	r7,lr
80000bf8:	1a 97       	mov	r7,sp
80000bfa:	20 1d       	sub	sp,4
	//Initialize the ROSA kernel
	ROSA_init();
80000bfc:	f0 1f 00 de 	mcall	80000f74 <main+0x380>
	
	int button_pressed = 0;
80000c00:	30 08       	mov	r8,0
80000c02:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while( ! button_pressed )
80000c06:	e0 8f 01 ae 	bral	80000f62 <main+0x36e>
	{
		if( isButton(PUSH_BUTTON_0) )
80000c0a:	35 8c       	mov	r12,88
80000c0c:	f0 1f 00 db 	mcall	80000f78 <main+0x384>
80000c10:	18 98       	mov	r8,r12
80000c12:	58 08       	cp.w	r8,0
80000c14:	c3 d0       	breq	80000c8e <main+0x9a>
		{
			ROSA_taskCreate(& semaphores_task_handle, "tsk1", semaphores_task, 0x40, 7);
80000c16:	30 78       	mov	r8,7
80000c18:	34 09       	mov	r9,64
80000c1a:	fe fa 03 62 	ld.w	r10,pc[866]
80000c1e:	fe fb 03 62 	ld.w	r11,pc[866]
80000c22:	fe fc 03 62 	ld.w	r12,pc[866]
80000c26:	f0 1f 00 d9 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& led3_task_handle, "led3", led3_task, 0x40, 2);
80000c2a:	30 28       	mov	r8,2
80000c2c:	34 09       	mov	r9,64
80000c2e:	fe fa 03 5e 	ld.w	r10,pc[862]
80000c32:	fe fb 03 5e 	ld.w	r11,pc[862]
80000c36:	fe fc 03 5e 	ld.w	r12,pc[862]
80000c3a:	f0 1f 00 d4 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& led5_task_handle, "led5", led5_task, 0x40, 4);
80000c3e:	30 48       	mov	r8,4
80000c40:	34 09       	mov	r9,64
80000c42:	fe fa 03 56 	ld.w	r10,pc[854]
80000c46:	fe fb 03 56 	ld.w	r11,pc[854]
80000c4a:	fe fc 03 56 	ld.w	r12,pc[854]
80000c4e:	f0 1f 00 cf 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& led7_task_handle, "led7", led7_task, 0x40, 6);
80000c52:	30 68       	mov	r8,6
80000c54:	34 09       	mov	r9,64
80000c56:	fe fa 03 4e 	ld.w	r10,pc[846]
80000c5a:	fe fb 03 4e 	ld.w	r11,pc[846]
80000c5e:	fe fc 03 4e 	ld.w	r12,pc[846]
80000c62:	f0 1f 00 ca 	mcall	80000f88 <main+0x394>
			ROSA_semaphoreCreate(&S1,1);
80000c66:	30 1b       	mov	r11,1
80000c68:	fe fc 03 48 	ld.w	r12,pc[840]
80000c6c:	f0 1f 00 d2 	mcall	80000fb4 <main+0x3c0>
			ROSA_semaphoreCreate(&S2,3);
80000c70:	30 3b       	mov	r11,3
80000c72:	fe fc 03 46 	ld.w	r12,pc[838]
80000c76:	f0 1f 00 d0 	mcall	80000fb4 <main+0x3c0>
			ROSA_semaphoreCreate(&S3,5);
80000c7a:	30 5b       	mov	r11,5
80000c7c:	fe fc 03 40 	ld.w	r12,pc[832]
80000c80:	f0 1f 00 cd 	mcall	80000fb4 <main+0x3c0>
			
			button_pressed = 1;
80000c84:	30 18       	mov	r8,1
80000c86:	ef 48 ff fc 	st.w	r7[-4],r8
80000c8a:	e0 8f 01 6c 	bral	80000f62 <main+0x36e>
		}
		else if( isButton(PUSH_BUTTON_1) )
80000c8e:	35 5c       	mov	r12,85
80000c90:	f0 1f 00 ba 	mcall	80000f78 <main+0x384>
80000c94:	18 98       	mov	r8,r12
80000c96:	58 08       	cp.w	r8,0
80000c98:	c4 c0       	breq	80000d30 <main+0x13c>
		{
			//ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 2);
			ROSA_taskCreate(& task1_handle,					"tsk1", task1, STACK_SIZE, 3);
80000c9a:	30 38       	mov	r8,3
80000c9c:	34 09       	mov	r9,64
80000c9e:	fe fa 03 22 	ld.w	r10,pc[802]
80000ca2:	fe fb 02 de 	ld.w	r11,pc[734]
80000ca6:	fe fc 03 1e 	ld.w	r12,pc[798]
80000caa:	f0 1f 00 b8 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task2_handle,					"tsk2", task2, STACK_SIZE, 3);
80000cae:	30 38       	mov	r8,3
80000cb0:	34 09       	mov	r9,64
80000cb2:	fe fa 03 16 	ld.w	r10,pc[790]
80000cb6:	fe fb 03 16 	ld.w	r11,pc[790]
80000cba:	fe fc 03 16 	ld.w	r12,pc[790]
80000cbe:	f0 1f 00 b3 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task3_handle,					"tsk3", task3, STACK_SIZE, 3);
80000cc2:	30 38       	mov	r8,3
80000cc4:	34 09       	mov	r9,64
80000cc6:	fe fa 03 0e 	ld.w	r10,pc[782]
80000cca:	fe fb 03 0e 	ld.w	r11,pc[782]
80000cce:	fe fc 03 0e 	ld.w	r12,pc[782]
80000cd2:	f0 1f 00 ae 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task4_handle,					"tsk4", task4, STACK_SIZE, 3);
80000cd6:	30 38       	mov	r8,3
80000cd8:	34 09       	mov	r9,64
80000cda:	fe fa 03 06 	ld.w	r10,pc[774]
80000cde:	fe fb 03 06 	ld.w	r11,pc[774]
80000ce2:	fe fc 03 06 	ld.w	r12,pc[774]
80000ce6:	f0 1f 00 a9 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& arbiter_task_handle,			"arbt", arbiter_task, STACK_SIZE, 1);
80000cea:	30 18       	mov	r8,1
80000cec:	34 09       	mov	r9,64
80000cee:	fe fa 02 fe 	ld.w	r10,pc[766]
80000cf2:	fe fb 02 fe 	ld.w	r11,pc[766]
80000cf6:	fe fc 02 fe 	ld.w	r12,pc[766]
80000cfa:	f0 1f 00 a4 	mcall	80000f88 <main+0x394>
			ROSA_semaphoreCreate(& S1, 3);
80000cfe:	30 3b       	mov	r11,3
80000d00:	fe fc 02 b0 	ld.w	r12,pc[688]
80000d04:	f0 1f 00 ac 	mcall	80000fb4 <main+0x3c0>
			ROSA_semaphoreCreate(& S2, 3);
80000d08:	30 3b       	mov	r11,3
80000d0a:	fe fc 02 ae 	ld.w	r12,pc[686]
80000d0e:	f0 1f 00 aa 	mcall	80000fb4 <main+0x3c0>
			ROSA_semaphoreCreate(& S3, 3);
80000d12:	30 3b       	mov	r11,3
80000d14:	fe fc 02 a8 	ld.w	r12,pc[680]
80000d18:	f0 1f 00 a7 	mcall	80000fb4 <main+0x3c0>
			ROSA_semaphoreCreate(& S4, 3);
80000d1c:	30 3b       	mov	r11,3
80000d1e:	fe fc 02 da 	ld.w	r12,pc[730]
80000d22:	f0 1f 00 a5 	mcall	80000fb4 <main+0x3c0>
			
			button_pressed = 1;
80000d26:	30 18       	mov	r8,1
80000d28:	ef 48 ff fc 	st.w	r7[-4],r8
80000d2c:	e0 8f 01 1b 	bral	80000f62 <main+0x36e>
		}
		else if( isButton(PUSH_BUTTON_2) )
80000d30:	35 2c       	mov	r12,82
80000d32:	f0 1f 00 92 	mcall	80000f78 <main+0x384>
80000d36:	18 98       	mov	r8,r12
80000d38:	58 08       	cp.w	r8,0
80000d3a:	e0 80 01 14 	breq	80000f62 <main+0x36e>
		{
			ROSA_taskCreate(& task_handle_1, "fsdj", toggle_1, STACK_SIZE, 3);
80000d3e:	30 38       	mov	r8,3
80000d40:	34 09       	mov	r9,64
80000d42:	fe fa 02 ba 	ld.w	r10,pc[698]
80000d46:	fe fb 02 ba 	ld.w	r11,pc[698]
80000d4a:	fe fc 02 ba 	ld.w	r12,pc[698]
80000d4e:	f0 1f 00 8f 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_2, "test", toggle_2, STACK_SIZE, 3);
80000d52:	30 38       	mov	r8,3
80000d54:	34 09       	mov	r9,64
80000d56:	fe fa 02 b2 	ld.w	r10,pc[690]
80000d5a:	fe fb 02 b2 	ld.w	r11,pc[690]
80000d5e:	fe fc 02 b2 	ld.w	r12,pc[690]
80000d62:	f0 1f 00 8a 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_3, "test", toggle_3, STACK_SIZE, 3);
80000d66:	30 38       	mov	r8,3
80000d68:	34 09       	mov	r9,64
80000d6a:	fe fa 02 aa 	ld.w	r10,pc[682]
80000d6e:	fe fb 02 9e 	ld.w	r11,pc[670]
80000d72:	fe fc 02 a6 	ld.w	r12,pc[678]
80000d76:	f0 1f 00 85 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_4, "test", toggle_4, STACK_SIZE, 3);
80000d7a:	30 38       	mov	r8,3
80000d7c:	34 09       	mov	r9,64
80000d7e:	fe fa 02 9e 	ld.w	r10,pc[670]
80000d82:	fe fb 02 8a 	ld.w	r11,pc[650]
80000d86:	fe fc 02 9a 	ld.w	r12,pc[666]
80000d8a:	f0 1f 00 80 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_5, "test", toggle_5, STACK_SIZE, 3);
80000d8e:	30 38       	mov	r8,3
80000d90:	34 09       	mov	r9,64
80000d92:	fe fa 02 92 	ld.w	r10,pc[658]
80000d96:	fe fb 02 76 	ld.w	r11,pc[630]
80000d9a:	fe fc 02 8e 	ld.w	r12,pc[654]
80000d9e:	f0 1f 00 7b 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_6, "test", toggle_6, STACK_SIZE, 3);
80000da2:	30 38       	mov	r8,3
80000da4:	34 09       	mov	r9,64
80000da6:	fe fa 02 86 	ld.w	r10,pc[646]
80000daa:	fe fb 02 62 	ld.w	r11,pc[610]
80000dae:	fe fc 02 82 	ld.w	r12,pc[642]
80000db2:	f0 1f 00 76 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_7, "test", toggle_7, STACK_SIZE, 3);
80000db6:	30 38       	mov	r8,3
80000db8:	34 09       	mov	r9,64
80000dba:	fe fa 02 7a 	ld.w	r10,pc[634]
80000dbe:	fe fb 02 4e 	ld.w	r11,pc[590]
80000dc2:	fe fc 02 76 	ld.w	r12,pc[630]
80000dc6:	f0 1f 00 71 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_8, "test", toggle_8, STACK_SIZE, 3);
80000dca:	30 38       	mov	r8,3
80000dcc:	34 09       	mov	r9,64
80000dce:	fe fa 02 6e 	ld.w	r10,pc[622]
80000dd2:	fe fb 02 3a 	ld.w	r11,pc[570]
80000dd6:	fe fc 02 6a 	ld.w	r12,pc[618]
80000dda:	f0 1f 00 6c 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_9, "test", toggle_9, STACK_SIZE, 3);
80000dde:	30 38       	mov	r8,3
80000de0:	34 09       	mov	r9,64
80000de2:	fe fa 02 62 	ld.w	r10,pc[610]
80000de6:	fe fb 02 26 	ld.w	r11,pc[550]
80000dea:	fe fc 02 5e 	ld.w	r12,pc[606]
80000dee:	f0 1f 00 67 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_10, "test", toggle_10, STACK_SIZE, 3);
80000df2:	30 38       	mov	r8,3
80000df4:	34 09       	mov	r9,64
80000df6:	fe fa 02 56 	ld.w	r10,pc[598]
80000dfa:	fe fb 02 12 	ld.w	r11,pc[530]
80000dfe:	fe fc 02 52 	ld.w	r12,pc[594]
80000e02:	f0 1f 00 62 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_11, "test", toggle_11, STACK_SIZE, 3);
80000e06:	30 38       	mov	r8,3
80000e08:	34 09       	mov	r9,64
80000e0a:	fe fa 02 4a 	ld.w	r10,pc[586]
80000e0e:	fe fb 01 fe 	ld.w	r11,pc[510]
80000e12:	fe fc 02 46 	ld.w	r12,pc[582]
80000e16:	f0 1f 00 5d 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_12, "test", toggle_12, STACK_SIZE, 3);
80000e1a:	30 38       	mov	r8,3
80000e1c:	34 09       	mov	r9,64
80000e1e:	fe fa 02 3e 	ld.w	r10,pc[574]
80000e22:	4f bb       	lddpc	r11,8000100c <main+0x418>
80000e24:	fe fc 02 3c 	ld.w	r12,pc[572]
80000e28:	f0 1f 00 58 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_13, "test", toggle_13, STACK_SIZE, 3);
80000e2c:	30 38       	mov	r8,3
80000e2e:	34 09       	mov	r9,64
80000e30:	fe fa 02 34 	ld.w	r10,pc[564]
80000e34:	4f 6b       	lddpc	r11,8000100c <main+0x418>
80000e36:	fe fc 02 32 	ld.w	r12,pc[562]
80000e3a:	f0 1f 00 54 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_14, "test", toggle_14, STACK_SIZE, 3);
80000e3e:	30 38       	mov	r8,3
80000e40:	34 09       	mov	r9,64
80000e42:	fe fa 02 2a 	ld.w	r10,pc[554]
80000e46:	4f 2b       	lddpc	r11,8000100c <main+0x418>
80000e48:	fe fc 02 28 	ld.w	r12,pc[552]
80000e4c:	f0 1f 00 4f 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_15, "test", toggle_15, STACK_SIZE, 3);
80000e50:	30 38       	mov	r8,3
80000e52:	34 09       	mov	r9,64
80000e54:	fe fa 02 20 	ld.w	r10,pc[544]
80000e58:	4e db       	lddpc	r11,8000100c <main+0x418>
80000e5a:	fe fc 02 1e 	ld.w	r12,pc[542]
80000e5e:	f0 1f 00 4b 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_16, "test", toggle_16, STACK_SIZE, 3);
80000e62:	30 38       	mov	r8,3
80000e64:	34 09       	mov	r9,64
80000e66:	fe fa 02 16 	ld.w	r10,pc[534]
80000e6a:	4e 9b       	lddpc	r11,8000100c <main+0x418>
80000e6c:	fe fc 02 14 	ld.w	r12,pc[532]
80000e70:	f0 1f 00 46 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_17, "test", toggle_17, STACK_SIZE, 3);
80000e74:	30 38       	mov	r8,3
80000e76:	34 09       	mov	r9,64
80000e78:	fe fa 02 0c 	ld.w	r10,pc[524]
80000e7c:	4e 4b       	lddpc	r11,8000100c <main+0x418>
80000e7e:	fe fc 02 0a 	ld.w	r12,pc[522]
80000e82:	f0 1f 00 42 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_18, "test", toggle_18, STACK_SIZE, 3);
80000e86:	30 38       	mov	r8,3
80000e88:	34 09       	mov	r9,64
80000e8a:	fe fa 02 02 	ld.w	r10,pc[514]
80000e8e:	4e 0b       	lddpc	r11,8000100c <main+0x418>
80000e90:	fe fc 02 00 	ld.w	r12,pc[512]
80000e94:	f0 1f 00 3d 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_19, "test", toggle_19, STACK_SIZE, 3);
80000e98:	30 38       	mov	r8,3
80000e9a:	34 09       	mov	r9,64
80000e9c:	4f ea       	lddpc	r10,80001094 <main+0x4a0>
80000e9e:	4d cb       	lddpc	r11,8000100c <main+0x418>
80000ea0:	4f ec       	lddpc	r12,80001098 <main+0x4a4>
80000ea2:	f0 1f 00 3a 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_20, "test", toggle_20, STACK_SIZE, 3);
80000ea6:	30 38       	mov	r8,3
80000ea8:	34 09       	mov	r9,64
80000eaa:	4f da       	lddpc	r10,8000109c <main+0x4a8>
80000eac:	4d 8b       	lddpc	r11,8000100c <main+0x418>
80000eae:	4f dc       	lddpc	r12,800010a0 <main+0x4ac>
80000eb0:	f0 1f 00 36 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_21, "test", toggle_21, STACK_SIZE, 3);
80000eb4:	30 38       	mov	r8,3
80000eb6:	34 09       	mov	r9,64
80000eb8:	4f ba       	lddpc	r10,800010a4 <main+0x4b0>
80000eba:	4d 5b       	lddpc	r11,8000100c <main+0x418>
80000ebc:	4f bc       	lddpc	r12,800010a8 <main+0x4b4>
80000ebe:	f0 1f 00 33 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_22, "test", toggle_22, STACK_SIZE, 3);
80000ec2:	30 38       	mov	r8,3
80000ec4:	34 09       	mov	r9,64
80000ec6:	4f aa       	lddpc	r10,800010ac <main+0x4b8>
80000ec8:	4d 1b       	lddpc	r11,8000100c <main+0x418>
80000eca:	4f ac       	lddpc	r12,800010b0 <main+0x4bc>
80000ecc:	f0 1f 00 2f 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_23, "test", toggle_23, STACK_SIZE, 3);
80000ed0:	30 38       	mov	r8,3
80000ed2:	34 09       	mov	r9,64
80000ed4:	4f 8a       	lddpc	r10,800010b4 <main+0x4c0>
80000ed6:	4c eb       	lddpc	r11,8000100c <main+0x418>
80000ed8:	4f 8c       	lddpc	r12,800010b8 <main+0x4c4>
80000eda:	f0 1f 00 2c 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_24, "test", toggle_24, STACK_SIZE, 3);
80000ede:	30 38       	mov	r8,3
80000ee0:	34 09       	mov	r9,64
80000ee2:	4f 7a       	lddpc	r10,800010bc <main+0x4c8>
80000ee4:	4c ab       	lddpc	r11,8000100c <main+0x418>
80000ee6:	4f 7c       	lddpc	r12,800010c0 <main+0x4cc>
80000ee8:	f0 1f 00 28 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_25, "test", toggle_25, STACK_SIZE, 3);
80000eec:	30 38       	mov	r8,3
80000eee:	34 09       	mov	r9,64
80000ef0:	4f 5a       	lddpc	r10,800010c4 <main+0x4d0>
80000ef2:	4c 7b       	lddpc	r11,8000100c <main+0x418>
80000ef4:	4f 5c       	lddpc	r12,800010c8 <main+0x4d4>
80000ef6:	f0 1f 00 25 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_26, "test", toggle_26, STACK_SIZE, 3);
80000efa:	30 38       	mov	r8,3
80000efc:	34 09       	mov	r9,64
80000efe:	4f 4a       	lddpc	r10,800010cc <main+0x4d8>
80000f00:	4c 3b       	lddpc	r11,8000100c <main+0x418>
80000f02:	4f 4c       	lddpc	r12,800010d0 <main+0x4dc>
80000f04:	f0 1f 00 21 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_27, "test", toggle_27, STACK_SIZE, 3);
80000f08:	30 38       	mov	r8,3
80000f0a:	34 09       	mov	r9,64
80000f0c:	4f 2a       	lddpc	r10,800010d4 <main+0x4e0>
80000f0e:	4c 0b       	lddpc	r11,8000100c <main+0x418>
80000f10:	4f 2c       	lddpc	r12,800010d8 <main+0x4e4>
80000f12:	f0 1f 00 1e 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_28, "test", toggle_28, STACK_SIZE, 3);
80000f16:	30 38       	mov	r8,3
80000f18:	34 09       	mov	r9,64
80000f1a:	4f 1a       	lddpc	r10,800010dc <main+0x4e8>
80000f1c:	4b cb       	lddpc	r11,8000100c <main+0x418>
80000f1e:	4f 1c       	lddpc	r12,800010e0 <main+0x4ec>
80000f20:	f0 1f 00 1a 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_29, "test", toggle_29, STACK_SIZE, 3);
80000f24:	30 38       	mov	r8,3
80000f26:	34 09       	mov	r9,64
80000f28:	4e fa       	lddpc	r10,800010e4 <main+0x4f0>
80000f2a:	4b 9b       	lddpc	r11,8000100c <main+0x418>
80000f2c:	4e fc       	lddpc	r12,800010e8 <main+0x4f4>
80000f2e:	f0 1f 00 17 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_30, "test", toggle_30, STACK_SIZE, 3);
80000f32:	30 38       	mov	r8,3
80000f34:	34 09       	mov	r9,64
80000f36:	4e ea       	lddpc	r10,800010ec <main+0x4f8>
80000f38:	4b 5b       	lddpc	r11,8000100c <main+0x418>
80000f3a:	4e ec       	lddpc	r12,800010f0 <main+0x4fc>
80000f3c:	f0 1f 00 13 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_31, "test", toggle_31, STACK_SIZE, 3);
80000f40:	30 38       	mov	r8,3
80000f42:	34 09       	mov	r9,64
80000f44:	4e ca       	lddpc	r10,800010f4 <main+0x500>
80000f46:	4b 2b       	lddpc	r11,8000100c <main+0x418>
80000f48:	4e cc       	lddpc	r12,800010f8 <main+0x504>
80000f4a:	f0 1f 00 10 	mcall	80000f88 <main+0x394>
			ROSA_taskCreate(& task_handle_32, "test", toggle_32, STACK_SIZE, 3);
80000f4e:	30 38       	mov	r8,3
80000f50:	34 09       	mov	r9,64
80000f52:	4e ba       	lddpc	r10,800010fc <main+0x508>
80000f54:	4a eb       	lddpc	r11,8000100c <main+0x418>
80000f56:	4e bc       	lddpc	r12,80001100 <main+0x50c>
80000f58:	f0 1f 00 0c 	mcall	80000f88 <main+0x394>
		
			button_pressed = 1;
80000f5c:	30 18       	mov	r8,1
80000f5e:	ef 48 ff fc 	st.w	r7[-4],r8
	//Initialize the ROSA kernel
	ROSA_init();
	
	int button_pressed = 0;
	
	while( ! button_pressed )
80000f62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f66:	58 08       	cp.w	r8,0
80000f68:	fe 90 fe 51 	breq	80000c0a <main+0x16>
		}
	}
	//init_tc();
	
	//timerStart();
	ROSA_start();
80000f6c:	f0 1f 00 66 	mcall	80001104 <main+0x510>
	/* Execution will never return here */
	while(1);
80000f70:	c0 08       	rjmp	80000f70 <main+0x37c>
80000f72:	00 00       	add	r0,r0
80000f74:	80 00       	ld.sh	r0,r0[0x0]
80000f76:	11 64       	ld.uh	r4,--r8
80000f78:	80 00       	ld.sh	r0,r0[0x0]
80000f7a:	1d d0       	ld.ub	r0,lr[0x5]
80000f7c:	80 00       	ld.sh	r0,r0[0x0]
80000f7e:	0a dc       	st.w	--r5,r12
80000f80:	80 00       	ld.sh	r0,r0[0x0]
80000f82:	04 ac       	st.w	r2++,r12
80000f84:	00 00       	add	r0,r0
80000f86:	05 30       	ld.ub	r0,r2++
80000f88:	80 00       	ld.sh	r0,r0[0x0]
80000f8a:	13 bc       	ld.ub	r12,r9[0x3]
80000f8c:	80 00       	ld.sh	r0,r0[0x0]
80000f8e:	0b 94       	ld.ub	r4,r5[0x1]
80000f90:	80 00       	ld.sh	r0,r0[0x0]
80000f92:	04 b4       	st.h	r2++,r4
80000f94:	00 00       	add	r0,r0
80000f96:	05 34       	ld.ub	r4,r2++
80000f98:	80 00       	ld.sh	r0,r0[0x0]
80000f9a:	0b b4       	ld.ub	r4,r5[0x3]
80000f9c:	80 00       	ld.sh	r0,r0[0x0]
80000f9e:	04 bc       	st.h	r2++,r12
80000fa0:	00 00       	add	r0,r0
80000fa2:	05 38       	ld.ub	r8,r2++
80000fa4:	80 00       	ld.sh	r0,r0[0x0]
80000fa6:	0b d4       	ld.ub	r4,r5[0x5]
80000fa8:	80 00       	ld.sh	r0,r0[0x0]
80000faa:	04 c4       	st.b	r2++,r4
80000fac:	00 00       	add	r0,r0
80000fae:	05 3c       	ld.ub	r12,r2++
80000fb0:	00 00       	add	r0,r0
80000fb2:	05 20       	ld.uh	r0,r2++
80000fb4:	80 00       	ld.sh	r0,r0[0x0]
80000fb6:	00 b4       	st.h	r0++,r4
80000fb8:	00 00       	add	r0,r0
80000fba:	05 24       	ld.uh	r4,r2++
80000fbc:	00 00       	add	r0,r0
80000fbe:	05 28       	ld.uh	r8,r2++
80000fc0:	80 00       	ld.sh	r0,r0[0x0]
80000fc2:	09 18       	ld.sh	r8,r4++
80000fc4:	00 00       	add	r0,r0
80000fc6:	05 9c       	ld.ub	r12,r2[0x1]
80000fc8:	80 00       	ld.sh	r0,r0[0x0]
80000fca:	09 70       	ld.ub	r0,--r4
80000fcc:	80 00       	ld.sh	r0,r0[0x0]
80000fce:	04 cc       	st.b	r2++,r12
80000fd0:	00 00       	add	r0,r0
80000fd2:	05 c0       	ld.ub	r0,r2[0x4]
80000fd4:	80 00       	ld.sh	r0,r0[0x0]
80000fd6:	09 d4       	ld.ub	r4,r4[0x5]
80000fd8:	80 00       	ld.sh	r0,r0[0x0]
80000fda:	04 d4       	st.w	--r2,r4
80000fdc:	00 00       	add	r0,r0
80000fde:	06 04       	add	r4,r3
80000fe0:	80 00       	ld.sh	r0,r0[0x0]
80000fe2:	0a 38       	cp.w	r8,r5
80000fe4:	80 00       	ld.sh	r0,r0[0x0]
80000fe6:	04 dc       	st.w	--r2,r12
80000fe8:	00 00       	add	r0,r0
80000fea:	06 08       	add	r8,r3
80000fec:	80 00       	ld.sh	r0,r0[0x0]
80000fee:	0a 9c       	mov	r12,r5
80000ff0:	80 00       	ld.sh	r0,r0[0x0]
80000ff2:	04 e4       	st.h	--r2,r4
80000ff4:	00 00       	add	r0,r0
80000ff6:	05 cc       	ld.ub	r12,r2[0x4]
80000ff8:	00 00       	add	r0,r0
80000ffa:	05 2c       	ld.uh	r12,r2++
80000ffc:	80 00       	ld.sh	r0,r0[0x0]
80000ffe:	04 fc       	st.b	--r2,r12
80001000:	80 00       	ld.sh	r0,r0[0x0]
80001002:	04 ec       	st.h	--r2,r12
80001004:	00 00       	add	r0,r0
80001006:	05 b4       	ld.ub	r4,r2[0x3]
80001008:	80 00       	ld.sh	r0,r0[0x0]
8000100a:	05 18       	ld.sh	r8,r2++
8000100c:	80 00       	ld.sh	r0,r0[0x0]
8000100e:	04 f4       	st.b	--r2,r4
80001010:	00 00       	add	r0,r0
80001012:	05 98       	ld.ub	r8,r2[0x1]
80001014:	80 00       	ld.sh	r0,r0[0x0]
80001016:	05 34       	ld.ub	r4,r2++
80001018:	00 00       	add	r0,r0
8000101a:	05 8c       	ld.ub	r12,r2[0x0]
8000101c:	80 00       	ld.sh	r0,r0[0x0]
8000101e:	05 50       	ld.sh	r0,--r2
80001020:	00 00       	add	r0,r0
80001022:	05 80       	ld.ub	r0,r2[0x0]
80001024:	80 00       	ld.sh	r0,r0[0x0]
80001026:	05 6c       	ld.uh	r12,--r2
80001028:	00 00       	add	r0,r0
8000102a:	05 d0       	ld.ub	r0,r2[0x5]
8000102c:	80 00       	ld.sh	r0,r0[0x0]
8000102e:	05 88       	ld.ub	r8,r2[0x0]
80001030:	00 00       	add	r0,r0
80001032:	05 78       	ld.ub	r8,--r2
80001034:	80 00       	ld.sh	r0,r0[0x0]
80001036:	05 a4       	ld.ub	r4,r2[0x2]
80001038:	00 00       	add	r0,r0
8000103a:	05 d4       	ld.ub	r4,r2[0x5]
8000103c:	80 00       	ld.sh	r0,r0[0x0]
8000103e:	05 c0       	ld.ub	r0,r2[0x4]
80001040:	00 00       	add	r0,r0
80001042:	05 a8       	ld.ub	r8,r2[0x2]
80001044:	80 00       	ld.sh	r0,r0[0x0]
80001046:	05 dc       	ld.ub	r12,r2[0x5]
80001048:	00 00       	add	r0,r0
8000104a:	05 90       	ld.ub	r0,r2[0x1]
8000104c:	80 00       	ld.sh	r0,r0[0x0]
8000104e:	05 f8       	ld.ub	r8,r2[0x7]
80001050:	00 00       	add	r0,r0
80001052:	05 f8       	ld.ub	r8,r2[0x7]
80001054:	80 00       	ld.sh	r0,r0[0x0]
80001056:	06 14       	sub	r4,r3
80001058:	00 00       	add	r0,r0
8000105a:	05 94       	ld.ub	r4,r2[0x1]
8000105c:	80 00       	ld.sh	r0,r0[0x0]
8000105e:	06 30       	cp.w	r0,r3
80001060:	00 00       	add	r0,r0
80001062:	05 c8       	ld.ub	r8,r2[0x4]
80001064:	80 00       	ld.sh	r0,r0[0x0]
80001066:	06 4c       	or	r12,r3
80001068:	00 00       	add	r0,r0
8000106a:	05 88       	ld.ub	r8,r2[0x0]
8000106c:	80 00       	ld.sh	r0,r0[0x0]
8000106e:	06 68       	and	r8,r3
80001070:	00 00       	add	r0,r0
80001072:	05 ac       	ld.ub	r12,r2[0x2]
80001074:	80 00       	ld.sh	r0,r0[0x0]
80001076:	06 84       	andn	r4,r3
80001078:	00 00       	add	r0,r0
8000107a:	05 e8       	ld.ub	r8,r2[0x6]
8000107c:	80 00       	ld.sh	r0,r0[0x0]
8000107e:	06 a0       	st.w	r3++,r0
80001080:	00 00       	add	r0,r0
80001082:	05 ec       	ld.ub	r12,r2[0x6]
80001084:	80 00       	ld.sh	r0,r0[0x0]
80001086:	06 bc       	st.h	r3++,r12
80001088:	00 00       	add	r0,r0
8000108a:	05 7c       	ld.ub	r12,--r2
8000108c:	80 00       	ld.sh	r0,r0[0x0]
8000108e:	06 d8       	st.w	--r3,r8
80001090:	00 00       	add	r0,r0
80001092:	05 f4       	ld.ub	r4,r2[0x7]
80001094:	80 00       	ld.sh	r0,r0[0x0]
80001096:	06 f4       	st.b	--r3,r4
80001098:	00 00       	add	r0,r0
8000109a:	05 bc       	ld.ub	r12,r2[0x3]
8000109c:	80 00       	ld.sh	r0,r0[0x0]
8000109e:	07 10       	ld.sh	r0,r3++
800010a0:	00 00       	add	r0,r0
800010a2:	05 b8       	ld.ub	r8,r2[0x3]
800010a4:	80 00       	ld.sh	r0,r0[0x0]
800010a6:	07 2c       	ld.uh	r12,r3++
800010a8:	00 00       	add	r0,r0
800010aa:	05 a4       	ld.ub	r4,r2[0x2]
800010ac:	80 00       	ld.sh	r0,r0[0x0]
800010ae:	07 48       	ld.w	r8,--r3
800010b0:	00 00       	add	r0,r0
800010b2:	05 d8       	ld.ub	r8,r2[0x5]
800010b4:	80 00       	ld.sh	r0,r0[0x0]
800010b6:	07 64       	ld.uh	r4,--r3
800010b8:	00 00       	add	r0,r0
800010ba:	05 f0       	ld.ub	r0,r2[0x7]
800010bc:	80 00       	ld.sh	r0,r0[0x0]
800010be:	07 80       	ld.ub	r0,r3[0x0]
800010c0:	00 00       	add	r0,r0
800010c2:	05 b0       	ld.ub	r0,r2[0x3]
800010c4:	80 00       	ld.sh	r0,r0[0x0]
800010c6:	07 9c       	ld.ub	r12,r3[0x1]
800010c8:	00 00       	add	r0,r0
800010ca:	05 dc       	ld.ub	r12,r2[0x5]
800010cc:	80 00       	ld.sh	r0,r0[0x0]
800010ce:	07 b8       	ld.ub	r8,r3[0x3]
800010d0:	00 00       	add	r0,r0
800010d2:	06 0c       	add	r12,r3
800010d4:	80 00       	ld.sh	r0,r0[0x0]
800010d6:	07 d4       	ld.ub	r4,r3[0x5]
800010d8:	00 00       	add	r0,r0
800010da:	05 c4       	ld.ub	r4,r2[0x4]
800010dc:	80 00       	ld.sh	r0,r0[0x0]
800010de:	07 f0       	ld.ub	r0,r3[0x7]
800010e0:	00 00       	add	r0,r0
800010e2:	05 fc       	ld.ub	r12,r2[0x7]
800010e4:	80 00       	ld.sh	r0,r0[0x0]
800010e6:	08 0c       	add	r12,r4
800010e8:	00 00       	add	r0,r0
800010ea:	05 e0       	ld.ub	r0,r2[0x6]
800010ec:	80 00       	ld.sh	r0,r0[0x0]
800010ee:	08 28       	rsub	r8,r4
800010f0:	00 00       	add	r0,r0
800010f2:	05 a0       	ld.ub	r0,r2[0x2]
800010f4:	80 00       	ld.sh	r0,r0[0x0]
800010f6:	08 44       	or	r4,r4
800010f8:	00 00       	add	r0,r0
800010fa:	06 00       	add	r0,r3
800010fc:	80 00       	ld.sh	r0,r0[0x0]
800010fe:	08 60       	and	r0,r4
80001100:	00 00       	add	r0,r0
80001102:	05 e4       	ld.ub	r4,r2[0x6]
80001104:	80 00       	ld.sh	r0,r0[0x0]
80001106:	1b 0c       	ld.w	r12,sp++

80001108 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80001108:	eb cd 40 80 	pushm	r7,lr
8000110c:	1a 97       	mov	r7,sp
	interruptDisable;
	contextSaveFromISR();	  //Save the task context
8000110e:	f0 1f 00 0c 	mcall	8000113c <ROSA_yieldFromISR+0x34>
	system_ticks ++;
80001112:	48 c8       	lddpc	r8,80001140 <ROSA_yieldFromISR+0x38>
80001114:	f0 ea 00 00 	ld.d	r10,r8[0]
80001118:	30 18       	mov	r8,1
8000111a:	30 09       	mov	r9,0
8000111c:	f4 08 00 08 	add	r8,r10,r8
80001120:	f6 09 00 49 	adc	r9,r11,r9
80001124:	48 7a       	lddpc	r10,80001140 <ROSA_yieldFromISR+0x38>
80001126:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
8000112a:	f0 1f 00 07 	mcall	80001144 <ROSA_yieldFromISR+0x3c>
	contextRestoreFromISR();  //...and switch over to it.
8000112e:	f0 1f 00 07 	mcall	80001148 <ROSA_yieldFromISR+0x40>
	interruptEnable();
80001132:	f0 1f 00 07 	mcall	8000114c <ROSA_yieldFromISR+0x44>
}
80001136:	e3 cd 80 80 	ldm	sp++,r7,pc
8000113a:	00 00       	add	r0,r0
8000113c:	80 00       	ld.sh	r0,r0[0x0]
8000113e:	2f 7e       	sub	lr,-9
80001140:	00 00       	add	r0,r0
80001142:	06 2c       	rsub	r12,r3
80001144:	80 00       	ld.sh	r0,r0[0x0]
80001146:	1b ec       	ld.ub	r12,sp[0x6]
80001148:	80 00       	ld.sh	r0,r0[0x0]
8000114a:	2f b8       	sub	r8,-5
8000114c:	80 00       	ld.sh	r0,r0[0x0]
8000114e:	2f 6a       	sub	r10,-10

80001150 <usart_options>:
80001150:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80001160:	00 00 00 00                                         ....

80001164 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80001164:	eb cd 40 80 	pushm	r7,lr
80001168:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000116a:	f0 1f 00 1e 	mcall	800011e0 <ROSA_init+0x7c>
	buttonInit();								//Buttons
8000116e:	f0 1f 00 1e 	mcall	800011e4 <ROSA_init+0x80>
	joystickInit();								//Joystick
80001172:	f0 1f 00 1e 	mcall	800011e8 <ROSA_init+0x84>
	potInit();									//Potentiometer
80001176:	f0 1f 00 1e 	mcall	800011ec <ROSA_init+0x88>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000117a:	e0 6a 1b 00 	mov	r10,6912
8000117e:	ea 1a 00 b7 	orh	r10,0xb7
80001182:	49 cb       	lddpc	r11,800011f0 <ROSA_init+0x8c>
80001184:	fe 7c 14 00 	mov	r12,-60416
80001188:	f0 1f 00 1b 	mcall	800011f4 <ROSA_init+0x90>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST				= NULL;
8000118c:	49 b8       	lddpc	r8,800011f8 <ROSA_init+0x94>
8000118e:	30 09       	mov	r9,0
80001190:	91 09       	st.w	r8[0x0],r9
	SUSPENDEDLIST		= NULL;
80001192:	49 b8       	lddpc	r8,800011fc <ROSA_init+0x98>
80001194:	30 09       	mov	r9,0
80001196:	91 09       	st.w	r8[0x0],r9
	EXECTASK			= NULL;
80001198:	49 a8       	lddpc	r8,80001200 <ROSA_init+0x9c>
8000119a:	30 09       	mov	r9,0
8000119c:	91 09       	st.w	r8[0x0],r9
	SEMAPHORES			= NULL;
8000119e:	49 a8       	lddpc	r8,80001204 <ROSA_init+0xa0>
800011a0:	30 09       	mov	r9,0
800011a2:	91 09       	st.w	r8[0x0],r9
	
#if IDLE_TASK_ENABLED
	IDLETASK = NULL;
800011a4:	49 98       	lddpc	r8,80001208 <ROSA_init+0xa4>
800011a6:	30 09       	mov	r9,0
800011a8:	91 09       	st.w	r8[0x0],r9
	ROSA_taskCreate(&IDLETASK, "idle", idle, 0x40, 255);
800011aa:	e0 68 00 ff 	mov	r8,255
800011ae:	34 09       	mov	r9,64
800011b0:	49 7a       	lddpc	r10,8000120c <ROSA_init+0xa8>
800011b2:	49 8b       	lddpc	r11,80001210 <ROSA_init+0xac>
800011b4:	49 5c       	lddpc	r12,80001208 <ROSA_init+0xa4>
800011b6:	f0 1f 00 18 	mcall	80001214 <ROSA_init+0xb0>
	//taskUninstall(IDLETASK);
#endif
	
	//initialize system time
	system_ticks = 0;
800011ba:	49 8a       	lddpc	r10,80001218 <ROSA_init+0xb4>
800011bc:	30 08       	mov	r8,0
800011be:	30 09       	mov	r9,0
800011c0:	f4 e9 00 00 	st.d	r10[0],r8
	round_robin_ticks = 0;
800011c4:	49 6a       	lddpc	r10,8000121c <ROSA_init+0xb8>
800011c6:	30 08       	mov	r8,0
800011c8:	30 09       	mov	r9,0
800011ca:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Initialize the timer to 1 ms period.
	//...
	interruptInit();
800011ce:	f0 1f 00 15 	mcall	80001220 <ROSA_init+0xbc>
	timerInit(1);
800011d2:	30 1c       	mov	r12,1
800011d4:	f0 1f 00 14 	mcall	80001224 <ROSA_init+0xc0>
	//...
	
	timerStart();
800011d8:	f0 1f 00 14 	mcall	80001228 <ROSA_init+0xc4>
}
800011dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800011e0:	80 00       	ld.sh	r0,r0[0x0]
800011e2:	20 50       	sub	r0,5
800011e4:	80 00       	ld.sh	r0,r0[0x0]
800011e6:	1d a8       	ld.ub	r8,lr[0x2]
800011e8:	80 00       	ld.sh	r0,r0[0x0]
800011ea:	1d f8       	ld.ub	r8,lr[0x7]
800011ec:	80 00       	ld.sh	r0,r0[0x0]
800011ee:	21 3c       	sub	r12,19
800011f0:	80 00       	ld.sh	r0,r0[0x0]
800011f2:	11 50       	ld.sh	r0,--r8
800011f4:	80 00       	ld.sh	r0,r0[0x0]
800011f6:	22 f0       	sub	r0,47
800011f8:	00 00       	add	r0,r0
800011fa:	06 14       	sub	r4,r3
800011fc:	00 00       	add	r0,r0
800011fe:	06 18       	sub	r8,r3
80001200:	00 00       	add	r0,r0
80001202:	06 20       	rsub	r0,r3
80001204:	00 00       	add	r0,r0
80001206:	06 1c       	sub	r12,r3
80001208:	00 00       	add	r0,r0
8000120a:	06 10       	sub	r0,r3
8000120c:	80 00       	ld.sh	r0,r0[0x0]
8000120e:	18 a0       	st.w	r12++,r0
80001210:	80 00       	ld.sh	r0,r0[0x0]
80001212:	11 5c       	ld.sh	r12,--r8
80001214:	80 00       	ld.sh	r0,r0[0x0]
80001216:	13 bc       	ld.ub	r12,r9[0x3]
80001218:	00 00       	add	r0,r0
8000121a:	06 2c       	rsub	r12,r3
8000121c:	00 00       	add	r0,r0
8000121e:	06 24       	rsub	r4,r3
80001220:	80 00       	ld.sh	r0,r0[0x0]
80001222:	2f 48       	sub	r8,-12
80001224:	80 00       	ld.sh	r0,r0[0x0]
80001226:	24 14       	sub	r4,65
80001228:	80 00       	ld.sh	r0,r0[0x0]
8000122a:	24 42       	sub	r2,68

8000122c <ROSA_getTickCount>:

uint64_t ROSA_getTickCount(void)
{
8000122c:	eb cd 40 80 	pushm	r7,lr
80001230:	1a 97       	mov	r7,sp
	return system_ticks;
80001232:	48 48       	lddpc	r8,80001240 <ROSA_getTickCount+0x14>
80001234:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80001238:	10 9a       	mov	r10,r8
8000123a:	12 9b       	mov	r11,r9
8000123c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001240:	00 00       	add	r0,r0
80001242:	06 2c       	rsub	r12,r3

80001244 <insert_after>:

uint16_t insert_after( tcb * position, tcb * new_task )
{
80001244:	eb cd 40 80 	pushm	r7,lr
80001248:	1a 97       	mov	r7,sp
8000124a:	20 3d       	sub	sp,12
8000124c:	ef 4c ff f8 	st.w	r7[-8],r12
80001250:	ef 4b ff f4 	st.w	r7[-12],r11
	uint16_t result = -1;
80001254:	3f f8       	mov	r8,-1
80001256:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( position != NULL )
8000125a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000125e:	58 08       	cp.w	r8,0
80001260:	c2 10       	breq	800012a2 <insert_after+0x5e>
	{
		new_task->prevtcb = position;
80001262:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001266:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000126a:	f1 49 00 64 	st.w	r8[100],r9
		new_task->nexttcb = position->nexttcb;
8000126e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001272:	70 09       	ld.w	r9,r8[0x0]
80001274:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001278:	91 09       	st.w	r8[0x0],r9
		
		position->nexttcb = new_task;
8000127a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000127e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001282:	91 09       	st.w	r8[0x0],r9
		if( new_task->nexttcb != NULL )
80001284:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001288:	70 08       	ld.w	r8,r8[0x0]
8000128a:	58 08       	cp.w	r8,0
8000128c:	c0 80       	breq	8000129c <insert_after+0x58>
		{
			(new_task->nexttcb)->prevtcb = new_task;
8000128e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001292:	70 08       	ld.w	r8,r8[0x0]
80001294:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001298:	f1 49 00 64 	st.w	r8[100],r9
		}
		result = 1;
8000129c:	30 18       	mov	r8,1
8000129e:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	return result;
800012a2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800012a6:	10 9c       	mov	r12,r8
800012a8:	2f dd       	sub	sp,-12
800012aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800012ae:	d7 03       	nop

800012b0 <taskInstall>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

uint16_t taskInstall(tcb * task)
{
800012b0:	eb cd 40 80 	pushm	r7,lr
800012b4:	1a 97       	mov	r7,sp
800012b6:	20 3d       	sub	sp,12
800012b8:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
800012bc:	3f f8       	mov	r8,-1
800012be:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( TCBLIST == NULL )
800012c2:	4b d8       	lddpc	r8,800013b4 <taskInstall+0x104>
800012c4:	70 08       	ld.w	r8,r8[0x0]
800012c6:	58 08       	cp.w	r8,0
800012c8:	c1 41       	brne	800012f0 <taskInstall+0x40>
	{
		TCBLIST		  = task;
800012ca:	4b b8       	lddpc	r8,800013b4 <taskInstall+0x104>
800012cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800012d0:	91 09       	st.w	r8[0x0],r9
		task->nexttcb = task;
800012d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800012da:	91 09       	st.w	r8[0x0],r9
		task->prevtcb = task;
800012dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800012e4:	f1 49 00 64 	st.w	r8[100],r9

		result = 1;
800012e8:	30 18       	mov	r8,1
800012ea:	ef 58 ff fa 	st.h	r7[-6],r8
800012ee:	c5 c8       	rjmp	800013a6 <taskInstall+0xf6>
	}
	//if this task should be inserted before the first task in the list
	else if( task->effective_priority < TCBLIST->effective_priority )
800012f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012f4:	f1 39 00 69 	ld.ub	r9,r8[105]
800012f8:	4a f8       	lddpc	r8,800013b4 <taskInstall+0x104>
800012fa:	70 08       	ld.w	r8,r8[0x0]
800012fc:	f1 38 00 69 	ld.ub	r8,r8[105]
80001300:	f0 09 18 00 	cp.b	r9,r8
80001304:	c1 12       	brcc	80001326 <taskInstall+0x76>
	{
		insert_after(TCBLIST->prevtcb, task);
80001306:	4a c8       	lddpc	r8,800013b4 <taskInstall+0x104>
80001308:	70 08       	ld.w	r8,r8[0x0]
8000130a:	71 98       	ld.w	r8,r8[0x64]
8000130c:	ee fb ff f4 	ld.w	r11,r7[-12]
80001310:	10 9c       	mov	r12,r8
80001312:	f0 1f 00 2a 	mcall	800013b8 <taskInstall+0x108>
		TCBLIST = task;
80001316:	4a 88       	lddpc	r8,800013b4 <taskInstall+0x104>
80001318:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000131c:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
8000131e:	30 18       	mov	r8,1
80001320:	ef 58 ff fa 	st.h	r7[-6],r8
80001324:	c4 18       	rjmp	800013a6 <taskInstall+0xf6>
	}
	else if( task->effective_priority >= (TCBLIST->prevtcb)->effective_priority )
80001326:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000132a:	f1 39 00 69 	ld.ub	r9,r8[105]
8000132e:	4a 28       	lddpc	r8,800013b4 <taskInstall+0x104>
80001330:	70 08       	ld.w	r8,r8[0x0]
80001332:	71 98       	ld.w	r8,r8[0x64]
80001334:	f1 38 00 69 	ld.ub	r8,r8[105]
80001338:	f0 09 18 00 	cp.b	r9,r8
8000133c:	c0 a3       	brcs	80001350 <taskInstall+0xa0>
	{
		insert_after(TCBLIST->prevtcb, task);
8000133e:	49 e8       	lddpc	r8,800013b4 <taskInstall+0x104>
80001340:	70 08       	ld.w	r8,r8[0x0]
80001342:	71 98       	ld.w	r8,r8[0x64]
80001344:	ee fb ff f4 	ld.w	r11,r7[-12]
80001348:	10 9c       	mov	r12,r8
8000134a:	f0 1f 00 1c 	mcall	800013b8 <taskInstall+0x108>
8000134e:	c2 c8       	rjmp	800013a6 <taskInstall+0xf6>
	}
	else
	{
		iterator = TCBLIST;
80001350:	49 98       	lddpc	r8,800013b4 <taskInstall+0x104>
80001352:	70 08       	ld.w	r8,r8[0x0]
80001354:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->effective_priority >= iterator->effective_priority && iterator->nexttcb != TCBLIST)
80001358:	c0 68       	rjmp	80001364 <taskInstall+0xb4>
		{
			iterator = iterator->nexttcb;
8000135a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000135e:	70 08       	ld.w	r8,r8[0x0]
80001360:	ef 48 ff fc 	st.w	r7[-4],r8
		insert_after(TCBLIST->prevtcb, task);
	}
	else
	{
		iterator = TCBLIST;
		while( iterator && task->effective_priority >= iterator->effective_priority && iterator->nexttcb != TCBLIST)
80001364:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001368:	58 08       	cp.w	r8,0
8000136a:	c1 30       	breq	80001390 <taskInstall+0xe0>
8000136c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001370:	f1 39 00 69 	ld.ub	r9,r8[105]
80001374:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001378:	f1 38 00 69 	ld.ub	r8,r8[105]
8000137c:	f0 09 18 00 	cp.b	r9,r8
80001380:	c0 83       	brcs	80001390 <taskInstall+0xe0>
80001382:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001386:	70 09       	ld.w	r9,r8[0x0]
80001388:	48 b8       	lddpc	r8,800013b4 <taskInstall+0x104>
8000138a:	70 08       	ld.w	r8,r8[0x0]
8000138c:	10 39       	cp.w	r9,r8
8000138e:	ce 61       	brne	8000135a <taskInstall+0xaa>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
80001390:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001394:	71 98       	ld.w	r8,r8[0x64]
80001396:	ee fb ff f4 	ld.w	r11,r7[-12]
8000139a:	10 9c       	mov	r12,r8
8000139c:	f0 1f 00 07 	mcall	800013b8 <taskInstall+0x108>
		
		result = 1;
800013a0:	30 18       	mov	r8,1
800013a2:	ef 58 ff fa 	st.h	r7[-6],r8
	}

	return result;
800013a6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
800013aa:	10 9c       	mov	r12,r8
800013ac:	2f dd       	sub	sp,-12
800013ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800013b2:	00 00       	add	r0,r0
800013b4:	00 00       	add	r0,r0
800013b6:	06 14       	sub	r4,r3
800013b8:	80 00       	ld.sh	r0,r0[0x0]
800013ba:	12 44       	or	r4,r9

800013bc <ROSA_taskCreate>:
	
	return result;
}

uint16_t ROSA_taskCreate(ROSA_taskHandle_t* th, char* id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
800013bc:	eb cd 40 80 	pushm	r7,lr
800013c0:	1a 97       	mov	r7,sp
800013c2:	20 8d       	sub	sp,32
800013c4:	ef 4c ff f0 	st.w	r7[-16],r12
800013c8:	ef 4b ff ec 	st.w	r7[-20],r11
800013cc:	ef 4a ff e8 	st.w	r7[-24],r10
800013d0:	ef 49 ff e4 	st.w	r7[-28],r9
800013d4:	ef 68 ff e0 	st.b	r7[-32],r8
	uint16_t result = 0;
800013d8:	30 08       	mov	r8,0
800013da:	ef 58 ff f6 	st.h	r7[-10],r8
	
	if(! *th)
800013de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800013e2:	70 08       	ld.w	r8,r8[0x0]
800013e4:	58 08       	cp.w	r8,0
800013e6:	c6 e1       	brne	800014c2 <ROSA_taskCreate+0x106>
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
800013e8:	37 cb       	mov	r11,124
800013ea:	30 1c       	mov	r12,1
800013ec:	f0 1f 00 39 	mcall	800014d0 <ROSA_taskCreate+0x114>
800013f0:	18 98       	mov	r8,r12
800013f2:	10 99       	mov	r9,r8
800013f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800013f8:	91 09       	st.w	r8[0x0],r9
		tcb* temp = *th;
800013fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800013fe:	70 08       	ld.w	r8,r8[0x0]
80001400:	ef 48 ff f8 	st.w	r7[-8],r8
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80001404:	30 08       	mov	r8,0
80001406:	ef 48 ff fc 	st.w	r7[-4],r8
8000140a:	c1 48       	rjmp	80001432 <ROSA_taskCreate+0x76>
		{
			temp->id[i] = id[i];		//copy task id
8000140c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001410:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001414:	ee fa ff ec 	ld.w	r10,r7[-20]
80001418:	f4 08 00 08 	add	r8,r10,r8
8000141c:	11 88       	ld.ub	r8,r8[0x0]
8000141e:	ee fa ff f8 	ld.w	r10,r7[-8]
80001422:	f4 09 00 09 	add	r9,r10,r9
80001426:	b2 c8       	st.b	r9[0x4],r8
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
		tcb* temp = *th;
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80001428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000142c:	2f f8       	sub	r8,-1
8000142e:	ef 48 ff fc 	st.w	r7[-4],r8
80001432:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001436:	58 38       	cp.w	r8,3
80001438:	fe 9a ff ea 	brle	8000140c <ROSA_taskCreate+0x50>
		{
			temp->id[i] = id[i];		//copy task id
		}
		
		temp->staddr = taskFunction;
8000143c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001440:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001444:	91 29       	st.w	r8[0x8],r9
		temp->retaddr = (int)taskFunction;
80001446:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000144a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000144e:	91 99       	st.w	r8[0x24],r9
		
		temp->datasize = stackSize;
80001450:	ee f9 ff e4 	ld.w	r9,r7[-28]
80001454:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001458:	91 49       	st.w	r8[0x10],r9
		temp->dataarea = (int*)calloc(stackSize, sizeof(int)) + stackSize;
8000145a:	30 4b       	mov	r11,4
8000145c:	ee fc ff e4 	ld.w	r12,r7[-28]
80001460:	f0 1f 00 1c 	mcall	800014d0 <ROSA_taskCreate+0x114>
80001464:	18 98       	mov	r8,r12
80001466:	10 99       	mov	r9,r8
80001468:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000146c:	a3 68       	lsl	r8,0x2
8000146e:	10 09       	add	r9,r8
80001470:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001474:	91 39       	st.w	r8[0xc],r9
		temp->saveusp = temp->dataarea;
80001476:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000147a:	70 39       	ld.w	r9,r8[0xc]
8000147c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001480:	91 59       	st.w	r8[0x14],r9
		
		temp->savesr = ROSA_INITIALSR;
80001482:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001486:	fc 19 00 1c 	movh	r9,0x1c
8000148a:	91 89       	st.w	r8[0x20],r9
		
		temp->priority = priority;
8000148c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001490:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80001494:	f3 68 00 68 	st.b	r9[104],r8
		temp->effective_priority = priority;
80001498:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000149c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
800014a0:	f3 68 00 69 	st.b	r9[105],r8
		
		temp->suspended = 0;
800014a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014a8:	30 09       	mov	r9,0
800014aa:	f1 49 00 78 	st.w	r8[120],r9
		
		contextInit(temp);
800014ae:	ee fc ff f8 	ld.w	r12,r7[-8]
800014b2:	f0 1f 00 09 	mcall	800014d4 <ROSA_taskCreate+0x118>
		
		taskInstall(* th);
800014b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800014ba:	70 08       	ld.w	r8,r8[0x0]
800014bc:	10 9c       	mov	r12,r8
800014be:	f0 1f 00 07 	mcall	800014d8 <ROSA_taskCreate+0x11c>
	}
	return result;
800014c2:	ef 08 ff f6 	ld.sh	r8,r7[-10]
}
800014c6:	10 9c       	mov	r12,r8
800014c8:	2f 8d       	sub	sp,-32
800014ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800014ce:	00 00       	add	r0,r0
800014d0:	80 00       	ld.sh	r0,r0[0x0]
800014d2:	25 50       	sub	r0,85
800014d4:	80 00       	ld.sh	r0,r0[0x0]
800014d6:	1b 42       	ld.w	r2,--sp
800014d8:	80 00       	ld.sh	r0,r0[0x0]
800014da:	12 b0       	st.h	r9++,r0

800014dc <taskSuspend>:

uint16_t taskSuspend(tcb * task)
{
800014dc:	eb cd 40 80 	pushm	r7,lr
800014e0:	1a 97       	mov	r7,sp
800014e2:	20 3d       	sub	sp,12
800014e4:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
800014e8:	3f f8       	mov	r8,-1
800014ea:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( SUSPENDEDLIST == NULL )
800014ee:	4c 28       	lddpc	r8,800015f4 <taskSuspend+0x118>
800014f0:	70 08       	ld.w	r8,r8[0x0]
800014f2:	58 08       	cp.w	r8,0
800014f4:	c1 41       	brne	8000151c <taskSuspend+0x40>
	{
		SUSPENDEDLIST		= task;
800014f6:	4c 08       	lddpc	r8,800015f4 <taskSuspend+0x118>
800014f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800014fc:	91 09       	st.w	r8[0x0],r9
		task->nexttcb		= task;
800014fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001502:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001506:	91 09       	st.w	r8[0x0],r9
		task->prevtcb		= task;
80001508:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000150c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001510:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80001514:	30 18       	mov	r8,1
80001516:	ef 58 ff fa 	st.h	r7[-6],r8
8000151a:	c6 18       	rjmp	800015dc <taskSuspend+0x100>
	}
	//if this task should be inserted before the first task in the list
	else if( task->back_online_time < SUSPENDEDLIST->back_online_time )
8000151c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001520:	f0 ea 00 6c 	ld.d	r10,r8[108]
80001524:	4b 48       	lddpc	r8,800015f4 <taskSuspend+0x118>
80001526:	70 08       	ld.w	r8,r8[0x0]
80001528:	f0 e8 00 6c 	ld.d	r8,r8[108]
8000152c:	10 3a       	cp.w	r10,r8
8000152e:	f2 0b 13 00 	cpc	r11,r9
80001532:	c1 12       	brcc	80001554 <taskSuspend+0x78>
	{
		insert_after(SUSPENDEDLIST->prevtcb, task);
80001534:	4b 08       	lddpc	r8,800015f4 <taskSuspend+0x118>
80001536:	70 08       	ld.w	r8,r8[0x0]
80001538:	71 98       	ld.w	r8,r8[0x64]
8000153a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000153e:	10 9c       	mov	r12,r8
80001540:	f0 1f 00 2e 	mcall	800015f8 <taskSuspend+0x11c>
		SUSPENDEDLIST = task;
80001544:	4a c8       	lddpc	r8,800015f4 <taskSuspend+0x118>
80001546:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000154a:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
8000154c:	30 18       	mov	r8,1
8000154e:	ef 58 ff fa 	st.h	r7[-6],r8
80001552:	c4 58       	rjmp	800015dc <taskSuspend+0x100>
	}
	//if this task should be inserted after the last task in the list
	else if( task->back_online_time >= (SUSPENDEDLIST->prevtcb)->back_online_time )
80001554:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001558:	f0 ea 00 6c 	ld.d	r10,r8[108]
8000155c:	4a 68       	lddpc	r8,800015f4 <taskSuspend+0x118>
8000155e:	70 08       	ld.w	r8,r8[0x0]
80001560:	71 98       	ld.w	r8,r8[0x64]
80001562:	f0 e8 00 6c 	ld.d	r8,r8[108]
80001566:	10 3a       	cp.w	r10,r8
80001568:	f2 0b 13 00 	cpc	r11,r9
8000156c:	c1 33       	brcs	80001592 <taskSuspend+0xb6>
	{
		insert_after(SUSPENDEDLIST->prevtcb, task);
8000156e:	4a 28       	lddpc	r8,800015f4 <taskSuspend+0x118>
80001570:	70 08       	ld.w	r8,r8[0x0]
80001572:	71 98       	ld.w	r8,r8[0x64]
80001574:	ee fb ff f4 	ld.w	r11,r7[-12]
80001578:	10 9c       	mov	r12,r8
8000157a:	f0 1f 00 20 	mcall	800015f8 <taskSuspend+0x11c>
		SUSPENDEDLIST->prevtcb = task;
8000157e:	49 e8       	lddpc	r8,800015f4 <taskSuspend+0x118>
80001580:	70 08       	ld.w	r8,r8[0x0]
80001582:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001586:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
8000158a:	30 18       	mov	r8,1
8000158c:	ef 58 ff fa 	st.h	r7[-6],r8
80001590:	c2 68       	rjmp	800015dc <taskSuspend+0x100>
	}
	//if this task should be inserted somewhere in the middle of the list
	else
	{
		iterator = SUSPENDEDLIST;
80001592:	49 98       	lddpc	r8,800015f4 <taskSuspend+0x118>
80001594:	70 08       	ld.w	r8,r8[0x0]
80001596:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->back_online_time >= iterator->back_online_time )
8000159a:	c0 68       	rjmp	800015a6 <taskSuspend+0xca>
		{
			iterator = iterator->nexttcb;
8000159c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015a0:	70 08       	ld.w	r8,r8[0x0]
800015a2:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	//if this task should be inserted somewhere in the middle of the list
	else
	{
		iterator = SUSPENDEDLIST;
		while( iterator && task->back_online_time >= iterator->back_online_time )
800015a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015aa:	58 08       	cp.w	r8,0
800015ac:	c0 d0       	breq	800015c6 <taskSuspend+0xea>
800015ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015b2:	f0 ea 00 6c 	ld.d	r10,r8[108]
800015b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015ba:	f0 e8 00 6c 	ld.d	r8,r8[108]
800015be:	10 3a       	cp.w	r10,r8
800015c0:	f2 0b 13 00 	cpc	r11,r9
800015c4:	ce c2       	brcc	8000159c <taskSuspend+0xc0>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
800015c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015ca:	71 98       	ld.w	r8,r8[0x64]
800015cc:	ee fb ff f4 	ld.w	r11,r7[-12]
800015d0:	10 9c       	mov	r12,r8
800015d2:	f0 1f 00 0a 	mcall	800015f8 <taskSuspend+0x11c>
		
		result = 1;
800015d6:	30 18       	mov	r8,1
800015d8:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	task->suspended = 1;
800015dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015e0:	30 19       	mov	r9,1
800015e2:	f1 49 00 78 	st.w	r8[120],r9
	
	return result;
800015e6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
800015ea:	10 9c       	mov	r12,r8
800015ec:	2f dd       	sub	sp,-12
800015ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800015f2:	00 00       	add	r0,r0
800015f4:	00 00       	add	r0,r0
800015f6:	06 18       	sub	r8,r3
800015f8:	80 00       	ld.sh	r0,r0[0x0]
800015fa:	12 44       	or	r4,r9

800015fc <taskUninstall>:

uint16_t taskUninstall( tcb * task )
{
800015fc:	eb cd 40 80 	pushm	r7,lr
80001600:	1a 97       	mov	r7,sp
80001602:	20 2d       	sub	sp,8
80001604:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80001608:	3f f8       	mov	r8,-1
8000160a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
8000160e:	49 78       	lddpc	r8,80001668 <taskUninstall+0x6c>
80001610:	70 09       	ld.w	r9,r8[0x0]
80001612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001616:	10 39       	cp.w	r9,r8
80001618:	c0 c1       	brne	80001630 <taskUninstall+0x34>
8000161a:	49 48       	lddpc	r8,80001668 <taskUninstall+0x6c>
8000161c:	70 08       	ld.w	r8,r8[0x0]
8000161e:	71 99       	ld.w	r9,r8[0x64]
80001620:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001624:	10 39       	cp.w	r9,r8
80001626:	c0 51       	brne	80001630 <taskUninstall+0x34>
	{
		TCBLIST	= NULL;
80001628:	49 08       	lddpc	r8,80001668 <taskUninstall+0x6c>
8000162a:	30 09       	mov	r9,0
8000162c:	91 09       	st.w	r8[0x0],r9
uint16_t taskUninstall( tcb * task )
{
	uint16_t result = -1;
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
8000162e:	c0 c8       	rjmp	80001646 <taskUninstall+0x4a>
	{
		TCBLIST	= NULL;
	}
	else if( TCBLIST == task )
80001630:	48 e8       	lddpc	r8,80001668 <taskUninstall+0x6c>
80001632:	70 09       	ld.w	r9,r8[0x0]
80001634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001638:	10 39       	cp.w	r9,r8
8000163a:	c0 61       	brne	80001646 <taskUninstall+0x4a>
	{
		TCBLIST = TCBLIST->nexttcb;
8000163c:	48 b8       	lddpc	r8,80001668 <taskUninstall+0x6c>
8000163e:	70 08       	ld.w	r8,r8[0x0]
80001640:	70 09       	ld.w	r9,r8[0x0]
80001642:	48 a8       	lddpc	r8,80001668 <taskUninstall+0x6c>
80001644:	91 09       	st.w	r8[0x0],r9
	}
	
	result = remove(task);
80001646:	ee fc ff f8 	ld.w	r12,r7[-8]
8000164a:	f0 1f 00 09 	mcall	8000166c <taskUninstall+0x70>
8000164e:	18 98       	mov	r8,r12
80001650:	5c 88       	casts.h	r8
80001652:	ef 58 ff fe 	st.h	r7[-2],r8
	
	result = 1;
80001656:	30 18       	mov	r8,1
80001658:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
8000165c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80001660:	10 9c       	mov	r12,r8
80001662:	2f ed       	sub	sp,-8
80001664:	e3 cd 80 80 	ldm	sp++,r7,pc
80001668:	00 00       	add	r0,r0
8000166a:	06 14       	sub	r4,r3
8000166c:	80 00       	ld.sh	r0,r0[0x0]
8000166e:	17 08       	ld.w	r8,r11++

80001670 <taskUnsuspend>:

uint16_t taskUnsuspend( tcb * task )
{
80001670:	eb cd 40 80 	pushm	r7,lr
80001674:	1a 97       	mov	r7,sp
80001676:	20 2d       	sub	sp,8
80001678:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
8000167c:	3f f8       	mov	r8,-1
8000167e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80001682:	4a 08       	lddpc	r8,80001700 <taskUnsuspend+0x90>
80001684:	70 09       	ld.w	r9,r8[0x0]
80001686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000168a:	10 39       	cp.w	r9,r8
8000168c:	c0 c1       	brne	800016a4 <taskUnsuspend+0x34>
8000168e:	49 d8       	lddpc	r8,80001700 <taskUnsuspend+0x90>
80001690:	70 08       	ld.w	r8,r8[0x0]
80001692:	71 99       	ld.w	r9,r8[0x64]
80001694:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001698:	10 39       	cp.w	r9,r8
8000169a:	c0 51       	brne	800016a4 <taskUnsuspend+0x34>
	{
		SUSPENDEDLIST		= NULL;
8000169c:	49 98       	lddpc	r8,80001700 <taskUnsuspend+0x90>
8000169e:	30 09       	mov	r9,0
800016a0:	91 09       	st.w	r8[0x0],r9
uint16_t taskUnsuspend( tcb * task )
{
	uint16_t result = -1;
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
800016a2:	c1 c8       	rjmp	800016da <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST		= NULL;
	}
	else if( SUSPENDEDLIST == task )
800016a4:	49 78       	lddpc	r8,80001700 <taskUnsuspend+0x90>
800016a6:	70 09       	ld.w	r9,r8[0x0]
800016a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ac:	10 39       	cp.w	r9,r8
800016ae:	c0 71       	brne	800016bc <taskUnsuspend+0x4c>
	{
		SUSPENDEDLIST = SUSPENDEDLIST->nexttcb;
800016b0:	49 48       	lddpc	r8,80001700 <taskUnsuspend+0x90>
800016b2:	70 08       	ld.w	r8,r8[0x0]
800016b4:	70 09       	ld.w	r9,r8[0x0]
800016b6:	49 38       	lddpc	r8,80001700 <taskUnsuspend+0x90>
800016b8:	91 09       	st.w	r8[0x0],r9
800016ba:	c1 08       	rjmp	800016da <taskUnsuspend+0x6a>
	}
	else if( SUSPENDEDLIST->prevtcb == task )
800016bc:	49 18       	lddpc	r8,80001700 <taskUnsuspend+0x90>
800016be:	70 08       	ld.w	r8,r8[0x0]
800016c0:	71 99       	ld.w	r9,r8[0x64]
800016c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016c6:	10 39       	cp.w	r9,r8
800016c8:	c0 91       	brne	800016da <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST->prevtcb = (SUSPENDEDLIST->prevtcb)->prevtcb;
800016ca:	48 e8       	lddpc	r8,80001700 <taskUnsuspend+0x90>
800016cc:	70 08       	ld.w	r8,r8[0x0]
800016ce:	48 d9       	lddpc	r9,80001700 <taskUnsuspend+0x90>
800016d0:	72 09       	ld.w	r9,r9[0x0]
800016d2:	73 99       	ld.w	r9,r9[0x64]
800016d4:	73 99       	ld.w	r9,r9[0x64]
800016d6:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	result = remove(task);
800016da:	ee fc ff f8 	ld.w	r12,r7[-8]
800016de:	f0 1f 00 0a 	mcall	80001704 <taskUnsuspend+0x94>
800016e2:	18 98       	mov	r8,r12
800016e4:	5c 88       	casts.h	r8
800016e6:	ef 58 ff fe 	st.h	r7[-2],r8
	task->suspended = 0;
800016ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ee:	30 09       	mov	r9,0
800016f0:	f1 49 00 78 	st.w	r8[120],r9
	
	return result;
800016f4:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800016f8:	10 9c       	mov	r12,r8
800016fa:	2f ed       	sub	sp,-8
800016fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80001700:	00 00       	add	r0,r0
80001702:	06 18       	sub	r8,r3
80001704:	80 00       	ld.sh	r0,r0[0x0]
80001706:	17 08       	ld.w	r8,r11++

80001708 <remove>:

uint16_t remove(tcb * removed_task)
{
80001708:	eb cd 40 80 	pushm	r7,lr
8000170c:	1a 97       	mov	r7,sp
8000170e:	20 2d       	sub	sp,8
80001710:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80001714:	3f f8       	mov	r8,-1
80001716:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( removed_task->prevtcb != NULL )
8000171a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000171e:	71 98       	ld.w	r8,r8[0x64]
80001720:	58 08       	cp.w	r8,0
80001722:	c0 80       	breq	80001732 <remove+0x2a>
	{
		(removed_task->prevtcb)->nexttcb = removed_task->nexttcb;
80001724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001728:	71 98       	ld.w	r8,r8[0x64]
8000172a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000172e:	72 09       	ld.w	r9,r9[0x0]
80001730:	91 09       	st.w	r8[0x0],r9
	}
	
	if( removed_task->nexttcb != NULL )
80001732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001736:	70 08       	ld.w	r8,r8[0x0]
80001738:	58 08       	cp.w	r8,0
8000173a:	c0 90       	breq	8000174c <remove+0x44>
	{
		(removed_task->nexttcb)->prevtcb = removed_task->prevtcb;
8000173c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001740:	70 08       	ld.w	r8,r8[0x0]
80001742:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001746:	73 99       	ld.w	r9,r9[0x64]
80001748:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	// nullify pointers
	removed_task->prevtcb = NULL;
8000174c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001750:	30 09       	mov	r9,0
80001752:	f1 49 00 64 	st.w	r8[100],r9
	removed_task->nexttcb = NULL;
80001756:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000175a:	30 09       	mov	r9,0
8000175c:	91 09       	st.w	r8[0x0],r9
		
	result = 1;
8000175e:	30 18       	mov	r8,1
80001760:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80001764:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80001768:	10 9c       	mov	r12,r8
8000176a:	2f ed       	sub	sp,-8
8000176c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001770 <ROSA_delay>:

uint16_t ROSA_delay( uint64_t ticks )
{
80001770:	eb cd 40 c0 	pushm	r6-r7,lr
80001774:	1a 97       	mov	r7,sp
80001776:	20 3d       	sub	sp,12
80001778:	ee eb ff f4 	st.d	r7[-12],r10
	interruptDisable();
8000177c:	f0 1f 00 15 	mcall	800017d0 <ROSA_delay+0x60>
	uint16_t result = -1;
80001780:	3f f8       	mov	r8,-1
80001782:	ef 58 ff fe 	st.h	r7[-2],r8
	
	taskUninstall(EXECTASK);
80001786:	49 48       	lddpc	r8,800017d4 <ROSA_delay+0x64>
80001788:	70 08       	ld.w	r8,r8[0x0]
8000178a:	10 9c       	mov	r12,r8
8000178c:	f0 1f 00 13 	mcall	800017d8 <ROSA_delay+0x68>
	EXECTASK->back_online_time = ROSA_getTickCount() + ticks;
80001790:	49 18       	lddpc	r8,800017d4 <ROSA_delay+0x64>
80001792:	70 06       	ld.w	r6,r8[0x0]
80001794:	f0 1f 00 12 	mcall	800017dc <ROSA_delay+0x6c>
80001798:	ee e8 ff f4 	ld.d	r8,r7[-12]
8000179c:	f4 08 00 08 	add	r8,r10,r8
800017a0:	f6 09 00 49 	adc	r9,r11,r9
800017a4:	ec e9 00 6c 	st.d	r6[108],r8
	taskSuspend(EXECTASK);
800017a8:	48 b8       	lddpc	r8,800017d4 <ROSA_delay+0x64>
800017aa:	70 08       	ld.w	r8,r8[0x0]
800017ac:	10 9c       	mov	r12,r8
800017ae:	f0 1f 00 0d 	mcall	800017e0 <ROSA_delay+0x70>
	
	result = ticks;
800017b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017b6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	ROSA_yield();
800017ba:	f0 1f 00 0b 	mcall	800017e4 <ROSA_delay+0x74>
	interruptEnable();
800017be:	f0 1f 00 0b 	mcall	800017e8 <ROSA_delay+0x78>
	return result;
800017c2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800017c6:	10 9c       	mov	r12,r8
800017c8:	2f dd       	sub	sp,-12
800017ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800017ce:	00 00       	add	r0,r0
800017d0:	80 00       	ld.sh	r0,r0[0x0]
800017d2:	2f 66       	sub	r6,-10
800017d4:	00 00       	add	r0,r0
800017d6:	06 20       	rsub	r0,r3
800017d8:	80 00       	ld.sh	r0,r0[0x0]
800017da:	15 fc       	ld.ub	r12,r10[0x7]
800017dc:	80 00       	ld.sh	r0,r0[0x0]
800017de:	12 2c       	rsub	r12,r9
800017e0:	80 00       	ld.sh	r0,r0[0x0]
800017e2:	14 dc       	st.w	--r10,r12
800017e4:	80 00       	ld.sh	r0,r0[0x0]
800017e6:	1b ce       	ld.ub	lr,sp[0x4]
800017e8:	80 00       	ld.sh	r0,r0[0x0]
800017ea:	2f 6a       	sub	r10,-10

800017ec <ROSA_delayUntil>:

uint16_t ROSA_delayUntil( uint64_t* lastWakeTime, uint64_t ticks )
{
800017ec:	eb cd 40 80 	pushm	r7,lr
800017f0:	1a 97       	mov	r7,sp
800017f2:	20 4d       	sub	sp,16
800017f4:	ef 4c ff f8 	st.w	r7[-8],r12
800017f8:	ee eb ff f0 	st.d	r7[-16],r10
	if( lastWakeTime == NULL ){ return -1; }
800017fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001800:	58 08       	cp.w	r8,0
80001802:	c0 31       	brne	80001808 <ROSA_delayUntil+0x1c>
80001804:	3f f8       	mov	r8,-1
80001806:	c3 c8       	rjmp	8000187e <ROSA_delayUntil+0x92>
	
	interruptDisable();
80001808:	f0 1f 00 20 	mcall	80001888 <ROSA_delayUntil+0x9c>
	uint16_t result = -1;
8000180c:	3f f8       	mov	r8,-1
8000180e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	taskUninstall(EXECTASK);
80001812:	49 f8       	lddpc	r8,8000188c <ROSA_delayUntil+0xa0>
80001814:	70 08       	ld.w	r8,r8[0x0]
80001816:	10 9c       	mov	r12,r8
80001818:	f0 1f 00 1e 	mcall	80001890 <ROSA_delayUntil+0xa4>
	EXECTASK->back_online_time = (* lastWakeTime) + ticks;
8000181c:	49 c8       	lddpc	r8,8000188c <ROSA_delayUntil+0xa0>
8000181e:	70 0c       	ld.w	r12,r8[0x0]
80001820:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001824:	f0 ea 00 00 	ld.d	r10,r8[0]
80001828:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000182c:	f4 08 00 08 	add	r8,r10,r8
80001830:	f6 09 00 49 	adc	r9,r11,r9
80001834:	f8 e9 00 6c 	st.d	r12[108],r8
	(* lastWakeTime) = (* lastWakeTime) + ticks;
80001838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000183c:	f0 ea 00 00 	ld.d	r10,r8[0]
80001840:	ee e8 ff f0 	ld.d	r8,r7[-16]
80001844:	f4 08 00 08 	add	r8,r10,r8
80001848:	f6 09 00 49 	adc	r9,r11,r9
8000184c:	ee fa ff f8 	ld.w	r10,r7[-8]
80001850:	f4 e9 00 00 	st.d	r10[0],r8
	taskSuspend(EXECTASK);
80001854:	48 e8       	lddpc	r8,8000188c <ROSA_delayUntil+0xa0>
80001856:	70 08       	ld.w	r8,r8[0x0]
80001858:	10 9c       	mov	r12,r8
8000185a:	f0 1f 00 0f 	mcall	80001894 <ROSA_delayUntil+0xa8>
	
	result = ticks - (* lastWakeTime);
8000185e:	ef 0a ff f6 	ld.sh	r10,r7[-10]
80001862:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001866:	f0 e8 00 00 	ld.d	r8,r8[0]
8000186a:	5c 88       	casts.h	r8
8000186c:	10 1a       	sub	r10,r8
8000186e:	ef 5a ff fe 	st.h	r7[-2],r10
	
	ROSA_yield();
80001872:	f0 1f 00 0a 	mcall	80001898 <ROSA_delayUntil+0xac>
	interruptEnable();
80001876:	f0 1f 00 0a 	mcall	8000189c <ROSA_delayUntil+0xb0>
	return result;
8000187a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000187e:	10 9c       	mov	r12,r8
80001880:	2f cd       	sub	sp,-16
80001882:	e3 cd 80 80 	ldm	sp++,r7,pc
80001886:	00 00       	add	r0,r0
80001888:	80 00       	ld.sh	r0,r0[0x0]
8000188a:	2f 66       	sub	r6,-10
8000188c:	00 00       	add	r0,r0
8000188e:	06 20       	rsub	r0,r3
80001890:	80 00       	ld.sh	r0,r0[0x0]
80001892:	15 fc       	ld.ub	r12,r10[0x7]
80001894:	80 00       	ld.sh	r0,r0[0x0]
80001896:	14 dc       	st.w	--r10,r12
80001898:	80 00       	ld.sh	r0,r0[0x0]
8000189a:	1b ce       	ld.ub	lr,sp[0x4]
8000189c:	80 00       	ld.sh	r0,r0[0x0]
8000189e:	2f 6a       	sub	r10,-10

800018a0 <idle>:
	return result;
}

#if IDLE_TASK_ENABLED
void idle(void)
{
800018a0:	eb cd 40 80 	pushm	r7,lr
800018a4:	1a 97       	mov	r7,sp
	while(1);
800018a6:	c0 08       	rjmp	800018a6 <idle+0x6>

800018a8 <ROSA_taskDelete>:
}
#endif

uint16_t ROSA_taskDelete(ROSA_taskHandle_t th)
{
800018a8:	eb cd 40 80 	pushm	r7,lr
800018ac:	1a 97       	mov	r7,sp
800018ae:	20 2d       	sub	sp,8
800018b0:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
800018b4:	f0 1f 00 0d 	mcall	800018e8 <ROSA_taskDelete+0x40>
	
	uint16_t result = ROSA_taskDelete_noncritical(th);
800018b8:	ee fc ff f8 	ld.w	r12,r7[-8]
800018bc:	f0 1f 00 0c 	mcall	800018ec <ROSA_taskDelete+0x44>
800018c0:	18 98       	mov	r8,r12
800018c2:	5c 88       	casts.h	r8
800018c4:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// if we have just deleted EXECTASK
	if( result == 10 )
800018c8:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800018cc:	30 a8       	mov	r8,10
800018ce:	f0 09 19 00 	cp.h	r9,r8
800018d2:	c0 31       	brne	800018d8 <ROSA_taskDelete+0x30>
	{
		ROSA_yield();
800018d4:	f0 1f 00 07 	mcall	800018f0 <ROSA_taskDelete+0x48>
	}
	interruptEnable();
800018d8:	f0 1f 00 07 	mcall	800018f4 <ROSA_taskDelete+0x4c>
	
	return result;
800018dc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800018e0:	10 9c       	mov	r12,r8
800018e2:	2f ed       	sub	sp,-8
800018e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800018e8:	80 00       	ld.sh	r0,r0[0x0]
800018ea:	2f 66       	sub	r6,-10
800018ec:	80 00       	ld.sh	r0,r0[0x0]
800018ee:	18 f8       	st.b	--r12,r8
800018f0:	80 00       	ld.sh	r0,r0[0x0]
800018f2:	1b ce       	ld.ub	lr,sp[0x4]
800018f4:	80 00       	ld.sh	r0,r0[0x0]
800018f6:	2f 6a       	sub	r10,-10

800018f8 <ROSA_taskDelete_noncritical>:

uint16_t ROSA_taskDelete_noncritical(ROSA_taskHandle_t th)
{
800018f8:	eb cd 40 80 	pushm	r7,lr
800018fc:	1a 97       	mov	r7,sp
800018fe:	20 4d       	sub	sp,16
80001900:	ef 4c ff f0 	st.w	r7[-16],r12
	int deleting_active_task = 0;
80001904:	30 08       	mov	r8,0
80001906:	ef 48 ff f4 	st.w	r7[-12],r8
	if( th == NULL )
8000190a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000190e:	58 08       	cp.w	r8,0
80001910:	c0 81       	brne	80001920 <ROSA_taskDelete_noncritical+0x28>
	{
		th = EXECTASK;
80001912:	4b 78       	lddpc	r8,800019ec <ROSA_taskDelete_noncritical+0xf4>
80001914:	70 08       	ld.w	r8,r8[0x0]
80001916:	ef 48 ff f0 	st.w	r7[-16],r8
		deleting_active_task = 1;
8000191a:	30 18       	mov	r8,1
8000191c:	ef 48 ff f4 	st.w	r7[-12],r8
	}
	
	uint16_t result = -1;
80001920:	3f f8       	mov	r8,-1
80001922:	ef 58 ff fa 	st.h	r7[-6],r8

// semaphore protections
/**********************************************************************/
#if SEMAPHORE_PROTECTIONS
	semaphore * iterator = SEMAPHORES;
80001926:	4b 38       	lddpc	r8,800019f0 <ROSA_taskDelete_noncritical+0xf8>
80001928:	70 08       	ld.w	r8,r8[0x0]
8000192a:	ef 48 ff fc 	st.w	r7[-4],r8
	while( iterator != NULL )
8000192e:	c1 c8       	rjmp	80001966 <ROSA_taskDelete_noncritical+0x6e>
	{
		if( iterator->current_task == th )
80001930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001934:	70 19       	ld.w	r9,r8[0x4]
80001936:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000193a:	10 39       	cp.w	r9,r8
8000193c:	c0 51       	brne	80001946 <ROSA_taskDelete_noncritical+0x4e>
		{
			semaphoreEvictCurrentTask( iterator );
8000193e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001942:	f0 1f 00 2d 	mcall	800019f4 <ROSA_taskDelete_noncritical+0xfc>
		}
	
		if( iterator->nextsemaphore == SEMAPHORES )
80001946:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000194a:	70 39       	ld.w	r9,r8[0xc]
8000194c:	4a 98       	lddpc	r8,800019f0 <ROSA_taskDelete_noncritical+0xf8>
8000194e:	70 08       	ld.w	r8,r8[0x0]
80001950:	10 39       	cp.w	r9,r8
80001952:	c0 51       	brne	8000195c <ROSA_taskDelete_noncritical+0x64>
		{
			iterator = NULL;
80001954:	30 08       	mov	r8,0
80001956:	ef 48 ff fc 	st.w	r7[-4],r8
8000195a:	c0 68       	rjmp	80001966 <ROSA_taskDelete_noncritical+0x6e>
		}
		else
		{
			iterator = iterator->nextsemaphore;
8000195c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001960:	70 38       	ld.w	r8,r8[0xc]
80001962:	ef 48 ff fc 	st.w	r7[-4],r8

// semaphore protections
/**********************************************************************/
#if SEMAPHORE_PROTECTIONS
	semaphore * iterator = SEMAPHORES;
	while( iterator != NULL )
80001966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000196a:	58 08       	cp.w	r8,0
8000196c:	ce 21       	brne	80001930 <ROSA_taskDelete_noncritical+0x38>
		{
			iterator = iterator->nextsemaphore;
		}
	}

	if( th->blocking_semaphore != NULL )
8000196e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001972:	71 d8       	ld.w	r8,r8[0x74]
80001974:	58 08       	cp.w	r8,0
80001976:	c0 90       	breq	80001988 <ROSA_taskDelete_noncritical+0x90>
	{
		semaphoreUnblockTask(th->blocking_semaphore, th);
80001978:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000197c:	71 d8       	ld.w	r8,r8[0x74]
8000197e:	ee fb ff f0 	ld.w	r11,r7[-16]
80001982:	10 9c       	mov	r12,r8
80001984:	f0 1f 00 1d 	mcall	800019f8 <ROSA_taskDelete_noncritical+0x100>
#endif
/**********************************************************************/
	
	// Tasks can be deleted both from the TCBLIST and from the SUSPENDEDLIST
	//result = taskUninstall(th);
	result = remove_from_all(th);
80001988:	ee fc ff f0 	ld.w	r12,r7[-16]
8000198c:	f0 1f 00 1c 	mcall	800019fc <ROSA_taskDelete_noncritical+0x104>
80001990:	18 98       	mov	r8,r12
80001992:	5c 88       	casts.h	r8
80001994:	ef 58 ff fa 	st.h	r7[-6],r8
	
	if(result == 1)
80001998:	ef 09 ff fa 	ld.sh	r9,r7[-6]
8000199c:	30 18       	mov	r8,1
8000199e:	f0 09 19 00 	cp.h	r9,r8
800019a2:	c1 f1       	brne	800019e0 <ROSA_taskDelete_noncritical+0xe8>
	{
		free(th->dataarea - th->datasize);
800019a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800019a8:	70 39       	ld.w	r9,r8[0xc]
800019aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800019ae:	70 48       	ld.w	r8,r8[0x10]
800019b0:	a3 68       	lsl	r8,0x2
800019b2:	5c 38       	neg	r8
800019b4:	f2 08 00 08 	add	r8,r9,r8
800019b8:	10 9c       	mov	r12,r8
800019ba:	f0 1f 00 12 	mcall	80001a00 <ROSA_taskDelete_noncritical+0x108>
		memset(th, 0, sizeof(tcb));
800019be:	37 ca       	mov	r10,124
800019c0:	30 0b       	mov	r11,0
800019c2:	ee fc ff f0 	ld.w	r12,r7[-16]
800019c6:	f0 1f 00 10 	mcall	80001a04 <ROSA_taskDelete_noncritical+0x10c>
		free(th);
800019ca:	ee fc ff f0 	ld.w	r12,r7[-16]
800019ce:	f0 1f 00 0d 	mcall	80001a00 <ROSA_taskDelete_noncritical+0x108>
		
		if( deleting_active_task )
800019d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800019d6:	58 08       	cp.w	r8,0
800019d8:	c0 40       	breq	800019e0 <ROSA_taskDelete_noncritical+0xe8>
		{
			result = 10;
800019da:	30 a8       	mov	r8,10
800019dc:	ef 58 ff fa 	st.h	r7[-6],r8
		}
	}
	
	return result;
800019e0:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
800019e4:	10 9c       	mov	r12,r8
800019e6:	2f cd       	sub	sp,-16
800019e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800019ec:	00 00       	add	r0,r0
800019ee:	06 20       	rsub	r0,r3
800019f0:	00 00       	add	r0,r0
800019f2:	06 1c       	sub	r12,r3
800019f4:	80 00       	ld.sh	r0,r0[0x0]
800019f6:	04 18       	sub	r8,r2
800019f8:	80 00       	ld.sh	r0,r0[0x0]
800019fa:	02 34       	cp.w	r4,r1
800019fc:	80 00       	ld.sh	r0,r0[0x0]
800019fe:	1a 08       	add	r8,sp
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	25 c8       	sub	r8,92
80001a04:	80 00       	ld.sh	r0,r0[0x0]
80001a06:	2a 30       	sub	r0,-93

80001a08 <remove_from_all>:

uint16_t remove_from_all( tcb * removed_task )
{
80001a08:	eb cd 40 80 	pushm	r7,lr
80001a0c:	1a 97       	mov	r7,sp
80001a0e:	20 2d       	sub	sp,8
80001a10:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80001a14:	3f f8       	mov	r8,-1
80001a16:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == removed_task && (TCBLIST->prevtcb) == removed_task )
80001a1a:	4b b8       	lddpc	r8,80001b04 <remove_from_all+0xfc>
80001a1c:	70 09       	ld.w	r9,r8[0x0]
80001a1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001a22:	10 39       	cp.w	r9,r8
80001a24:	c0 c1       	brne	80001a3c <remove_from_all+0x34>
80001a26:	4b 88       	lddpc	r8,80001b04 <remove_from_all+0xfc>
80001a28:	70 08       	ld.w	r8,r8[0x0]
80001a2a:	71 99       	ld.w	r9,r8[0x64]
80001a2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001a30:	10 39       	cp.w	r9,r8
80001a32:	c0 51       	brne	80001a3c <remove_from_all+0x34>
	{
		TCBLIST	= NULL;
80001a34:	4b 48       	lddpc	r8,80001b04 <remove_from_all+0xfc>
80001a36:	30 09       	mov	r9,0
80001a38:	91 09       	st.w	r8[0x0],r9
uint16_t remove_from_all( tcb * removed_task )
{
	uint16_t result = -1;
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == removed_task && (TCBLIST->prevtcb) == removed_task )
80001a3a:	c3 98       	rjmp	80001aac <remove_from_all+0xa4>
	{
		TCBLIST	= NULL;
	}
	else if( TCBLIST == removed_task )
80001a3c:	4b 28       	lddpc	r8,80001b04 <remove_from_all+0xfc>
80001a3e:	70 09       	ld.w	r9,r8[0x0]
80001a40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001a44:	10 39       	cp.w	r9,r8
80001a46:	c0 71       	brne	80001a54 <remove_from_all+0x4c>
	{
		TCBLIST = TCBLIST->nexttcb;
80001a48:	4a f8       	lddpc	r8,80001b04 <remove_from_all+0xfc>
80001a4a:	70 08       	ld.w	r8,r8[0x0]
80001a4c:	70 09       	ld.w	r9,r8[0x0]
80001a4e:	4a e8       	lddpc	r8,80001b04 <remove_from_all+0xfc>
80001a50:	91 09       	st.w	r8[0x0],r9
80001a52:	c2 d8       	rjmp	80001aac <remove_from_all+0xa4>
	}
	// change head and tail of SUSPENDEDLIST if necessary
	else if( SUSPENDEDLIST == removed_task && SUSPENDEDLIST->prevtcb == removed_task)
80001a54:	4a d8       	lddpc	r8,80001b08 <remove_from_all+0x100>
80001a56:	70 09       	ld.w	r9,r8[0x0]
80001a58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001a5c:	10 39       	cp.w	r9,r8
80001a5e:	c0 c1       	brne	80001a76 <remove_from_all+0x6e>
80001a60:	4a a8       	lddpc	r8,80001b08 <remove_from_all+0x100>
80001a62:	70 08       	ld.w	r8,r8[0x0]
80001a64:	71 99       	ld.w	r9,r8[0x64]
80001a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001a6a:	10 39       	cp.w	r9,r8
80001a6c:	c0 51       	brne	80001a76 <remove_from_all+0x6e>
	{
		SUSPENDEDLIST		= NULL;
80001a6e:	4a 78       	lddpc	r8,80001b08 <remove_from_all+0x100>
80001a70:	30 09       	mov	r9,0
80001a72:	91 09       	st.w	r8[0x0],r9
	else if( TCBLIST == removed_task )
	{
		TCBLIST = TCBLIST->nexttcb;
	}
	// change head and tail of SUSPENDEDLIST if necessary
	else if( SUSPENDEDLIST == removed_task && SUSPENDEDLIST->prevtcb == removed_task)
80001a74:	c1 c8       	rjmp	80001aac <remove_from_all+0xa4>
	{
		SUSPENDEDLIST		= NULL;
	}
	else if( SUSPENDEDLIST == removed_task )
80001a76:	4a 58       	lddpc	r8,80001b08 <remove_from_all+0x100>
80001a78:	70 09       	ld.w	r9,r8[0x0]
80001a7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001a7e:	10 39       	cp.w	r9,r8
80001a80:	c0 71       	brne	80001a8e <remove_from_all+0x86>
	{
		SUSPENDEDLIST = SUSPENDEDLIST->nexttcb;
80001a82:	4a 28       	lddpc	r8,80001b08 <remove_from_all+0x100>
80001a84:	70 08       	ld.w	r8,r8[0x0]
80001a86:	70 09       	ld.w	r9,r8[0x0]
80001a88:	4a 08       	lddpc	r8,80001b08 <remove_from_all+0x100>
80001a8a:	91 09       	st.w	r8[0x0],r9
80001a8c:	c1 08       	rjmp	80001aac <remove_from_all+0xa4>
	}
	else if( SUSPENDEDLIST->prevtcb == removed_task )
80001a8e:	49 f8       	lddpc	r8,80001b08 <remove_from_all+0x100>
80001a90:	70 08       	ld.w	r8,r8[0x0]
80001a92:	71 99       	ld.w	r9,r8[0x64]
80001a94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001a98:	10 39       	cp.w	r9,r8
80001a9a:	c0 91       	brne	80001aac <remove_from_all+0xa4>
	{
		SUSPENDEDLIST->prevtcb = (SUSPENDEDLIST->prevtcb)->prevtcb;
80001a9c:	49 b8       	lddpc	r8,80001b08 <remove_from_all+0x100>
80001a9e:	70 08       	ld.w	r8,r8[0x0]
80001aa0:	49 a9       	lddpc	r9,80001b08 <remove_from_all+0x100>
80001aa2:	72 09       	ld.w	r9,r9[0x0]
80001aa4:	73 99       	ld.w	r9,r9[0x64]
80001aa6:	73 99       	ld.w	r9,r9[0x64]
80001aa8:	f1 49 00 64 	st.w	r8[100],r9
	}

	if( removed_task->prevtcb != NULL )
80001aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001ab0:	71 98       	ld.w	r8,r8[0x64]
80001ab2:	58 08       	cp.w	r8,0
80001ab4:	c0 80       	breq	80001ac4 <remove_from_all+0xbc>
	{
		(removed_task->prevtcb)->nexttcb = removed_task->nexttcb;
80001ab6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001aba:	71 98       	ld.w	r8,r8[0x64]
80001abc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001ac0:	72 09       	ld.w	r9,r9[0x0]
80001ac2:	91 09       	st.w	r8[0x0],r9
	}
	
	if( removed_task->nexttcb != NULL )
80001ac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001ac8:	70 08       	ld.w	r8,r8[0x0]
80001aca:	58 08       	cp.w	r8,0
80001acc:	c0 90       	breq	80001ade <remove_from_all+0xd6>
	{
		(removed_task->nexttcb)->prevtcb = removed_task->prevtcb;
80001ace:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001ad2:	70 08       	ld.w	r8,r8[0x0]
80001ad4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001ad8:	73 99       	ld.w	r9,r9[0x64]
80001ada:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	// nullify pointers
	removed_task->prevtcb = NULL;
80001ade:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001ae2:	30 09       	mov	r9,0
80001ae4:	f1 49 00 64 	st.w	r8[100],r9
	removed_task->nexttcb = NULL;
80001ae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001aec:	30 09       	mov	r9,0
80001aee:	91 09       	st.w	r8[0x0],r9
		
	result = 1;
80001af0:	30 18       	mov	r8,1
80001af2:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80001af6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80001afa:	10 9c       	mov	r12,r8
80001afc:	2f ed       	sub	sp,-8
80001afe:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b02:	00 00       	add	r0,r0
80001b04:	00 00       	add	r0,r0
80001b06:	06 14       	sub	r4,r3
80001b08:	00 00       	add	r0,r0
80001b0a:	06 18       	sub	r8,r3

80001b0c <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80001b0c:	4b 5c       	lddpc	r12,80001be0 <_yield+0xa>
	lda.w r11,EXECTASK
80001b0e:	4b 6b       	lddpc	r11,80001be4 <_yield+0xe>
	ld.w r12,r12[0x0]
80001b10:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80001b12:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80001b14:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001b16:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001b18:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80001b1c:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80001b1e:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80001b20:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80001b22:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80001b26:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80001b28:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80001b2a:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80001b2c:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80001b2e:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80001b30:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80001b32:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80001b34:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80001b36:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80001b38:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80001b3a:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80001b3c:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80001b3e:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80001b40:	1c 9f       	mov	pc,lr

80001b42 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80001b42:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80001b44:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80001b46:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80001b48:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80001b4c:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80001b50:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80001b54:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80001b58:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80001b5c:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80001b60:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80001b64:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80001b68:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80001b6c:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80001b6e:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80001b70:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80001b72:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80001b74:	1c 9f       	mov	pc,lr

80001b76 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80001b76:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001b78:	49 bc       	lddpc	r12,80001be4 <_yield+0xe>
	ld.w r12,r12[0x0]
80001b7a:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80001b7c:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80001b7e:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80001b80:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80001b82:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80001b84:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80001b86:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80001b88:	33 40       	mov	r0,52
	add r0,r12
80001b8a:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001b8c:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80001b90:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001b92:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001b94:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80001b98:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80001b9a:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80001b9c:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80001b9e:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80001ba0:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80001ba2:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80001ba4:	1c 9f       	mov	pc,lr

80001ba6 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001ba6:	49 0c       	lddpc	r12,80001be4 <_yield+0xe>
	ld.w r12,r12[0x0]
80001ba8:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80001baa:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80001bac:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80001bae:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80001bb2:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80001bb4:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001bb6:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80001bb8:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001bba:	33 40       	mov	r0,52
	add r0,r12
80001bbc:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001bbe:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001bc2:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80001bc4:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001bc6:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80001bc8:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80001bca:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80001bcc:	d6 13       	rets

80001bce <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80001bce:	d4 01       	pushm	lr
	lda.w lr,_yield
80001bd0:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80001bd4:	d7 33       	scall

80001bd6 <_yield>:
_yield:
	call contextSave
80001bd6:	cd 0f       	rcall	80001b76 <contextSave>
	call scheduler
80001bd8:	f0 1f 00 04 	mcall	80001be8 <_yield+0x12>
	call contextRestore
80001bdc:	ce 5f       	rcall	80001ba6 <contextRestore>
80001bde:	00 00       	add	r0,r0
80001be0:	00 00       	add	r0,r0
80001be2:	06 14       	sub	r4,r3
80001be4:	00 00       	add	r0,r0
80001be6:	06 20       	rsub	r0,r3
80001be8:	80 00       	ld.sh	r0,r0[0x0]
80001bea:	1b ec       	ld.ub	r12,sp[0x6]

80001bec <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80001bec:	eb cd 40 80 	pushm	r7,lr
80001bf0:	1a 97       	mov	r7,sp
// for handling possible round robin configuration
/*******************************************************************/
#if ROUND_ROBIN_MODE_ENABLED
	//if( ROUNDROBIN_end )
	//{
		round_robin_ticks ++;
80001bf2:	4a a8       	lddpc	r8,80001c98 <scheduler+0xac>
80001bf4:	f0 ea 00 00 	ld.d	r10,r8[0]
80001bf8:	30 18       	mov	r8,1
80001bfa:	30 09       	mov	r9,0
80001bfc:	f4 08 00 08 	add	r8,r10,r8
80001c00:	f6 09 00 49 	adc	r9,r11,r9
80001c04:	4a 5a       	lddpc	r10,80001c98 <scheduler+0xac>
80001c06:	f4 e9 00 00 	st.d	r10[0],r8
		
		if( round_robin_ticks >= MAX_ROUND_ROBIN_TICKS )
80001c0a:	4a 48       	lddpc	r8,80001c98 <scheduler+0xac>
80001c0c:	f0 e8 00 00 	ld.d	r8,r8[0]
80001c10:	59 d8       	cp.w	r8,29
80001c12:	5c 29       	cpc	r9
80001c14:	e0 88 00 2b 	brls	80001c6a <scheduler+0x7e>
		{
			// this really should be possible to optimize
			if( EXECTASK->blocking_semaphore == NULL && EXECTASK->suspended == 0 )
80001c18:	4a 18       	lddpc	r8,80001c9c <scheduler+0xb0>
80001c1a:	70 08       	ld.w	r8,r8[0x0]
80001c1c:	71 d8       	ld.w	r8,r8[0x74]
80001c1e:	58 08       	cp.w	r8,0
80001c20:	c1 01       	brne	80001c40 <scheduler+0x54>
80001c22:	49 f8       	lddpc	r8,80001c9c <scheduler+0xb0>
80001c24:	70 08       	ld.w	r8,r8[0x0]
80001c26:	71 e8       	ld.w	r8,r8[0x78]
80001c28:	58 08       	cp.w	r8,0
80001c2a:	c0 b1       	brne	80001c40 <scheduler+0x54>
			{
				taskUninstall(EXECTASK);
80001c2c:	49 c8       	lddpc	r8,80001c9c <scheduler+0xb0>
80001c2e:	70 08       	ld.w	r8,r8[0x0]
80001c30:	10 9c       	mov	r12,r8
80001c32:	f0 1f 00 1c 	mcall	80001ca0 <scheduler+0xb4>
				taskInstall(EXECTASK);
80001c36:	49 a8       	lddpc	r8,80001c9c <scheduler+0xb0>
80001c38:	70 08       	ld.w	r8,r8[0x0]
80001c3a:	10 9c       	mov	r12,r8
80001c3c:	f0 1f 00 1a 	mcall	80001ca4 <scheduler+0xb8>
			}
			round_robin_ticks = 0;
80001c40:	49 6a       	lddpc	r10,80001c98 <scheduler+0xac>
80001c42:	30 08       	mov	r8,0
80001c44:	30 09       	mov	r9,0
80001c46:	f4 e9 00 00 	st.d	r10[0],r8
		}
	//}
#endif
/*******************************************************************/
	
	while( SUSPENDEDLIST && SUSPENDEDLIST->back_online_time <= system_ticks )
80001c4a:	c1 18       	rjmp	80001c6c <scheduler+0x80>
	{
		iterator = SUSPENDEDLIST;
80001c4c:	49 78       	lddpc	r8,80001ca8 <scheduler+0xbc>
80001c4e:	70 09       	ld.w	r9,r8[0x0]
80001c50:	49 78       	lddpc	r8,80001cac <scheduler+0xc0>
80001c52:	91 09       	st.w	r8[0x0],r9
		taskUnsuspend(iterator);
80001c54:	49 68       	lddpc	r8,80001cac <scheduler+0xc0>
80001c56:	70 08       	ld.w	r8,r8[0x0]
80001c58:	10 9c       	mov	r12,r8
80001c5a:	f0 1f 00 16 	mcall	80001cb0 <scheduler+0xc4>
		taskInstall(iterator);
80001c5e:	49 48       	lddpc	r8,80001cac <scheduler+0xc0>
80001c60:	70 08       	ld.w	r8,r8[0x0]
80001c62:	10 9c       	mov	r12,r8
80001c64:	f0 1f 00 10 	mcall	80001ca4 <scheduler+0xb8>
80001c68:	c0 28       	rjmp	80001c6c <scheduler+0x80>
		}
	//}
#endif
/*******************************************************************/
	
	while( SUSPENDEDLIST && SUSPENDEDLIST->back_online_time <= system_ticks )
80001c6a:	d7 03       	nop
80001c6c:	48 f8       	lddpc	r8,80001ca8 <scheduler+0xbc>
80001c6e:	70 08       	ld.w	r8,r8[0x0]
80001c70:	58 08       	cp.w	r8,0
80001c72:	c0 d0       	breq	80001c8c <scheduler+0xa0>
80001c74:	48 d8       	lddpc	r8,80001ca8 <scheduler+0xbc>
80001c76:	70 08       	ld.w	r8,r8[0x0]
80001c78:	f0 ea 00 6c 	ld.d	r10,r8[108]
80001c7c:	48 e8       	lddpc	r8,80001cb4 <scheduler+0xc8>
80001c7e:	f0 e8 00 00 	ld.d	r8,r8[0]
80001c82:	10 3a       	cp.w	r10,r8
80001c84:	f2 0b 13 00 	cpc	r11,r9
80001c88:	fe 98 ff e2 	brls	80001c4c <scheduler+0x60>
		iterator = SUSPENDEDLIST;
		taskUnsuspend(iterator);
		taskInstall(iterator);
	}
	
	EXECTASK = TCBLIST;
80001c8c:	48 b8       	lddpc	r8,80001cb8 <scheduler+0xcc>
80001c8e:	70 09       	ld.w	r9,r8[0x0]
80001c90:	48 38       	lddpc	r8,80001c9c <scheduler+0xb0>
80001c92:	91 09       	st.w	r8[0x0],r9
}
80001c94:	e3 cd 80 80 	ldm	sp++,r7,pc
80001c98:	00 00       	add	r0,r0
80001c9a:	06 24       	rsub	r4,r3
80001c9c:	00 00       	add	r0,r0
80001c9e:	06 20       	rsub	r0,r3
80001ca0:	80 00       	ld.sh	r0,r0[0x0]
80001ca2:	15 fc       	ld.ub	r12,r10[0x7]
80001ca4:	80 00       	ld.sh	r0,r0[0x0]
80001ca6:	12 b0       	st.h	r9++,r0
80001ca8:	00 00       	add	r0,r0
80001caa:	06 18       	sub	r8,r3
80001cac:	00 00       	add	r0,r0
80001cae:	06 34       	cp.w	r4,r3
80001cb0:	80 00       	ld.sh	r0,r0[0x0]
80001cb2:	16 70       	tst	r0,r11
80001cb4:	00 00       	add	r0,r0
80001cb6:	06 2c       	rsub	r12,r3
80001cb8:	00 00       	add	r0,r0
80001cba:	06 14       	sub	r4,r3

80001cbc <C.0.9446>:
80001cbc:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80001ccc <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80001ccc:	eb cd 40 80 	pushm	r7,lr
80001cd0:	1a 97       	mov	r7,sp
80001cd2:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80001cd4:	fe 78 38 00 	mov	r8,-51200
80001cd8:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80001cdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001ce0:	70 88       	ld.w	r8,r8[0x20]
80001ce2:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
80001ce6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001cea:	e2 18 00 10 	andl	r8,0x10,COH
80001cee:	c0 30       	breq	80001cf4 <timerISR+0x28>
		ROSA_yieldFromISR();
80001cf0:	f0 1f 00 03 	mcall	80001cfc <timerISR+0x30>
}
80001cf4:	2f ed       	sub	sp,-8
80001cf6:	e3 cd 40 80 	ldm	sp++,r7,lr
80001cfa:	d6 03       	rete
80001cfc:	80 00       	ld.sh	r0,r0[0x0]
80001cfe:	11 08       	ld.w	r8,r8++

80001d00 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80001d00:	eb cd 40 80 	pushm	r7,lr
80001d04:	1a 97       	mov	r7,sp
80001d06:	20 7d       	sub	sp,28
80001d08:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80001d0c:	4a 48       	lddpc	r8,80001d9c <timerPeriodSet+0x9c>
80001d0e:	ee ca 00 18 	sub	r10,r7,24
80001d12:	10 9b       	mov	r11,r8
80001d14:	f6 e8 00 00 	ld.d	r8,r11[0]
80001d18:	f4 e9 00 00 	st.d	r10[0],r8
80001d1c:	f6 e8 00 08 	ld.d	r8,r11[8]
80001d20:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80001d24:	30 48       	mov	r8,4
80001d26:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80001d2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001d2e:	20 18       	sub	r8,1
80001d30:	a3 68       	lsl	r8,0x2
80001d32:	ee 08 00 08 	add	r8,r7,r8
80001d36:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80001d3a:	e0 68 1b 00 	mov	r8,6912
80001d3e:	ea 18 00 b7 	orh	r8,0xb7
80001d42:	f0 09 0c 08 	divs	r8,r8,r9
80001d46:	10 99       	mov	r9,r8
80001d48:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001d4c:	b1 39       	mul	r9,r8
80001d4e:	e0 68 4d d3 	mov	r8,19923
80001d52:	ea 18 10 62 	orh	r8,0x1062
80001d56:	f2 08 06 48 	mulu.d	r8,r9,r8
80001d5a:	f2 08 16 06 	lsr	r8,r9,0x6
80001d5e:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80001d62:	ee fc ff fc 	ld.w	r12,r7[-4]
80001d66:	f0 1f 00 0f 	mcall	80001da0 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80001d6a:	ee fc ff f8 	ld.w	r12,r7[-8]
80001d6e:	f0 1f 00 0e 	mcall	80001da4 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80001d72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001d76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001d7a:	f2 08 02 4a 	mul	r10,r9,r8
80001d7e:	e0 68 9f 81 	mov	r8,40833
80001d82:	ea 18 16 5e 	orh	r8,0x165e
80001d86:	f4 08 04 48 	muls.d	r8,r10,r8
80001d8a:	b5 49       	asr	r9,0x14
80001d8c:	f4 08 14 1f 	asr	r8,r10,0x1f
80001d90:	f2 08 01 08 	sub	r8,r9,r8
80001d94:	10 9c       	mov	r12,r8
80001d96:	2f 9d       	sub	sp,-28
80001d98:	e3 cd 80 80 	ldm	sp++,r7,pc
80001d9c:	80 00       	ld.sh	r0,r0[0x0]
80001d9e:	1c bc       	st.h	lr++,r12
80001da0:	80 00       	ld.sh	r0,r0[0x0]
80001da2:	24 88       	sub	r8,72
80001da4:	80 00       	ld.sh	r0,r0[0x0]
80001da6:	24 72       	sub	r2,71

80001da8 <buttonInit>:
80001da8:	eb cd 40 80 	pushm	r7,lr
80001dac:	1a 97       	mov	r7,sp
80001dae:	30 1b       	mov	r11,1
80001db0:	35 8c       	mov	r12,88
80001db2:	f0 1f 00 07 	mcall	80001dcc <buttonInit+0x24>
80001db6:	30 1b       	mov	r11,1
80001db8:	35 5c       	mov	r12,85
80001dba:	f0 1f 00 05 	mcall	80001dcc <buttonInit+0x24>
80001dbe:	30 1b       	mov	r11,1
80001dc0:	35 2c       	mov	r12,82
80001dc2:	f0 1f 00 03 	mcall	80001dcc <buttonInit+0x24>
80001dc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80001dca:	00 00       	add	r0,r0
80001dcc:	80 00       	ld.sh	r0,r0[0x0]
80001dce:	1e 64       	and	r4,pc

80001dd0 <isButton>:
80001dd0:	eb cd 40 80 	pushm	r7,lr
80001dd4:	1a 97       	mov	r7,sp
80001dd6:	20 1d       	sub	sp,4
80001dd8:	ef 4c ff fc 	st.w	r7[-4],r12
80001ddc:	ee fc ff fc 	ld.w	r12,r7[-4]
80001de0:	f0 1f 00 05 	mcall	80001df4 <isButton+0x24>
80001de4:	18 98       	mov	r8,r12
80001de6:	58 08       	cp.w	r8,0
80001de8:	5f 08       	sreq	r8
80001dea:	10 9c       	mov	r12,r8
80001dec:	2f fd       	sub	sp,-4
80001dee:	e3 cd 80 80 	ldm	sp++,r7,pc
80001df2:	00 00       	add	r0,r0
80001df4:	80 00       	ld.sh	r0,r0[0x0]
80001df6:	1f fc       	ld.ub	r12,pc[0x7]

80001df8 <joystickInit>:
80001df8:	eb cd 40 80 	pushm	r7,lr
80001dfc:	1a 97       	mov	r7,sp
80001dfe:	30 1b       	mov	r11,1
80001e00:	31 bc       	mov	r12,27
80001e02:	f0 1f 00 0b 	mcall	80001e2c <joystickInit+0x34>
80001e06:	30 1b       	mov	r11,1
80001e08:	31 9c       	mov	r12,25
80001e0a:	f0 1f 00 09 	mcall	80001e2c <joystickInit+0x34>
80001e0e:	30 1b       	mov	r11,1
80001e10:	31 cc       	mov	r12,28
80001e12:	f0 1f 00 07 	mcall	80001e2c <joystickInit+0x34>
80001e16:	30 1b       	mov	r11,1
80001e18:	31 4c       	mov	r12,20
80001e1a:	f0 1f 00 05 	mcall	80001e2c <joystickInit+0x34>
80001e1e:	30 1b       	mov	r11,1
80001e20:	31 ac       	mov	r12,26
80001e22:	f0 1f 00 03 	mcall	80001e2c <joystickInit+0x34>
80001e26:	e3 cd 80 80 	ldm	sp++,r7,pc
80001e2a:	00 00       	add	r0,r0
80001e2c:	80 00       	ld.sh	r0,r0[0x0]
80001e2e:	1e 64       	and	r4,pc

80001e30 <delay_ms>:
80001e30:	eb cd 40 80 	pushm	r7,lr
80001e34:	1a 97       	mov	r7,sp
80001e36:	20 2d       	sub	sp,8
80001e38:	ef 4c ff f8 	st.w	r7[-8],r12
80001e3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001e40:	e0 69 04 42 	mov	r9,1090
80001e44:	b3 38       	mul	r8,r9
80001e46:	ef 48 ff fc 	st.w	r7[-4],r8
80001e4a:	c0 68       	rjmp	80001e56 <delay_ms+0x26>
80001e4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e50:	20 18       	sub	r8,1
80001e52:	ef 48 ff fc 	st.w	r7[-4],r8
80001e56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e5a:	58 08       	cp.w	r8,0
80001e5c:	cf 81       	brne	80001e4c <delay_ms+0x1c>
80001e5e:	2f ed       	sub	sp,-8
80001e60:	e3 cd 80 80 	ldm	sp++,r7,pc

80001e64 <gpioInit>:
80001e64:	eb cd 40 80 	pushm	r7,lr
80001e68:	1a 97       	mov	r7,sp
80001e6a:	20 7d       	sub	sp,28
80001e6c:	ef 4c ff ec 	st.w	r7[-20],r12
80001e70:	ef 4b ff e8 	st.w	r7[-24],r11
80001e74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001e78:	a5 58       	asr	r8,0x5
80001e7a:	ef 48 ff f4 	st.w	r7[-12],r8
80001e7e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001e82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001e86:	ef 48 ff fc 	st.w	r7[-4],r8
80001e8a:	30 19       	mov	r9,1
80001e8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001e90:	f2 08 09 48 	lsl	r8,r9,r8
80001e94:	ef 48 ff f8 	st.w	r7[-8],r8
80001e98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001e9c:	a9 68       	lsl	r8,0x8
80001e9e:	e0 28 f0 00 	sub	r8,61440
80001ea2:	ef 48 ff f0 	st.w	r7[-16],r8
80001ea6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001eaa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001eae:	91 19       	st.w	r8[0x4],r9
80001eb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001eb4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001eb8:	91 69       	st.w	r8[0x18],r9
80001eba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001ebe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001ec2:	91 a9       	st.w	r8[0x28],r9
80001ec4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001ec8:	ef 48 ff e4 	st.w	r7[-28],r8
80001ecc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001ed0:	58 08       	cp.w	r8,0
80001ed2:	c0 60       	breq	80001ede <gpioInit+0x7a>
80001ed4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001ed8:	58 18       	cp.w	r8,1
80001eda:	c0 90       	breq	80001eec <gpioInit+0x88>
80001edc:	c0 f8       	rjmp	80001efa <gpioInit+0x96>
80001ede:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001ee2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001ee6:	f1 49 00 44 	st.w	r8[68],r9
80001eea:	c0 e8       	rjmp	80001f06 <gpioInit+0xa2>
80001eec:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001ef0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001ef4:	f1 49 00 48 	st.w	r8[72],r9
80001ef8:	c0 78       	rjmp	80001f06 <gpioInit+0xa2>
80001efa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001efe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001f02:	f1 49 00 48 	st.w	r8[72],r9
80001f06:	2f 9d       	sub	sp,-28
80001f08:	e3 cd 80 80 	ldm	sp++,r7,pc

80001f0c <gpioClear>:
80001f0c:	eb cd 40 80 	pushm	r7,lr
80001f10:	1a 97       	mov	r7,sp
80001f12:	20 5d       	sub	sp,20
80001f14:	ef 4c ff ec 	st.w	r7[-20],r12
80001f18:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001f1c:	a5 58       	asr	r8,0x5
80001f1e:	ef 48 ff f4 	st.w	r7[-12],r8
80001f22:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001f26:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001f2a:	ef 48 ff fc 	st.w	r7[-4],r8
80001f2e:	30 19       	mov	r9,1
80001f30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001f34:	f2 08 09 48 	lsl	r8,r9,r8
80001f38:	ef 48 ff f8 	st.w	r7[-8],r8
80001f3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001f40:	a9 68       	lsl	r8,0x8
80001f42:	e0 28 f0 00 	sub	r8,61440
80001f46:	ef 48 ff f0 	st.w	r7[-16],r8
80001f4a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001f4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001f52:	f1 49 00 58 	st.w	r8[88],r9
80001f56:	2f bd       	sub	sp,-20
80001f58:	e3 cd 80 80 	ldm	sp++,r7,pc

80001f5c <gpioSet>:
80001f5c:	eb cd 40 80 	pushm	r7,lr
80001f60:	1a 97       	mov	r7,sp
80001f62:	20 5d       	sub	sp,20
80001f64:	ef 4c ff ec 	st.w	r7[-20],r12
80001f68:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001f6c:	a5 58       	asr	r8,0x5
80001f6e:	ef 48 ff f4 	st.w	r7[-12],r8
80001f72:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001f76:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001f7a:	ef 48 ff fc 	st.w	r7[-4],r8
80001f7e:	30 19       	mov	r9,1
80001f80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001f84:	f2 08 09 48 	lsl	r8,r9,r8
80001f88:	ef 48 ff f8 	st.w	r7[-8],r8
80001f8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001f90:	a9 68       	lsl	r8,0x8
80001f92:	e0 28 f0 00 	sub	r8,61440
80001f96:	ef 48 ff f0 	st.w	r7[-16],r8
80001f9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001f9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001fa2:	f1 49 00 54 	st.w	r8[84],r9
80001fa6:	2f bd       	sub	sp,-20
80001fa8:	e3 cd 80 80 	ldm	sp++,r7,pc

80001fac <gpioToggle>:
80001fac:	eb cd 40 80 	pushm	r7,lr
80001fb0:	1a 97       	mov	r7,sp
80001fb2:	20 5d       	sub	sp,20
80001fb4:	ef 4c ff ec 	st.w	r7[-20],r12
80001fb8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001fbc:	a5 58       	asr	r8,0x5
80001fbe:	ef 48 ff f4 	st.w	r7[-12],r8
80001fc2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001fc6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001fca:	ef 48 ff fc 	st.w	r7[-4],r8
80001fce:	30 19       	mov	r9,1
80001fd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001fd4:	f2 08 09 48 	lsl	r8,r9,r8
80001fd8:	ef 48 ff f8 	st.w	r7[-8],r8
80001fdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001fe0:	a9 68       	lsl	r8,0x8
80001fe2:	e0 28 f0 00 	sub	r8,61440
80001fe6:	ef 48 ff f0 	st.w	r7[-16],r8
80001fea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001fee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001ff2:	f1 49 00 5c 	st.w	r8[92],r9
80001ff6:	2f bd       	sub	sp,-20
80001ff8:	e3 cd 80 80 	ldm	sp++,r7,pc

80001ffc <gpioGet>:
80001ffc:	eb cd 40 80 	pushm	r7,lr
80002000:	1a 97       	mov	r7,sp
80002002:	20 5d       	sub	sp,20
80002004:	ef 4c ff ec 	st.w	r7[-20],r12
80002008:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000200c:	a5 58       	asr	r8,0x5
8000200e:	ef 48 ff f4 	st.w	r7[-12],r8
80002012:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002016:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000201a:	ef 48 ff fc 	st.w	r7[-4],r8
8000201e:	30 19       	mov	r9,1
80002020:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002024:	f2 08 09 48 	lsl	r8,r9,r8
80002028:	ef 48 ff f8 	st.w	r7[-8],r8
8000202c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002030:	a9 68       	lsl	r8,0x8
80002032:	e0 28 f0 00 	sub	r8,61440
80002036:	ef 48 ff f0 	st.w	r7[-16],r8
8000203a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000203e:	71 89       	ld.w	r9,r8[0x60]
80002040:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002044:	f3 e8 00 08 	and	r8,r9,r8
80002048:	10 9c       	mov	r12,r8
8000204a:	2f bd       	sub	sp,-20
8000204c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002050 <ledInit>:
80002050:	eb cd 40 80 	pushm	r7,lr
80002054:	1a 97       	mov	r7,sp
80002056:	20 9d       	sub	sp,36
80002058:	49 e8       	lddpc	r8,800020d0 <ledInit+0x80>
8000205a:	ee cb 00 24 	sub	r11,r7,36
8000205e:	10 9a       	mov	r10,r8
80002060:	f4 e8 00 00 	ld.d	r8,r10[0]
80002064:	f6 e9 00 00 	st.d	r11[0],r8
80002068:	f4 e8 00 08 	ld.d	r8,r10[8]
8000206c:	f6 e9 00 08 	st.d	r11[8],r8
80002070:	f4 e8 00 10 	ld.d	r8,r10[16]
80002074:	f6 e9 00 10 	st.d	r11[16],r8
80002078:	f4 e8 00 18 	ld.d	r8,r10[24]
8000207c:	f6 e9 00 18 	st.d	r11[24],r8
80002080:	30 08       	mov	r8,0
80002082:	ef 48 ff fc 	st.w	r7[-4],r8
80002086:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000208a:	a3 68       	lsl	r8,0x2
8000208c:	ee 08 00 08 	add	r8,r7,r8
80002090:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80002094:	10 9c       	mov	r12,r8
80002096:	f0 1f 00 10 	mcall	800020d4 <ledInit+0x84>
8000209a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000209e:	a3 68       	lsl	r8,0x2
800020a0:	ee 08 00 08 	add	r8,r7,r8
800020a4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800020a8:	30 0b       	mov	r11,0
800020aa:	10 9c       	mov	r12,r8
800020ac:	f0 1f 00 0b 	mcall	800020d8 <ledInit+0x88>
800020b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020b4:	58 78       	cp.w	r8,7
800020b6:	5f 18       	srne	r8
800020b8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800020bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020c0:	2f f8       	sub	r8,-1
800020c2:	ef 48 ff fc 	st.w	r7[-4],r8
800020c6:	58 09       	cp.w	r9,0
800020c8:	cd f1       	brne	80002086 <ledInit+0x36>
800020ca:	2f 7d       	sub	sp,-36
800020cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800020d0:	80 00       	ld.sh	r0,r0[0x0]
800020d2:	32 00       	mov	r0,32
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	20 fc       	sub	r12,15
800020d8:	80 00       	ld.sh	r0,r0[0x0]
800020da:	1e 64       	and	r4,pc

800020dc <ledOn>:
800020dc:	eb cd 40 80 	pushm	r7,lr
800020e0:	1a 97       	mov	r7,sp
800020e2:	20 1d       	sub	sp,4
800020e4:	ef 4c ff fc 	st.w	r7[-4],r12
800020e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800020ec:	f0 1f 00 03 	mcall	800020f8 <ledOn+0x1c>
800020f0:	2f fd       	sub	sp,-4
800020f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020f6:	00 00       	add	r0,r0
800020f8:	80 00       	ld.sh	r0,r0[0x0]
800020fa:	1f 0c       	ld.w	r12,pc++

800020fc <ledOff>:
800020fc:	eb cd 40 80 	pushm	r7,lr
80002100:	1a 97       	mov	r7,sp
80002102:	20 1d       	sub	sp,4
80002104:	ef 4c ff fc 	st.w	r7[-4],r12
80002108:	ee fc ff fc 	ld.w	r12,r7[-4]
8000210c:	f0 1f 00 03 	mcall	80002118 <ledOff+0x1c>
80002110:	2f fd       	sub	sp,-4
80002112:	e3 cd 80 80 	ldm	sp++,r7,pc
80002116:	00 00       	add	r0,r0
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	1f 5c       	ld.sh	r12,--pc

8000211c <ledToggle>:
8000211c:	eb cd 40 80 	pushm	r7,lr
80002120:	1a 97       	mov	r7,sp
80002122:	20 1d       	sub	sp,4
80002124:	ef 4c ff fc 	st.w	r7[-4],r12
80002128:	ee fc ff fc 	ld.w	r12,r7[-4]
8000212c:	f0 1f 00 03 	mcall	80002138 <ledToggle+0x1c>
80002130:	2f fd       	sub	sp,-4
80002132:	e3 cd 80 80 	ldm	sp++,r7,pc
80002136:	00 00       	add	r0,r0
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	1f ac       	ld.ub	r12,pc[0x2]

8000213c <potInit>:
8000213c:	d3 01       	pushm	r11-r12
8000213e:	e0 6c 10 00 	mov	r12,4096
80002142:	ea 1c ff ff 	orh	r12,0xffff
80002146:	31 6b       	mov	r11,22
80002148:	99 2b       	st.w	r12[0x8],r11
8000214a:	99 6b       	st.w	r12[0x18],r11
8000214c:	99 6b       	st.w	r12[0x18],r11
8000214e:	e0 6c 3c 00 	mov	r12,15360
80002152:	ea 1c ff ff 	orh	r12,0xffff
80002156:	30 1b       	mov	r11,1
80002158:	99 0b       	st.w	r12[0x0],r11
8000215a:	e0 6b 0f 1f 	mov	r11,3871
8000215e:	b1 6b       	lsl	r11,0x10
80002160:	99 1b       	st.w	r12[0x4],r11
80002162:	30 2b       	mov	r11,2
80002164:	99 4b       	st.w	r12[0x10],r11
80002166:	d3 02       	popm	r11-r12
80002168:	1c 9f       	mov	pc,lr

8000216a <potGetValue>:
8000216a:	d1 81       	pushm	r10-r11
8000216c:	e0 6c 3c 00 	mov	r12,15360
80002170:	ea 1c ff ff 	orh	r12,0xffff
80002174:	30 2b       	mov	r11,2
80002176:	99 0b       	st.w	r12[0x0],r11

80002178 <a1>:
80002178:	78 7a       	ld.w	r10,r12[0x1c]
8000217a:	16 7a       	tst	r10,r11
8000217c:	cf e0       	breq	80002178 <a1>
8000217e:	78 dc       	ld.w	r12,r12[0x34]
80002180:	d1 82       	popm	r10-r11
80002182:	1c 9f       	mov	pc,lr

80002184 <usartReset>:
80002184:	eb cd 40 80 	pushm	r7,lr
80002188:	1a 97       	mov	r7,sp
8000218a:	20 3d       	sub	sp,12
8000218c:	ef 4c ff f8 	st.w	r7[-8],r12
80002190:	f0 1f 00 16 	mcall	800021e8 <usartReset+0x64>
80002194:	18 98       	mov	r8,r12
80002196:	ef 48 ff fc 	st.w	r7[-4],r8
8000219a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000219e:	58 08       	cp.w	r8,0
800021a0:	c0 30       	breq	800021a6 <usartReset+0x22>
800021a2:	f0 1f 00 13 	mcall	800021ec <usartReset+0x68>
800021a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021aa:	3f f8       	mov	r8,-1
800021ac:	93 38       	st.w	r9[0xc],r8
800021ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021b2:	70 58       	ld.w	r8,r8[0x14]
800021b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021b8:	58 08       	cp.w	r8,0
800021ba:	c0 30       	breq	800021c0 <usartReset+0x3c>
800021bc:	f0 1f 00 0d 	mcall	800021f0 <usartReset+0x6c>
800021c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021c4:	30 08       	mov	r8,0
800021c6:	93 18       	st.w	r9[0x4],r8
800021c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021cc:	30 08       	mov	r8,0
800021ce:	93 98       	st.w	r9[0x24],r8
800021d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021d4:	30 08       	mov	r8,0
800021d6:	93 a8       	st.w	r9[0x28],r8
800021d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021dc:	ea 68 61 0c 	mov	r8,680204
800021e0:	93 08       	st.w	r9[0x0],r8
800021e2:	2f dd       	sub	sp,-12
800021e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	2f 6e       	sub	lr,-10
800021ec:	80 00       	ld.sh	r0,r0[0x0]
800021ee:	2f 66       	sub	r6,-10
800021f0:	80 00       	ld.sh	r0,r0[0x0]
800021f2:	2f 6a       	sub	r10,-10

800021f4 <usartSetBaudrate>:
800021f4:	eb cd 40 80 	pushm	r7,lr
800021f8:	1a 97       	mov	r7,sp
800021fa:	20 bd       	sub	sp,44
800021fc:	ef 4c ff ec 	st.w	r7[-20],r12
80002200:	ef 4b ff e8 	st.w	r7[-24],r11
80002204:	ef 4a ff e4 	st.w	r7[-28],r10
80002208:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000220c:	f0 09 15 04 	lsl	r9,r8,0x4
80002210:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002214:	10 39       	cp.w	r9,r8
80002216:	e0 8b 00 06 	brhi	80002222 <usartSetBaudrate+0x2e>
8000221a:	31 09       	mov	r9,16
8000221c:	ef 49 ff d4 	st.w	r7[-44],r9
80002220:	c0 48       	rjmp	80002228 <usartSetBaudrate+0x34>
80002222:	30 88       	mov	r8,8
80002224:	ef 48 ff d4 	st.w	r7[-44],r8
80002228:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000222c:	ef 49 ff f0 	st.w	r7[-16],r9
80002230:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002234:	f0 0a 15 03 	lsl	r10,r8,0x3
80002238:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000223c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002240:	f2 08 02 48 	mul	r8,r9,r8
80002244:	a1 98       	lsr	r8,0x1
80002246:	10 0a       	add	r10,r8
80002248:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000224c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002250:	f2 08 02 48 	mul	r8,r9,r8
80002254:	f4 08 0d 08 	divu	r8,r10,r8
80002258:	ef 48 ff f4 	st.w	r7[-12],r8
8000225c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002260:	a3 98       	lsr	r8,0x3
80002262:	ef 48 ff f8 	st.w	r7[-8],r8
80002266:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000226a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000226e:	ef 48 ff fc 	st.w	r7[-4],r8
80002272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002276:	58 08       	cp.w	r8,0
80002278:	c0 70       	breq	80002286 <usartSetBaudrate+0x92>
8000227a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000227e:	e0 48 ff ff 	cp.w	r8,65535
80002282:	e0 88 00 06 	brls	8000228e <usartSetBaudrate+0x9a>
80002286:	30 18       	mov	r8,1
80002288:	ef 48 ff d8 	st.w	r7[-40],r8
8000228c:	c2 c8       	rjmp	800022e4 <usartSetBaudrate+0xf0>
8000228e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002292:	70 18       	ld.w	r8,r8[0x4]
80002294:	10 99       	mov	r9,r8
80002296:	e4 19 ff f7 	andh	r9,0xfff7
8000229a:	e0 19 fe cf 	andl	r9,0xfecf
8000229e:	ef 49 ff dc 	st.w	r7[-36],r9
800022a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800022a6:	59 08       	cp.w	r8,16
800022a8:	c0 60       	breq	800022b4 <usartSetBaudrate+0xc0>
800022aa:	e8 68 00 00 	mov	r8,524288
800022ae:	ef 48 ff e0 	st.w	r7[-32],r8
800022b2:	c0 48       	rjmp	800022ba <usartSetBaudrate+0xc6>
800022b4:	30 09       	mov	r9,0
800022b6:	ef 49 ff e0 	st.w	r7[-32],r9
800022ba:	ee f9 ff dc 	ld.w	r9,r7[-36]
800022be:	ee f8 ff e0 	ld.w	r8,r7[-32]
800022c2:	10 49       	or	r9,r8
800022c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800022c8:	91 19       	st.w	r8[0x4],r9
800022ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ce:	f0 09 15 10 	lsl	r9,r8,0x10
800022d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022d6:	10 49       	or	r9,r8
800022d8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800022dc:	91 89       	st.w	r8[0x20],r9
800022de:	30 09       	mov	r9,0
800022e0:	ef 49 ff d8 	st.w	r7[-40],r9
800022e4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800022e8:	10 9c       	mov	r12,r8
800022ea:	2f 5d       	sub	sp,-44
800022ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800022f0 <usartInit>:
800022f0:	eb cd 40 80 	pushm	r7,lr
800022f4:	1a 97       	mov	r7,sp
800022f6:	20 4d       	sub	sp,16
800022f8:	ef 4c ff f8 	st.w	r7[-8],r12
800022fc:	ef 4b ff f4 	st.w	r7[-12],r11
80002300:	ef 4a ff f0 	st.w	r7[-16],r10
80002304:	fe 78 10 00 	mov	r8,-61440
80002308:	ef 48 ff fc 	st.w	r7[-4],r8
8000230c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002310:	30 18       	mov	r8,1
80002312:	93 28       	st.w	r9[0x8],r8
80002314:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002318:	30 28       	mov	r8,2
8000231a:	93 28       	st.w	r9[0x8],r8
8000231c:	ee fc ff f8 	ld.w	r12,r7[-8]
80002320:	f0 1f 00 3b 	mcall	8000240c <usartInit+0x11c>
80002324:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002328:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000232c:	70 08       	ld.w	r8,r8[0x0]
8000232e:	12 9a       	mov	r10,r9
80002330:	10 9b       	mov	r11,r8
80002332:	ee fc ff f8 	ld.w	r12,r7[-8]
80002336:	f0 1f 00 37 	mcall	80002410 <usartInit+0x120>
8000233a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000233e:	11 c9       	ld.ub	r9,r8[0x4]
80002340:	30 98       	mov	r8,9
80002342:	f0 09 18 00 	cp.b	r9,r8
80002346:	c0 a1       	brne	8000235a <usartInit+0x6a>
80002348:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000234c:	70 18       	ld.w	r8,r8[0x4]
8000234e:	10 99       	mov	r9,r8
80002350:	b1 b9       	sbr	r9,0x11
80002352:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002356:	91 19       	st.w	r8[0x4],r9
80002358:	c0 d8       	rjmp	80002372 <usartInit+0x82>
8000235a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000235e:	70 19       	ld.w	r9,r8[0x4]
80002360:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002364:	11 c8       	ld.ub	r8,r8[0x4]
80002366:	20 58       	sub	r8,5
80002368:	a7 68       	lsl	r8,0x6
8000236a:	10 49       	or	r9,r8
8000236c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002370:	91 19       	st.w	r8[0x4],r9
80002372:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002376:	70 1a       	ld.w	r10,r8[0x4]
80002378:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000237c:	11 d8       	ld.ub	r8,r8[0x5]
8000237e:	f0 09 15 09 	lsl	r9,r8,0x9
80002382:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002386:	f1 38 00 08 	ld.ub	r8,r8[8]
8000238a:	af 68       	lsl	r8,0xe
8000238c:	f3 e8 10 08 	or	r8,r9,r8
80002390:	f5 e8 10 09 	or	r9,r10,r8
80002394:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002398:	91 19       	st.w	r8[0x4],r9
8000239a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000239e:	90 39       	ld.sh	r9,r8[0x6]
800023a0:	30 28       	mov	r8,2
800023a2:	f0 09 19 00 	cp.h	r9,r8
800023a6:	e0 88 00 14 	brls	800023ce <usartInit+0xde>
800023aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023ae:	70 18       	ld.w	r8,r8[0x4]
800023b0:	10 99       	mov	r9,r8
800023b2:	ad b9       	sbr	r9,0xd
800023b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b8:	91 19       	st.w	r8[0x4],r9
800023ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800023be:	90 38       	ld.sh	r8,r8[0x6]
800023c0:	5c 78       	castu.h	r8
800023c2:	20 28       	sub	r8,2
800023c4:	10 99       	mov	r9,r8
800023c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023ca:	91 a9       	st.w	r8[0x28],r9
800023cc:	c0 d8       	rjmp	800023e6 <usartInit+0xf6>
800023ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023d2:	70 19       	ld.w	r9,r8[0x4]
800023d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800023d8:	90 38       	ld.sh	r8,r8[0x6]
800023da:	5c 78       	castu.h	r8
800023dc:	ad 68       	lsl	r8,0xc
800023de:	10 49       	or	r9,r8
800023e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023e4:	91 19       	st.w	r8[0x4],r9
800023e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023ea:	70 18       	ld.w	r8,r8[0x4]
800023ec:	10 99       	mov	r9,r8
800023ee:	e0 19 ff f0 	andl	r9,0xfff0
800023f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023f6:	91 19       	st.w	r8[0x4],r9
800023f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023fc:	35 08       	mov	r8,80
800023fe:	93 08       	st.w	r9[0x0],r8
80002400:	30 08       	mov	r8,0
80002402:	10 9c       	mov	r12,r8
80002404:	2f cd       	sub	sp,-16
80002406:	e3 cd 80 80 	ldm	sp++,r7,pc
8000240a:	00 00       	add	r0,r0
8000240c:	80 00       	ld.sh	r0,r0[0x0]
8000240e:	21 84       	sub	r4,24
80002410:	80 00       	ld.sh	r0,r0[0x0]
80002412:	21 f4       	sub	r4,31

80002414 <timerInit>:
80002414:	d5 01       	pushm	r11,lr
80002416:	d2 01       	pushm	r12
80002418:	f0 1f 00 28 	mcall	800024b8 <timerClearInterrupt+0x10>
8000241c:	f0 1f 00 28 	mcall	800024bc <timerClearInterrupt+0x14>
80002420:	e0 6c 38 00 	mov	r12,14336
80002424:	ea 1c ff ff 	orh	r12,0xffff
80002428:	e0 6b c0 00 	mov	r11,49152
8000242c:	ea 1b 00 00 	orh	r11,0x0
80002430:	99 1b       	st.w	r12[0x4],r11
80002432:	30 1b       	mov	r11,1
80002434:	a5 6b       	lsl	r11,0x4
80002436:	99 9b       	st.w	r12[0x24],r11
80002438:	d2 02       	popm	r12
8000243a:	f0 1f 00 22 	mcall	800024c0 <timerClearInterrupt+0x18>
8000243e:	d5 02       	popm	r11,lr
80002440:	1c 9f       	mov	pc,lr

80002442 <timerReset>:
80002442:	d3 01       	pushm	r11-r12
80002444:	e0 6c 38 00 	mov	r12,14336
80002448:	ea 1c ff ff 	orh	r12,0xffff
8000244c:	30 5b       	mov	r11,5
8000244e:	99 0b       	st.w	r12[0x0],r11
80002450:	e0 6b 00 08 	mov	r11,8
80002454:	ea 1b 00 00 	orh	r11,0x0
80002458:	76 0b       	ld.w	r11,r11[0x0]
8000245a:	99 7b       	st.w	r12[0x1c],r11
8000245c:	d3 02       	popm	r11-r12
8000245e:	1c 9f       	mov	pc,lr

80002460 <timerStop>:
80002460:	d3 01       	pushm	r11-r12
80002462:	e0 6c 38 00 	mov	r12,14336
80002466:	ea 1c ff ff 	orh	r12,0xffff
8000246a:	30 2b       	mov	r11,2
8000246c:	99 0b       	st.w	r12[0x0],r11
8000246e:	d3 02       	popm	r11-r12
80002470:	1c 9f       	mov	pc,lr

80002472 <timerRCSet>:
80002472:	d3 01       	pushm	r11-r12
80002474:	49 4b       	lddpc	r11,800024c4 <timerClearInterrupt+0x1c>
80002476:	97 0c       	st.w	r11[0x0],r12
80002478:	e0 6c 38 00 	mov	r12,14336
8000247c:	ea 1c ff ff 	orh	r12,0xffff
80002480:	76 0b       	ld.w	r11,r11[0x0]
80002482:	99 7b       	st.w	r12[0x1c],r11
80002484:	d3 02       	popm	r11-r12
80002486:	1c 9f       	mov	pc,lr

80002488 <timerPrescaleSet>:
80002488:	d3 81       	pushm	r10-r12
8000248a:	49 0b       	lddpc	r11,800024c8 <timerClearInterrupt+0x20>
8000248c:	97 0c       	st.w	r11[0x0],r12
8000248e:	e0 6c 38 00 	mov	r12,14336
80002492:	ea 1c ff ff 	orh	r12,0xffff
80002496:	78 1a       	ld.w	r10,r12[0x4]
80002498:	3f 8b       	mov	r11,-8
8000249a:	16 6a       	and	r10,r11
8000249c:	48 bb       	lddpc	r11,800024c8 <timerClearInterrupt+0x20>
8000249e:	76 0b       	ld.w	r11,r11[0x0]
800024a0:	14 4b       	or	r11,r10
800024a2:	99 1b       	st.w	r12[0x4],r11
800024a4:	d3 82       	popm	r10-r12
800024a6:	1c 9f       	mov	pc,lr

800024a8 <timerClearInterrupt>:
800024a8:	d2 01       	pushm	r12
800024aa:	e0 6c 38 00 	mov	r12,14336
800024ae:	ea 1c ff ff 	orh	r12,0xffff
800024b2:	78 8c       	ld.w	r12,r12[0x20]
800024b4:	d2 02       	popm	r12
800024b6:	1c 9f       	mov	pc,lr
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	2f 66       	sub	r6,-10
800024bc:	80 00       	ld.sh	r0,r0[0x0]
800024be:	24 a8       	sub	r8,74
800024c0:	80 00       	ld.sh	r0,r0[0x0]
800024c2:	1d 00       	ld.w	r0,lr++
800024c4:	00 00       	add	r0,r0
800024c6:	00 08       	add	r8,r0
800024c8:	00 00       	add	r0,r0
800024ca:	00 0c       	add	r12,r0

800024cc <_stext>:
800024cc:	49 7d       	lddpc	sp,80002528 <udata_end+0x4>
800024ce:	49 80       	lddpc	r0,8000252c <udata_end+0x8>
800024d0:	1a d0       	st.w	--sp,r0
800024d2:	e5 cd 20 00 	ldmts	sp,sp
800024d6:	1b 00       	ld.w	r0,sp++
800024d8:	49 60       	lddpc	r0,80002530 <udata_end+0xc>
800024da:	e3 b0 00 01 	mtsr	0x4,r0
800024de:	d5 53       	csrf	0x15
800024e0:	e0 6c 0c 00 	mov	r12,3072
800024e4:	ea 1c ff ff 	orh	r12,0xffff
800024e8:	e0 6b 01 07 	mov	r11,263
800024ec:	99 ab       	st.w	r12[0x28],r11
800024ee:	30 4b       	mov	r11,4
800024f0:	99 0b       	st.w	r12[0x0],r11
800024f2:	e0 6a 00 80 	mov	r10,128

800024f6 <xw8>:
800024f6:	79 5b       	ld.w	r11,r12[0x54]
800024f8:	14 7b       	tst	r11,r10
800024fa:	cf e0       	breq	800024f6 <xw8>
800024fc:	30 5b       	mov	r11,5
800024fe:	99 0b       	st.w	r12[0x0],r11

80002500 <idata_>:
80002500:	48 d0       	lddpc	r0,80002534 <udata_end+0x10>
80002502:	48 e1       	lddpc	r1,80002538 <udata_end+0x14>
80002504:	02 30       	cp.w	r0,r1
80002506:	c0 62       	brcc	80002512 <idata_end>
80002508:	48 d2       	lddpc	r2,8000253c <udata_end+0x18>

8000250a <idata_loop>:
8000250a:	05 04       	ld.w	r4,r2++
8000250c:	00 a4       	st.w	r0++,r4
8000250e:	02 30       	cp.w	r0,r1
80002510:	cf d3       	brcs	8000250a <idata_loop>

80002512 <idata_end>:
80002512:	48 c0       	lddpc	r0,80002540 <udata_end+0x1c>
80002514:	48 c1       	lddpc	r1,80002544 <udata_end+0x20>
80002516:	02 30       	cp.w	r0,r1
80002518:	c0 62       	brcc	80002524 <udata_end>
8000251a:	30 02       	mov	r2,0
8000251c:	30 03       	mov	r3,0

8000251e <udata_loop>:
8000251e:	00 a2       	st.w	r0++,r2
80002520:	02 30       	cp.w	r0,r1
80002522:	cf e3       	brcs	8000251e <udata_loop>

80002524 <udata_end>:
80002524:	48 9f       	lddpc	pc,80002548 <udata_end+0x24>
80002526:	00 00       	add	r0,r0
80002528:	00 01       	add	r1,r0
8000252a:	00 00       	add	r0,r0
8000252c:	00 00       	add	r0,r0
8000252e:	f0 00       	*unknown*
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	2e 00       	sub	r0,-32
80002534:	00 00       	add	r0,r0
80002536:	00 08       	add	r8,r0
80002538:	00 00       	add	r0,r0
8000253a:	05 18       	ld.sh	r8,r2++
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	32 88       	mov	r8,40
80002540:	00 00       	add	r0,r0
80002542:	05 18       	ld.sh	r8,r2++
80002544:	00 00       	add	r0,r0
80002546:	06 40       	or	r0,r3
80002548:	80 00       	ld.sh	r0,r0[0x0]
8000254a:	0b f4       	ld.ub	r4,r5[0x7]

8000254c <abs>:
8000254c:	5c 4c       	abs	r12
8000254e:	5e fc       	retal	r12

80002550 <calloc>:
80002550:	d4 01       	pushm	lr
80002552:	48 48       	lddpc	r8,80002560 <calloc+0x10>
80002554:	16 9a       	mov	r10,r11
80002556:	18 9b       	mov	r11,r12
80002558:	70 0c       	ld.w	r12,r8[0x0]
8000255a:	f0 1f 00 03 	mcall	80002564 <calloc+0x14>
8000255e:	d8 02       	popm	pc
80002560:	00 00       	add	r0,r0
80002562:	01 00       	ld.w	r0,r0++
80002564:	80 00       	ld.sh	r0,r0[0x0]
80002566:	25 68       	sub	r8,86

80002568 <_calloc_r>:
80002568:	d4 21       	pushm	r4-r7,lr
8000256a:	f4 0b 02 4b 	mul	r11,r10,r11
8000256e:	f0 1f 00 15 	mcall	800025c0 <_calloc_r+0x58>
80002572:	18 97       	mov	r7,r12
80002574:	c2 30       	breq	800025ba <_calloc_r+0x52>
80002576:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000257a:	e0 1a ff fc 	andl	r10,0xfffc
8000257e:	20 4a       	sub	r10,4
80002580:	e0 4a 00 24 	cp.w	r10,36
80002584:	e0 8b 00 18 	brhi	800025b4 <_calloc_r+0x4c>
80002588:	18 98       	mov	r8,r12
8000258a:	59 3a       	cp.w	r10,19
8000258c:	e0 88 00 0f 	brls	800025aa <_calloc_r+0x42>
80002590:	30 09       	mov	r9,0
80002592:	10 a9       	st.w	r8++,r9
80002594:	10 a9       	st.w	r8++,r9
80002596:	59 ba       	cp.w	r10,27
80002598:	e0 88 00 09 	brls	800025aa <_calloc_r+0x42>
8000259c:	10 a9       	st.w	r8++,r9
8000259e:	10 a9       	st.w	r8++,r9
800025a0:	e0 4a 00 24 	cp.w	r10,36
800025a4:	c0 31       	brne	800025aa <_calloc_r+0x42>
800025a6:	10 a9       	st.w	r8++,r9
800025a8:	10 a9       	st.w	r8++,r9
800025aa:	30 09       	mov	r9,0
800025ac:	10 a9       	st.w	r8++,r9
800025ae:	91 19       	st.w	r8[0x4],r9
800025b0:	91 09       	st.w	r8[0x0],r9
800025b2:	c0 48       	rjmp	800025ba <_calloc_r+0x52>
800025b4:	30 0b       	mov	r11,0
800025b6:	f0 1f 00 04 	mcall	800025c4 <_calloc_r+0x5c>
800025ba:	0e 9c       	mov	r12,r7
800025bc:	d8 22       	popm	r4-r7,pc
800025be:	00 00       	add	r0,r0
800025c0:	80 00       	ld.sh	r0,r0[0x0]
800025c2:	25 e0       	sub	r0,94
800025c4:	80 00       	ld.sh	r0,r0[0x0]
800025c6:	2a 30       	sub	r0,-93

800025c8 <free>:
800025c8:	d4 01       	pushm	lr
800025ca:	48 48       	lddpc	r8,800025d8 <free+0x10>
800025cc:	18 9b       	mov	r11,r12
800025ce:	70 0c       	ld.w	r12,r8[0x0]
800025d0:	f0 1f 00 03 	mcall	800025dc <free+0x14>
800025d4:	d8 02       	popm	pc
800025d6:	00 00       	add	r0,r0
800025d8:	00 00       	add	r0,r0
800025da:	01 00       	ld.w	r0,r0++
800025dc:	80 00       	ld.sh	r0,r0[0x0]
800025de:	2b 60       	sub	r0,-74

800025e0 <_malloc_r>:
800025e0:	d4 31       	pushm	r0-r7,lr
800025e2:	f6 c8 ff f5 	sub	r8,r11,-11
800025e6:	18 95       	mov	r5,r12
800025e8:	10 97       	mov	r7,r8
800025ea:	e0 17 ff f8 	andl	r7,0xfff8
800025ee:	59 68       	cp.w	r8,22
800025f0:	f9 b7 08 10 	movls	r7,16
800025f4:	16 37       	cp.w	r7,r11
800025f6:	5f 38       	srlo	r8
800025f8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800025fc:	c0 50       	breq	80002606 <_malloc_r+0x26>
800025fe:	30 c8       	mov	r8,12
80002600:	99 38       	st.w	r12[0xc],r8
80002602:	e0 8f 01 f3 	bral	800029e8 <_malloc_r+0x408>
80002606:	f0 1f 00 50 	mcall	80002744 <_malloc_r+0x164>
8000260a:	e0 47 01 f7 	cp.w	r7,503
8000260e:	e0 8b 00 1c 	brhi	80002646 <_malloc_r+0x66>
80002612:	ee 03 16 03 	lsr	r3,r7,0x3
80002616:	4c d8       	lddpc	r8,80002748 <_malloc_r+0x168>
80002618:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000261c:	70 36       	ld.w	r6,r8[0xc]
8000261e:	10 36       	cp.w	r6,r8
80002620:	c0 61       	brne	8000262c <_malloc_r+0x4c>
80002622:	ec c8 ff f8 	sub	r8,r6,-8
80002626:	70 36       	ld.w	r6,r8[0xc]
80002628:	10 36       	cp.w	r6,r8
8000262a:	c0 c0       	breq	80002642 <_malloc_r+0x62>
8000262c:	6c 18       	ld.w	r8,r6[0x4]
8000262e:	e0 18 ff fc 	andl	r8,0xfffc
80002632:	6c 3a       	ld.w	r10,r6[0xc]
80002634:	ec 08 00 09 	add	r9,r6,r8
80002638:	0a 9c       	mov	r12,r5
8000263a:	6c 28       	ld.w	r8,r6[0x8]
8000263c:	95 28       	st.w	r10[0x8],r8
8000263e:	91 3a       	st.w	r8[0xc],r10
80002640:	c4 68       	rjmp	800026cc <_malloc_r+0xec>
80002642:	2f e3       	sub	r3,-2
80002644:	c4 c8       	rjmp	800026dc <_malloc_r+0xfc>
80002646:	ee 03 16 09 	lsr	r3,r7,0x9
8000264a:	c0 41       	brne	80002652 <_malloc_r+0x72>
8000264c:	ee 03 16 03 	lsr	r3,r7,0x3
80002650:	c2 68       	rjmp	8000269c <_malloc_r+0xbc>
80002652:	58 43       	cp.w	r3,4
80002654:	e0 8b 00 06 	brhi	80002660 <_malloc_r+0x80>
80002658:	ee 03 16 06 	lsr	r3,r7,0x6
8000265c:	2c 83       	sub	r3,-56
8000265e:	c1 f8       	rjmp	8000269c <_malloc_r+0xbc>
80002660:	59 43       	cp.w	r3,20
80002662:	e0 8b 00 04 	brhi	8000266a <_malloc_r+0x8a>
80002666:	2a 53       	sub	r3,-91
80002668:	c1 a8       	rjmp	8000269c <_malloc_r+0xbc>
8000266a:	e0 43 00 54 	cp.w	r3,84
8000266e:	e0 8b 00 06 	brhi	8000267a <_malloc_r+0x9a>
80002672:	ee 03 16 0c 	lsr	r3,r7,0xc
80002676:	29 23       	sub	r3,-110
80002678:	c1 28       	rjmp	8000269c <_malloc_r+0xbc>
8000267a:	e0 43 01 54 	cp.w	r3,340
8000267e:	e0 8b 00 06 	brhi	8000268a <_malloc_r+0xaa>
80002682:	ee 03 16 0f 	lsr	r3,r7,0xf
80002686:	28 93       	sub	r3,-119
80002688:	c0 a8       	rjmp	8000269c <_malloc_r+0xbc>
8000268a:	e0 43 05 54 	cp.w	r3,1364
8000268e:	e0 88 00 04 	brls	80002696 <_malloc_r+0xb6>
80002692:	37 e3       	mov	r3,126
80002694:	c0 48       	rjmp	8000269c <_malloc_r+0xbc>
80002696:	ee 03 16 12 	lsr	r3,r7,0x12
8000269a:	28 43       	sub	r3,-124
8000269c:	4a ba       	lddpc	r10,80002748 <_malloc_r+0x168>
8000269e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800026a2:	74 36       	ld.w	r6,r10[0xc]
800026a4:	c1 98       	rjmp	800026d6 <_malloc_r+0xf6>
800026a6:	6c 19       	ld.w	r9,r6[0x4]
800026a8:	e0 19 ff fc 	andl	r9,0xfffc
800026ac:	f2 07 01 0b 	sub	r11,r9,r7
800026b0:	58 fb       	cp.w	r11,15
800026b2:	e0 8a 00 04 	brle	800026ba <_malloc_r+0xda>
800026b6:	20 13       	sub	r3,1
800026b8:	c1 18       	rjmp	800026da <_malloc_r+0xfa>
800026ba:	6c 38       	ld.w	r8,r6[0xc]
800026bc:	58 0b       	cp.w	r11,0
800026be:	c0 b5       	brlt	800026d4 <_malloc_r+0xf4>
800026c0:	6c 2a       	ld.w	r10,r6[0x8]
800026c2:	ec 09 00 09 	add	r9,r6,r9
800026c6:	0a 9c       	mov	r12,r5
800026c8:	91 2a       	st.w	r8[0x8],r10
800026ca:	95 38       	st.w	r10[0xc],r8
800026cc:	72 18       	ld.w	r8,r9[0x4]
800026ce:	a1 a8       	sbr	r8,0x0
800026d0:	93 18       	st.w	r9[0x4],r8
800026d2:	cb c8       	rjmp	8000284a <_malloc_r+0x26a>
800026d4:	10 96       	mov	r6,r8
800026d6:	14 36       	cp.w	r6,r10
800026d8:	ce 71       	brne	800026a6 <_malloc_r+0xc6>
800026da:	2f f3       	sub	r3,-1
800026dc:	49 ba       	lddpc	r10,80002748 <_malloc_r+0x168>
800026de:	f4 cc ff f8 	sub	r12,r10,-8
800026e2:	78 26       	ld.w	r6,r12[0x8]
800026e4:	18 36       	cp.w	r6,r12
800026e6:	c6 e0       	breq	800027c2 <_malloc_r+0x1e2>
800026e8:	6c 19       	ld.w	r9,r6[0x4]
800026ea:	e0 19 ff fc 	andl	r9,0xfffc
800026ee:	f2 07 01 08 	sub	r8,r9,r7
800026f2:	58 f8       	cp.w	r8,15
800026f4:	e0 89 00 90 	brgt	80002814 <_malloc_r+0x234>
800026f8:	99 3c       	st.w	r12[0xc],r12
800026fa:	99 2c       	st.w	r12[0x8],r12
800026fc:	58 08       	cp.w	r8,0
800026fe:	c0 55       	brlt	80002708 <_malloc_r+0x128>
80002700:	ec 09 00 09 	add	r9,r6,r9
80002704:	0a 9c       	mov	r12,r5
80002706:	ce 3b       	rjmp	800026cc <_malloc_r+0xec>
80002708:	e0 49 01 ff 	cp.w	r9,511
8000270c:	e0 8b 00 13 	brhi	80002732 <_malloc_r+0x152>
80002710:	a3 99       	lsr	r9,0x3
80002712:	f4 09 00 38 	add	r8,r10,r9<<0x3
80002716:	70 2b       	ld.w	r11,r8[0x8]
80002718:	8d 38       	st.w	r6[0xc],r8
8000271a:	8d 2b       	st.w	r6[0x8],r11
8000271c:	97 36       	st.w	r11[0xc],r6
8000271e:	91 26       	st.w	r8[0x8],r6
80002720:	a3 49       	asr	r9,0x2
80002722:	74 18       	ld.w	r8,r10[0x4]
80002724:	30 1b       	mov	r11,1
80002726:	f6 09 09 49 	lsl	r9,r11,r9
8000272a:	f1 e9 10 09 	or	r9,r8,r9
8000272e:	95 19       	st.w	r10[0x4],r9
80002730:	c4 98       	rjmp	800027c2 <_malloc_r+0x1e2>
80002732:	f2 0a 16 09 	lsr	r10,r9,0x9
80002736:	58 4a       	cp.w	r10,4
80002738:	e0 8b 00 0a 	brhi	8000274c <_malloc_r+0x16c>
8000273c:	f2 0a 16 06 	lsr	r10,r9,0x6
80002740:	2c 8a       	sub	r10,-56
80002742:	c2 38       	rjmp	80002788 <_malloc_r+0x1a8>
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	2a 3e       	sub	lr,-93
80002748:	00 00       	add	r0,r0
8000274a:	01 04       	ld.w	r4,r0++
8000274c:	59 4a       	cp.w	r10,20
8000274e:	e0 8b 00 04 	brhi	80002756 <_malloc_r+0x176>
80002752:	2a 5a       	sub	r10,-91
80002754:	c1 a8       	rjmp	80002788 <_malloc_r+0x1a8>
80002756:	e0 4a 00 54 	cp.w	r10,84
8000275a:	e0 8b 00 06 	brhi	80002766 <_malloc_r+0x186>
8000275e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80002762:	29 2a       	sub	r10,-110
80002764:	c1 28       	rjmp	80002788 <_malloc_r+0x1a8>
80002766:	e0 4a 01 54 	cp.w	r10,340
8000276a:	e0 8b 00 06 	brhi	80002776 <_malloc_r+0x196>
8000276e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80002772:	28 9a       	sub	r10,-119
80002774:	c0 a8       	rjmp	80002788 <_malloc_r+0x1a8>
80002776:	e0 4a 05 54 	cp.w	r10,1364
8000277a:	e0 88 00 04 	brls	80002782 <_malloc_r+0x1a2>
8000277e:	37 ea       	mov	r10,126
80002780:	c0 48       	rjmp	80002788 <_malloc_r+0x1a8>
80002782:	f2 0a 16 12 	lsr	r10,r9,0x12
80002786:	28 4a       	sub	r10,-124
80002788:	4c 8b       	lddpc	r11,800028a8 <_malloc_r+0x2c8>
8000278a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000278e:	68 28       	ld.w	r8,r4[0x8]
80002790:	08 38       	cp.w	r8,r4
80002792:	c0 e1       	brne	800027ae <_malloc_r+0x1ce>
80002794:	76 19       	ld.w	r9,r11[0x4]
80002796:	a3 4a       	asr	r10,0x2
80002798:	30 1e       	mov	lr,1
8000279a:	fc 0a 09 4a 	lsl	r10,lr,r10
8000279e:	f3 ea 10 0a 	or	r10,r9,r10
800027a2:	10 99       	mov	r9,r8
800027a4:	97 1a       	st.w	r11[0x4],r10
800027a6:	c0 a8       	rjmp	800027ba <_malloc_r+0x1da>
800027a8:	70 28       	ld.w	r8,r8[0x8]
800027aa:	08 38       	cp.w	r8,r4
800027ac:	c0 60       	breq	800027b8 <_malloc_r+0x1d8>
800027ae:	70 1a       	ld.w	r10,r8[0x4]
800027b0:	e0 1a ff fc 	andl	r10,0xfffc
800027b4:	14 39       	cp.w	r9,r10
800027b6:	cf 93       	brcs	800027a8 <_malloc_r+0x1c8>
800027b8:	70 39       	ld.w	r9,r8[0xc]
800027ba:	8d 39       	st.w	r6[0xc],r9
800027bc:	8d 28       	st.w	r6[0x8],r8
800027be:	91 36       	st.w	r8[0xc],r6
800027c0:	93 26       	st.w	r9[0x8],r6
800027c2:	e6 08 14 02 	asr	r8,r3,0x2
800027c6:	30 1b       	mov	r11,1
800027c8:	4b 84       	lddpc	r4,800028a8 <_malloc_r+0x2c8>
800027ca:	f6 08 09 4b 	lsl	r11,r11,r8
800027ce:	68 18       	ld.w	r8,r4[0x4]
800027d0:	10 3b       	cp.w	r11,r8
800027d2:	e0 8b 00 6f 	brhi	800028b0 <_malloc_r+0x2d0>
800027d6:	f7 e8 00 09 	and	r9,r11,r8
800027da:	c0 b1       	brne	800027f0 <_malloc_r+0x210>
800027dc:	e0 13 ff fc 	andl	r3,0xfffc
800027e0:	a1 7b       	lsl	r11,0x1
800027e2:	2f c3       	sub	r3,-4
800027e4:	c0 38       	rjmp	800027ea <_malloc_r+0x20a>
800027e6:	2f c3       	sub	r3,-4
800027e8:	a1 7b       	lsl	r11,0x1
800027ea:	f7 e8 00 09 	and	r9,r11,r8
800027ee:	cf c0       	breq	800027e6 <_malloc_r+0x206>
800027f0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800027f4:	06 92       	mov	r2,r3
800027f6:	1c 91       	mov	r1,lr
800027f8:	62 36       	ld.w	r6,r1[0xc]
800027fa:	c2 e8       	rjmp	80002856 <_malloc_r+0x276>
800027fc:	6c 1a       	ld.w	r10,r6[0x4]
800027fe:	e0 1a ff fc 	andl	r10,0xfffc
80002802:	f4 07 01 08 	sub	r8,r10,r7
80002806:	58 f8       	cp.w	r8,15
80002808:	e0 8a 00 15 	brle	80002832 <_malloc_r+0x252>
8000280c:	6c 3a       	ld.w	r10,r6[0xc]
8000280e:	6c 29       	ld.w	r9,r6[0x8]
80002810:	95 29       	st.w	r10[0x8],r9
80002812:	93 3a       	st.w	r9[0xc],r10
80002814:	0e 99       	mov	r9,r7
80002816:	ec 07 00 07 	add	r7,r6,r7
8000281a:	a1 a9       	sbr	r9,0x0
8000281c:	99 37       	st.w	r12[0xc],r7
8000281e:	99 27       	st.w	r12[0x8],r7
80002820:	8d 19       	st.w	r6[0x4],r9
80002822:	ee 08 09 08 	st.w	r7[r8],r8
80002826:	8f 2c       	st.w	r7[0x8],r12
80002828:	8f 3c       	st.w	r7[0xc],r12
8000282a:	a1 a8       	sbr	r8,0x0
8000282c:	0a 9c       	mov	r12,r5
8000282e:	8f 18       	st.w	r7[0x4],r8
80002830:	c0 d8       	rjmp	8000284a <_malloc_r+0x26a>
80002832:	6c 39       	ld.w	r9,r6[0xc]
80002834:	58 08       	cp.w	r8,0
80002836:	c0 f5       	brlt	80002854 <_malloc_r+0x274>
80002838:	ec 0a 00 0a 	add	r10,r6,r10
8000283c:	74 18       	ld.w	r8,r10[0x4]
8000283e:	a1 a8       	sbr	r8,0x0
80002840:	0a 9c       	mov	r12,r5
80002842:	95 18       	st.w	r10[0x4],r8
80002844:	6c 28       	ld.w	r8,r6[0x8]
80002846:	93 28       	st.w	r9[0x8],r8
80002848:	91 39       	st.w	r8[0xc],r9
8000284a:	f0 1f 00 19 	mcall	800028ac <_malloc_r+0x2cc>
8000284e:	ec cc ff f8 	sub	r12,r6,-8
80002852:	d8 32       	popm	r0-r7,pc
80002854:	12 96       	mov	r6,r9
80002856:	02 36       	cp.w	r6,r1
80002858:	cd 21       	brne	800027fc <_malloc_r+0x21c>
8000285a:	2f f2       	sub	r2,-1
8000285c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80002860:	c0 30       	breq	80002866 <_malloc_r+0x286>
80002862:	2f 81       	sub	r1,-8
80002864:	cc ab       	rjmp	800027f8 <_malloc_r+0x218>
80002866:	1c 98       	mov	r8,lr
80002868:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000286c:	c0 81       	brne	8000287c <_malloc_r+0x29c>
8000286e:	68 19       	ld.w	r9,r4[0x4]
80002870:	f6 08 11 ff 	rsub	r8,r11,-1
80002874:	f3 e8 00 08 	and	r8,r9,r8
80002878:	89 18       	st.w	r4[0x4],r8
8000287a:	c0 78       	rjmp	80002888 <_malloc_r+0x2a8>
8000287c:	f0 c9 00 08 	sub	r9,r8,8
80002880:	20 13       	sub	r3,1
80002882:	70 08       	ld.w	r8,r8[0x0]
80002884:	12 38       	cp.w	r8,r9
80002886:	cf 10       	breq	80002868 <_malloc_r+0x288>
80002888:	a1 7b       	lsl	r11,0x1
8000288a:	68 18       	ld.w	r8,r4[0x4]
8000288c:	10 3b       	cp.w	r11,r8
8000288e:	e0 8b 00 11 	brhi	800028b0 <_malloc_r+0x2d0>
80002892:	58 0b       	cp.w	r11,0
80002894:	c0 e0       	breq	800028b0 <_malloc_r+0x2d0>
80002896:	04 93       	mov	r3,r2
80002898:	c0 38       	rjmp	8000289e <_malloc_r+0x2be>
8000289a:	2f c3       	sub	r3,-4
8000289c:	a1 7b       	lsl	r11,0x1
8000289e:	f7 e8 00 09 	and	r9,r11,r8
800028a2:	ca 71       	brne	800027f0 <_malloc_r+0x210>
800028a4:	cf bb       	rjmp	8000289a <_malloc_r+0x2ba>
800028a6:	00 00       	add	r0,r0
800028a8:	00 00       	add	r0,r0
800028aa:	01 04       	ld.w	r4,r0++
800028ac:	80 00       	ld.sh	r0,r0[0x0]
800028ae:	2a 40       	sub	r0,-92
800028b0:	68 23       	ld.w	r3,r4[0x8]
800028b2:	66 12       	ld.w	r2,r3[0x4]
800028b4:	e0 12 ff fc 	andl	r2,0xfffc
800028b8:	0e 32       	cp.w	r2,r7
800028ba:	5f 39       	srlo	r9
800028bc:	e4 07 01 08 	sub	r8,r2,r7
800028c0:	58 f8       	cp.w	r8,15
800028c2:	5f aa       	srle	r10
800028c4:	f5 e9 10 09 	or	r9,r10,r9
800028c8:	e0 80 00 a2 	breq	80002a0c <_malloc_r+0x42c>
800028cc:	4c 88       	lddpc	r8,800029ec <_malloc_r+0x40c>
800028ce:	70 01       	ld.w	r1,r8[0x0]
800028d0:	4c 88       	lddpc	r8,800029f0 <_malloc_r+0x410>
800028d2:	2f 01       	sub	r1,-16
800028d4:	70 08       	ld.w	r8,r8[0x0]
800028d6:	0e 01       	add	r1,r7
800028d8:	5b f8       	cp.w	r8,-1
800028da:	c0 40       	breq	800028e2 <_malloc_r+0x302>
800028dc:	28 11       	sub	r1,-127
800028de:	e0 11 ff 80 	andl	r1,0xff80
800028e2:	02 9b       	mov	r11,r1
800028e4:	0a 9c       	mov	r12,r5
800028e6:	f0 1f 00 44 	mcall	800029f4 <_malloc_r+0x414>
800028ea:	18 96       	mov	r6,r12
800028ec:	5b fc       	cp.w	r12,-1
800028ee:	c6 e0       	breq	800029ca <_malloc_r+0x3ea>
800028f0:	e6 02 00 08 	add	r8,r3,r2
800028f4:	10 3c       	cp.w	r12,r8
800028f6:	c0 32       	brcc	800028fc <_malloc_r+0x31c>
800028f8:	08 33       	cp.w	r3,r4
800028fa:	c6 81       	brne	800029ca <_malloc_r+0x3ea>
800028fc:	4b fa       	lddpc	r10,800029f8 <_malloc_r+0x418>
800028fe:	74 09       	ld.w	r9,r10[0x0]
80002900:	e2 09 00 09 	add	r9,r1,r9
80002904:	95 09       	st.w	r10[0x0],r9
80002906:	10 36       	cp.w	r6,r8
80002908:	c0 a1       	brne	8000291c <_malloc_r+0x33c>
8000290a:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000290e:	c0 71       	brne	8000291c <_malloc_r+0x33c>
80002910:	e2 02 00 02 	add	r2,r1,r2
80002914:	68 28       	ld.w	r8,r4[0x8]
80002916:	a1 a2       	sbr	r2,0x0
80002918:	91 12       	st.w	r8[0x4],r2
8000291a:	c4 c8       	rjmp	800029b2 <_malloc_r+0x3d2>
8000291c:	4b 5a       	lddpc	r10,800029f0 <_malloc_r+0x410>
8000291e:	74 0b       	ld.w	r11,r10[0x0]
80002920:	5b fb       	cp.w	r11,-1
80002922:	c0 31       	brne	80002928 <_malloc_r+0x348>
80002924:	95 06       	st.w	r10[0x0],r6
80002926:	c0 68       	rjmp	80002932 <_malloc_r+0x352>
80002928:	ec 09 00 09 	add	r9,r6,r9
8000292c:	4b 3a       	lddpc	r10,800029f8 <_malloc_r+0x418>
8000292e:	10 19       	sub	r9,r8
80002930:	95 09       	st.w	r10[0x0],r9
80002932:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80002936:	f0 09 11 08 	rsub	r9,r8,8
8000293a:	58 08       	cp.w	r8,0
8000293c:	f2 08 17 10 	movne	r8,r9
80002940:	ed d8 e1 06 	addne	r6,r6,r8
80002944:	28 08       	sub	r8,-128
80002946:	ec 01 00 01 	add	r1,r6,r1
8000294a:	0a 9c       	mov	r12,r5
8000294c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80002950:	f0 01 01 01 	sub	r1,r8,r1
80002954:	02 9b       	mov	r11,r1
80002956:	f0 1f 00 28 	mcall	800029f4 <_malloc_r+0x414>
8000295a:	4a 88       	lddpc	r8,800029f8 <_malloc_r+0x418>
8000295c:	5b fc       	cp.w	r12,-1
8000295e:	ec 0c 17 00 	moveq	r12,r6
80002962:	f9 b1 00 00 	moveq	r1,0
80002966:	70 09       	ld.w	r9,r8[0x0]
80002968:	0c 1c       	sub	r12,r6
8000296a:	89 26       	st.w	r4[0x8],r6
8000296c:	02 0c       	add	r12,r1
8000296e:	12 01       	add	r1,r9
80002970:	a1 ac       	sbr	r12,0x0
80002972:	91 01       	st.w	r8[0x0],r1
80002974:	8d 1c       	st.w	r6[0x4],r12
80002976:	08 33       	cp.w	r3,r4
80002978:	c1 d0       	breq	800029b2 <_malloc_r+0x3d2>
8000297a:	58 f2       	cp.w	r2,15
8000297c:	e0 8b 00 05 	brhi	80002986 <_malloc_r+0x3a6>
80002980:	30 18       	mov	r8,1
80002982:	8d 18       	st.w	r6[0x4],r8
80002984:	c2 38       	rjmp	800029ca <_malloc_r+0x3ea>
80002986:	30 59       	mov	r9,5
80002988:	20 c2       	sub	r2,12
8000298a:	e0 12 ff f8 	andl	r2,0xfff8
8000298e:	e6 02 00 08 	add	r8,r3,r2
80002992:	91 29       	st.w	r8[0x8],r9
80002994:	91 19       	st.w	r8[0x4],r9
80002996:	66 18       	ld.w	r8,r3[0x4]
80002998:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000299c:	e5 e8 10 08 	or	r8,r2,r8
800029a0:	87 18       	st.w	r3[0x4],r8
800029a2:	58 f2       	cp.w	r2,15
800029a4:	e0 88 00 07 	brls	800029b2 <_malloc_r+0x3d2>
800029a8:	e6 cb ff f8 	sub	r11,r3,-8
800029ac:	0a 9c       	mov	r12,r5
800029ae:	f0 1f 00 14 	mcall	800029fc <_malloc_r+0x41c>
800029b2:	49 49       	lddpc	r9,80002a00 <_malloc_r+0x420>
800029b4:	72 0a       	ld.w	r10,r9[0x0]
800029b6:	49 18       	lddpc	r8,800029f8 <_malloc_r+0x418>
800029b8:	70 08       	ld.w	r8,r8[0x0]
800029ba:	14 38       	cp.w	r8,r10
800029bc:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800029c0:	49 19       	lddpc	r9,80002a04 <_malloc_r+0x424>
800029c2:	72 0a       	ld.w	r10,r9[0x0]
800029c4:	14 38       	cp.w	r8,r10
800029c6:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800029ca:	68 28       	ld.w	r8,r4[0x8]
800029cc:	70 18       	ld.w	r8,r8[0x4]
800029ce:	e0 18 ff fc 	andl	r8,0xfffc
800029d2:	0e 38       	cp.w	r8,r7
800029d4:	5f 39       	srlo	r9
800029d6:	0e 18       	sub	r8,r7
800029d8:	58 f8       	cp.w	r8,15
800029da:	5f aa       	srle	r10
800029dc:	f5 e9 10 09 	or	r9,r10,r9
800029e0:	c1 60       	breq	80002a0c <_malloc_r+0x42c>
800029e2:	0a 9c       	mov	r12,r5
800029e4:	f0 1f 00 09 	mcall	80002a08 <_malloc_r+0x428>
800029e8:	d8 3a       	popm	r0-r7,pc,r12=0
800029ea:	00 00       	add	r0,r0
800029ec:	00 00       	add	r0,r0
800029ee:	05 48       	ld.w	r8,--r2
800029f0:	00 00       	add	r0,r0
800029f2:	05 10       	ld.sh	r0,r2++
800029f4:	80 00       	ld.sh	r0,r0[0x0]
800029f6:	2a 44       	sub	r4,-92
800029f8:	00 00       	add	r0,r0
800029fa:	05 4c       	ld.w	r12,--r2
800029fc:	80 00       	ld.sh	r0,r0[0x0]
800029fe:	2b 60       	sub	r0,-74
80002a00:	00 00       	add	r0,r0
80002a02:	05 44       	ld.w	r4,--r2
80002a04:	00 00       	add	r0,r0
80002a06:	05 40       	ld.w	r0,--r2
80002a08:	80 00       	ld.sh	r0,r0[0x0]
80002a0a:	2a 40       	sub	r0,-92
80002a0c:	68 26       	ld.w	r6,r4[0x8]
80002a0e:	a1 a8       	sbr	r8,0x0
80002a10:	0e 99       	mov	r9,r7
80002a12:	a1 a9       	sbr	r9,0x0
80002a14:	8d 19       	st.w	r6[0x4],r9
80002a16:	ec 07 00 07 	add	r7,r6,r7
80002a1a:	0a 9c       	mov	r12,r5
80002a1c:	89 27       	st.w	r4[0x8],r7
80002a1e:	8f 18       	st.w	r7[0x4],r8
80002a20:	f0 1f 00 03 	mcall	80002a2c <_malloc_r+0x44c>
80002a24:	ec cc ff f8 	sub	r12,r6,-8
80002a28:	d8 32       	popm	r0-r7,pc
80002a2a:	00 00       	add	r0,r0
80002a2c:	80 00       	ld.sh	r0,r0[0x0]
80002a2e:	2a 40       	sub	r0,-92

80002a30 <memset>:
80002a30:	18 98       	mov	r8,r12
80002a32:	c0 38       	rjmp	80002a38 <memset+0x8>
80002a34:	10 cb       	st.b	r8++,r11
80002a36:	20 1a       	sub	r10,1
80002a38:	58 0a       	cp.w	r10,0
80002a3a:	cf d1       	brne	80002a34 <memset+0x4>
80002a3c:	5e fc       	retal	r12

80002a3e <__malloc_lock>:
80002a3e:	5e fc       	retal	r12

80002a40 <__malloc_unlock>:
80002a40:	5e fc       	retal	r12
80002a42:	d7 03       	nop

80002a44 <_sbrk_r>:
80002a44:	d4 21       	pushm	r4-r7,lr
80002a46:	30 08       	mov	r8,0
80002a48:	18 97       	mov	r7,r12
80002a4a:	48 76       	lddpc	r6,80002a64 <_sbrk_r+0x20>
80002a4c:	16 9c       	mov	r12,r11
80002a4e:	8d 08       	st.w	r6[0x0],r8
80002a50:	f0 1f 00 06 	mcall	80002a68 <_sbrk_r+0x24>
80002a54:	5b fc       	cp.w	r12,-1
80002a56:	c0 51       	brne	80002a60 <_sbrk_r+0x1c>
80002a58:	6c 08       	ld.w	r8,r6[0x0]
80002a5a:	58 08       	cp.w	r8,0
80002a5c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80002a60:	d8 22       	popm	r4-r7,pc
80002a62:	00 00       	add	r0,r0
80002a64:	00 00       	add	r0,r0
80002a66:	06 38       	cp.w	r8,r3
80002a68:	80 00       	ld.sh	r0,r0[0x0]
80002a6a:	2a 6c       	sub	r12,-90

80002a6c <_sbrk>:
80002a6c:	d4 01       	pushm	lr
80002a6e:	48 c8       	lddpc	r8,80002a9c <_sbrk+0x30>
80002a70:	70 09       	ld.w	r9,r8[0x0]
80002a72:	58 09       	cp.w	r9,0
80002a74:	c0 31       	brne	80002a7a <_sbrk+0xe>
80002a76:	48 b9       	lddpc	r9,80002aa0 <_sbrk+0x34>
80002a78:	91 09       	st.w	r8[0x0],r9
80002a7a:	48 99       	lddpc	r9,80002a9c <_sbrk+0x30>
80002a7c:	48 aa       	lddpc	r10,80002aa4 <_sbrk+0x38>
80002a7e:	72 08       	ld.w	r8,r9[0x0]
80002a80:	f0 0c 00 0c 	add	r12,r8,r12
80002a84:	14 3c       	cp.w	r12,r10
80002a86:	e0 8b 00 04 	brhi	80002a8e <_sbrk+0x22>
80002a8a:	93 0c       	st.w	r9[0x0],r12
80002a8c:	c0 68       	rjmp	80002a98 <_sbrk+0x2c>
80002a8e:	f0 1f 00 07 	mcall	80002aa8 <_sbrk+0x3c>
80002a92:	30 c8       	mov	r8,12
80002a94:	99 08       	st.w	r12[0x0],r8
80002a96:	3f f8       	mov	r8,-1
80002a98:	10 9c       	mov	r12,r8
80002a9a:	d8 02       	popm	pc
80002a9c:	00 00       	add	r0,r0
80002a9e:	05 74       	ld.ub	r4,--r2
80002aa0:	00 00       	add	r0,r0
80002aa2:	06 40       	or	r0,r3
80002aa4:	00 00       	add	r0,r0
80002aa6:	e0 00       	*unknown*
80002aa8:	80 00       	ld.sh	r0,r0[0x0]
80002aaa:	2a ac       	sub	r12,-86

80002aac <__errno>:
80002aac:	48 28       	lddpc	r8,80002ab4 <__errno+0x8>
80002aae:	70 0c       	ld.w	r12,r8[0x0]
80002ab0:	2f 4c       	sub	r12,-12
80002ab2:	5e fc       	retal	r12
80002ab4:	00 00       	add	r0,r0
80002ab6:	01 00       	ld.w	r0,r0++

80002ab8 <_malloc_trim_r>:
80002ab8:	d4 21       	pushm	r4-r7,lr
80002aba:	16 95       	mov	r5,r11
80002abc:	18 97       	mov	r7,r12
80002abe:	f0 1f 00 23 	mcall	80002b48 <_malloc_trim_r+0x90>
80002ac2:	4a 34       	lddpc	r4,80002b4c <_malloc_trim_r+0x94>
80002ac4:	68 28       	ld.w	r8,r4[0x8]
80002ac6:	70 16       	ld.w	r6,r8[0x4]
80002ac8:	e0 16 ff fc 	andl	r6,0xfffc
80002acc:	ec c8 ff 91 	sub	r8,r6,-111
80002ad0:	f0 05 01 05 	sub	r5,r8,r5
80002ad4:	e0 15 ff 80 	andl	r5,0xff80
80002ad8:	ea c5 00 80 	sub	r5,r5,128
80002adc:	e0 45 00 7f 	cp.w	r5,127
80002ae0:	e0 8a 00 23 	brle	80002b26 <_malloc_trim_r+0x6e>
80002ae4:	30 0b       	mov	r11,0
80002ae6:	0e 9c       	mov	r12,r7
80002ae8:	f0 1f 00 1a 	mcall	80002b50 <_malloc_trim_r+0x98>
80002aec:	68 28       	ld.w	r8,r4[0x8]
80002aee:	0c 08       	add	r8,r6
80002af0:	10 3c       	cp.w	r12,r8
80002af2:	c1 a1       	brne	80002b26 <_malloc_trim_r+0x6e>
80002af4:	ea 0b 11 00 	rsub	r11,r5,0
80002af8:	0e 9c       	mov	r12,r7
80002afa:	f0 1f 00 16 	mcall	80002b50 <_malloc_trim_r+0x98>
80002afe:	5b fc       	cp.w	r12,-1
80002b00:	c1 71       	brne	80002b2e <_malloc_trim_r+0x76>
80002b02:	30 0b       	mov	r11,0
80002b04:	0e 9c       	mov	r12,r7
80002b06:	f0 1f 00 13 	mcall	80002b50 <_malloc_trim_r+0x98>
80002b0a:	68 28       	ld.w	r8,r4[0x8]
80002b0c:	f8 08 01 09 	sub	r9,r12,r8
80002b10:	58 f9       	cp.w	r9,15
80002b12:	e0 8a 00 0a 	brle	80002b26 <_malloc_trim_r+0x6e>
80002b16:	a1 a9       	sbr	r9,0x0
80002b18:	91 19       	st.w	r8[0x4],r9
80002b1a:	48 f8       	lddpc	r8,80002b54 <_malloc_trim_r+0x9c>
80002b1c:	70 09       	ld.w	r9,r8[0x0]
80002b1e:	48 f8       	lddpc	r8,80002b58 <_malloc_trim_r+0xa0>
80002b20:	f8 09 01 09 	sub	r9,r12,r9
80002b24:	91 09       	st.w	r8[0x0],r9
80002b26:	0e 9c       	mov	r12,r7
80002b28:	f0 1f 00 0d 	mcall	80002b5c <_malloc_trim_r+0xa4>
80002b2c:	d8 2a       	popm	r4-r7,pc,r12=0
80002b2e:	68 28       	ld.w	r8,r4[0x8]
80002b30:	0a 16       	sub	r6,r5
80002b32:	a1 a6       	sbr	r6,0x0
80002b34:	91 16       	st.w	r8[0x4],r6
80002b36:	48 98       	lddpc	r8,80002b58 <_malloc_trim_r+0xa0>
80002b38:	70 09       	ld.w	r9,r8[0x0]
80002b3a:	0a 19       	sub	r9,r5
80002b3c:	0e 9c       	mov	r12,r7
80002b3e:	91 09       	st.w	r8[0x0],r9
80002b40:	f0 1f 00 07 	mcall	80002b5c <_malloc_trim_r+0xa4>
80002b44:	da 2a       	popm	r4-r7,pc,r12=1
80002b46:	00 00       	add	r0,r0
80002b48:	80 00       	ld.sh	r0,r0[0x0]
80002b4a:	2a 3e       	sub	lr,-93
80002b4c:	00 00       	add	r0,r0
80002b4e:	01 04       	ld.w	r4,r0++
80002b50:	80 00       	ld.sh	r0,r0[0x0]
80002b52:	2a 44       	sub	r4,-92
80002b54:	00 00       	add	r0,r0
80002b56:	05 10       	ld.sh	r0,r2++
80002b58:	00 00       	add	r0,r0
80002b5a:	05 4c       	ld.w	r12,--r2
80002b5c:	80 00       	ld.sh	r0,r0[0x0]
80002b5e:	2a 40       	sub	r0,-92

80002b60 <_free_r>:
80002b60:	d4 21       	pushm	r4-r7,lr
80002b62:	16 96       	mov	r6,r11
80002b64:	18 97       	mov	r7,r12
80002b66:	58 0b       	cp.w	r11,0
80002b68:	e0 80 00 c8 	breq	80002cf8 <_free_r+0x198>
80002b6c:	f0 1f 00 4c 	mcall	80002c9c <_free_r+0x13c>
80002b70:	20 86       	sub	r6,8
80002b72:	4c ca       	lddpc	r10,80002ca0 <_free_r+0x140>
80002b74:	6c 18       	ld.w	r8,r6[0x4]
80002b76:	74 2e       	ld.w	lr,r10[0x8]
80002b78:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002b7c:	a1 c8       	cbr	r8,0x0
80002b7e:	ec 08 00 09 	add	r9,r6,r8
80002b82:	72 1b       	ld.w	r11,r9[0x4]
80002b84:	e0 1b ff fc 	andl	r11,0xfffc
80002b88:	1c 39       	cp.w	r9,lr
80002b8a:	c1 d1       	brne	80002bc4 <_free_r+0x64>
80002b8c:	f6 08 00 08 	add	r8,r11,r8
80002b90:	58 0c       	cp.w	r12,0
80002b92:	c0 81       	brne	80002ba2 <_free_r+0x42>
80002b94:	6c 09       	ld.w	r9,r6[0x0]
80002b96:	12 16       	sub	r6,r9
80002b98:	12 08       	add	r8,r9
80002b9a:	6c 3b       	ld.w	r11,r6[0xc]
80002b9c:	6c 29       	ld.w	r9,r6[0x8]
80002b9e:	97 29       	st.w	r11[0x8],r9
80002ba0:	93 3b       	st.w	r9[0xc],r11
80002ba2:	10 99       	mov	r9,r8
80002ba4:	95 26       	st.w	r10[0x8],r6
80002ba6:	a1 a9       	sbr	r9,0x0
80002ba8:	8d 19       	st.w	r6[0x4],r9
80002baa:	4b f9       	lddpc	r9,80002ca4 <_free_r+0x144>
80002bac:	72 09       	ld.w	r9,r9[0x0]
80002bae:	12 38       	cp.w	r8,r9
80002bb0:	c0 63       	brcs	80002bbc <_free_r+0x5c>
80002bb2:	4b e8       	lddpc	r8,80002ca8 <_free_r+0x148>
80002bb4:	0e 9c       	mov	r12,r7
80002bb6:	70 0b       	ld.w	r11,r8[0x0]
80002bb8:	f0 1f 00 3d 	mcall	80002cac <_free_r+0x14c>
80002bbc:	0e 9c       	mov	r12,r7
80002bbe:	f0 1f 00 3d 	mcall	80002cb0 <_free_r+0x150>
80002bc2:	d8 22       	popm	r4-r7,pc
80002bc4:	93 1b       	st.w	r9[0x4],r11
80002bc6:	58 0c       	cp.w	r12,0
80002bc8:	c0 30       	breq	80002bce <_free_r+0x6e>
80002bca:	30 0c       	mov	r12,0
80002bcc:	c1 08       	rjmp	80002bec <_free_r+0x8c>
80002bce:	6c 0e       	ld.w	lr,r6[0x0]
80002bd0:	f4 c5 ff f8 	sub	r5,r10,-8
80002bd4:	1c 16       	sub	r6,lr
80002bd6:	1c 08       	add	r8,lr
80002bd8:	6c 2e       	ld.w	lr,r6[0x8]
80002bda:	0a 3e       	cp.w	lr,r5
80002bdc:	f9 bc 00 01 	moveq	r12,1
80002be0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80002be4:	eb fe 1a 02 	st.wne	r5[0x8],lr
80002be8:	fd f5 1a 03 	st.wne	lr[0xc],r5
80002bec:	f2 0b 00 0e 	add	lr,r9,r11
80002bf0:	7c 1e       	ld.w	lr,lr[0x4]
80002bf2:	ed be 00 00 	bld	lr,0x0
80002bf6:	c1 30       	breq	80002c1c <_free_r+0xbc>
80002bf8:	16 08       	add	r8,r11
80002bfa:	58 0c       	cp.w	r12,0
80002bfc:	c0 c1       	brne	80002c14 <_free_r+0xb4>
80002bfe:	4a 9e       	lddpc	lr,80002ca0 <_free_r+0x140>
80002c00:	72 2b       	ld.w	r11,r9[0x8]
80002c02:	2f 8e       	sub	lr,-8
80002c04:	1c 3b       	cp.w	r11,lr
80002c06:	c0 71       	brne	80002c14 <_free_r+0xb4>
80002c08:	97 36       	st.w	r11[0xc],r6
80002c0a:	97 26       	st.w	r11[0x8],r6
80002c0c:	8d 2b       	st.w	r6[0x8],r11
80002c0e:	8d 3b       	st.w	r6[0xc],r11
80002c10:	30 1c       	mov	r12,1
80002c12:	c0 58       	rjmp	80002c1c <_free_r+0xbc>
80002c14:	72 2b       	ld.w	r11,r9[0x8]
80002c16:	72 39       	ld.w	r9,r9[0xc]
80002c18:	93 2b       	st.w	r9[0x8],r11
80002c1a:	97 39       	st.w	r11[0xc],r9
80002c1c:	10 99       	mov	r9,r8
80002c1e:	ec 08 09 08 	st.w	r6[r8],r8
80002c22:	a1 a9       	sbr	r9,0x0
80002c24:	8d 19       	st.w	r6[0x4],r9
80002c26:	58 0c       	cp.w	r12,0
80002c28:	c6 51       	brne	80002cf2 <_free_r+0x192>
80002c2a:	e0 48 01 ff 	cp.w	r8,511
80002c2e:	e0 8b 00 13 	brhi	80002c54 <_free_r+0xf4>
80002c32:	a3 98       	lsr	r8,0x3
80002c34:	f4 08 00 39 	add	r9,r10,r8<<0x3
80002c38:	72 2b       	ld.w	r11,r9[0x8]
80002c3a:	8d 39       	st.w	r6[0xc],r9
80002c3c:	8d 2b       	st.w	r6[0x8],r11
80002c3e:	97 36       	st.w	r11[0xc],r6
80002c40:	93 26       	st.w	r9[0x8],r6
80002c42:	a3 48       	asr	r8,0x2
80002c44:	74 19       	ld.w	r9,r10[0x4]
80002c46:	30 1b       	mov	r11,1
80002c48:	f6 08 09 48 	lsl	r8,r11,r8
80002c4c:	f3 e8 10 08 	or	r8,r9,r8
80002c50:	95 18       	st.w	r10[0x4],r8
80002c52:	c5 08       	rjmp	80002cf2 <_free_r+0x192>
80002c54:	f0 0b 16 09 	lsr	r11,r8,0x9
80002c58:	58 4b       	cp.w	r11,4
80002c5a:	e0 8b 00 06 	brhi	80002c66 <_free_r+0x106>
80002c5e:	f0 0b 16 06 	lsr	r11,r8,0x6
80002c62:	2c 8b       	sub	r11,-56
80002c64:	c2 b8       	rjmp	80002cba <_free_r+0x15a>
80002c66:	59 4b       	cp.w	r11,20
80002c68:	e0 8b 00 04 	brhi	80002c70 <_free_r+0x110>
80002c6c:	2a 5b       	sub	r11,-91
80002c6e:	c2 68       	rjmp	80002cba <_free_r+0x15a>
80002c70:	e0 4b 00 54 	cp.w	r11,84
80002c74:	e0 8b 00 06 	brhi	80002c80 <_free_r+0x120>
80002c78:	f0 0b 16 0c 	lsr	r11,r8,0xc
80002c7c:	29 2b       	sub	r11,-110
80002c7e:	c1 e8       	rjmp	80002cba <_free_r+0x15a>
80002c80:	e0 4b 01 54 	cp.w	r11,340
80002c84:	e0 8b 00 06 	brhi	80002c90 <_free_r+0x130>
80002c88:	f0 0b 16 0f 	lsr	r11,r8,0xf
80002c8c:	28 9b       	sub	r11,-119
80002c8e:	c1 68       	rjmp	80002cba <_free_r+0x15a>
80002c90:	e0 4b 05 54 	cp.w	r11,1364
80002c94:	e0 88 00 10 	brls	80002cb4 <_free_r+0x154>
80002c98:	37 eb       	mov	r11,126
80002c9a:	c1 08       	rjmp	80002cba <_free_r+0x15a>
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	2a 3e       	sub	lr,-93
80002ca0:	00 00       	add	r0,r0
80002ca2:	01 04       	ld.w	r4,r0++
80002ca4:	00 00       	add	r0,r0
80002ca6:	05 0c       	ld.w	r12,r2++
80002ca8:	00 00       	add	r0,r0
80002caa:	05 48       	ld.w	r8,--r2
80002cac:	80 00       	ld.sh	r0,r0[0x0]
80002cae:	2a b8       	sub	r8,-85
80002cb0:	80 00       	ld.sh	r0,r0[0x0]
80002cb2:	2a 40       	sub	r0,-92
80002cb4:	f0 0b 16 12 	lsr	r11,r8,0x12
80002cb8:	28 4b       	sub	r11,-124
80002cba:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80002cbe:	78 29       	ld.w	r9,r12[0x8]
80002cc0:	18 39       	cp.w	r9,r12
80002cc2:	c0 e1       	brne	80002cde <_free_r+0x17e>
80002cc4:	74 18       	ld.w	r8,r10[0x4]
80002cc6:	a3 4b       	asr	r11,0x2
80002cc8:	30 1c       	mov	r12,1
80002cca:	f8 0b 09 4b 	lsl	r11,r12,r11
80002cce:	f1 eb 10 0b 	or	r11,r8,r11
80002cd2:	12 98       	mov	r8,r9
80002cd4:	95 1b       	st.w	r10[0x4],r11
80002cd6:	c0 a8       	rjmp	80002cea <_free_r+0x18a>
80002cd8:	72 29       	ld.w	r9,r9[0x8]
80002cda:	18 39       	cp.w	r9,r12
80002cdc:	c0 60       	breq	80002ce8 <_free_r+0x188>
80002cde:	72 1a       	ld.w	r10,r9[0x4]
80002ce0:	e0 1a ff fc 	andl	r10,0xfffc
80002ce4:	14 38       	cp.w	r8,r10
80002ce6:	cf 93       	brcs	80002cd8 <_free_r+0x178>
80002ce8:	72 38       	ld.w	r8,r9[0xc]
80002cea:	8d 38       	st.w	r6[0xc],r8
80002cec:	8d 29       	st.w	r6[0x8],r9
80002cee:	93 36       	st.w	r9[0xc],r6
80002cf0:	91 26       	st.w	r8[0x8],r6
80002cf2:	0e 9c       	mov	r12,r7
80002cf4:	f0 1f 00 02 	mcall	80002cfc <_free_r+0x19c>
80002cf8:	d8 22       	popm	r4-r7,pc
80002cfa:	00 00       	add	r0,r0
80002cfc:	80 00       	ld.sh	r0,r0[0x0]
80002cfe:	2a 40       	sub	r0,-92

Disassembly of section .exception:

80002e00 <_evba>:
	...

80002e28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002e28:	c7 a8       	rjmp	80002f1c <privilegedCalls>
	...

80002f00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002f00:	1c 9f       	mov	pc,lr

80002f02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002f02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002f06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80002f0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80002f0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002f12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002f14:	c0 31       	brne	80002f1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002f16:	4b 9c       	lddpc	r12,80002ff8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002f18:	18 9f       	mov	pc,r12

80002f1a <_int0_exit>:
_int0_exit:
	rete
80002f1a:	d6 03       	rete

80002f1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80002f1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80002f1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002f20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002f22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002f24:	9b 3c       	st.w	sp[0xc],r12

80002f26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002f26:	4b 6c       	lddpc	r12,80002ffc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002f28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80002f2a:	c0 61       	brne	80002f36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80002f2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80002f2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002f30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002f32:	d3 02       	popm	r11-r12
	rete
80002f34:	d6 03       	rete

80002f36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002f36:	4b 3c       	lddpc	r12,80003000 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002f38:	18 3b       	cp.w	r11,r12
	brne privexception
80002f3a:	c0 61       	brne	80002f46 <privexception>
	ld.w r12,sp[USERSR]
80002f3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80002f3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002f40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002f42:	d3 02       	popm	r11-r12
	rete
80002f44:	d6 03       	rete

80002f46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002f46:	c0 08       	rjmp	80002f46 <privexception>

80002f48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002f48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80002f4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80002f4e:	4a ec       	lddpc	r12,80003004 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002f50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002f52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002f54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002f58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80002f5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002f60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002f62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002f64:	1c 9f       	mov	pc,lr

80002f66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002f66:	d3 03       	ssrf	0x10
	mov pc,lr
80002f68:	1c 9f       	mov	pc,lr

80002f6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80002f6a:	d5 03       	csrf	0x10
	mov pc,lr
80002f6c:	1c 9f       	mov	pc,lr

80002f6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80002f6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002f72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002f74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002f78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80002f7c:	1c 9f       	mov	pc,lr

80002f7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80002f7e:	4a 3c       	lddpc	r12,80003008 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002f80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002f82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002f84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002f86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002f88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80002f8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80002f8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80002f8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002f90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002f92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002f94:	33 40       	mov	r0,52
	add r0,r12
80002f96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002f98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80002f9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80002f9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80002fa2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80002fa4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80002fa6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80002fa8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80002faa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80002fac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80002fae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80002fb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80002fb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80002fb6:	1c 9f       	mov	pc,lr

80002fb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80002fb8:	49 4c       	lddpc	r12,80003008 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002fba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80002fbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80002fbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80002fc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80002fc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80002fc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80002fc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80002fca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80002fcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80002fce:	33 40       	mov	r0,52
	add r0,r12
80002fd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80002fd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80002fd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80002fd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80002fda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80002fdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80002fde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80002fe0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80002fe2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80002fe4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80002fe6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80002fe8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80002fea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80002fec:	d4 01       	pushm	lr
	call timerStart
80002fee:	f0 1f 00 08 	mcall	8000300c <contextRestoreFromISR+0x54>
	popm lr
80002ff2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80002ff4:	1c 9f       	mov	pc,lr
80002ff6:	00 00       	add	r0,r0
80002ff8:	80 00       	ld.sh	r0,r0[0x0]
80002ffa:	1c cc       	st.b	lr++,r12
80002ffc:	80 00       	ld.sh	r0,r0[0x0]
80002ffe:	2f 66       	sub	r6,-10
80003000:	80 00       	ld.sh	r0,r0[0x0]
80003002:	2f 6a       	sub	r10,-10
80003004:	80 00       	ld.sh	r0,r0[0x0]
80003006:	2e 00       	sub	r0,-32
80003008:	00 00       	add	r0,r0
8000300a:	06 20       	rsub	r0,r3
8000300c:	80 00       	ld.sh	r0,r0[0x0]
8000300e:	24 42       	sub	r2,68
	...
