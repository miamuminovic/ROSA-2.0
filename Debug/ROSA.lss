
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001fe4  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002000  80002000  00002400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002400  80002400  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002484  80002484  00002884  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002488  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002994  00003114  2**0
                  ALLOC
  9 .bss          00000128  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d9c0  00000640  00000640  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000768  00000000  00000000  000031b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000011a2  00000000  00000000  00003920  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c82a  00000000  00000000  00004ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001f46  00000000  00000000  000112ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000045b1  00000000  00000000  00013232  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001208  00000000  00000000  000177e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000021f3  00000000  00000000  000189ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000021d6  00000000  00000000  0001abdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0053059b  00000000  00000000  0001cdb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000006b0  00000000  00000000  0054d350  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	17 d0       	ld.ub	r0,r11[0x5]

Disassembly of section .text:

80000008 <semaphore_insert_after>:
#include "include/kernel/semaphore.h"

int16_t semaphore_insert_after(semaphore * position, semaphore * new_semaphore)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	ef 4b ff f8 	st.w	r7[-8],r11
	new_semaphore->nextsemaphore = position->nextsemaphore;
80000018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000001c:	70 39       	ld.w	r9,r8[0xc]
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	91 39       	st.w	r8[0xc],r9
	new_semaphore->prevsemaphore = position;
80000024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000028:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000002c:	91 49       	st.w	r8[0x10],r9
	
	position->nextsemaphore = new_semaphore;
8000002e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000032:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000036:	91 39       	st.w	r8[0xc],r9
	new_semaphore->nextsemaphore->prevsemaphore = new_semaphore;
80000038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000003c:	70 38       	ld.w	r8,r8[0xc]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	91 49       	st.w	r8[0x10],r9
}
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	d7 03       	nop

8000004c <semaphoreAdd>:

int16_t semaphoreAdd(semaphore * handle)
{
8000004c:	eb cd 40 80 	pushm	r7,lr
80000050:	1a 97       	mov	r7,sp
80000052:	20 2d       	sub	sp,8
80000054:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = -1;
80000058:	3f f8       	mov	r8,-1
8000005a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( SEMAPHORES == NULL )
8000005e:	49 48       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000060:	70 08       	ld.w	r8,r8[0x0]
80000062:	58 08       	cp.w	r8,0
80000064:	c1 31       	brne	8000008a <semaphoreAdd+0x3e>
	{
		SEMAPHORES = handle;
80000066:	49 28       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000068:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000006c:	91 09       	st.w	r8[0x0],r9
		SEMAPHORES->nextsemaphore = SEMAPHORES;
8000006e:	49 08       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000070:	70 08       	ld.w	r8,r8[0x0]
80000072:	48 f9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
80000074:	72 09       	ld.w	r9,r9[0x0]
80000076:	91 39       	st.w	r8[0xc],r9
		SEMAPHORES->prevsemaphore = SEMAPHORES;
80000078:	48 d8       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000007a:	70 08       	ld.w	r8,r8[0x0]
8000007c:	48 c9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
8000007e:	72 09       	ld.w	r9,r9[0x0]
80000080:	91 49       	st.w	r8[0x10],r9
		
		result = 1;
80000082:	30 18       	mov	r8,1
80000084:	ef 58 ff fe 	st.h	r7[-2],r8
80000088:	c0 c8       	rjmp	800000a0 <semaphoreAdd+0x54>
	}
	else
	{
		semaphore_insert_after(SEMAPHORES->prevsemaphore, handle);
8000008a:	48 98       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000008c:	70 08       	ld.w	r8,r8[0x0]
8000008e:	70 48       	ld.w	r8,r8[0x10]
80000090:	ee fb ff f8 	ld.w	r11,r7[-8]
80000094:	10 9c       	mov	r12,r8
80000096:	f0 1f 00 07 	mcall	800000b0 <semaphoreAdd+0x64>
		
		result = 1;
8000009a:	30 18       	mov	r8,1
8000009c:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
800000a0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800000a4:	10 9c       	mov	r12,r8
800000a6:	2f ed       	sub	sp,-8
800000a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800000ac:	00 00       	add	r0,r0
800000ae:	06 1c       	sub	r12,r3
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	00 08       	add	r8,r0

800000b4 <ROSA_semaphoreCreate>:

int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * handle, uint8_t ceiling)
{
800000b4:	eb cd 40 80 	pushm	r7,lr
800000b8:	1a 97       	mov	r7,sp
800000ba:	20 3d       	sub	sp,12
800000bc:	ef 4c ff f8 	st.w	r7[-8],r12
800000c0:	16 98       	mov	r8,r11
800000c2:	ef 68 ff f4 	st.b	r7[-12],r8
	//interruptDisable();
	int16_t result = -1;
800000c6:	3f f8       	mov	r8,-1
800000c8:	ef 58 ff fe 	st.h	r7[-2],r8
	(*handle) = calloc(1, sizeof(semaphore));
800000cc:	31 4b       	mov	r11,20
800000ce:	30 1c       	mov	r12,1
800000d0:	f0 1f 00 11 	mcall	80000114 <ROSA_semaphoreCreate+0x60>
800000d4:	18 98       	mov	r8,r12
800000d6:	10 99       	mov	r9,r8
800000d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000dc:	91 09       	st.w	r8[0x0],r9
	(*handle)->ceiling = ceiling;
800000de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000e2:	70 09       	ld.w	r9,r8[0x0]
800000e4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800000e8:	b2 88       	st.b	r9[0x0],r8
	result = abs(*handle);
800000ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ee:	70 08       	ld.w	r8,r8[0x0]
800000f0:	10 9c       	mov	r12,r8
800000f2:	f0 1f 00 0a 	mcall	80000118 <ROSA_semaphoreCreate+0x64>
800000f6:	18 98       	mov	r8,r12
800000f8:	ef 58 ff fe 	st.h	r7[-2],r8
	semaphoreAdd(*handle);
800000fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000100:	70 08       	ld.w	r8,r8[0x0]
80000102:	10 9c       	mov	r12,r8
80000104:	f0 1f 00 06 	mcall	8000011c <ROSA_semaphoreCreate+0x68>
	//interruptEnable();
	
	return result;
80000108:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000010c:	10 9c       	mov	r12,r8
8000010e:	2f dd       	sub	sp,-12
80000110:	e3 cd 80 80 	ldm	sp++,r7,pc
80000114:	80 00       	ld.sh	r0,r0[0x0]
80000116:	18 54       	eor	r4,r12
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	18 50       	eor	r0,r12
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	00 4c       	or	r12,r0

80000120 <semaphoreSetCurrentTask>:

int16_t semaphoreSetCurrentTask( semaphore * semaphore_handle, tcb * task_handle )
{
80000120:	eb cd 40 80 	pushm	r7,lr
80000124:	1a 97       	mov	r7,sp
80000126:	20 3d       	sub	sp,12
80000128:	ef 4c ff f8 	st.w	r7[-8],r12
8000012c:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = 0;
80000130:	30 08       	mov	r8,0
80000132:	ef 58 ff fe 	st.h	r7[-2],r8
	
	semaphore_handle->current_task = task_handle;
80000136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000013a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000013e:	91 19       	st.w	r8[0x4],r9
	semaphore_handle->task_priority = task_handle->effective_priority;
80000140:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000144:	f1 38 00 69 	ld.ub	r8,r8[105]
80000148:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000014c:	b2 98       	st.b	r9[0x1],r8
	if( task_handle->effective_priority > semaphore_handle->ceiling )
8000014e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000152:	f1 39 00 69 	ld.ub	r9,r8[105]
80000156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000015a:	11 88       	ld.ub	r8,r8[0x0]
8000015c:	f0 09 18 00 	cp.b	r9,r8
80000160:	e0 88 00 09 	brls	80000172 <semaphoreSetCurrentTask+0x52>
	{
		task_handle->effective_priority = semaphore_handle->ceiling;
80000164:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000168:	11 88       	ld.ub	r8,r8[0x0]
8000016a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000016e:	f3 68 00 69 	st.b	r9[105],r8
	}
	
	return result;
80000172:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000176:	10 9c       	mov	r12,r8
80000178:	2f dd       	sub	sp,-12
8000017a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000017e <semaphoreUnsetCurrentTask>:

int16_t semaphoreUnsetCurrentTask( semaphore * semaphore_handle )
{
8000017e:	eb cd 40 80 	pushm	r7,lr
80000182:	1a 97       	mov	r7,sp
80000184:	20 2d       	sub	sp,8
80000186:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = 0;
8000018a:	30 08       	mov	r8,0
8000018c:	ef 58 ff fe 	st.h	r7[-2],r8
	
	semaphore_handle->current_task->effective_priority = semaphore_handle->task_priority;
80000190:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000194:	70 19       	ld.w	r9,r8[0x4]
80000196:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000019a:	11 98       	ld.ub	r8,r8[0x1]
8000019c:	f3 68 00 69 	st.b	r9[105],r8
	semaphore_handle->current_task = NULL;
800001a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a4:	30 09       	mov	r9,0
800001a6:	91 19       	st.w	r8[0x4],r9
	
	return result;
800001a8:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800001ac:	10 9c       	mov	r12,r8
800001ae:	2f ed       	sub	sp,-8
800001b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800001b4 <semaphoreBlockTask>:

int16_t semaphoreBlockTask( semaphore * semaphore_handle, tcb * new_task )
{
800001b4:	eb cd 40 80 	pushm	r7,lr
800001b8:	1a 97       	mov	r7,sp
800001ba:	20 3d       	sub	sp,12
800001bc:	ef 4c ff f8 	st.w	r7[-8],r12
800001c0:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = -1;
800001c4:	3f f8       	mov	r8,-1
800001c6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	new_task->blocking_semaphore = semaphore_handle;
800001ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800001ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001d2:	f1 49 00 74 	st.w	r8[116],r9
	
	if( semaphore_handle->BLOCKEDLIST == NULL )
800001d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001da:	70 28       	ld.w	r8,r8[0x8]
800001dc:	58 08       	cp.w	r8,0
800001de:	c1 71       	brne	8000020c <semaphoreBlockTask+0x58>
	{
		semaphore_handle->BLOCKEDLIST = new_task;
800001e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800001e8:	91 29       	st.w	r8[0x8],r9
		semaphore_handle->BLOCKEDLIST->nexttcb = new_task;
800001ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ee:	70 28       	ld.w	r8,r8[0x8]
800001f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800001f4:	91 09       	st.w	r8[0x0],r9
		semaphore_handle->BLOCKEDLIST->prevtcb = new_task;
800001f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fa:	70 28       	ld.w	r8,r8[0x8]
800001fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000200:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000204:	30 18       	mov	r8,1
80000206:	ef 58 ff fe 	st.h	r7[-2],r8
8000020a:	c0 d8       	rjmp	80000224 <semaphoreBlockTask+0x70>
	}
	else
	{
		insert_after(semaphore_handle->BLOCKEDLIST->prevtcb, new_task);
8000020c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000210:	70 28       	ld.w	r8,r8[0x8]
80000212:	71 98       	ld.w	r8,r8[0x64]
80000214:	ee fb ff f4 	ld.w	r11,r7[-12]
80000218:	10 9c       	mov	r12,r8
8000021a:	f0 1f 00 06 	mcall	80000230 <semaphoreBlockTask+0x7c>
		
		result = 1;
8000021e:	30 18       	mov	r8,1
80000220:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
80000224:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000228:	10 9c       	mov	r12,r8
8000022a:	2f dd       	sub	sp,-12
8000022c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000230:	80 00       	ld.sh	r0,r0[0x0]
80000232:	09 20       	ld.uh	r0,r4++

80000234 <semaphoreUnblockTask>:

int16_t semaphoreUnblockTask( semaphore * semaphore_handle, tcb * task_handle )
{
80000234:	eb cd 40 80 	pushm	r7,lr
80000238:	1a 97       	mov	r7,sp
8000023a:	20 3d       	sub	sp,12
8000023c:	ef 4c ff f8 	st.w	r7[-8],r12
80000240:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = 0;
80000244:	30 08       	mov	r8,0
80000246:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// only one blocked task
	if( semaphore_handle->BLOCKEDLIST == semaphore_handle->BLOCKEDLIST->nexttcb )
8000024a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000024e:	70 29       	ld.w	r9,r8[0x8]
80000250:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000254:	70 28       	ld.w	r8,r8[0x8]
80000256:	70 08       	ld.w	r8,r8[0x0]
80000258:	10 39       	cp.w	r9,r8
8000025a:	c0 61       	brne	80000266 <semaphoreUnblockTask+0x32>
	{
		semaphore_handle->BLOCKEDLIST = NULL;
8000025c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000260:	30 09       	mov	r9,0
80000262:	91 29       	st.w	r8[0x8],r9
80000264:	c0 f8       	rjmp	80000282 <semaphoreUnblockTask+0x4e>
	}
	// more than one blocked task
	else if( task_handle == semaphore_handle->BLOCKEDLIST )
80000266:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000026a:	70 29       	ld.w	r9,r8[0x8]
8000026c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000270:	10 39       	cp.w	r9,r8
80000272:	c0 81       	brne	80000282 <semaphoreUnblockTask+0x4e>
	{
		semaphore_handle->BLOCKEDLIST = semaphore_handle->BLOCKEDLIST->nexttcb;
80000274:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000278:	70 28       	ld.w	r8,r8[0x8]
8000027a:	70 09       	ld.w	r9,r8[0x0]
8000027c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000280:	91 29       	st.w	r8[0x8],r9
	}
	
	remove( task_handle );
80000282:	ee fc ff f4 	ld.w	r12,r7[-12]
80000286:	f0 1f 00 07 	mcall	800002a0 <semaphoreUnblockTask+0x6c>
	
	task_handle->blocking_semaphore = NULL;
8000028a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000028e:	30 09       	mov	r9,0
80000290:	f1 49 00 74 	st.w	r8[116],r9
	
	return result;
80000294:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000298:	10 9c       	mov	r12,r8
8000029a:	2f dd       	sub	sp,-12
8000029c:	e3 cd 80 80 	ldm	sp++,r7,pc
800002a0:	80 00       	ld.sh	r0,r0[0x0]
800002a2:	0d d4       	ld.ub	r4,r6[0x5]

800002a4 <ROSA_semaphoreLock>:
{
	return (handle->current_task != NULL);
}

int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t handle)
{
800002a4:	eb cd 40 80 	pushm	r7,lr
800002a8:	1a 97       	mov	r7,sp
800002aa:	20 2d       	sub	sp,8
800002ac:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
800002b0:	f0 1f 00 25 	mcall	80000344 <ROSA_semaphoreLock+0xa0>
	int16_t result = 0;
800002b4:	30 08       	mov	r8,0
800002b6:	ef 58 ff fe 	st.h	r7[-2],r8
	if( handle->current_task == NULL )
800002ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002be:	70 18       	ld.w	r8,r8[0x4]
800002c0:	58 08       	cp.w	r8,0
800002c2:	c1 61       	brne	800002ee <ROSA_semaphoreLock+0x4a>
	{
		// If the semaphore is not locked, executing task can lock it
		// Task inherits the priority ceiling of the semaphore
		// Dynamic priority of the task is changed if priority of the task is lower than the ceiling of the semaphore
		
		taskUninstall(EXECTASK);
800002c4:	4a 18       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002c6:	70 08       	ld.w	r8,r8[0x0]
800002c8:	10 9c       	mov	r12,r8
800002ca:	f0 1f 00 21 	mcall	8000034c <ROSA_semaphoreLock+0xa8>
		semaphoreSetCurrentTask(handle, EXECTASK);
800002ce:	49 f8       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002d0:	70 08       	ld.w	r8,r8[0x0]
800002d2:	10 9b       	mov	r11,r8
800002d4:	ee fc ff f8 	ld.w	r12,r7[-8]
800002d8:	f0 1f 00 1e 	mcall	80000350 <ROSA_semaphoreLock+0xac>
		taskInstall(EXECTASK);
800002dc:	49 b8       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002de:	70 08       	ld.w	r8,r8[0x0]
800002e0:	10 9c       	mov	r12,r8
800002e2:	f0 1f 00 1d 	mcall	80000354 <ROSA_semaphoreLock+0xb0>

		result = 1;
800002e6:	30 18       	mov	r8,1
800002e8:	ef 58 ff fe 	st.h	r7[-2],r8
800002ec:	c2 48       	rjmp	80000334 <ROSA_semaphoreLock+0x90>
	}
	else if( EXECTASK != handle->current_task )
800002ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002f2:	70 19       	ld.w	r9,r8[0x4]
800002f4:	49 58       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002f6:	70 08       	ld.w	r8,r8[0x0]
800002f8:	10 39       	cp.w	r9,r8
800002fa:	c1 30       	breq	80000320 <ROSA_semaphoreLock+0x7c>
	{
		// If the semaphore is locked, executing task cannot lock it
		// Task is put into the waiting queue for the specific semaphore
		// Task is also removed from the ready list
		
		taskUninstall(EXECTASK);
800002fc:	49 38       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002fe:	70 08       	ld.w	r8,r8[0x0]
80000300:	10 9c       	mov	r12,r8
80000302:	f0 1f 00 13 	mcall	8000034c <ROSA_semaphoreLock+0xa8>
		semaphoreBlockTask(handle, EXECTASK);
80000306:	49 18       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
80000308:	70 08       	ld.w	r8,r8[0x0]
8000030a:	10 9b       	mov	r11,r8
8000030c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000310:	f0 1f 00 12 	mcall	80000358 <ROSA_semaphoreLock+0xb4>
		
		result = 1;
80000314:	30 18       	mov	r8,1
80000316:	ef 58 ff fe 	st.h	r7[-2],r8
		ROSA_yield();
8000031a:	f0 1f 00 11 	mcall	8000035c <ROSA_semaphoreLock+0xb8>
8000031e:	c0 b8       	rjmp	80000334 <ROSA_semaphoreLock+0x90>
	}
	else if( EXECTASK == handle->current_task)
80000320:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000324:	70 19       	ld.w	r9,r8[0x4]
80000326:	48 98       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
80000328:	70 08       	ld.w	r8,r8[0x0]
8000032a:	10 39       	cp.w	r9,r8
8000032c:	c0 41       	brne	80000334 <ROSA_semaphoreLock+0x90>
	{
		result = 2;
8000032e:	30 28       	mov	r8,2
80000330:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	interruptEnable();
80000334:	f0 1f 00 0b 	mcall	80000360 <ROSA_semaphoreLock+0xbc>
	
	return result;
80000338:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000033c:	10 9c       	mov	r12,r8
8000033e:	2f ed       	sub	sp,-8
80000340:	e3 cd 80 80 	ldm	sp++,r7,pc
80000344:	80 00       	ld.sh	r0,r0[0x0]
80000346:	21 66       	sub	r6,22
80000348:	00 00       	add	r0,r0
8000034a:	06 20       	rsub	r0,r3
8000034c:	80 00       	ld.sh	r0,r0[0x0]
8000034e:	0c c8       	st.b	r6++,r8
80000350:	80 00       	ld.sh	r0,r0[0x0]
80000352:	01 20       	ld.uh	r0,r0++
80000354:	80 00       	ld.sh	r0,r0[0x0]
80000356:	09 8c       	ld.ub	r12,r4[0x0]
80000358:	80 00       	ld.sh	r0,r0[0x0]
8000035a:	01 b4       	ld.ub	r4,r0[0x3]
8000035c:	80 00       	ld.sh	r0,r0[0x0]
8000035e:	0f 82       	ld.ub	r2,r7[0x0]
80000360:	80 00       	ld.sh	r0,r0[0x0]
80000362:	21 6a       	sub	r10,22

80000364 <ROSA_semaphoreUnlock>:

int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t handle)
{
80000364:	eb cd 40 80 	pushm	r7,lr
80000368:	1a 97       	mov	r7,sp
8000036a:	20 3d       	sub	sp,12
8000036c:	ef 4c ff f4 	st.w	r7[-12],r12
	interruptDisable();
80000370:	f0 1f 00 21 	mcall	800003f4 <ROSA_semaphoreUnlock+0x90>
	int16_t result = 0;
80000374:	30 08       	mov	r8,0
80000376:	ef 58 ff fa 	st.h	r7[-6],r8
	if( handle->current_task == EXECTASK )
8000037a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000037e:	70 19       	ld.w	r9,r8[0x4]
80000380:	49 e8       	lddpc	r8,800003f8 <ROSA_semaphoreUnlock+0x94>
80000382:	70 08       	ld.w	r8,r8[0x0]
80000384:	10 39       	cp.w	r9,r8
80000386:	c2 c1       	brne	800003de <ROSA_semaphoreUnlock+0x7a>
	{
		// If the semaphore is locked, unlock it, change the priority of the task to the last effective priority
		// Set the pointer to the current task to NULL
		
		taskUninstall(EXECTASK);			// take EXECTASK out of TCBLIST
80000388:	49 c8       	lddpc	r8,800003f8 <ROSA_semaphoreUnlock+0x94>
8000038a:	70 08       	ld.w	r8,r8[0x0]
8000038c:	10 9c       	mov	r12,r8
8000038e:	f0 1f 00 1c 	mcall	800003fc <ROSA_semaphoreUnlock+0x98>
		semaphoreUnsetCurrentTask(handle);	// update effective priority and current_task metadata
80000392:	ee fc ff f4 	ld.w	r12,r7[-12]
80000396:	f0 1f 00 1b 	mcall	80000400 <ROSA_semaphoreUnlock+0x9c>
		taskInstall(EXECTASK);				// put EXECTASK back in TCBLIST
8000039a:	49 88       	lddpc	r8,800003f8 <ROSA_semaphoreUnlock+0x94>
8000039c:	70 08       	ld.w	r8,r8[0x0]
8000039e:	10 9c       	mov	r12,r8
800003a0:	f0 1f 00 19 	mcall	80000404 <ROSA_semaphoreUnlock+0xa0>
		
		if(handle->BLOCKEDLIST != NULL)
800003a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003a8:	70 28       	ld.w	r8,r8[0x8]
800003aa:	58 08       	cp.w	r8,0
800003ac:	c1 60       	breq	800003d8 <ROSA_semaphoreUnlock+0x74>
		{
			// If there are still some task waiting to take the semaphore, take the first one from the waiting queue
			// Put the task back to ready list
		
			tcb * temp = handle->BLOCKEDLIST;
800003ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003b2:	70 28       	ld.w	r8,r8[0x8]
800003b4:	ef 48 ff fc 	st.w	r7[-4],r8
			semaphoreUnblockTask( handle, temp );
800003b8:	ee fb ff fc 	ld.w	r11,r7[-4]
800003bc:	ee fc ff f4 	ld.w	r12,r7[-12]
800003c0:	f0 1f 00 12 	mcall	80000408 <ROSA_semaphoreUnlock+0xa4>
			semaphoreSetCurrentTask( handle, temp );
800003c4:	ee fb ff fc 	ld.w	r11,r7[-4]
800003c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800003cc:	f0 1f 00 10 	mcall	8000040c <ROSA_semaphoreUnlock+0xa8>
		
			taskInstall( temp );
800003d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800003d4:	f0 1f 00 0c 	mcall	80000404 <ROSA_semaphoreUnlock+0xa0>
		}

		result = 1;
800003d8:	30 18       	mov	r8,1
800003da:	ef 58 ff fa 	st.h	r7[-6],r8
	}

	ROSA_yield();
800003de:	f0 1f 00 0d 	mcall	80000410 <ROSA_semaphoreUnlock+0xac>
	interruptEnable();
800003e2:	f0 1f 00 0d 	mcall	80000414 <ROSA_semaphoreUnlock+0xb0>
	
	return result;
800003e6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
800003ea:	10 9c       	mov	r12,r8
800003ec:	2f dd       	sub	sp,-12
800003ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800003f2:	00 00       	add	r0,r0
800003f4:	80 00       	ld.sh	r0,r0[0x0]
800003f6:	21 66       	sub	r6,22
800003f8:	00 00       	add	r0,r0
800003fa:	06 20       	rsub	r0,r3
800003fc:	80 00       	ld.sh	r0,r0[0x0]
800003fe:	0c c8       	st.b	r6++,r8
80000400:	80 00       	ld.sh	r0,r0[0x0]
80000402:	01 7e       	ld.ub	lr,--r0
80000404:	80 00       	ld.sh	r0,r0[0x0]
80000406:	09 8c       	ld.ub	r12,r4[0x0]
80000408:	80 00       	ld.sh	r0,r0[0x0]
8000040a:	02 34       	cp.w	r4,r1
8000040c:	80 00       	ld.sh	r0,r0[0x0]
8000040e:	01 20       	ld.uh	r0,r0++
80000410:	80 00       	ld.sh	r0,r0[0x0]
80000412:	0f 82       	ld.ub	r2,r7[0x0]
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	21 6a       	sub	r10,22

80000418 <usart_options>:
80000418:	00 00 e1 00 08 04 00 00 00 00 00 00 68 6f 67 53     ............hogS
80000428:	00 00 00 00 74 73 6b 31 00 00 00 00 74 73 6b 32     ....tsk1....tsk2
80000438:	00 00 00 00 74 73 6b 33 00 00 00 00 74 73 6b 34     ....tsk3....tsk4
80000448:	00 00 00 00 61 72 62 74 00 00 00 00                 ....arbt....

80000454 <init_tc>:
ROSA_taskHandle_t task_handle_30;
ROSA_taskHandle_t task_handle_31;
ROSA_taskHandle_t task_handle_32;

void init_tc()
{
80000454:	eb cd 40 80 	pushm	r7,lr
80000458:	1a 97       	mov	r7,sp
	*((unsigned int*)0xFFFF3844) = 0x0000C002;				// set waveform options
8000045a:	fe 78 38 44 	mov	r8,-51132
8000045e:	e0 69 c0 02 	mov	r9,49154
80000462:	91 09       	st.w	r8[0x0],r9
	*((unsigned int*)0xFFFF385C) = 0x000036D0;				// initialize CV to 0
80000464:	fe 78 38 5c 	mov	r8,-51108
80000468:	e0 69 36 d0 	mov	r9,14032
8000046c:	91 09       	st.w	r8[0x0],r9
	*((unsigned int*)0xFFFF3840) = 0x00000004 | 0x00000001; //start
8000046e:	fe 78 38 40 	mov	r8,-51136
80000472:	30 59       	mov	r9,5
80000474:	91 09       	st.w	r8[0x0],r9
}
80000476:	e3 cd 80 80 	ldm	sp++,r7,pc
8000047a:	d7 03       	nop

8000047c <hog_semaphores_task>:
void toggle_30(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                    
void toggle_31(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                    
void toggle_32(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }  

void hog_semaphores_task(void)
{
8000047c:	eb cd 40 80 	pushm	r7,lr
80000480:	1a 97       	mov	r7,sp
	while(1)
	{
		ledOn(LED6_GPIO);
80000482:	33 5c       	mov	r12,53
80000484:	f0 1f 00 26 	mcall	8000051c <hog_semaphores_task+0xa0>
		ROSA_semaphoreLock(S4);
80000488:	4a 68       	lddpc	r8,80000520 <hog_semaphores_task+0xa4>
8000048a:	70 08       	ld.w	r8,r8[0x0]
8000048c:	10 9c       	mov	r12,r8
8000048e:	f0 1f 00 26 	mcall	80000524 <hog_semaphores_task+0xa8>
		ROSA_delay(300);
80000492:	e0 6a 01 2c 	mov	r10,300
80000496:	30 0b       	mov	r11,0
80000498:	f0 1f 00 24 	mcall	80000528 <hog_semaphores_task+0xac>
		ROSA_semaphoreLock(S1);
8000049c:	4a 48       	lddpc	r8,8000052c <hog_semaphores_task+0xb0>
8000049e:	70 08       	ld.w	r8,r8[0x0]
800004a0:	10 9c       	mov	r12,r8
800004a2:	f0 1f 00 21 	mcall	80000524 <hog_semaphores_task+0xa8>
		ROSA_delay(300);
800004a6:	e0 6a 01 2c 	mov	r10,300
800004aa:	30 0b       	mov	r11,0
800004ac:	f0 1f 00 1f 	mcall	80000528 <hog_semaphores_task+0xac>
		ROSA_semaphoreLock(S2);
800004b0:	4a 08       	lddpc	r8,80000530 <hog_semaphores_task+0xb4>
800004b2:	70 08       	ld.w	r8,r8[0x0]
800004b4:	10 9c       	mov	r12,r8
800004b6:	f0 1f 00 1c 	mcall	80000524 <hog_semaphores_task+0xa8>
		ROSA_delay(300);
800004ba:	e0 6a 01 2c 	mov	r10,300
800004be:	30 0b       	mov	r11,0
800004c0:	f0 1f 00 1a 	mcall	80000528 <hog_semaphores_task+0xac>
		ROSA_semaphoreLock(S3);
800004c4:	49 c8       	lddpc	r8,80000534 <hog_semaphores_task+0xb8>
800004c6:	70 08       	ld.w	r8,r8[0x0]
800004c8:	10 9c       	mov	r12,r8
800004ca:	f0 1f 00 17 	mcall	80000524 <hog_semaphores_task+0xa8>
		ROSA_delay(300);
800004ce:	e0 6a 01 2c 	mov	r10,300
800004d2:	30 0b       	mov	r11,0
800004d4:	f0 1f 00 15 	mcall	80000528 <hog_semaphores_task+0xac>
		ledOff(LED6_GPIO);
800004d8:	33 5c       	mov	r12,53
800004da:	f0 1f 00 18 	mcall	80000538 <hog_semaphores_task+0xbc>
		ROSA_delay(800);
800004de:	e0 6a 03 20 	mov	r10,800
800004e2:	30 0b       	mov	r11,0
800004e4:	f0 1f 00 11 	mcall	80000528 <hog_semaphores_task+0xac>
		
		ROSA_semaphoreUnlock(S3);
800004e8:	49 38       	lddpc	r8,80000534 <hog_semaphores_task+0xb8>
800004ea:	70 08       	ld.w	r8,r8[0x0]
800004ec:	10 9c       	mov	r12,r8
800004ee:	f0 1f 00 14 	mcall	8000053c <hog_semaphores_task+0xc0>
		ROSA_semaphoreUnlock(S2);
800004f2:	49 08       	lddpc	r8,80000530 <hog_semaphores_task+0xb4>
800004f4:	70 08       	ld.w	r8,r8[0x0]
800004f6:	10 9c       	mov	r12,r8
800004f8:	f0 1f 00 11 	mcall	8000053c <hog_semaphores_task+0xc0>
		ROSA_semaphoreUnlock(S1);
800004fc:	48 c8       	lddpc	r8,8000052c <hog_semaphores_task+0xb0>
800004fe:	70 08       	ld.w	r8,r8[0x0]
80000500:	10 9c       	mov	r12,r8
80000502:	f0 1f 00 0f 	mcall	8000053c <hog_semaphores_task+0xc0>
		ROSA_semaphoreUnlock(S4);
80000506:	48 78       	lddpc	r8,80000520 <hog_semaphores_task+0xa4>
80000508:	70 08       	ld.w	r8,r8[0x0]
8000050a:	10 9c       	mov	r12,r8
8000050c:	f0 1f 00 0c 	mcall	8000053c <hog_semaphores_task+0xc0>
		//ledOff(LED6_GPIO);
		
		ROSA_delay(800);
80000510:	e0 6a 03 20 	mov	r10,800
80000514:	30 0b       	mov	r11,0
80000516:	f0 1f 00 05 	mcall	80000528 <hog_semaphores_task+0xac>
		
		//hog_semaphores_task_handle = NULL;
		//ROSA_taskDelete(hog_semaphores_task_handle);
	}
8000051a:	cb 4b       	rjmp	80000482 <hog_semaphores_task+0x6>
8000051c:	80 00       	ld.sh	r0,r0[0x0]
8000051e:	13 e0       	ld.ub	r0,r9[0x6]
80000520:	00 00       	add	r0,r0
80000522:	05 2c       	ld.uh	r12,r2++
80000524:	80 00       	ld.sh	r0,r0[0x0]
80000526:	02 a4       	st.w	r1++,r4
80000528:	80 00       	ld.sh	r0,r0[0x0]
8000052a:	0e 3c       	cp.w	r12,r7
8000052c:	00 00       	add	r0,r0
8000052e:	05 20       	ld.uh	r0,r2++
80000530:	00 00       	add	r0,r0
80000532:	05 24       	ld.uh	r4,r2++
80000534:	00 00       	add	r0,r0
80000536:	05 28       	ld.uh	r8,r2++
80000538:	80 00       	ld.sh	r0,r0[0x0]
8000053a:	14 00       	add	r0,r10
8000053c:	80 00       	ld.sh	r0,r0[0x0]
8000053e:	03 64       	ld.uh	r4,--r1

80000540 <task1>:
}

void task1(void)
{
80000540:	eb cd 40 80 	pushm	r7,lr
80000544:	1a 97       	mov	r7,sp
80000546:	20 2d       	sub	sp,8
	uint64_t time = ROSA_getTickCount();
80000548:	f0 1f 00 0f 	mcall	80000584 <task1+0x44>
8000054c:	14 98       	mov	r8,r10
8000054e:	16 99       	mov	r9,r11
80000550:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S1);
80000554:	48 d8       	lddpc	r8,80000588 <task1+0x48>
80000556:	70 08       	ld.w	r8,r8[0x0]
80000558:	10 9c       	mov	r12,r8
8000055a:	f0 1f 00 0d 	mcall	8000058c <task1+0x4c>
		ledToggle(LED0_GPIO);
8000055e:	33 bc       	mov	r12,59
80000560:	f0 1f 00 0c 	mcall	80000590 <task1+0x50>
		time = ROSA_getTickCount();
80000564:	f0 1f 00 08 	mcall	80000584 <task1+0x44>
80000568:	14 98       	mov	r8,r10
8000056a:	16 99       	mov	r9,r11
8000056c:	ee e9 ff f8 	st.d	r7[-8],r8
		ROSA_delay(100);
80000570:	36 4a       	mov	r10,100
80000572:	30 0b       	mov	r11,0
80000574:	f0 1f 00 08 	mcall	80000594 <task1+0x54>
		ROSA_semaphoreUnlock(S1);
80000578:	48 48       	lddpc	r8,80000588 <task1+0x48>
8000057a:	70 08       	ld.w	r8,r8[0x0]
8000057c:	10 9c       	mov	r12,r8
8000057e:	f0 1f 00 07 	mcall	80000598 <task1+0x58>
	}
80000582:	ce 9b       	rjmp	80000554 <task1+0x14>
80000584:	80 00       	ld.sh	r0,r0[0x0]
80000586:	09 08       	ld.w	r8,r4++
80000588:	00 00       	add	r0,r0
8000058a:	05 20       	ld.uh	r0,r2++
8000058c:	80 00       	ld.sh	r0,r0[0x0]
8000058e:	02 a4       	st.w	r1++,r4
80000590:	80 00       	ld.sh	r0,r0[0x0]
80000592:	14 20       	rsub	r0,r10
80000594:	80 00       	ld.sh	r0,r0[0x0]
80000596:	0e 3c       	cp.w	r12,r7
80000598:	80 00       	ld.sh	r0,r0[0x0]
8000059a:	03 64       	ld.uh	r4,--r1

8000059c <task2>:
}

void task2(void)
{
8000059c:	eb cd 40 80 	pushm	r7,lr
800005a0:	1a 97       	mov	r7,sp
800005a2:	20 2d       	sub	sp,8
	ROSA_delay(5);
800005a4:	30 5a       	mov	r10,5
800005a6:	30 0b       	mov	r11,0
800005a8:	f0 1f 00 10 	mcall	800005e8 <task2+0x4c>
	uint64_t time = ROSA_getTickCount();
800005ac:	f0 1f 00 10 	mcall	800005ec <task2+0x50>
800005b0:	14 98       	mov	r8,r10
800005b2:	16 99       	mov	r9,r11
800005b4:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S2);
800005b8:	48 e8       	lddpc	r8,800005f0 <task2+0x54>
800005ba:	70 08       	ld.w	r8,r8[0x0]
800005bc:	10 9c       	mov	r12,r8
800005be:	f0 1f 00 0e 	mcall	800005f4 <task2+0x58>
		ledToggle(LED1_GPIO);
800005c2:	33 cc       	mov	r12,60
800005c4:	f0 1f 00 0d 	mcall	800005f8 <task2+0x5c>
		time = ROSA_getTickCount();
800005c8:	f0 1f 00 09 	mcall	800005ec <task2+0x50>
800005cc:	14 98       	mov	r8,r10
800005ce:	16 99       	mov	r9,r11
800005d0:	ee e9 ff f8 	st.d	r7[-8],r8
		ROSA_delay(100);
800005d4:	36 4a       	mov	r10,100
800005d6:	30 0b       	mov	r11,0
800005d8:	f0 1f 00 04 	mcall	800005e8 <task2+0x4c>
		ROSA_semaphoreUnlock(S2);
800005dc:	48 58       	lddpc	r8,800005f0 <task2+0x54>
800005de:	70 08       	ld.w	r8,r8[0x0]
800005e0:	10 9c       	mov	r12,r8
800005e2:	f0 1f 00 07 	mcall	800005fc <task2+0x60>
	}
800005e6:	ce 9b       	rjmp	800005b8 <task2+0x1c>
800005e8:	80 00       	ld.sh	r0,r0[0x0]
800005ea:	0e 3c       	cp.w	r12,r7
800005ec:	80 00       	ld.sh	r0,r0[0x0]
800005ee:	09 08       	ld.w	r8,r4++
800005f0:	00 00       	add	r0,r0
800005f2:	05 24       	ld.uh	r4,r2++
800005f4:	80 00       	ld.sh	r0,r0[0x0]
800005f6:	02 a4       	st.w	r1++,r4
800005f8:	80 00       	ld.sh	r0,r0[0x0]
800005fa:	14 20       	rsub	r0,r10
800005fc:	80 00       	ld.sh	r0,r0[0x0]
800005fe:	03 64       	ld.uh	r4,--r1

80000600 <task3>:
}

void task3(void)
{
80000600:	eb cd 40 80 	pushm	r7,lr
80000604:	1a 97       	mov	r7,sp
80000606:	20 2d       	sub	sp,8
	ROSA_delay(10);
80000608:	30 aa       	mov	r10,10
8000060a:	30 0b       	mov	r11,0
8000060c:	f0 1f 00 10 	mcall	8000064c <task3+0x4c>
	uint64_t time = ROSA_getTickCount();
80000610:	f0 1f 00 10 	mcall	80000650 <task3+0x50>
80000614:	14 98       	mov	r8,r10
80000616:	16 99       	mov	r9,r11
80000618:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S3);
8000061c:	48 e8       	lddpc	r8,80000654 <task3+0x54>
8000061e:	70 08       	ld.w	r8,r8[0x0]
80000620:	10 9c       	mov	r12,r8
80000622:	f0 1f 00 0e 	mcall	80000658 <task3+0x58>
		ledToggle(LED2_GPIO);
80000626:	33 dc       	mov	r12,61
80000628:	f0 1f 00 0d 	mcall	8000065c <task3+0x5c>
		time = ROSA_getTickCount();
8000062c:	f0 1f 00 09 	mcall	80000650 <task3+0x50>
80000630:	14 98       	mov	r8,r10
80000632:	16 99       	mov	r9,r11
80000634:	ee e9 ff f8 	st.d	r7[-8],r8
		ROSA_delay(100);
80000638:	36 4a       	mov	r10,100
8000063a:	30 0b       	mov	r11,0
8000063c:	f0 1f 00 04 	mcall	8000064c <task3+0x4c>
		ROSA_semaphoreUnlock(S3);
80000640:	48 58       	lddpc	r8,80000654 <task3+0x54>
80000642:	70 08       	ld.w	r8,r8[0x0]
80000644:	10 9c       	mov	r12,r8
80000646:	f0 1f 00 07 	mcall	80000660 <task3+0x60>
	}
8000064a:	ce 9b       	rjmp	8000061c <task3+0x1c>
8000064c:	80 00       	ld.sh	r0,r0[0x0]
8000064e:	0e 3c       	cp.w	r12,r7
80000650:	80 00       	ld.sh	r0,r0[0x0]
80000652:	09 08       	ld.w	r8,r4++
80000654:	00 00       	add	r0,r0
80000656:	05 28       	ld.uh	r8,r2++
80000658:	80 00       	ld.sh	r0,r0[0x0]
8000065a:	02 a4       	st.w	r1++,r4
8000065c:	80 00       	ld.sh	r0,r0[0x0]
8000065e:	14 20       	rsub	r0,r10
80000660:	80 00       	ld.sh	r0,r0[0x0]
80000662:	03 64       	ld.uh	r4,--r1

80000664 <task4>:
}

void task4(void)
{
80000664:	eb cd 40 80 	pushm	r7,lr
80000668:	1a 97       	mov	r7,sp
8000066a:	20 2d       	sub	sp,8
	ROSA_delay(15);
8000066c:	30 fa       	mov	r10,15
8000066e:	30 0b       	mov	r11,0
80000670:	f0 1f 00 10 	mcall	800006b0 <task4+0x4c>
	uint64_t time = ROSA_getTickCount();
80000674:	f0 1f 00 10 	mcall	800006b4 <task4+0x50>
80000678:	14 98       	mov	r8,r10
8000067a:	16 99       	mov	r9,r11
8000067c:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S4);
80000680:	48 e8       	lddpc	r8,800006b8 <task4+0x54>
80000682:	70 08       	ld.w	r8,r8[0x0]
80000684:	10 9c       	mov	r12,r8
80000686:	f0 1f 00 0e 	mcall	800006bc <task4+0x58>
		ledToggle(LED3_GPIO);
8000068a:	33 ec       	mov	r12,62
8000068c:	f0 1f 00 0d 	mcall	800006c0 <task4+0x5c>
		time = ROSA_getTickCount();
80000690:	f0 1f 00 09 	mcall	800006b4 <task4+0x50>
80000694:	14 98       	mov	r8,r10
80000696:	16 99       	mov	r9,r11
80000698:	ee e9 ff f8 	st.d	r7[-8],r8
		ROSA_delay(100);
8000069c:	36 4a       	mov	r10,100
8000069e:	30 0b       	mov	r11,0
800006a0:	f0 1f 00 04 	mcall	800006b0 <task4+0x4c>
		ROSA_semaphoreUnlock(S4);
800006a4:	48 58       	lddpc	r8,800006b8 <task4+0x54>
800006a6:	70 08       	ld.w	r8,r8[0x0]
800006a8:	10 9c       	mov	r12,r8
800006aa:	f0 1f 00 07 	mcall	800006c4 <task4+0x60>
	}
800006ae:	ce 9b       	rjmp	80000680 <task4+0x1c>
800006b0:	80 00       	ld.sh	r0,r0[0x0]
800006b2:	0e 3c       	cp.w	r12,r7
800006b4:	80 00       	ld.sh	r0,r0[0x0]
800006b6:	09 08       	ld.w	r8,r4++
800006b8:	00 00       	add	r0,r0
800006ba:	05 2c       	ld.uh	r12,r2++
800006bc:	80 00       	ld.sh	r0,r0[0x0]
800006be:	02 a4       	st.w	r1++,r4
800006c0:	80 00       	ld.sh	r0,r0[0x0]
800006c2:	14 20       	rsub	r0,r10
800006c4:	80 00       	ld.sh	r0,r0[0x0]
800006c6:	03 64       	ld.uh	r4,--r1

800006c8 <arbiter_task>:
}

void arbiter_task(void)
{
800006c8:	eb cd 40 80 	pushm	r7,lr
800006cc:	1a 97       	mov	r7,sp
800006ce:	c0 28       	rjmp	800006d2 <arbiter_task+0xa>
		ROSA_delay(2000);
		if( hog_semaphores_task_handle == NULL )
		{
			ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 3);
		}
	}
800006d0:	d7 03       	nop

void arbiter_task(void)
{
	while(1)
	{
		ROSA_delay(2000);
800006d2:	e0 6a 07 d0 	mov	r10,2000
800006d6:	30 0b       	mov	r11,0
800006d8:	f0 1f 00 07 	mcall	800006f4 <arbiter_task+0x2c>
		if( hog_semaphores_task_handle == NULL )
800006dc:	48 78       	lddpc	r8,800006f8 <arbiter_task+0x30>
800006de:	70 08       	ld.w	r8,r8[0x0]
800006e0:	58 08       	cp.w	r8,0
800006e2:	cf 71       	brne	800006d0 <arbiter_task+0x8>
		{
			ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 3);
800006e4:	30 38       	mov	r8,3
800006e6:	34 09       	mov	r9,64
800006e8:	48 5a       	lddpc	r10,800006fc <arbiter_task+0x34>
800006ea:	48 6b       	lddpc	r11,80000700 <arbiter_task+0x38>
800006ec:	48 3c       	lddpc	r12,800006f8 <arbiter_task+0x30>
800006ee:	f0 1f 00 06 	mcall	80000704 <arbiter_task+0x3c>
		}
	}
800006f2:	cf 0b       	rjmp	800006d2 <arbiter_task+0xa>
800006f4:	80 00       	ld.sh	r0,r0[0x0]
800006f6:	0e 3c       	cp.w	r12,r7
800006f8:	00 00       	add	r0,r0
800006fa:	05 84       	ld.ub	r4,r2[0x0]
800006fc:	80 00       	ld.sh	r0,r0[0x0]
800006fe:	04 7c       	tst	r12,r2
80000700:	80 00       	ld.sh	r0,r0[0x0]
80000702:	04 24       	rsub	r4,r2
80000704:	80 00       	ld.sh	r0,r0[0x0]
80000706:	0a 88       	andn	r8,r5

80000708 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000708:	eb cd 40 80 	pushm	r7,lr
8000070c:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
8000070e:	f0 1f 00 1f 	mcall	80000788 <main+0x80>
	//ROSA_semaphoreCreate(&S1,1);
	//ROSA_semaphoreCreate(&S2,3);
	//ROSA_semaphoreCreate(&S3,5);
	
	//ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 2);
	ROSA_taskCreate(& task1_handle,					"tsk1", task1, STACK_SIZE, 3);
80000712:	30 38       	mov	r8,3
80000714:	34 09       	mov	r9,64
80000716:	49 ea       	lddpc	r10,8000078c <main+0x84>
80000718:	49 eb       	lddpc	r11,80000790 <main+0x88>
8000071a:	49 fc       	lddpc	r12,80000794 <main+0x8c>
8000071c:	f0 1f 00 1f 	mcall	80000798 <main+0x90>
	ROSA_taskCreate(& task2_handle,					"tsk2", task2, STACK_SIZE, 3);
80000720:	30 38       	mov	r8,3
80000722:	34 09       	mov	r9,64
80000724:	49 ea       	lddpc	r10,8000079c <main+0x94>
80000726:	49 fb       	lddpc	r11,800007a0 <main+0x98>
80000728:	49 fc       	lddpc	r12,800007a4 <main+0x9c>
8000072a:	f0 1f 00 1c 	mcall	80000798 <main+0x90>
	ROSA_taskCreate(& task3_handle,					"tsk3", task3, STACK_SIZE, 3);
8000072e:	30 38       	mov	r8,3
80000730:	34 09       	mov	r9,64
80000732:	49 ea       	lddpc	r10,800007a8 <main+0xa0>
80000734:	49 eb       	lddpc	r11,800007ac <main+0xa4>
80000736:	49 fc       	lddpc	r12,800007b0 <main+0xa8>
80000738:	f0 1f 00 18 	mcall	80000798 <main+0x90>
	ROSA_taskCreate(& task4_handle,					"tsk4", task4, STACK_SIZE, 3);
8000073c:	30 38       	mov	r8,3
8000073e:	34 09       	mov	r9,64
80000740:	49 da       	lddpc	r10,800007b4 <main+0xac>
80000742:	49 eb       	lddpc	r11,800007b8 <main+0xb0>
80000744:	49 ec       	lddpc	r12,800007bc <main+0xb4>
80000746:	f0 1f 00 15 	mcall	80000798 <main+0x90>
	ROSA_taskCreate(& arbiter_task_handle,			"arbt", arbiter_task, STACK_SIZE, 1);
8000074a:	30 18       	mov	r8,1
8000074c:	34 09       	mov	r9,64
8000074e:	49 da       	lddpc	r10,800007c0 <main+0xb8>
80000750:	49 db       	lddpc	r11,800007c4 <main+0xbc>
80000752:	49 ec       	lddpc	r12,800007c8 <main+0xc0>
80000754:	f0 1f 00 11 	mcall	80000798 <main+0x90>
	ROSA_semaphoreCreate(& S1, 3);
80000758:	30 3b       	mov	r11,3
8000075a:	49 dc       	lddpc	r12,800007cc <main+0xc4>
8000075c:	f0 1f 00 1d 	mcall	800007d0 <main+0xc8>
	ROSA_semaphoreCreate(& S2, 3);
80000760:	30 3b       	mov	r11,3
80000762:	49 dc       	lddpc	r12,800007d4 <main+0xcc>
80000764:	f0 1f 00 1b 	mcall	800007d0 <main+0xc8>
	ROSA_semaphoreCreate(& S3, 3);
80000768:	30 3b       	mov	r11,3
8000076a:	49 cc       	lddpc	r12,800007d8 <main+0xd0>
8000076c:	f0 1f 00 19 	mcall	800007d0 <main+0xc8>
	ROSA_semaphoreCreate(& S4, 3);
80000770:	30 3b       	mov	r11,3
80000772:	49 bc       	lddpc	r12,800007dc <main+0xd4>
80000774:	f0 1f 00 17 	mcall	800007d0 <main+0xc8>
	//ROSA_taskCreate(& task_handle_29, "test", toggle_29, STACK_SIZE, 3);
	//ROSA_taskCreate(& task_handle_30, "test", toggle_30, STACK_SIZE, 3);
	//ROSA_taskCreate(& task_handle_31, "test", toggle_31, STACK_SIZE, 3);
	//ROSA_taskCreate(& task_handle_32, "test", toggle_32, STACK_SIZE, 3);
	
	init_tc();
80000778:	f0 1f 00 1a 	mcall	800007e0 <main+0xd8>
	
	timerStart();
8000077c:	f0 1f 00 1a 	mcall	800007e4 <main+0xdc>
	ROSA_start();
80000780:	f0 1f 00 1a 	mcall	800007e8 <main+0xe0>
	/* Execution will never return here */
	while(1);
80000784:	c0 08       	rjmp	80000784 <main+0x7c>
80000786:	00 00       	add	r0,r0
80000788:	80 00       	ld.sh	r0,r0[0x0]
8000078a:	08 48       	or	r8,r4
8000078c:	80 00       	ld.sh	r0,r0[0x0]
8000078e:	05 40       	ld.w	r0,--r2
80000790:	80 00       	ld.sh	r0,r0[0x0]
80000792:	04 2c       	rsub	r12,r2
80000794:	00 00       	add	r0,r0
80000796:	05 9c       	ld.ub	r12,r2[0x1]
80000798:	80 00       	ld.sh	r0,r0[0x0]
8000079a:	0a 88       	andn	r8,r5
8000079c:	80 00       	ld.sh	r0,r0[0x0]
8000079e:	05 9c       	ld.ub	r12,r2[0x1]
800007a0:	80 00       	ld.sh	r0,r0[0x0]
800007a2:	04 34       	cp.w	r4,r2
800007a4:	00 00       	add	r0,r0
800007a6:	05 c0       	ld.ub	r0,r2[0x4]
800007a8:	80 00       	ld.sh	r0,r0[0x0]
800007aa:	06 00       	add	r0,r3
800007ac:	80 00       	ld.sh	r0,r0[0x0]
800007ae:	04 3c       	cp.w	r12,r2
800007b0:	00 00       	add	r0,r0
800007b2:	06 04       	add	r4,r3
800007b4:	80 00       	ld.sh	r0,r0[0x0]
800007b6:	06 64       	and	r4,r3
800007b8:	80 00       	ld.sh	r0,r0[0x0]
800007ba:	04 44       	or	r4,r2
800007bc:	00 00       	add	r0,r0
800007be:	06 08       	add	r8,r3
800007c0:	80 00       	ld.sh	r0,r0[0x0]
800007c2:	06 c8       	st.b	r3++,r8
800007c4:	80 00       	ld.sh	r0,r0[0x0]
800007c6:	04 4c       	or	r12,r2
800007c8:	00 00       	add	r0,r0
800007ca:	05 cc       	ld.ub	r12,r2[0x4]
800007cc:	00 00       	add	r0,r0
800007ce:	05 20       	ld.uh	r0,r2++
800007d0:	80 00       	ld.sh	r0,r0[0x0]
800007d2:	00 b4       	st.h	r0++,r4
800007d4:	00 00       	add	r0,r0
800007d6:	05 24       	ld.uh	r4,r2++
800007d8:	00 00       	add	r0,r0
800007da:	05 28       	ld.uh	r8,r2++
800007dc:	00 00       	add	r0,r0
800007de:	05 2c       	ld.uh	r12,r2++
800007e0:	80 00       	ld.sh	r0,r0[0x0]
800007e2:	04 54       	eor	r4,r2
800007e4:	80 00       	ld.sh	r0,r0[0x0]
800007e6:	17 46       	ld.w	r6,--r11
800007e8:	80 00       	ld.sh	r0,r0[0x0]
800007ea:	0e c0       	st.b	r7++,r0

800007ec <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800007ec:	eb cd 40 80 	pushm	r7,lr
800007f0:	1a 97       	mov	r7,sp
	interruptDisable;
	contextSaveFromISR();	  //Save the task context
800007f2:	f0 1f 00 0c 	mcall	80000820 <ROSA_yieldFromISR+0x34>
	system_ticks ++;
800007f6:	48 c8       	lddpc	r8,80000824 <ROSA_yieldFromISR+0x38>
800007f8:	f0 ea 00 00 	ld.d	r10,r8[0]
800007fc:	30 18       	mov	r8,1
800007fe:	30 09       	mov	r9,0
80000800:	f4 08 00 08 	add	r8,r10,r8
80000804:	f6 09 00 49 	adc	r9,r11,r9
80000808:	48 7a       	lddpc	r10,80000824 <ROSA_yieldFromISR+0x38>
8000080a:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
8000080e:	f0 1f 00 07 	mcall	80000828 <ROSA_yieldFromISR+0x3c>
	contextRestoreFromISR();  //...and switch over to it.
80000812:	f0 1f 00 07 	mcall	8000082c <ROSA_yieldFromISR+0x40>
	interruptEnable();
80000816:	f0 1f 00 07 	mcall	80000830 <ROSA_yieldFromISR+0x44>
}
8000081a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000081e:	00 00       	add	r0,r0
80000820:	80 00       	ld.sh	r0,r0[0x0]
80000822:	21 7e       	sub	lr,23
80000824:	00 00       	add	r0,r0
80000826:	06 2c       	rsub	r12,r3
80000828:	80 00       	ld.sh	r0,r0[0x0]
8000082a:	0f a0       	ld.ub	r0,r7[0x2]
8000082c:	80 00       	ld.sh	r0,r0[0x0]
8000082e:	21 b8       	sub	r8,27
80000830:	80 00       	ld.sh	r0,r0[0x0]
80000832:	21 6a       	sub	r10,22

80000834 <usart_options>:
80000834:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000844:	00 00 00 00                                         ....

80000848 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000848:	eb cd 40 80 	pushm	r7,lr
8000084c:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000084e:	f0 1f 00 1d 	mcall	800008c0 <ROSA_init+0x78>
	buttonInit();								//Buttons
80000852:	f0 1f 00 1d 	mcall	800008c4 <ROSA_init+0x7c>
	joystickInit();								//Joystick
80000856:	f0 1f 00 1d 	mcall	800008c8 <ROSA_init+0x80>
	potInit();									//Potentiometer
8000085a:	f0 1f 00 1d 	mcall	800008cc <ROSA_init+0x84>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000085e:	e0 6a 1b 00 	mov	r10,6912
80000862:	ea 1a 00 b7 	orh	r10,0xb7
80000866:	49 bb       	lddpc	r11,800008d0 <ROSA_init+0x88>
80000868:	fe 7c 14 00 	mov	r12,-60416
8000086c:	f0 1f 00 1a 	mcall	800008d4 <ROSA_init+0x8c>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST				= NULL;
80000870:	49 a8       	lddpc	r8,800008d8 <ROSA_init+0x90>
80000872:	30 09       	mov	r9,0
80000874:	91 09       	st.w	r8[0x0],r9
	SUSPENDEDLIST		= NULL;
80000876:	49 a8       	lddpc	r8,800008dc <ROSA_init+0x94>
80000878:	30 09       	mov	r9,0
8000087a:	91 09       	st.w	r8[0x0],r9
	EXECTASK			= NULL;
8000087c:	49 98       	lddpc	r8,800008e0 <ROSA_init+0x98>
8000087e:	30 09       	mov	r9,0
80000880:	91 09       	st.w	r8[0x0],r9
	SEMAPHORES			= NULL;
80000882:	49 98       	lddpc	r8,800008e4 <ROSA_init+0x9c>
80000884:	30 09       	mov	r9,0
80000886:	91 09       	st.w	r8[0x0],r9
	
#if IDLE_TASK_ENABLED
	IDLETASK = NULL;
80000888:	49 88       	lddpc	r8,800008e8 <ROSA_init+0xa0>
8000088a:	30 09       	mov	r9,0
8000088c:	91 09       	st.w	r8[0x0],r9
	ROSA_taskCreate(&IDLETASK, "idle", idle, 0x40, 255);
8000088e:	e0 68 00 ff 	mov	r8,255
80000892:	34 09       	mov	r9,64
80000894:	49 6a       	lddpc	r10,800008ec <ROSA_init+0xa4>
80000896:	49 7b       	lddpc	r11,800008f0 <ROSA_init+0xa8>
80000898:	49 4c       	lddpc	r12,800008e8 <ROSA_init+0xa0>
8000089a:	f0 1f 00 17 	mcall	800008f4 <ROSA_init+0xac>
	//taskUninstall(IDLETASK);
#endif
	
	//initialize system time
	system_ticks = 0;
8000089e:	49 7a       	lddpc	r10,800008f8 <ROSA_init+0xb0>
800008a0:	30 08       	mov	r8,0
800008a2:	30 09       	mov	r9,0
800008a4:	f4 e9 00 00 	st.d	r10[0],r8
	round_robin_ticks = 0;
800008a8:	49 5a       	lddpc	r10,800008fc <ROSA_init+0xb4>
800008aa:	30 08       	mov	r8,0
800008ac:	30 09       	mov	r9,0
800008ae:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Initialize the timer to 1 ms period.
	//...
	interruptInit();
800008b2:	f0 1f 00 14 	mcall	80000900 <ROSA_init+0xb8>
	timerInit(1);
800008b6:	30 1c       	mov	r12,1
800008b8:	f0 1f 00 13 	mcall	80000904 <ROSA_init+0xbc>
	//...
}
800008bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800008c0:	80 00       	ld.sh	r0,r0[0x0]
800008c2:	13 54       	ld.sh	r4,--r9
800008c4:	80 00       	ld.sh	r0,r0[0x0]
800008c6:	11 5c       	ld.sh	r12,--r8
800008c8:	80 00       	ld.sh	r0,r0[0x0]
800008ca:	11 84       	ld.ub	r4,r8[0x0]
800008cc:	80 00       	ld.sh	r0,r0[0x0]
800008ce:	14 40       	or	r0,r10
800008d0:	80 00       	ld.sh	r0,r0[0x0]
800008d2:	08 34       	cp.w	r4,r4
800008d4:	80 00       	ld.sh	r0,r0[0x0]
800008d6:	15 f4       	ld.ub	r4,r10[0x7]
800008d8:	00 00       	add	r0,r0
800008da:	06 14       	sub	r4,r3
800008dc:	00 00       	add	r0,r0
800008de:	06 18       	sub	r8,r3
800008e0:	00 00       	add	r0,r0
800008e2:	06 20       	rsub	r0,r3
800008e4:	00 00       	add	r0,r0
800008e6:	06 1c       	sub	r12,r3
800008e8:	00 00       	add	r0,r0
800008ea:	06 10       	sub	r0,r3
800008ec:	80 00       	ld.sh	r0,r0[0x0]
800008ee:	0e b8       	st.h	r7++,r8
800008f0:	80 00       	ld.sh	r0,r0[0x0]
800008f2:	08 40       	or	r0,r4
800008f4:	80 00       	ld.sh	r0,r0[0x0]
800008f6:	0a 88       	andn	r8,r5
800008f8:	00 00       	add	r0,r0
800008fa:	06 2c       	rsub	r12,r3
800008fc:	00 00       	add	r0,r0
800008fe:	06 24       	rsub	r4,r3
80000900:	80 00       	ld.sh	r0,r0[0x0]
80000902:	21 48       	sub	r8,20
80000904:	80 00       	ld.sh	r0,r0[0x0]
80000906:	17 18       	ld.sh	r8,r11++

80000908 <ROSA_getTickCount>:

uint64_t ROSA_getTickCount(void)
{
80000908:	eb cd 40 80 	pushm	r7,lr
8000090c:	1a 97       	mov	r7,sp
	return system_ticks;
8000090e:	48 48       	lddpc	r8,8000091c <ROSA_getTickCount+0x14>
80000910:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000914:	10 9a       	mov	r10,r8
80000916:	12 9b       	mov	r11,r9
80000918:	e3 cd 80 80 	ldm	sp++,r7,pc
8000091c:	00 00       	add	r0,r0
8000091e:	06 2c       	rsub	r12,r3

80000920 <insert_after>:

uint16_t insert_after( tcb * position, tcb * new_task )
{
80000920:	eb cd 40 80 	pushm	r7,lr
80000924:	1a 97       	mov	r7,sp
80000926:	20 3d       	sub	sp,12
80000928:	ef 4c ff f8 	st.w	r7[-8],r12
8000092c:	ef 4b ff f4 	st.w	r7[-12],r11
	uint16_t result = -1;
80000930:	3f f8       	mov	r8,-1
80000932:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( position != NULL )
80000936:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000093a:	58 08       	cp.w	r8,0
8000093c:	c2 10       	breq	8000097e <insert_after+0x5e>
	{
		new_task->prevtcb = position;
8000093e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000942:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000946:	f1 49 00 64 	st.w	r8[100],r9
		new_task->nexttcb = position->nexttcb;
8000094a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000094e:	70 09       	ld.w	r9,r8[0x0]
80000950:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000954:	91 09       	st.w	r8[0x0],r9
		
		position->nexttcb = new_task;
80000956:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000095a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000095e:	91 09       	st.w	r8[0x0],r9
		if( new_task->nexttcb != NULL )
80000960:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000964:	70 08       	ld.w	r8,r8[0x0]
80000966:	58 08       	cp.w	r8,0
80000968:	c0 80       	breq	80000978 <insert_after+0x58>
		{
			(new_task->nexttcb)->prevtcb = new_task;
8000096a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000096e:	70 08       	ld.w	r8,r8[0x0]
80000970:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000974:	f1 49 00 64 	st.w	r8[100],r9
		}
		result = 1;
80000978:	30 18       	mov	r8,1
8000097a:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	return result;
8000097e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000982:	10 9c       	mov	r12,r8
80000984:	2f dd       	sub	sp,-12
80000986:	e3 cd 80 80 	ldm	sp++,r7,pc
8000098a:	d7 03       	nop

8000098c <taskInstall>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

uint16_t taskInstall(tcb * task)
{
8000098c:	eb cd 40 80 	pushm	r7,lr
80000990:	1a 97       	mov	r7,sp
80000992:	20 3d       	sub	sp,12
80000994:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
80000998:	3f f8       	mov	r8,-1
8000099a:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( TCBLIST == NULL )
8000099e:	4b 98       	lddpc	r8,80000a80 <taskInstall+0xf4>
800009a0:	70 08       	ld.w	r8,r8[0x0]
800009a2:	58 08       	cp.w	r8,0
800009a4:	c1 41       	brne	800009cc <taskInstall+0x40>
	{
		TCBLIST		  = task;
800009a6:	4b 78       	lddpc	r8,80000a80 <taskInstall+0xf4>
800009a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009ac:	91 09       	st.w	r8[0x0],r9
		task->nexttcb = task;
800009ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009b2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009b6:	91 09       	st.w	r8[0x0],r9
		task->prevtcb = task;
800009b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009c0:	f1 49 00 64 	st.w	r8[100],r9

		result = 1;
800009c4:	30 18       	mov	r8,1
800009c6:	ef 58 ff fa 	st.h	r7[-6],r8
800009ca:	c5 58       	rjmp	80000a74 <taskInstall+0xe8>
	}
	//if this task should be inserted before the first task in the list
	else if( task->effective_priority < TCBLIST->effective_priority )
800009cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009d0:	f1 39 00 69 	ld.ub	r9,r8[105]
800009d4:	4a b8       	lddpc	r8,80000a80 <taskInstall+0xf4>
800009d6:	70 08       	ld.w	r8,r8[0x0]
800009d8:	f1 38 00 69 	ld.ub	r8,r8[105]
800009dc:	f0 09 18 00 	cp.b	r9,r8
800009e0:	c1 12       	brcc	80000a02 <taskInstall+0x76>
	{
		insert_after(TCBLIST->prevtcb, task);
800009e2:	4a 88       	lddpc	r8,80000a80 <taskInstall+0xf4>
800009e4:	70 08       	ld.w	r8,r8[0x0]
800009e6:	71 98       	ld.w	r8,r8[0x64]
800009e8:	ee fb ff f4 	ld.w	r11,r7[-12]
800009ec:	10 9c       	mov	r12,r8
800009ee:	f0 1f 00 26 	mcall	80000a84 <taskInstall+0xf8>
		TCBLIST = task;
800009f2:	4a 48       	lddpc	r8,80000a80 <taskInstall+0xf4>
800009f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009f8:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
800009fa:	30 18       	mov	r8,1
800009fc:	ef 58 ff fa 	st.h	r7[-6],r8
80000a00:	c3 a8       	rjmp	80000a74 <taskInstall+0xe8>
	}
	else if( task->effective_priority >= (TCBLIST->prevtcb)->effective_priority )
80000a02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a06:	f1 39 00 69 	ld.ub	r9,r8[105]
80000a0a:	49 e8       	lddpc	r8,80000a80 <taskInstall+0xf4>
80000a0c:	70 08       	ld.w	r8,r8[0x0]
80000a0e:	71 98       	ld.w	r8,r8[0x64]
80000a10:	f1 38 00 69 	ld.ub	r8,r8[105]
80000a14:	f0 09 18 00 	cp.b	r9,r8
80000a18:	c0 a3       	brcs	80000a2c <taskInstall+0xa0>
	{
		insert_after(TCBLIST->prevtcb, task);
80000a1a:	49 a8       	lddpc	r8,80000a80 <taskInstall+0xf4>
80000a1c:	70 08       	ld.w	r8,r8[0x0]
80000a1e:	71 98       	ld.w	r8,r8[0x64]
80000a20:	ee fb ff f4 	ld.w	r11,r7[-12]
80000a24:	10 9c       	mov	r12,r8
80000a26:	f0 1f 00 18 	mcall	80000a84 <taskInstall+0xf8>
80000a2a:	c2 58       	rjmp	80000a74 <taskInstall+0xe8>
	}
	else
	{
		iterator = TCBLIST;
80000a2c:	49 58       	lddpc	r8,80000a80 <taskInstall+0xf4>
80000a2e:	70 08       	ld.w	r8,r8[0x0]
80000a30:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->effective_priority >= iterator->effective_priority )
80000a34:	c0 68       	rjmp	80000a40 <taskInstall+0xb4>
		{
			iterator = iterator->nexttcb;
80000a36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a3a:	70 08       	ld.w	r8,r8[0x0]
80000a3c:	ef 48 ff fc 	st.w	r7[-4],r8
		insert_after(TCBLIST->prevtcb, task);
	}
	else
	{
		iterator = TCBLIST;
		while( iterator && task->effective_priority >= iterator->effective_priority )
80000a40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a44:	58 08       	cp.w	r8,0
80000a46:	c0 c0       	breq	80000a5e <taskInstall+0xd2>
80000a48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a4c:	f1 39 00 69 	ld.ub	r9,r8[105]
80000a50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a54:	f1 38 00 69 	ld.ub	r8,r8[105]
80000a58:	f0 09 18 00 	cp.b	r9,r8
80000a5c:	ce d2       	brcc	80000a36 <taskInstall+0xaa>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
80000a5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a62:	71 98       	ld.w	r8,r8[0x64]
80000a64:	ee fb ff f4 	ld.w	r11,r7[-12]
80000a68:	10 9c       	mov	r12,r8
80000a6a:	f0 1f 00 07 	mcall	80000a84 <taskInstall+0xf8>
		
		result = 1;
80000a6e:	30 18       	mov	r8,1
80000a70:	ef 58 ff fa 	st.h	r7[-6],r8
	}

	return result;
80000a74:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000a78:	10 9c       	mov	r12,r8
80000a7a:	2f dd       	sub	sp,-12
80000a7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a80:	00 00       	add	r0,r0
80000a82:	06 14       	sub	r4,r3
80000a84:	80 00       	ld.sh	r0,r0[0x0]
80000a86:	09 20       	ld.uh	r0,r4++

80000a88 <ROSA_taskCreate>:
	
	return result;
}

uint16_t ROSA_taskCreate(ROSA_taskHandle_t* th, char* id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000a88:	eb cd 40 80 	pushm	r7,lr
80000a8c:	1a 97       	mov	r7,sp
80000a8e:	20 8d       	sub	sp,32
80000a90:	ef 4c ff f0 	st.w	r7[-16],r12
80000a94:	ef 4b ff ec 	st.w	r7[-20],r11
80000a98:	ef 4a ff e8 	st.w	r7[-24],r10
80000a9c:	ef 49 ff e4 	st.w	r7[-28],r9
80000aa0:	ef 68 ff e0 	st.b	r7[-32],r8
	uint16_t result = 0;
80000aa4:	30 08       	mov	r8,0
80000aa6:	ef 58 ff f6 	st.h	r7[-10],r8
	
	if(! *th)
80000aaa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000aae:	70 08       	ld.w	r8,r8[0x0]
80000ab0:	58 08       	cp.w	r8,0
80000ab2:	c6 e1       	brne	80000b8e <ROSA_taskCreate+0x106>
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
80000ab4:	37 cb       	mov	r11,124
80000ab6:	30 1c       	mov	r12,1
80000ab8:	f0 1f 00 39 	mcall	80000b9c <ROSA_taskCreate+0x114>
80000abc:	18 98       	mov	r8,r12
80000abe:	10 99       	mov	r9,r8
80000ac0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ac4:	91 09       	st.w	r8[0x0],r9
		tcb* temp = *th;
80000ac6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000aca:	70 08       	ld.w	r8,r8[0x0]
80000acc:	ef 48 ff f8 	st.w	r7[-8],r8
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80000ad0:	30 08       	mov	r8,0
80000ad2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ad6:	c1 48       	rjmp	80000afe <ROSA_taskCreate+0x76>
		{
			temp->id[i] = id[i];		//copy task id
80000ad8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000adc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ae0:	ee fa ff ec 	ld.w	r10,r7[-20]
80000ae4:	f4 08 00 08 	add	r8,r10,r8
80000ae8:	11 88       	ld.ub	r8,r8[0x0]
80000aea:	ee fa ff f8 	ld.w	r10,r7[-8]
80000aee:	f4 09 00 09 	add	r9,r10,r9
80000af2:	b2 c8       	st.b	r9[0x4],r8
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
		tcb* temp = *th;
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80000af4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000af8:	2f f8       	sub	r8,-1
80000afa:	ef 48 ff fc 	st.w	r7[-4],r8
80000afe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b02:	58 38       	cp.w	r8,3
80000b04:	fe 9a ff ea 	brle	80000ad8 <ROSA_taskCreate+0x50>
		{
			temp->id[i] = id[i];		//copy task id
		}
		
		temp->staddr = taskFunction;
80000b08:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b10:	91 29       	st.w	r8[0x8],r9
		temp->retaddr = (int)taskFunction;
80000b12:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b1a:	91 99       	st.w	r8[0x24],r9
		
		temp->datasize = stackSize;
80000b1c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80000b20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b24:	91 49       	st.w	r8[0x10],r9
		temp->dataarea = (int*)calloc(stackSize, sizeof(int)) + stackSize;
80000b26:	30 4b       	mov	r11,4
80000b28:	ee fc ff e4 	ld.w	r12,r7[-28]
80000b2c:	f0 1f 00 1c 	mcall	80000b9c <ROSA_taskCreate+0x114>
80000b30:	18 98       	mov	r8,r12
80000b32:	10 99       	mov	r9,r8
80000b34:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b38:	a3 68       	lsl	r8,0x2
80000b3a:	10 09       	add	r9,r8
80000b3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b40:	91 39       	st.w	r8[0xc],r9
		temp->saveusp = temp->dataarea;
80000b42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b46:	70 39       	ld.w	r9,r8[0xc]
80000b48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b4c:	91 59       	st.w	r8[0x14],r9
		
		temp->savesr = ROSA_INITIALSR;
80000b4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b52:	fc 19 00 1c 	movh	r9,0x1c
80000b56:	91 89       	st.w	r8[0x20],r9
		
		temp->priority = priority;
80000b58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b5c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000b60:	f3 68 00 68 	st.b	r9[104],r8
		temp->effective_priority = priority;
80000b64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b68:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000b6c:	f3 68 00 69 	st.b	r9[105],r8
		
		temp->suspended = 0;
80000b70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b74:	30 09       	mov	r9,0
80000b76:	f1 49 00 78 	st.w	r8[120],r9
		
		contextInit(temp);
80000b7a:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b7e:	f0 1f 00 09 	mcall	80000ba0 <ROSA_taskCreate+0x118>
		
		taskInstall(* th);
80000b82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b86:	70 08       	ld.w	r8,r8[0x0]
80000b88:	10 9c       	mov	r12,r8
80000b8a:	f0 1f 00 07 	mcall	80000ba4 <ROSA_taskCreate+0x11c>
	}
	return result;
80000b8e:	ef 08 ff f6 	ld.sh	r8,r7[-10]
}
80000b92:	10 9c       	mov	r12,r8
80000b94:	2f 8d       	sub	sp,-32
80000b96:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b9a:	00 00       	add	r0,r0
80000b9c:	80 00       	ld.sh	r0,r0[0x0]
80000b9e:	18 54       	eor	r4,r12
80000ba0:	80 00       	ld.sh	r0,r0[0x0]
80000ba2:	0e f6       	st.b	--r7,r6
80000ba4:	80 00       	ld.sh	r0,r0[0x0]
80000ba6:	09 8c       	ld.ub	r12,r4[0x0]

80000ba8 <taskSuspend>:

uint16_t taskSuspend(tcb * task)
{
80000ba8:	eb cd 40 80 	pushm	r7,lr
80000bac:	1a 97       	mov	r7,sp
80000bae:	20 3d       	sub	sp,12
80000bb0:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
80000bb4:	3f f8       	mov	r8,-1
80000bb6:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( SUSPENDEDLIST == NULL )
80000bba:	4c 28       	lddpc	r8,80000cc0 <taskSuspend+0x118>
80000bbc:	70 08       	ld.w	r8,r8[0x0]
80000bbe:	58 08       	cp.w	r8,0
80000bc0:	c1 41       	brne	80000be8 <taskSuspend+0x40>
	{
		SUSPENDEDLIST		= task;
80000bc2:	4c 08       	lddpc	r8,80000cc0 <taskSuspend+0x118>
80000bc4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000bc8:	91 09       	st.w	r8[0x0],r9
		task->nexttcb		= task;
80000bca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bce:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000bd2:	91 09       	st.w	r8[0x0],r9
		task->prevtcb		= task;
80000bd4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bd8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000bdc:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000be0:	30 18       	mov	r8,1
80000be2:	ef 58 ff fa 	st.h	r7[-6],r8
80000be6:	c6 18       	rjmp	80000ca8 <taskSuspend+0x100>
	}
	//if this task should be inserted before the first task in the list
	else if( task->back_online_time < SUSPENDEDLIST->back_online_time )
80000be8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bec:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000bf0:	4b 48       	lddpc	r8,80000cc0 <taskSuspend+0x118>
80000bf2:	70 08       	ld.w	r8,r8[0x0]
80000bf4:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000bf8:	10 3a       	cp.w	r10,r8
80000bfa:	f2 0b 13 00 	cpc	r11,r9
80000bfe:	c1 12       	brcc	80000c20 <taskSuspend+0x78>
	{
		insert_after(SUSPENDEDLIST->prevtcb, task);
80000c00:	4b 08       	lddpc	r8,80000cc0 <taskSuspend+0x118>
80000c02:	70 08       	ld.w	r8,r8[0x0]
80000c04:	71 98       	ld.w	r8,r8[0x64]
80000c06:	ee fb ff f4 	ld.w	r11,r7[-12]
80000c0a:	10 9c       	mov	r12,r8
80000c0c:	f0 1f 00 2e 	mcall	80000cc4 <taskSuspend+0x11c>
		SUSPENDEDLIST = task;
80000c10:	4a c8       	lddpc	r8,80000cc0 <taskSuspend+0x118>
80000c12:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000c16:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
80000c18:	30 18       	mov	r8,1
80000c1a:	ef 58 ff fa 	st.h	r7[-6],r8
80000c1e:	c4 58       	rjmp	80000ca8 <taskSuspend+0x100>
	}
	//if this task should be inserted after the last task in the list
	else if( task->back_online_time >= (SUSPENDEDLIST->prevtcb)->back_online_time )
80000c20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c24:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000c28:	4a 68       	lddpc	r8,80000cc0 <taskSuspend+0x118>
80000c2a:	70 08       	ld.w	r8,r8[0x0]
80000c2c:	71 98       	ld.w	r8,r8[0x64]
80000c2e:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000c32:	10 3a       	cp.w	r10,r8
80000c34:	f2 0b 13 00 	cpc	r11,r9
80000c38:	c1 33       	brcs	80000c5e <taskSuspend+0xb6>
	{
		insert_after(SUSPENDEDLIST->prevtcb, task);
80000c3a:	4a 28       	lddpc	r8,80000cc0 <taskSuspend+0x118>
80000c3c:	70 08       	ld.w	r8,r8[0x0]
80000c3e:	71 98       	ld.w	r8,r8[0x64]
80000c40:	ee fb ff f4 	ld.w	r11,r7[-12]
80000c44:	10 9c       	mov	r12,r8
80000c46:	f0 1f 00 20 	mcall	80000cc4 <taskSuspend+0x11c>
		SUSPENDEDLIST->prevtcb = task;
80000c4a:	49 e8       	lddpc	r8,80000cc0 <taskSuspend+0x118>
80000c4c:	70 08       	ld.w	r8,r8[0x0]
80000c4e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000c52:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000c56:	30 18       	mov	r8,1
80000c58:	ef 58 ff fa 	st.h	r7[-6],r8
80000c5c:	c2 68       	rjmp	80000ca8 <taskSuspend+0x100>
	}
	//if this task should be inserted somewhere in the middle of the list
	else
	{
		iterator = SUSPENDEDLIST;
80000c5e:	49 98       	lddpc	r8,80000cc0 <taskSuspend+0x118>
80000c60:	70 08       	ld.w	r8,r8[0x0]
80000c62:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->back_online_time >= iterator->back_online_time )
80000c66:	c0 68       	rjmp	80000c72 <taskSuspend+0xca>
		{
			iterator = iterator->nexttcb;
80000c68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c6c:	70 08       	ld.w	r8,r8[0x0]
80000c6e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	//if this task should be inserted somewhere in the middle of the list
	else
	{
		iterator = SUSPENDEDLIST;
		while( iterator && task->back_online_time >= iterator->back_online_time )
80000c72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c76:	58 08       	cp.w	r8,0
80000c78:	c0 d0       	breq	80000c92 <taskSuspend+0xea>
80000c7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c7e:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000c82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c86:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000c8a:	10 3a       	cp.w	r10,r8
80000c8c:	f2 0b 13 00 	cpc	r11,r9
80000c90:	ce c2       	brcc	80000c68 <taskSuspend+0xc0>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
80000c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c96:	71 98       	ld.w	r8,r8[0x64]
80000c98:	ee fb ff f4 	ld.w	r11,r7[-12]
80000c9c:	10 9c       	mov	r12,r8
80000c9e:	f0 1f 00 0a 	mcall	80000cc4 <taskSuspend+0x11c>
		
		result = 1;
80000ca2:	30 18       	mov	r8,1
80000ca4:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	task->suspended = 1;
80000ca8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000cac:	30 19       	mov	r9,1
80000cae:	f1 49 00 78 	st.w	r8[120],r9
	
	return result;
80000cb2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000cb6:	10 9c       	mov	r12,r8
80000cb8:	2f dd       	sub	sp,-12
80000cba:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cbe:	00 00       	add	r0,r0
80000cc0:	00 00       	add	r0,r0
80000cc2:	06 18       	sub	r8,r3
80000cc4:	80 00       	ld.sh	r0,r0[0x0]
80000cc6:	09 20       	ld.uh	r0,r4++

80000cc8 <taskUninstall>:

uint16_t taskUninstall( tcb * task )
{
80000cc8:	eb cd 40 80 	pushm	r7,lr
80000ccc:	1a 97       	mov	r7,sp
80000cce:	20 2d       	sub	sp,8
80000cd0:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000cd4:	3f f8       	mov	r8,-1
80000cd6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
80000cda:	49 78       	lddpc	r8,80000d34 <taskUninstall+0x6c>
80000cdc:	70 09       	ld.w	r9,r8[0x0]
80000cde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ce2:	10 39       	cp.w	r9,r8
80000ce4:	c0 c1       	brne	80000cfc <taskUninstall+0x34>
80000ce6:	49 48       	lddpc	r8,80000d34 <taskUninstall+0x6c>
80000ce8:	70 08       	ld.w	r8,r8[0x0]
80000cea:	71 99       	ld.w	r9,r8[0x64]
80000cec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cf0:	10 39       	cp.w	r9,r8
80000cf2:	c0 51       	brne	80000cfc <taskUninstall+0x34>
	{
		TCBLIST	= NULL;
80000cf4:	49 08       	lddpc	r8,80000d34 <taskUninstall+0x6c>
80000cf6:	30 09       	mov	r9,0
80000cf8:	91 09       	st.w	r8[0x0],r9
uint16_t taskUninstall( tcb * task )
{
	uint16_t result = -1;
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
80000cfa:	c0 c8       	rjmp	80000d12 <taskUninstall+0x4a>
	{
		TCBLIST	= NULL;
	}
	else if( TCBLIST == task )
80000cfc:	48 e8       	lddpc	r8,80000d34 <taskUninstall+0x6c>
80000cfe:	70 09       	ld.w	r9,r8[0x0]
80000d00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d04:	10 39       	cp.w	r9,r8
80000d06:	c0 61       	brne	80000d12 <taskUninstall+0x4a>
	{
		TCBLIST = TCBLIST->nexttcb;
80000d08:	48 b8       	lddpc	r8,80000d34 <taskUninstall+0x6c>
80000d0a:	70 08       	ld.w	r8,r8[0x0]
80000d0c:	70 09       	ld.w	r9,r8[0x0]
80000d0e:	48 a8       	lddpc	r8,80000d34 <taskUninstall+0x6c>
80000d10:	91 09       	st.w	r8[0x0],r9
	}
	
	result = remove(task);
80000d12:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d16:	f0 1f 00 09 	mcall	80000d38 <taskUninstall+0x70>
80000d1a:	18 98       	mov	r8,r12
80000d1c:	5c 88       	casts.h	r8
80000d1e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	result = 1;
80000d22:	30 18       	mov	r8,1
80000d24:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000d28:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000d2c:	10 9c       	mov	r12,r8
80000d2e:	2f ed       	sub	sp,-8
80000d30:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d34:	00 00       	add	r0,r0
80000d36:	06 14       	sub	r4,r3
80000d38:	80 00       	ld.sh	r0,r0[0x0]
80000d3a:	0d d4       	ld.ub	r4,r6[0x5]

80000d3c <taskUnsuspend>:

uint16_t taskUnsuspend( tcb * task )
{
80000d3c:	eb cd 40 80 	pushm	r7,lr
80000d40:	1a 97       	mov	r7,sp
80000d42:	20 2d       	sub	sp,8
80000d44:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000d48:	3f f8       	mov	r8,-1
80000d4a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80000d4e:	4a 08       	lddpc	r8,80000dcc <taskUnsuspend+0x90>
80000d50:	70 09       	ld.w	r9,r8[0x0]
80000d52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d56:	10 39       	cp.w	r9,r8
80000d58:	c0 c1       	brne	80000d70 <taskUnsuspend+0x34>
80000d5a:	49 d8       	lddpc	r8,80000dcc <taskUnsuspend+0x90>
80000d5c:	70 08       	ld.w	r8,r8[0x0]
80000d5e:	71 99       	ld.w	r9,r8[0x64]
80000d60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d64:	10 39       	cp.w	r9,r8
80000d66:	c0 51       	brne	80000d70 <taskUnsuspend+0x34>
	{
		SUSPENDEDLIST		= NULL;
80000d68:	49 98       	lddpc	r8,80000dcc <taskUnsuspend+0x90>
80000d6a:	30 09       	mov	r9,0
80000d6c:	91 09       	st.w	r8[0x0],r9
uint16_t taskUnsuspend( tcb * task )
{
	uint16_t result = -1;
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80000d6e:	c1 c8       	rjmp	80000da6 <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST		= NULL;
	}
	else if( SUSPENDEDLIST == task )
80000d70:	49 78       	lddpc	r8,80000dcc <taskUnsuspend+0x90>
80000d72:	70 09       	ld.w	r9,r8[0x0]
80000d74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d78:	10 39       	cp.w	r9,r8
80000d7a:	c0 71       	brne	80000d88 <taskUnsuspend+0x4c>
	{
		SUSPENDEDLIST = SUSPENDEDLIST->nexttcb;
80000d7c:	49 48       	lddpc	r8,80000dcc <taskUnsuspend+0x90>
80000d7e:	70 08       	ld.w	r8,r8[0x0]
80000d80:	70 09       	ld.w	r9,r8[0x0]
80000d82:	49 38       	lddpc	r8,80000dcc <taskUnsuspend+0x90>
80000d84:	91 09       	st.w	r8[0x0],r9
80000d86:	c1 08       	rjmp	80000da6 <taskUnsuspend+0x6a>
	}
	else if( SUSPENDEDLIST->prevtcb == task )
80000d88:	49 18       	lddpc	r8,80000dcc <taskUnsuspend+0x90>
80000d8a:	70 08       	ld.w	r8,r8[0x0]
80000d8c:	71 99       	ld.w	r9,r8[0x64]
80000d8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d92:	10 39       	cp.w	r9,r8
80000d94:	c0 91       	brne	80000da6 <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST->prevtcb = (SUSPENDEDLIST->prevtcb)->prevtcb;
80000d96:	48 e8       	lddpc	r8,80000dcc <taskUnsuspend+0x90>
80000d98:	70 08       	ld.w	r8,r8[0x0]
80000d9a:	48 d9       	lddpc	r9,80000dcc <taskUnsuspend+0x90>
80000d9c:	72 09       	ld.w	r9,r9[0x0]
80000d9e:	73 99       	ld.w	r9,r9[0x64]
80000da0:	73 99       	ld.w	r9,r9[0x64]
80000da2:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	result = remove(task);
80000da6:	ee fc ff f8 	ld.w	r12,r7[-8]
80000daa:	f0 1f 00 0a 	mcall	80000dd0 <taskUnsuspend+0x94>
80000dae:	18 98       	mov	r8,r12
80000db0:	5c 88       	casts.h	r8
80000db2:	ef 58 ff fe 	st.h	r7[-2],r8
	task->suspended = 0;
80000db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dba:	30 09       	mov	r9,0
80000dbc:	f1 49 00 78 	st.w	r8[120],r9
	
	return result;
80000dc0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000dc4:	10 9c       	mov	r12,r8
80000dc6:	2f ed       	sub	sp,-8
80000dc8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dcc:	00 00       	add	r0,r0
80000dce:	06 18       	sub	r8,r3
80000dd0:	80 00       	ld.sh	r0,r0[0x0]
80000dd2:	0d d4       	ld.ub	r4,r6[0x5]

80000dd4 <remove>:

uint16_t remove(tcb * removed_task)
{
80000dd4:	eb cd 40 80 	pushm	r7,lr
80000dd8:	1a 97       	mov	r7,sp
80000dda:	20 2d       	sub	sp,8
80000ddc:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000de0:	3f f8       	mov	r8,-1
80000de2:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( removed_task->prevtcb != NULL )
80000de6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dea:	71 98       	ld.w	r8,r8[0x64]
80000dec:	58 08       	cp.w	r8,0
80000dee:	c0 80       	breq	80000dfe <remove+0x2a>
	{
		(removed_task->prevtcb)->nexttcb = removed_task->nexttcb;
80000df0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000df4:	71 98       	ld.w	r8,r8[0x64]
80000df6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000dfa:	72 09       	ld.w	r9,r9[0x0]
80000dfc:	91 09       	st.w	r8[0x0],r9
	}
	
	if( removed_task->nexttcb != NULL )
80000dfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e02:	70 08       	ld.w	r8,r8[0x0]
80000e04:	58 08       	cp.w	r8,0
80000e06:	c0 90       	breq	80000e18 <remove+0x44>
	{
		(removed_task->nexttcb)->prevtcb = removed_task->prevtcb;
80000e08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e0c:	70 08       	ld.w	r8,r8[0x0]
80000e0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e12:	73 99       	ld.w	r9,r9[0x64]
80000e14:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	// nullify pointers
	removed_task->prevtcb = NULL;
80000e18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e1c:	30 09       	mov	r9,0
80000e1e:	f1 49 00 64 	st.w	r8[100],r9
	removed_task->nexttcb = NULL;
80000e22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e26:	30 09       	mov	r9,0
80000e28:	91 09       	st.w	r8[0x0],r9
		
	result = 1;
80000e2a:	30 18       	mov	r8,1
80000e2c:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000e30:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000e34:	10 9c       	mov	r12,r8
80000e36:	2f ed       	sub	sp,-8
80000e38:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e3c <ROSA_delay>:

uint16_t ROSA_delay( uint64_t ticks )
{
80000e3c:	eb cd 40 c0 	pushm	r6-r7,lr
80000e40:	1a 97       	mov	r7,sp
80000e42:	20 3d       	sub	sp,12
80000e44:	ee eb ff f4 	st.d	r7[-12],r10
	interruptDisable();
80000e48:	f0 1f 00 15 	mcall	80000e9c <ROSA_delay+0x60>
	uint16_t result = -1;
80000e4c:	3f f8       	mov	r8,-1
80000e4e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	taskUninstall(EXECTASK);
80000e52:	49 48       	lddpc	r8,80000ea0 <ROSA_delay+0x64>
80000e54:	70 08       	ld.w	r8,r8[0x0]
80000e56:	10 9c       	mov	r12,r8
80000e58:	f0 1f 00 13 	mcall	80000ea4 <ROSA_delay+0x68>
	EXECTASK->back_online_time = ROSA_getTickCount() + ticks;
80000e5c:	49 18       	lddpc	r8,80000ea0 <ROSA_delay+0x64>
80000e5e:	70 06       	ld.w	r6,r8[0x0]
80000e60:	f0 1f 00 12 	mcall	80000ea8 <ROSA_delay+0x6c>
80000e64:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000e68:	f4 08 00 08 	add	r8,r10,r8
80000e6c:	f6 09 00 49 	adc	r9,r11,r9
80000e70:	ec e9 00 6c 	st.d	r6[108],r8
	taskSuspend(EXECTASK);
80000e74:	48 b8       	lddpc	r8,80000ea0 <ROSA_delay+0x64>
80000e76:	70 08       	ld.w	r8,r8[0x0]
80000e78:	10 9c       	mov	r12,r8
80000e7a:	f0 1f 00 0d 	mcall	80000eac <ROSA_delay+0x70>
	
	result = ticks;
80000e7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e82:	ef 58 ff fe 	st.h	r7[-2],r8
	
	ROSA_yield();
80000e86:	f0 1f 00 0b 	mcall	80000eb0 <ROSA_delay+0x74>
	interruptEnable();
80000e8a:	f0 1f 00 0b 	mcall	80000eb4 <ROSA_delay+0x78>
	return result;
80000e8e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000e92:	10 9c       	mov	r12,r8
80000e94:	2f dd       	sub	sp,-12
80000e96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000e9a:	00 00       	add	r0,r0
80000e9c:	80 00       	ld.sh	r0,r0[0x0]
80000e9e:	21 66       	sub	r6,22
80000ea0:	00 00       	add	r0,r0
80000ea2:	06 20       	rsub	r0,r3
80000ea4:	80 00       	ld.sh	r0,r0[0x0]
80000ea6:	0c c8       	st.b	r6++,r8
80000ea8:	80 00       	ld.sh	r0,r0[0x0]
80000eaa:	09 08       	ld.w	r8,r4++
80000eac:	80 00       	ld.sh	r0,r0[0x0]
80000eae:	0b a8       	ld.ub	r8,r5[0x2]
80000eb0:	80 00       	ld.sh	r0,r0[0x0]
80000eb2:	0f 82       	ld.ub	r2,r7[0x0]
80000eb4:	80 00       	ld.sh	r0,r0[0x0]
80000eb6:	21 6a       	sub	r10,22

80000eb8 <idle>:
	return result;
}

#if IDLE_TASK_ENABLED
void idle(void)
{
80000eb8:	eb cd 40 80 	pushm	r7,lr
80000ebc:	1a 97       	mov	r7,sp
	while(1);
80000ebe:	c0 08       	rjmp	80000ebe <idle+0x6>

80000ec0 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000ec0:	4b 5c       	lddpc	r12,80000f94 <_yield+0xa>
	lda.w r11,EXECTASK
80000ec2:	4b 6b       	lddpc	r11,80000f98 <_yield+0xe>
	ld.w r12,r12[0x0]
80000ec4:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000ec6:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000ec8:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000eca:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000ecc:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000ed0:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000ed2:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000ed4:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000ed6:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000eda:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000edc:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000ede:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000ee0:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000ee2:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000ee4:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000ee6:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000ee8:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000eea:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000eec:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000eee:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000ef0:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000ef2:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000ef4:	1c 9f       	mov	pc,lr

80000ef6 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000ef6:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000ef8:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000efa:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000efc:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000f00:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000f04:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000f08:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000f0c:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000f10:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000f14:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000f18:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000f1c:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000f20:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000f22:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000f24:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000f26:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000f28:	1c 9f       	mov	pc,lr

80000f2a <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000f2a:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000f2c:	49 bc       	lddpc	r12,80000f98 <_yield+0xe>
	ld.w r12,r12[0x0]
80000f2e:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000f30:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000f32:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000f34:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000f36:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000f38:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000f3a:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000f3c:	33 40       	mov	r0,52
	add r0,r12
80000f3e:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000f40:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000f44:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000f46:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000f48:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000f4c:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000f4e:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000f50:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000f52:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000f54:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000f56:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000f58:	1c 9f       	mov	pc,lr

80000f5a <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000f5a:	49 0c       	lddpc	r12,80000f98 <_yield+0xe>
	ld.w r12,r12[0x0]
80000f5c:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000f5e:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000f60:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000f62:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000f66:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000f68:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000f6a:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000f6c:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000f6e:	33 40       	mov	r0,52
	add r0,r12
80000f70:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000f72:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000f76:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000f78:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000f7a:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000f7c:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000f7e:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000f80:	d6 13       	rets

80000f82 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000f82:	d4 01       	pushm	lr
	lda.w lr,_yield
80000f84:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000f88:	d7 33       	scall

80000f8a <_yield>:
_yield:
	call contextSave
80000f8a:	cd 0f       	rcall	80000f2a <contextSave>
	call scheduler
80000f8c:	f0 1f 00 04 	mcall	80000f9c <_yield+0x12>
	call contextRestore
80000f90:	ce 5f       	rcall	80000f5a <contextRestore>
80000f92:	00 00       	add	r0,r0
80000f94:	00 00       	add	r0,r0
80000f96:	06 14       	sub	r4,r3
80000f98:	00 00       	add	r0,r0
80000f9a:	06 20       	rsub	r0,r3
80000f9c:	80 00       	ld.sh	r0,r0[0x0]
80000f9e:	0f a0       	ld.ub	r0,r7[0x2]

80000fa0 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000fa0:	eb cd 40 80 	pushm	r7,lr
80000fa4:	1a 97       	mov	r7,sp
// for handling possible round robin configuration
/*******************************************************************/
#if ROUND_ROBIN_MODE_ENABLED
	//if( ROUNDROBIN_end )
	//{
		round_robin_ticks ++;
80000fa6:	4a a8       	lddpc	r8,8000104c <scheduler+0xac>
80000fa8:	f0 ea 00 00 	ld.d	r10,r8[0]
80000fac:	30 18       	mov	r8,1
80000fae:	30 09       	mov	r9,0
80000fb0:	f4 08 00 08 	add	r8,r10,r8
80000fb4:	f6 09 00 49 	adc	r9,r11,r9
80000fb8:	4a 5a       	lddpc	r10,8000104c <scheduler+0xac>
80000fba:	f4 e9 00 00 	st.d	r10[0],r8
		
		if( round_robin_ticks >= MAX_ROUND_ROBIN_TICKS )
80000fbe:	4a 48       	lddpc	r8,8000104c <scheduler+0xac>
80000fc0:	f0 e8 00 00 	ld.d	r8,r8[0]
80000fc4:	58 98       	cp.w	r8,9
80000fc6:	5c 29       	cpc	r9
80000fc8:	e0 88 00 2b 	brls	8000101e <scheduler+0x7e>
		{
			// this really should be possible to optimize
			if( EXECTASK->blocking_semaphore == NULL && EXECTASK->suspended == 0 )
80000fcc:	4a 18       	lddpc	r8,80001050 <scheduler+0xb0>
80000fce:	70 08       	ld.w	r8,r8[0x0]
80000fd0:	71 d8       	ld.w	r8,r8[0x74]
80000fd2:	58 08       	cp.w	r8,0
80000fd4:	c1 01       	brne	80000ff4 <scheduler+0x54>
80000fd6:	49 f8       	lddpc	r8,80001050 <scheduler+0xb0>
80000fd8:	70 08       	ld.w	r8,r8[0x0]
80000fda:	71 e8       	ld.w	r8,r8[0x78]
80000fdc:	58 08       	cp.w	r8,0
80000fde:	c0 b1       	brne	80000ff4 <scheduler+0x54>
			{
				taskUninstall(EXECTASK);
80000fe0:	49 c8       	lddpc	r8,80001050 <scheduler+0xb0>
80000fe2:	70 08       	ld.w	r8,r8[0x0]
80000fe4:	10 9c       	mov	r12,r8
80000fe6:	f0 1f 00 1c 	mcall	80001054 <scheduler+0xb4>
				taskInstall(EXECTASK);
80000fea:	49 a8       	lddpc	r8,80001050 <scheduler+0xb0>
80000fec:	70 08       	ld.w	r8,r8[0x0]
80000fee:	10 9c       	mov	r12,r8
80000ff0:	f0 1f 00 1a 	mcall	80001058 <scheduler+0xb8>
			}
			round_robin_ticks = 0;
80000ff4:	49 6a       	lddpc	r10,8000104c <scheduler+0xac>
80000ff6:	30 08       	mov	r8,0
80000ff8:	30 09       	mov	r9,0
80000ffa:	f4 e9 00 00 	st.d	r10[0],r8
		}
	//}
#endif
/*******************************************************************/
	
	while( SUSPENDEDLIST && SUSPENDEDLIST->back_online_time <= system_ticks )
80000ffe:	c1 18       	rjmp	80001020 <scheduler+0x80>
	{
		iterator = SUSPENDEDLIST;
80001000:	49 78       	lddpc	r8,8000105c <scheduler+0xbc>
80001002:	70 09       	ld.w	r9,r8[0x0]
80001004:	49 78       	lddpc	r8,80001060 <scheduler+0xc0>
80001006:	91 09       	st.w	r8[0x0],r9
		taskUnsuspend(iterator);
80001008:	49 68       	lddpc	r8,80001060 <scheduler+0xc0>
8000100a:	70 08       	ld.w	r8,r8[0x0]
8000100c:	10 9c       	mov	r12,r8
8000100e:	f0 1f 00 16 	mcall	80001064 <scheduler+0xc4>
		taskInstall(iterator);
80001012:	49 48       	lddpc	r8,80001060 <scheduler+0xc0>
80001014:	70 08       	ld.w	r8,r8[0x0]
80001016:	10 9c       	mov	r12,r8
80001018:	f0 1f 00 10 	mcall	80001058 <scheduler+0xb8>
8000101c:	c0 28       	rjmp	80001020 <scheduler+0x80>
		}
	//}
#endif
/*******************************************************************/
	
	while( SUSPENDEDLIST && SUSPENDEDLIST->back_online_time <= system_ticks )
8000101e:	d7 03       	nop
80001020:	48 f8       	lddpc	r8,8000105c <scheduler+0xbc>
80001022:	70 08       	ld.w	r8,r8[0x0]
80001024:	58 08       	cp.w	r8,0
80001026:	c0 d0       	breq	80001040 <scheduler+0xa0>
80001028:	48 d8       	lddpc	r8,8000105c <scheduler+0xbc>
8000102a:	70 08       	ld.w	r8,r8[0x0]
8000102c:	f0 ea 00 6c 	ld.d	r10,r8[108]
80001030:	48 e8       	lddpc	r8,80001068 <scheduler+0xc8>
80001032:	f0 e8 00 00 	ld.d	r8,r8[0]
80001036:	10 3a       	cp.w	r10,r8
80001038:	f2 0b 13 00 	cpc	r11,r9
8000103c:	fe 98 ff e2 	brls	80001000 <scheduler+0x60>
		iterator = SUSPENDEDLIST;
		taskUnsuspend(iterator);
		taskInstall(iterator);
	}
	
	EXECTASK = TCBLIST;
80001040:	48 b8       	lddpc	r8,8000106c <scheduler+0xcc>
80001042:	70 09       	ld.w	r9,r8[0x0]
80001044:	48 38       	lddpc	r8,80001050 <scheduler+0xb0>
80001046:	91 09       	st.w	r8[0x0],r9

}
80001048:	e3 cd 80 80 	ldm	sp++,r7,pc
8000104c:	00 00       	add	r0,r0
8000104e:	06 24       	rsub	r4,r3
80001050:	00 00       	add	r0,r0
80001052:	06 20       	rsub	r0,r3
80001054:	80 00       	ld.sh	r0,r0[0x0]
80001056:	0c c8       	st.b	r6++,r8
80001058:	80 00       	ld.sh	r0,r0[0x0]
8000105a:	09 8c       	ld.ub	r12,r4[0x0]
8000105c:	00 00       	add	r0,r0
8000105e:	06 18       	sub	r8,r3
80001060:	00 00       	add	r0,r0
80001062:	06 34       	cp.w	r4,r3
80001064:	80 00       	ld.sh	r0,r0[0x0]
80001066:	0d 3c       	ld.ub	r12,r6++
80001068:	00 00       	add	r0,r0
8000106a:	06 2c       	rsub	r12,r3
8000106c:	00 00       	add	r0,r0
8000106e:	06 14       	sub	r4,r3

80001070 <C.0.9446>:
80001070:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80001080 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80001080:	eb cd 40 80 	pushm	r7,lr
80001084:	1a 97       	mov	r7,sp
80001086:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80001088:	fe 78 38 00 	mov	r8,-51200
8000108c:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80001090:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001094:	70 88       	ld.w	r8,r8[0x20]
80001096:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
8000109a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000109e:	e2 18 00 10 	andl	r8,0x10,COH
800010a2:	c0 30       	breq	800010a8 <timerISR+0x28>
		ROSA_yieldFromISR();
800010a4:	f0 1f 00 03 	mcall	800010b0 <timerISR+0x30>
}
800010a8:	2f ed       	sub	sp,-8
800010aa:	e3 cd 40 80 	ldm	sp++,r7,lr
800010ae:	d6 03       	rete
800010b0:	80 00       	ld.sh	r0,r0[0x0]
800010b2:	07 ec       	ld.ub	r12,r3[0x6]

800010b4 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800010b4:	eb cd 40 80 	pushm	r7,lr
800010b8:	1a 97       	mov	r7,sp
800010ba:	20 7d       	sub	sp,28
800010bc:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
800010c0:	4a 48       	lddpc	r8,80001150 <timerPeriodSet+0x9c>
800010c2:	ee ca 00 18 	sub	r10,r7,24
800010c6:	10 9b       	mov	r11,r8
800010c8:	f6 e8 00 00 	ld.d	r8,r11[0]
800010cc:	f4 e9 00 00 	st.d	r10[0],r8
800010d0:	f6 e8 00 08 	ld.d	r8,r11[8]
800010d4:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
800010d8:	30 48       	mov	r8,4
800010da:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
800010de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010e2:	20 18       	sub	r8,1
800010e4:	a3 68       	lsl	r8,0x2
800010e6:	ee 08 00 08 	add	r8,r7,r8
800010ea:	f0 f9 ff e8 	ld.w	r9,r8[-24]
800010ee:	e0 68 1b 00 	mov	r8,6912
800010f2:	ea 18 00 b7 	orh	r8,0xb7
800010f6:	f0 09 0c 08 	divs	r8,r8,r9
800010fa:	10 99       	mov	r9,r8
800010fc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001100:	b1 39       	mul	r9,r8
80001102:	e0 68 4d d3 	mov	r8,19923
80001106:	ea 18 10 62 	orh	r8,0x1062
8000110a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000110e:	f2 08 16 06 	lsr	r8,r9,0x6
80001112:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80001116:	ee fc ff fc 	ld.w	r12,r7[-4]
8000111a:	f0 1f 00 0f 	mcall	80001154 <timerPeriodSet+0xa0>
	timerRCSet(rc);
8000111e:	ee fc ff f8 	ld.w	r12,r7[-8]
80001122:	f0 1f 00 0e 	mcall	80001158 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80001126:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000112a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000112e:	f2 08 02 4a 	mul	r10,r9,r8
80001132:	e0 68 9f 81 	mov	r8,40833
80001136:	ea 18 16 5e 	orh	r8,0x165e
8000113a:	f4 08 04 48 	muls.d	r8,r10,r8
8000113e:	b5 49       	asr	r9,0x14
80001140:	f4 08 14 1f 	asr	r8,r10,0x1f
80001144:	f2 08 01 08 	sub	r8,r9,r8
80001148:	10 9c       	mov	r12,r8
8000114a:	2f 9d       	sub	sp,-28
8000114c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001150:	80 00       	ld.sh	r0,r0[0x0]
80001152:	10 70       	tst	r0,r8
80001154:	80 00       	ld.sh	r0,r0[0x0]
80001156:	17 8c       	ld.ub	r12,r11[0x0]
80001158:	80 00       	ld.sh	r0,r0[0x0]
8000115a:	17 76       	ld.ub	r6,--r11

8000115c <buttonInit>:
8000115c:	eb cd 40 80 	pushm	r7,lr
80001160:	1a 97       	mov	r7,sp
80001162:	30 1b       	mov	r11,1
80001164:	35 8c       	mov	r12,88
80001166:	f0 1f 00 07 	mcall	80001180 <buttonInit+0x24>
8000116a:	30 1b       	mov	r11,1
8000116c:	35 5c       	mov	r12,85
8000116e:	f0 1f 00 05 	mcall	80001180 <buttonInit+0x24>
80001172:	30 1b       	mov	r11,1
80001174:	35 2c       	mov	r12,82
80001176:	f0 1f 00 03 	mcall	80001180 <buttonInit+0x24>
8000117a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000117e:	00 00       	add	r0,r0
80001180:	80 00       	ld.sh	r0,r0[0x0]
80001182:	11 bc       	ld.ub	r12,r8[0x3]

80001184 <joystickInit>:
80001184:	eb cd 40 80 	pushm	r7,lr
80001188:	1a 97       	mov	r7,sp
8000118a:	30 1b       	mov	r11,1
8000118c:	31 bc       	mov	r12,27
8000118e:	f0 1f 00 0b 	mcall	800011b8 <joystickInit+0x34>
80001192:	30 1b       	mov	r11,1
80001194:	31 9c       	mov	r12,25
80001196:	f0 1f 00 09 	mcall	800011b8 <joystickInit+0x34>
8000119a:	30 1b       	mov	r11,1
8000119c:	31 cc       	mov	r12,28
8000119e:	f0 1f 00 07 	mcall	800011b8 <joystickInit+0x34>
800011a2:	30 1b       	mov	r11,1
800011a4:	31 4c       	mov	r12,20
800011a6:	f0 1f 00 05 	mcall	800011b8 <joystickInit+0x34>
800011aa:	30 1b       	mov	r11,1
800011ac:	31 ac       	mov	r12,26
800011ae:	f0 1f 00 03 	mcall	800011b8 <joystickInit+0x34>
800011b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800011b6:	00 00       	add	r0,r0
800011b8:	80 00       	ld.sh	r0,r0[0x0]
800011ba:	11 bc       	ld.ub	r12,r8[0x3]

800011bc <gpioInit>:
800011bc:	eb cd 40 80 	pushm	r7,lr
800011c0:	1a 97       	mov	r7,sp
800011c2:	20 7d       	sub	sp,28
800011c4:	ef 4c ff ec 	st.w	r7[-20],r12
800011c8:	ef 4b ff e8 	st.w	r7[-24],r11
800011cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800011d0:	a5 58       	asr	r8,0x5
800011d2:	ef 48 ff f4 	st.w	r7[-12],r8
800011d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800011da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800011de:	ef 48 ff fc 	st.w	r7[-4],r8
800011e2:	30 19       	mov	r9,1
800011e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800011e8:	f2 08 09 48 	lsl	r8,r9,r8
800011ec:	ef 48 ff f8 	st.w	r7[-8],r8
800011f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011f4:	a9 68       	lsl	r8,0x8
800011f6:	e0 28 f0 00 	sub	r8,61440
800011fa:	ef 48 ff f0 	st.w	r7[-16],r8
800011fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001202:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001206:	91 19       	st.w	r8[0x4],r9
80001208:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000120c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001210:	91 69       	st.w	r8[0x18],r9
80001212:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001216:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000121a:	91 a9       	st.w	r8[0x28],r9
8000121c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001220:	ef 48 ff e4 	st.w	r7[-28],r8
80001224:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001228:	58 08       	cp.w	r8,0
8000122a:	c0 60       	breq	80001236 <gpioInit+0x7a>
8000122c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001230:	58 18       	cp.w	r8,1
80001232:	c0 90       	breq	80001244 <gpioInit+0x88>
80001234:	c0 f8       	rjmp	80001252 <gpioInit+0x96>
80001236:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000123a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000123e:	f1 49 00 44 	st.w	r8[68],r9
80001242:	c0 e8       	rjmp	8000125e <gpioInit+0xa2>
80001244:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001248:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000124c:	f1 49 00 48 	st.w	r8[72],r9
80001250:	c0 78       	rjmp	8000125e <gpioInit+0xa2>
80001252:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001256:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000125a:	f1 49 00 48 	st.w	r8[72],r9
8000125e:	2f 9d       	sub	sp,-28
80001260:	e3 cd 80 80 	ldm	sp++,r7,pc

80001264 <gpioClear>:
80001264:	eb cd 40 80 	pushm	r7,lr
80001268:	1a 97       	mov	r7,sp
8000126a:	20 5d       	sub	sp,20
8000126c:	ef 4c ff ec 	st.w	r7[-20],r12
80001270:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001274:	a5 58       	asr	r8,0x5
80001276:	ef 48 ff f4 	st.w	r7[-12],r8
8000127a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000127e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001282:	ef 48 ff fc 	st.w	r7[-4],r8
80001286:	30 19       	mov	r9,1
80001288:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000128c:	f2 08 09 48 	lsl	r8,r9,r8
80001290:	ef 48 ff f8 	st.w	r7[-8],r8
80001294:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001298:	a9 68       	lsl	r8,0x8
8000129a:	e0 28 f0 00 	sub	r8,61440
8000129e:	ef 48 ff f0 	st.w	r7[-16],r8
800012a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012aa:	f1 49 00 58 	st.w	r8[88],r9
800012ae:	2f bd       	sub	sp,-20
800012b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800012b4 <gpioSet>:
800012b4:	eb cd 40 80 	pushm	r7,lr
800012b8:	1a 97       	mov	r7,sp
800012ba:	20 5d       	sub	sp,20
800012bc:	ef 4c ff ec 	st.w	r7[-20],r12
800012c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800012c4:	a5 58       	asr	r8,0x5
800012c6:	ef 48 ff f4 	st.w	r7[-12],r8
800012ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
800012ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800012d2:	ef 48 ff fc 	st.w	r7[-4],r8
800012d6:	30 19       	mov	r9,1
800012d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012dc:	f2 08 09 48 	lsl	r8,r9,r8
800012e0:	ef 48 ff f8 	st.w	r7[-8],r8
800012e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012e8:	a9 68       	lsl	r8,0x8
800012ea:	e0 28 f0 00 	sub	r8,61440
800012ee:	ef 48 ff f0 	st.w	r7[-16],r8
800012f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012fa:	f1 49 00 54 	st.w	r8[84],r9
800012fe:	2f bd       	sub	sp,-20
80001300:	e3 cd 80 80 	ldm	sp++,r7,pc

80001304 <gpioToggle>:
80001304:	eb cd 40 80 	pushm	r7,lr
80001308:	1a 97       	mov	r7,sp
8000130a:	20 5d       	sub	sp,20
8000130c:	ef 4c ff ec 	st.w	r7[-20],r12
80001310:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001314:	a5 58       	asr	r8,0x5
80001316:	ef 48 ff f4 	st.w	r7[-12],r8
8000131a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000131e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001322:	ef 48 ff fc 	st.w	r7[-4],r8
80001326:	30 19       	mov	r9,1
80001328:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000132c:	f2 08 09 48 	lsl	r8,r9,r8
80001330:	ef 48 ff f8 	st.w	r7[-8],r8
80001334:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001338:	a9 68       	lsl	r8,0x8
8000133a:	e0 28 f0 00 	sub	r8,61440
8000133e:	ef 48 ff f0 	st.w	r7[-16],r8
80001342:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001346:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000134a:	f1 49 00 5c 	st.w	r8[92],r9
8000134e:	2f bd       	sub	sp,-20
80001350:	e3 cd 80 80 	ldm	sp++,r7,pc

80001354 <ledInit>:
80001354:	eb cd 40 80 	pushm	r7,lr
80001358:	1a 97       	mov	r7,sp
8000135a:	20 9d       	sub	sp,36
8000135c:	49 e8       	lddpc	r8,800013d4 <ledInit+0x80>
8000135e:	ee cb 00 24 	sub	r11,r7,36
80001362:	10 9a       	mov	r10,r8
80001364:	f4 e8 00 00 	ld.d	r8,r10[0]
80001368:	f6 e9 00 00 	st.d	r11[0],r8
8000136c:	f4 e8 00 08 	ld.d	r8,r10[8]
80001370:	f6 e9 00 08 	st.d	r11[8],r8
80001374:	f4 e8 00 10 	ld.d	r8,r10[16]
80001378:	f6 e9 00 10 	st.d	r11[16],r8
8000137c:	f4 e8 00 18 	ld.d	r8,r10[24]
80001380:	f6 e9 00 18 	st.d	r11[24],r8
80001384:	30 08       	mov	r8,0
80001386:	ef 48 ff fc 	st.w	r7[-4],r8
8000138a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000138e:	a3 68       	lsl	r8,0x2
80001390:	ee 08 00 08 	add	r8,r7,r8
80001394:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001398:	10 9c       	mov	r12,r8
8000139a:	f0 1f 00 10 	mcall	800013d8 <ledInit+0x84>
8000139e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013a2:	a3 68       	lsl	r8,0x2
800013a4:	ee 08 00 08 	add	r8,r7,r8
800013a8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800013ac:	30 0b       	mov	r11,0
800013ae:	10 9c       	mov	r12,r8
800013b0:	f0 1f 00 0b 	mcall	800013dc <ledInit+0x88>
800013b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013b8:	58 78       	cp.w	r8,7
800013ba:	5f 18       	srne	r8
800013bc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800013c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013c4:	2f f8       	sub	r8,-1
800013c6:	ef 48 ff fc 	st.w	r7[-4],r8
800013ca:	58 09       	cp.w	r9,0
800013cc:	cd f1       	brne	8000138a <ledInit+0x36>
800013ce:	2f 7d       	sub	sp,-36
800013d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800013d4:	80 00       	ld.sh	r0,r0[0x0]
800013d6:	24 00       	sub	r0,64
800013d8:	80 00       	ld.sh	r0,r0[0x0]
800013da:	14 00       	add	r0,r10
800013dc:	80 00       	ld.sh	r0,r0[0x0]
800013de:	11 bc       	ld.ub	r12,r8[0x3]

800013e0 <ledOn>:
800013e0:	eb cd 40 80 	pushm	r7,lr
800013e4:	1a 97       	mov	r7,sp
800013e6:	20 1d       	sub	sp,4
800013e8:	ef 4c ff fc 	st.w	r7[-4],r12
800013ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800013f0:	f0 1f 00 03 	mcall	800013fc <ledOn+0x1c>
800013f4:	2f fd       	sub	sp,-4
800013f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800013fa:	00 00       	add	r0,r0
800013fc:	80 00       	ld.sh	r0,r0[0x0]
800013fe:	12 64       	and	r4,r9

80001400 <ledOff>:
80001400:	eb cd 40 80 	pushm	r7,lr
80001404:	1a 97       	mov	r7,sp
80001406:	20 1d       	sub	sp,4
80001408:	ef 4c ff fc 	st.w	r7[-4],r12
8000140c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001410:	f0 1f 00 03 	mcall	8000141c <ledOff+0x1c>
80001414:	2f fd       	sub	sp,-4
80001416:	e3 cd 80 80 	ldm	sp++,r7,pc
8000141a:	00 00       	add	r0,r0
8000141c:	80 00       	ld.sh	r0,r0[0x0]
8000141e:	12 b4       	st.h	r9++,r4

80001420 <ledToggle>:
80001420:	eb cd 40 80 	pushm	r7,lr
80001424:	1a 97       	mov	r7,sp
80001426:	20 1d       	sub	sp,4
80001428:	ef 4c ff fc 	st.w	r7[-4],r12
8000142c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001430:	f0 1f 00 03 	mcall	8000143c <ledToggle+0x1c>
80001434:	2f fd       	sub	sp,-4
80001436:	e3 cd 80 80 	ldm	sp++,r7,pc
8000143a:	00 00       	add	r0,r0
8000143c:	80 00       	ld.sh	r0,r0[0x0]
8000143e:	13 04       	ld.w	r4,r9++

80001440 <potInit>:
80001440:	d3 01       	pushm	r11-r12
80001442:	e0 6c 10 00 	mov	r12,4096
80001446:	ea 1c ff ff 	orh	r12,0xffff
8000144a:	31 6b       	mov	r11,22
8000144c:	99 2b       	st.w	r12[0x8],r11
8000144e:	99 6b       	st.w	r12[0x18],r11
80001450:	99 6b       	st.w	r12[0x18],r11
80001452:	e0 6c 3c 00 	mov	r12,15360
80001456:	ea 1c ff ff 	orh	r12,0xffff
8000145a:	30 1b       	mov	r11,1
8000145c:	99 0b       	st.w	r12[0x0],r11
8000145e:	e0 6b 0f 1f 	mov	r11,3871
80001462:	b1 6b       	lsl	r11,0x10
80001464:	99 1b       	st.w	r12[0x4],r11
80001466:	30 2b       	mov	r11,2
80001468:	99 4b       	st.w	r12[0x10],r11
8000146a:	d3 02       	popm	r11-r12
8000146c:	1c 9f       	mov	pc,lr

8000146e <potGetValue>:
8000146e:	d1 81       	pushm	r10-r11
80001470:	e0 6c 3c 00 	mov	r12,15360
80001474:	ea 1c ff ff 	orh	r12,0xffff
80001478:	30 2b       	mov	r11,2
8000147a:	99 0b       	st.w	r12[0x0],r11

8000147c <a1>:
8000147c:	78 7a       	ld.w	r10,r12[0x1c]
8000147e:	16 7a       	tst	r10,r11
80001480:	cf e0       	breq	8000147c <a1>
80001482:	78 dc       	ld.w	r12,r12[0x34]
80001484:	d1 82       	popm	r10-r11
80001486:	1c 9f       	mov	pc,lr

80001488 <usartReset>:
80001488:	eb cd 40 80 	pushm	r7,lr
8000148c:	1a 97       	mov	r7,sp
8000148e:	20 3d       	sub	sp,12
80001490:	ef 4c ff f8 	st.w	r7[-8],r12
80001494:	f0 1f 00 16 	mcall	800014ec <usartReset+0x64>
80001498:	18 98       	mov	r8,r12
8000149a:	ef 48 ff fc 	st.w	r7[-4],r8
8000149e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014a2:	58 08       	cp.w	r8,0
800014a4:	c0 30       	breq	800014aa <usartReset+0x22>
800014a6:	f0 1f 00 13 	mcall	800014f0 <usartReset+0x68>
800014aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014ae:	3f f8       	mov	r8,-1
800014b0:	93 38       	st.w	r9[0xc],r8
800014b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014b6:	70 58       	ld.w	r8,r8[0x14]
800014b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014bc:	58 08       	cp.w	r8,0
800014be:	c0 30       	breq	800014c4 <usartReset+0x3c>
800014c0:	f0 1f 00 0d 	mcall	800014f4 <usartReset+0x6c>
800014c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014c8:	30 08       	mov	r8,0
800014ca:	93 18       	st.w	r9[0x4],r8
800014cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014d0:	30 08       	mov	r8,0
800014d2:	93 98       	st.w	r9[0x24],r8
800014d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014d8:	30 08       	mov	r8,0
800014da:	93 a8       	st.w	r9[0x28],r8
800014dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014e0:	ea 68 61 0c 	mov	r8,680204
800014e4:	93 08       	st.w	r9[0x0],r8
800014e6:	2f dd       	sub	sp,-12
800014e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800014ec:	80 00       	ld.sh	r0,r0[0x0]
800014ee:	21 6e       	sub	lr,22
800014f0:	80 00       	ld.sh	r0,r0[0x0]
800014f2:	21 66       	sub	r6,22
800014f4:	80 00       	ld.sh	r0,r0[0x0]
800014f6:	21 6a       	sub	r10,22

800014f8 <usartSetBaudrate>:
800014f8:	eb cd 40 80 	pushm	r7,lr
800014fc:	1a 97       	mov	r7,sp
800014fe:	20 bd       	sub	sp,44
80001500:	ef 4c ff ec 	st.w	r7[-20],r12
80001504:	ef 4b ff e8 	st.w	r7[-24],r11
80001508:	ef 4a ff e4 	st.w	r7[-28],r10
8000150c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001510:	f0 09 15 04 	lsl	r9,r8,0x4
80001514:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001518:	10 39       	cp.w	r9,r8
8000151a:	e0 8b 00 06 	brhi	80001526 <usartSetBaudrate+0x2e>
8000151e:	31 09       	mov	r9,16
80001520:	ef 49 ff d4 	st.w	r7[-44],r9
80001524:	c0 48       	rjmp	8000152c <usartSetBaudrate+0x34>
80001526:	30 88       	mov	r8,8
80001528:	ef 48 ff d4 	st.w	r7[-44],r8
8000152c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80001530:	ef 49 ff f0 	st.w	r7[-16],r9
80001534:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001538:	f0 0a 15 03 	lsl	r10,r8,0x3
8000153c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001540:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001544:	f2 08 02 48 	mul	r8,r9,r8
80001548:	a1 98       	lsr	r8,0x1
8000154a:	10 0a       	add	r10,r8
8000154c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001550:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001554:	f2 08 02 48 	mul	r8,r9,r8
80001558:	f4 08 0d 08 	divu	r8,r10,r8
8000155c:	ef 48 ff f4 	st.w	r7[-12],r8
80001560:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001564:	a3 98       	lsr	r8,0x3
80001566:	ef 48 ff f8 	st.w	r7[-8],r8
8000156a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000156e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80001572:	ef 48 ff fc 	st.w	r7[-4],r8
80001576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000157a:	58 08       	cp.w	r8,0
8000157c:	c0 70       	breq	8000158a <usartSetBaudrate+0x92>
8000157e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001582:	e0 48 ff ff 	cp.w	r8,65535
80001586:	e0 88 00 06 	brls	80001592 <usartSetBaudrate+0x9a>
8000158a:	30 18       	mov	r8,1
8000158c:	ef 48 ff d8 	st.w	r7[-40],r8
80001590:	c2 c8       	rjmp	800015e8 <usartSetBaudrate+0xf0>
80001592:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001596:	70 18       	ld.w	r8,r8[0x4]
80001598:	10 99       	mov	r9,r8
8000159a:	e4 19 ff f7 	andh	r9,0xfff7
8000159e:	e0 19 fe cf 	andl	r9,0xfecf
800015a2:	ef 49 ff dc 	st.w	r7[-36],r9
800015a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800015aa:	59 08       	cp.w	r8,16
800015ac:	c0 60       	breq	800015b8 <usartSetBaudrate+0xc0>
800015ae:	e8 68 00 00 	mov	r8,524288
800015b2:	ef 48 ff e0 	st.w	r7[-32],r8
800015b6:	c0 48       	rjmp	800015be <usartSetBaudrate+0xc6>
800015b8:	30 09       	mov	r9,0
800015ba:	ef 49 ff e0 	st.w	r7[-32],r9
800015be:	ee f9 ff dc 	ld.w	r9,r7[-36]
800015c2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800015c6:	10 49       	or	r9,r8
800015c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800015cc:	91 19       	st.w	r8[0x4],r9
800015ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015d2:	f0 09 15 10 	lsl	r9,r8,0x10
800015d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015da:	10 49       	or	r9,r8
800015dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800015e0:	91 89       	st.w	r8[0x20],r9
800015e2:	30 09       	mov	r9,0
800015e4:	ef 49 ff d8 	st.w	r7[-40],r9
800015e8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800015ec:	10 9c       	mov	r12,r8
800015ee:	2f 5d       	sub	sp,-44
800015f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800015f4 <usartInit>:
800015f4:	eb cd 40 80 	pushm	r7,lr
800015f8:	1a 97       	mov	r7,sp
800015fa:	20 4d       	sub	sp,16
800015fc:	ef 4c ff f8 	st.w	r7[-8],r12
80001600:	ef 4b ff f4 	st.w	r7[-12],r11
80001604:	ef 4a ff f0 	st.w	r7[-16],r10
80001608:	fe 78 10 00 	mov	r8,-61440
8000160c:	ef 48 ff fc 	st.w	r7[-4],r8
80001610:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001614:	30 18       	mov	r8,1
80001616:	93 28       	st.w	r9[0x8],r8
80001618:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000161c:	30 28       	mov	r8,2
8000161e:	93 28       	st.w	r9[0x8],r8
80001620:	ee fc ff f8 	ld.w	r12,r7[-8]
80001624:	f0 1f 00 3b 	mcall	80001710 <usartInit+0x11c>
80001628:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000162c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001630:	70 08       	ld.w	r8,r8[0x0]
80001632:	12 9a       	mov	r10,r9
80001634:	10 9b       	mov	r11,r8
80001636:	ee fc ff f8 	ld.w	r12,r7[-8]
8000163a:	f0 1f 00 37 	mcall	80001714 <usartInit+0x120>
8000163e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001642:	11 c9       	ld.ub	r9,r8[0x4]
80001644:	30 98       	mov	r8,9
80001646:	f0 09 18 00 	cp.b	r9,r8
8000164a:	c0 a1       	brne	8000165e <usartInit+0x6a>
8000164c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001650:	70 18       	ld.w	r8,r8[0x4]
80001652:	10 99       	mov	r9,r8
80001654:	b1 b9       	sbr	r9,0x11
80001656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000165a:	91 19       	st.w	r8[0x4],r9
8000165c:	c0 d8       	rjmp	80001676 <usartInit+0x82>
8000165e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001662:	70 19       	ld.w	r9,r8[0x4]
80001664:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001668:	11 c8       	ld.ub	r8,r8[0x4]
8000166a:	20 58       	sub	r8,5
8000166c:	a7 68       	lsl	r8,0x6
8000166e:	10 49       	or	r9,r8
80001670:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001674:	91 19       	st.w	r8[0x4],r9
80001676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000167a:	70 1a       	ld.w	r10,r8[0x4]
8000167c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001680:	11 d8       	ld.ub	r8,r8[0x5]
80001682:	f0 09 15 09 	lsl	r9,r8,0x9
80001686:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000168a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000168e:	af 68       	lsl	r8,0xe
80001690:	f3 e8 10 08 	or	r8,r9,r8
80001694:	f5 e8 10 09 	or	r9,r10,r8
80001698:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000169c:	91 19       	st.w	r8[0x4],r9
8000169e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800016a2:	90 39       	ld.sh	r9,r8[0x6]
800016a4:	30 28       	mov	r8,2
800016a6:	f0 09 19 00 	cp.h	r9,r8
800016aa:	e0 88 00 14 	brls	800016d2 <usartInit+0xde>
800016ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016b2:	70 18       	ld.w	r8,r8[0x4]
800016b4:	10 99       	mov	r9,r8
800016b6:	ad b9       	sbr	r9,0xd
800016b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016bc:	91 19       	st.w	r8[0x4],r9
800016be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800016c2:	90 38       	ld.sh	r8,r8[0x6]
800016c4:	5c 78       	castu.h	r8
800016c6:	20 28       	sub	r8,2
800016c8:	10 99       	mov	r9,r8
800016ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ce:	91 a9       	st.w	r8[0x28],r9
800016d0:	c0 d8       	rjmp	800016ea <usartInit+0xf6>
800016d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016d6:	70 19       	ld.w	r9,r8[0x4]
800016d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800016dc:	90 38       	ld.sh	r8,r8[0x6]
800016de:	5c 78       	castu.h	r8
800016e0:	ad 68       	lsl	r8,0xc
800016e2:	10 49       	or	r9,r8
800016e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016e8:	91 19       	st.w	r8[0x4],r9
800016ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ee:	70 18       	ld.w	r8,r8[0x4]
800016f0:	10 99       	mov	r9,r8
800016f2:	e0 19 ff f0 	andl	r9,0xfff0
800016f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016fa:	91 19       	st.w	r8[0x4],r9
800016fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001700:	35 08       	mov	r8,80
80001702:	93 08       	st.w	r9[0x0],r8
80001704:	30 08       	mov	r8,0
80001706:	10 9c       	mov	r12,r8
80001708:	2f cd       	sub	sp,-16
8000170a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000170e:	00 00       	add	r0,r0
80001710:	80 00       	ld.sh	r0,r0[0x0]
80001712:	14 88       	andn	r8,r10
80001714:	80 00       	ld.sh	r0,r0[0x0]
80001716:	14 f8       	st.b	--r10,r8

80001718 <timerInit>:
80001718:	d5 01       	pushm	r11,lr
8000171a:	d2 01       	pushm	r12
8000171c:	f0 1f 00 28 	mcall	800017bc <timerClearInterrupt+0x10>
80001720:	f0 1f 00 28 	mcall	800017c0 <timerClearInterrupt+0x14>
80001724:	e0 6c 38 00 	mov	r12,14336
80001728:	ea 1c ff ff 	orh	r12,0xffff
8000172c:	e0 6b c0 00 	mov	r11,49152
80001730:	ea 1b 00 00 	orh	r11,0x0
80001734:	99 1b       	st.w	r12[0x4],r11
80001736:	30 1b       	mov	r11,1
80001738:	a5 6b       	lsl	r11,0x4
8000173a:	99 9b       	st.w	r12[0x24],r11
8000173c:	d2 02       	popm	r12
8000173e:	f0 1f 00 22 	mcall	800017c4 <timerClearInterrupt+0x18>
80001742:	d5 02       	popm	r11,lr
80001744:	1c 9f       	mov	pc,lr

80001746 <timerReset>:
80001746:	d3 01       	pushm	r11-r12
80001748:	e0 6c 38 00 	mov	r12,14336
8000174c:	ea 1c ff ff 	orh	r12,0xffff
80001750:	30 5b       	mov	r11,5
80001752:	99 0b       	st.w	r12[0x0],r11
80001754:	e0 6b 00 08 	mov	r11,8
80001758:	ea 1b 00 00 	orh	r11,0x0
8000175c:	76 0b       	ld.w	r11,r11[0x0]
8000175e:	99 7b       	st.w	r12[0x1c],r11
80001760:	d3 02       	popm	r11-r12
80001762:	1c 9f       	mov	pc,lr

80001764 <timerStop>:
80001764:	d3 01       	pushm	r11-r12
80001766:	e0 6c 38 00 	mov	r12,14336
8000176a:	ea 1c ff ff 	orh	r12,0xffff
8000176e:	30 2b       	mov	r11,2
80001770:	99 0b       	st.w	r12[0x0],r11
80001772:	d3 02       	popm	r11-r12
80001774:	1c 9f       	mov	pc,lr

80001776 <timerRCSet>:
80001776:	d3 01       	pushm	r11-r12
80001778:	49 4b       	lddpc	r11,800017c8 <timerClearInterrupt+0x1c>
8000177a:	97 0c       	st.w	r11[0x0],r12
8000177c:	e0 6c 38 00 	mov	r12,14336
80001780:	ea 1c ff ff 	orh	r12,0xffff
80001784:	76 0b       	ld.w	r11,r11[0x0]
80001786:	99 7b       	st.w	r12[0x1c],r11
80001788:	d3 02       	popm	r11-r12
8000178a:	1c 9f       	mov	pc,lr

8000178c <timerPrescaleSet>:
8000178c:	d3 81       	pushm	r10-r12
8000178e:	49 0b       	lddpc	r11,800017cc <timerClearInterrupt+0x20>
80001790:	97 0c       	st.w	r11[0x0],r12
80001792:	e0 6c 38 00 	mov	r12,14336
80001796:	ea 1c ff ff 	orh	r12,0xffff
8000179a:	78 1a       	ld.w	r10,r12[0x4]
8000179c:	3f 8b       	mov	r11,-8
8000179e:	16 6a       	and	r10,r11
800017a0:	48 bb       	lddpc	r11,800017cc <timerClearInterrupt+0x20>
800017a2:	76 0b       	ld.w	r11,r11[0x0]
800017a4:	14 4b       	or	r11,r10
800017a6:	99 1b       	st.w	r12[0x4],r11
800017a8:	d3 82       	popm	r10-r12
800017aa:	1c 9f       	mov	pc,lr

800017ac <timerClearInterrupt>:
800017ac:	d2 01       	pushm	r12
800017ae:	e0 6c 38 00 	mov	r12,14336
800017b2:	ea 1c ff ff 	orh	r12,0xffff
800017b6:	78 8c       	ld.w	r12,r12[0x20]
800017b8:	d2 02       	popm	r12
800017ba:	1c 9f       	mov	pc,lr
800017bc:	80 00       	ld.sh	r0,r0[0x0]
800017be:	21 66       	sub	r6,22
800017c0:	80 00       	ld.sh	r0,r0[0x0]
800017c2:	17 ac       	ld.ub	r12,r11[0x2]
800017c4:	80 00       	ld.sh	r0,r0[0x0]
800017c6:	10 b4       	st.h	r8++,r4
800017c8:	00 00       	add	r0,r0
800017ca:	00 08       	add	r8,r0
800017cc:	00 00       	add	r0,r0
800017ce:	00 0c       	add	r12,r0

800017d0 <_stext>:
800017d0:	49 7d       	lddpc	sp,8000182c <udata_end+0x4>
800017d2:	49 80       	lddpc	r0,80001830 <udata_end+0x8>
800017d4:	1a d0       	st.w	--sp,r0
800017d6:	e5 cd 20 00 	ldmts	sp,sp
800017da:	1b 00       	ld.w	r0,sp++
800017dc:	49 60       	lddpc	r0,80001834 <udata_end+0xc>
800017de:	e3 b0 00 01 	mtsr	0x4,r0
800017e2:	d5 53       	csrf	0x15
800017e4:	e0 6c 0c 00 	mov	r12,3072
800017e8:	ea 1c ff ff 	orh	r12,0xffff
800017ec:	e0 6b 01 07 	mov	r11,263
800017f0:	99 ab       	st.w	r12[0x28],r11
800017f2:	30 4b       	mov	r11,4
800017f4:	99 0b       	st.w	r12[0x0],r11
800017f6:	e0 6a 00 80 	mov	r10,128

800017fa <xw8>:
800017fa:	79 5b       	ld.w	r11,r12[0x54]
800017fc:	14 7b       	tst	r11,r10
800017fe:	cf e0       	breq	800017fa <xw8>
80001800:	30 5b       	mov	r11,5
80001802:	99 0b       	st.w	r12[0x0],r11

80001804 <idata_>:
80001804:	48 d0       	lddpc	r0,80001838 <udata_end+0x10>
80001806:	48 e1       	lddpc	r1,8000183c <udata_end+0x14>
80001808:	02 30       	cp.w	r0,r1
8000180a:	c0 62       	brcc	80001816 <idata_end>
8000180c:	48 d2       	lddpc	r2,80001840 <udata_end+0x18>

8000180e <idata_loop>:
8000180e:	05 04       	ld.w	r4,r2++
80001810:	00 a4       	st.w	r0++,r4
80001812:	02 30       	cp.w	r0,r1
80001814:	cf d3       	brcs	8000180e <idata_loop>

80001816 <idata_end>:
80001816:	48 c0       	lddpc	r0,80001844 <udata_end+0x1c>
80001818:	48 c1       	lddpc	r1,80001848 <udata_end+0x20>
8000181a:	02 30       	cp.w	r0,r1
8000181c:	c0 62       	brcc	80001828 <udata_end>
8000181e:	30 02       	mov	r2,0
80001820:	30 03       	mov	r3,0

80001822 <udata_loop>:
80001822:	00 a2       	st.w	r0++,r2
80001824:	02 30       	cp.w	r0,r1
80001826:	cf e3       	brcs	80001822 <udata_loop>

80001828 <udata_end>:
80001828:	48 9f       	lddpc	pc,8000184c <udata_end+0x24>
8000182a:	00 00       	add	r0,r0
8000182c:	00 01       	add	r1,r0
8000182e:	00 00       	add	r0,r0
80001830:	00 00       	add	r0,r0
80001832:	f0 00       	*unknown*
80001834:	80 00       	ld.sh	r0,r0[0x0]
80001836:	20 00       	sub	r0,0
80001838:	00 00       	add	r0,r0
8000183a:	00 08       	add	r8,r0
8000183c:	00 00       	add	r0,r0
8000183e:	05 18       	ld.sh	r8,r2++
80001840:	80 00       	ld.sh	r0,r0[0x0]
80001842:	24 88       	sub	r8,72
80001844:	00 00       	add	r0,r0
80001846:	05 18       	ld.sh	r8,r2++
80001848:	00 00       	add	r0,r0
8000184a:	06 40       	or	r0,r3
8000184c:	80 00       	ld.sh	r0,r0[0x0]
8000184e:	07 08       	ld.w	r8,r3++

80001850 <abs>:
80001850:	5c 4c       	abs	r12
80001852:	5e fc       	retal	r12

80001854 <calloc>:
80001854:	d4 01       	pushm	lr
80001856:	48 48       	lddpc	r8,80001864 <calloc+0x10>
80001858:	16 9a       	mov	r10,r11
8000185a:	18 9b       	mov	r11,r12
8000185c:	70 0c       	ld.w	r12,r8[0x0]
8000185e:	f0 1f 00 03 	mcall	80001868 <calloc+0x14>
80001862:	d8 02       	popm	pc
80001864:	00 00       	add	r0,r0
80001866:	01 00       	ld.w	r0,r0++
80001868:	80 00       	ld.sh	r0,r0[0x0]
8000186a:	18 6c       	and	r12,r12

8000186c <_calloc_r>:
8000186c:	d4 21       	pushm	r4-r7,lr
8000186e:	f4 0b 02 4b 	mul	r11,r10,r11
80001872:	f0 1f 00 15 	mcall	800018c4 <_calloc_r+0x58>
80001876:	18 97       	mov	r7,r12
80001878:	c2 30       	breq	800018be <_calloc_r+0x52>
8000187a:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000187e:	e0 1a ff fc 	andl	r10,0xfffc
80001882:	20 4a       	sub	r10,4
80001884:	e0 4a 00 24 	cp.w	r10,36
80001888:	e0 8b 00 18 	brhi	800018b8 <_calloc_r+0x4c>
8000188c:	18 98       	mov	r8,r12
8000188e:	59 3a       	cp.w	r10,19
80001890:	e0 88 00 0f 	brls	800018ae <_calloc_r+0x42>
80001894:	30 09       	mov	r9,0
80001896:	10 a9       	st.w	r8++,r9
80001898:	10 a9       	st.w	r8++,r9
8000189a:	59 ba       	cp.w	r10,27
8000189c:	e0 88 00 09 	brls	800018ae <_calloc_r+0x42>
800018a0:	10 a9       	st.w	r8++,r9
800018a2:	10 a9       	st.w	r8++,r9
800018a4:	e0 4a 00 24 	cp.w	r10,36
800018a8:	c0 31       	brne	800018ae <_calloc_r+0x42>
800018aa:	10 a9       	st.w	r8++,r9
800018ac:	10 a9       	st.w	r8++,r9
800018ae:	30 09       	mov	r9,0
800018b0:	10 a9       	st.w	r8++,r9
800018b2:	91 19       	st.w	r8[0x4],r9
800018b4:	91 09       	st.w	r8[0x0],r9
800018b6:	c0 48       	rjmp	800018be <_calloc_r+0x52>
800018b8:	30 0b       	mov	r11,0
800018ba:	f0 1f 00 04 	mcall	800018c8 <_calloc_r+0x5c>
800018be:	0e 9c       	mov	r12,r7
800018c0:	d8 22       	popm	r4-r7,pc
800018c2:	00 00       	add	r0,r0
800018c4:	80 00       	ld.sh	r0,r0[0x0]
800018c6:	18 cc       	st.b	r12++,r12
800018c8:	80 00       	ld.sh	r0,r0[0x0]
800018ca:	1d 1c       	ld.sh	r12,lr++

800018cc <_malloc_r>:
800018cc:	d4 31       	pushm	r0-r7,lr
800018ce:	f6 c8 ff f5 	sub	r8,r11,-11
800018d2:	18 95       	mov	r5,r12
800018d4:	10 97       	mov	r7,r8
800018d6:	e0 17 ff f8 	andl	r7,0xfff8
800018da:	59 68       	cp.w	r8,22
800018dc:	f9 b7 08 10 	movls	r7,16
800018e0:	16 37       	cp.w	r7,r11
800018e2:	5f 38       	srlo	r8
800018e4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800018e8:	c0 50       	breq	800018f2 <_malloc_r+0x26>
800018ea:	30 c8       	mov	r8,12
800018ec:	99 38       	st.w	r12[0xc],r8
800018ee:	e0 8f 01 f3 	bral	80001cd4 <_malloc_r+0x408>
800018f2:	f0 1f 00 50 	mcall	80001a30 <_malloc_r+0x164>
800018f6:	e0 47 01 f7 	cp.w	r7,503
800018fa:	e0 8b 00 1c 	brhi	80001932 <_malloc_r+0x66>
800018fe:	ee 03 16 03 	lsr	r3,r7,0x3
80001902:	4c d8       	lddpc	r8,80001a34 <_malloc_r+0x168>
80001904:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001908:	70 36       	ld.w	r6,r8[0xc]
8000190a:	10 36       	cp.w	r6,r8
8000190c:	c0 61       	brne	80001918 <_malloc_r+0x4c>
8000190e:	ec c8 ff f8 	sub	r8,r6,-8
80001912:	70 36       	ld.w	r6,r8[0xc]
80001914:	10 36       	cp.w	r6,r8
80001916:	c0 c0       	breq	8000192e <_malloc_r+0x62>
80001918:	6c 18       	ld.w	r8,r6[0x4]
8000191a:	e0 18 ff fc 	andl	r8,0xfffc
8000191e:	6c 3a       	ld.w	r10,r6[0xc]
80001920:	ec 08 00 09 	add	r9,r6,r8
80001924:	0a 9c       	mov	r12,r5
80001926:	6c 28       	ld.w	r8,r6[0x8]
80001928:	95 28       	st.w	r10[0x8],r8
8000192a:	91 3a       	st.w	r8[0xc],r10
8000192c:	c4 68       	rjmp	800019b8 <_malloc_r+0xec>
8000192e:	2f e3       	sub	r3,-2
80001930:	c4 c8       	rjmp	800019c8 <_malloc_r+0xfc>
80001932:	ee 03 16 09 	lsr	r3,r7,0x9
80001936:	c0 41       	brne	8000193e <_malloc_r+0x72>
80001938:	ee 03 16 03 	lsr	r3,r7,0x3
8000193c:	c2 68       	rjmp	80001988 <_malloc_r+0xbc>
8000193e:	58 43       	cp.w	r3,4
80001940:	e0 8b 00 06 	brhi	8000194c <_malloc_r+0x80>
80001944:	ee 03 16 06 	lsr	r3,r7,0x6
80001948:	2c 83       	sub	r3,-56
8000194a:	c1 f8       	rjmp	80001988 <_malloc_r+0xbc>
8000194c:	59 43       	cp.w	r3,20
8000194e:	e0 8b 00 04 	brhi	80001956 <_malloc_r+0x8a>
80001952:	2a 53       	sub	r3,-91
80001954:	c1 a8       	rjmp	80001988 <_malloc_r+0xbc>
80001956:	e0 43 00 54 	cp.w	r3,84
8000195a:	e0 8b 00 06 	brhi	80001966 <_malloc_r+0x9a>
8000195e:	ee 03 16 0c 	lsr	r3,r7,0xc
80001962:	29 23       	sub	r3,-110
80001964:	c1 28       	rjmp	80001988 <_malloc_r+0xbc>
80001966:	e0 43 01 54 	cp.w	r3,340
8000196a:	e0 8b 00 06 	brhi	80001976 <_malloc_r+0xaa>
8000196e:	ee 03 16 0f 	lsr	r3,r7,0xf
80001972:	28 93       	sub	r3,-119
80001974:	c0 a8       	rjmp	80001988 <_malloc_r+0xbc>
80001976:	e0 43 05 54 	cp.w	r3,1364
8000197a:	e0 88 00 04 	brls	80001982 <_malloc_r+0xb6>
8000197e:	37 e3       	mov	r3,126
80001980:	c0 48       	rjmp	80001988 <_malloc_r+0xbc>
80001982:	ee 03 16 12 	lsr	r3,r7,0x12
80001986:	28 43       	sub	r3,-124
80001988:	4a ba       	lddpc	r10,80001a34 <_malloc_r+0x168>
8000198a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000198e:	74 36       	ld.w	r6,r10[0xc]
80001990:	c1 98       	rjmp	800019c2 <_malloc_r+0xf6>
80001992:	6c 19       	ld.w	r9,r6[0x4]
80001994:	e0 19 ff fc 	andl	r9,0xfffc
80001998:	f2 07 01 0b 	sub	r11,r9,r7
8000199c:	58 fb       	cp.w	r11,15
8000199e:	e0 8a 00 04 	brle	800019a6 <_malloc_r+0xda>
800019a2:	20 13       	sub	r3,1
800019a4:	c1 18       	rjmp	800019c6 <_malloc_r+0xfa>
800019a6:	6c 38       	ld.w	r8,r6[0xc]
800019a8:	58 0b       	cp.w	r11,0
800019aa:	c0 b5       	brlt	800019c0 <_malloc_r+0xf4>
800019ac:	6c 2a       	ld.w	r10,r6[0x8]
800019ae:	ec 09 00 09 	add	r9,r6,r9
800019b2:	0a 9c       	mov	r12,r5
800019b4:	91 2a       	st.w	r8[0x8],r10
800019b6:	95 38       	st.w	r10[0xc],r8
800019b8:	72 18       	ld.w	r8,r9[0x4]
800019ba:	a1 a8       	sbr	r8,0x0
800019bc:	93 18       	st.w	r9[0x4],r8
800019be:	cb c8       	rjmp	80001b36 <_malloc_r+0x26a>
800019c0:	10 96       	mov	r6,r8
800019c2:	14 36       	cp.w	r6,r10
800019c4:	ce 71       	brne	80001992 <_malloc_r+0xc6>
800019c6:	2f f3       	sub	r3,-1
800019c8:	49 ba       	lddpc	r10,80001a34 <_malloc_r+0x168>
800019ca:	f4 cc ff f8 	sub	r12,r10,-8
800019ce:	78 26       	ld.w	r6,r12[0x8]
800019d0:	18 36       	cp.w	r6,r12
800019d2:	c6 e0       	breq	80001aae <_malloc_r+0x1e2>
800019d4:	6c 19       	ld.w	r9,r6[0x4]
800019d6:	e0 19 ff fc 	andl	r9,0xfffc
800019da:	f2 07 01 08 	sub	r8,r9,r7
800019de:	58 f8       	cp.w	r8,15
800019e0:	e0 89 00 90 	brgt	80001b00 <_malloc_r+0x234>
800019e4:	99 3c       	st.w	r12[0xc],r12
800019e6:	99 2c       	st.w	r12[0x8],r12
800019e8:	58 08       	cp.w	r8,0
800019ea:	c0 55       	brlt	800019f4 <_malloc_r+0x128>
800019ec:	ec 09 00 09 	add	r9,r6,r9
800019f0:	0a 9c       	mov	r12,r5
800019f2:	ce 3b       	rjmp	800019b8 <_malloc_r+0xec>
800019f4:	e0 49 01 ff 	cp.w	r9,511
800019f8:	e0 8b 00 13 	brhi	80001a1e <_malloc_r+0x152>
800019fc:	a3 99       	lsr	r9,0x3
800019fe:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001a02:	70 2b       	ld.w	r11,r8[0x8]
80001a04:	8d 38       	st.w	r6[0xc],r8
80001a06:	8d 2b       	st.w	r6[0x8],r11
80001a08:	97 36       	st.w	r11[0xc],r6
80001a0a:	91 26       	st.w	r8[0x8],r6
80001a0c:	a3 49       	asr	r9,0x2
80001a0e:	74 18       	ld.w	r8,r10[0x4]
80001a10:	30 1b       	mov	r11,1
80001a12:	f6 09 09 49 	lsl	r9,r11,r9
80001a16:	f1 e9 10 09 	or	r9,r8,r9
80001a1a:	95 19       	st.w	r10[0x4],r9
80001a1c:	c4 98       	rjmp	80001aae <_malloc_r+0x1e2>
80001a1e:	f2 0a 16 09 	lsr	r10,r9,0x9
80001a22:	58 4a       	cp.w	r10,4
80001a24:	e0 8b 00 0a 	brhi	80001a38 <_malloc_r+0x16c>
80001a28:	f2 0a 16 06 	lsr	r10,r9,0x6
80001a2c:	2c 8a       	sub	r10,-56
80001a2e:	c2 38       	rjmp	80001a74 <_malloc_r+0x1a8>
80001a30:	80 00       	ld.sh	r0,r0[0x0]
80001a32:	1d 2a       	ld.uh	r10,lr++
80001a34:	00 00       	add	r0,r0
80001a36:	01 04       	ld.w	r4,r0++
80001a38:	59 4a       	cp.w	r10,20
80001a3a:	e0 8b 00 04 	brhi	80001a42 <_malloc_r+0x176>
80001a3e:	2a 5a       	sub	r10,-91
80001a40:	c1 a8       	rjmp	80001a74 <_malloc_r+0x1a8>
80001a42:	e0 4a 00 54 	cp.w	r10,84
80001a46:	e0 8b 00 06 	brhi	80001a52 <_malloc_r+0x186>
80001a4a:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001a4e:	29 2a       	sub	r10,-110
80001a50:	c1 28       	rjmp	80001a74 <_malloc_r+0x1a8>
80001a52:	e0 4a 01 54 	cp.w	r10,340
80001a56:	e0 8b 00 06 	brhi	80001a62 <_malloc_r+0x196>
80001a5a:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001a5e:	28 9a       	sub	r10,-119
80001a60:	c0 a8       	rjmp	80001a74 <_malloc_r+0x1a8>
80001a62:	e0 4a 05 54 	cp.w	r10,1364
80001a66:	e0 88 00 04 	brls	80001a6e <_malloc_r+0x1a2>
80001a6a:	37 ea       	mov	r10,126
80001a6c:	c0 48       	rjmp	80001a74 <_malloc_r+0x1a8>
80001a6e:	f2 0a 16 12 	lsr	r10,r9,0x12
80001a72:	28 4a       	sub	r10,-124
80001a74:	4c 8b       	lddpc	r11,80001b94 <_malloc_r+0x2c8>
80001a76:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001a7a:	68 28       	ld.w	r8,r4[0x8]
80001a7c:	08 38       	cp.w	r8,r4
80001a7e:	c0 e1       	brne	80001a9a <_malloc_r+0x1ce>
80001a80:	76 19       	ld.w	r9,r11[0x4]
80001a82:	a3 4a       	asr	r10,0x2
80001a84:	30 1e       	mov	lr,1
80001a86:	fc 0a 09 4a 	lsl	r10,lr,r10
80001a8a:	f3 ea 10 0a 	or	r10,r9,r10
80001a8e:	10 99       	mov	r9,r8
80001a90:	97 1a       	st.w	r11[0x4],r10
80001a92:	c0 a8       	rjmp	80001aa6 <_malloc_r+0x1da>
80001a94:	70 28       	ld.w	r8,r8[0x8]
80001a96:	08 38       	cp.w	r8,r4
80001a98:	c0 60       	breq	80001aa4 <_malloc_r+0x1d8>
80001a9a:	70 1a       	ld.w	r10,r8[0x4]
80001a9c:	e0 1a ff fc 	andl	r10,0xfffc
80001aa0:	14 39       	cp.w	r9,r10
80001aa2:	cf 93       	brcs	80001a94 <_malloc_r+0x1c8>
80001aa4:	70 39       	ld.w	r9,r8[0xc]
80001aa6:	8d 39       	st.w	r6[0xc],r9
80001aa8:	8d 28       	st.w	r6[0x8],r8
80001aaa:	91 36       	st.w	r8[0xc],r6
80001aac:	93 26       	st.w	r9[0x8],r6
80001aae:	e6 08 14 02 	asr	r8,r3,0x2
80001ab2:	30 1b       	mov	r11,1
80001ab4:	4b 84       	lddpc	r4,80001b94 <_malloc_r+0x2c8>
80001ab6:	f6 08 09 4b 	lsl	r11,r11,r8
80001aba:	68 18       	ld.w	r8,r4[0x4]
80001abc:	10 3b       	cp.w	r11,r8
80001abe:	e0 8b 00 6f 	brhi	80001b9c <_malloc_r+0x2d0>
80001ac2:	f7 e8 00 09 	and	r9,r11,r8
80001ac6:	c0 b1       	brne	80001adc <_malloc_r+0x210>
80001ac8:	e0 13 ff fc 	andl	r3,0xfffc
80001acc:	a1 7b       	lsl	r11,0x1
80001ace:	2f c3       	sub	r3,-4
80001ad0:	c0 38       	rjmp	80001ad6 <_malloc_r+0x20a>
80001ad2:	2f c3       	sub	r3,-4
80001ad4:	a1 7b       	lsl	r11,0x1
80001ad6:	f7 e8 00 09 	and	r9,r11,r8
80001ada:	cf c0       	breq	80001ad2 <_malloc_r+0x206>
80001adc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001ae0:	06 92       	mov	r2,r3
80001ae2:	1c 91       	mov	r1,lr
80001ae4:	62 36       	ld.w	r6,r1[0xc]
80001ae6:	c2 e8       	rjmp	80001b42 <_malloc_r+0x276>
80001ae8:	6c 1a       	ld.w	r10,r6[0x4]
80001aea:	e0 1a ff fc 	andl	r10,0xfffc
80001aee:	f4 07 01 08 	sub	r8,r10,r7
80001af2:	58 f8       	cp.w	r8,15
80001af4:	e0 8a 00 15 	brle	80001b1e <_malloc_r+0x252>
80001af8:	6c 3a       	ld.w	r10,r6[0xc]
80001afa:	6c 29       	ld.w	r9,r6[0x8]
80001afc:	95 29       	st.w	r10[0x8],r9
80001afe:	93 3a       	st.w	r9[0xc],r10
80001b00:	0e 99       	mov	r9,r7
80001b02:	ec 07 00 07 	add	r7,r6,r7
80001b06:	a1 a9       	sbr	r9,0x0
80001b08:	99 37       	st.w	r12[0xc],r7
80001b0a:	99 27       	st.w	r12[0x8],r7
80001b0c:	8d 19       	st.w	r6[0x4],r9
80001b0e:	ee 08 09 08 	st.w	r7[r8],r8
80001b12:	8f 2c       	st.w	r7[0x8],r12
80001b14:	8f 3c       	st.w	r7[0xc],r12
80001b16:	a1 a8       	sbr	r8,0x0
80001b18:	0a 9c       	mov	r12,r5
80001b1a:	8f 18       	st.w	r7[0x4],r8
80001b1c:	c0 d8       	rjmp	80001b36 <_malloc_r+0x26a>
80001b1e:	6c 39       	ld.w	r9,r6[0xc]
80001b20:	58 08       	cp.w	r8,0
80001b22:	c0 f5       	brlt	80001b40 <_malloc_r+0x274>
80001b24:	ec 0a 00 0a 	add	r10,r6,r10
80001b28:	74 18       	ld.w	r8,r10[0x4]
80001b2a:	a1 a8       	sbr	r8,0x0
80001b2c:	0a 9c       	mov	r12,r5
80001b2e:	95 18       	st.w	r10[0x4],r8
80001b30:	6c 28       	ld.w	r8,r6[0x8]
80001b32:	93 28       	st.w	r9[0x8],r8
80001b34:	91 39       	st.w	r8[0xc],r9
80001b36:	f0 1f 00 19 	mcall	80001b98 <_malloc_r+0x2cc>
80001b3a:	ec cc ff f8 	sub	r12,r6,-8
80001b3e:	d8 32       	popm	r0-r7,pc
80001b40:	12 96       	mov	r6,r9
80001b42:	02 36       	cp.w	r6,r1
80001b44:	cd 21       	brne	80001ae8 <_malloc_r+0x21c>
80001b46:	2f f2       	sub	r2,-1
80001b48:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001b4c:	c0 30       	breq	80001b52 <_malloc_r+0x286>
80001b4e:	2f 81       	sub	r1,-8
80001b50:	cc ab       	rjmp	80001ae4 <_malloc_r+0x218>
80001b52:	1c 98       	mov	r8,lr
80001b54:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001b58:	c0 81       	brne	80001b68 <_malloc_r+0x29c>
80001b5a:	68 19       	ld.w	r9,r4[0x4]
80001b5c:	f6 08 11 ff 	rsub	r8,r11,-1
80001b60:	f3 e8 00 08 	and	r8,r9,r8
80001b64:	89 18       	st.w	r4[0x4],r8
80001b66:	c0 78       	rjmp	80001b74 <_malloc_r+0x2a8>
80001b68:	f0 c9 00 08 	sub	r9,r8,8
80001b6c:	20 13       	sub	r3,1
80001b6e:	70 08       	ld.w	r8,r8[0x0]
80001b70:	12 38       	cp.w	r8,r9
80001b72:	cf 10       	breq	80001b54 <_malloc_r+0x288>
80001b74:	a1 7b       	lsl	r11,0x1
80001b76:	68 18       	ld.w	r8,r4[0x4]
80001b78:	10 3b       	cp.w	r11,r8
80001b7a:	e0 8b 00 11 	brhi	80001b9c <_malloc_r+0x2d0>
80001b7e:	58 0b       	cp.w	r11,0
80001b80:	c0 e0       	breq	80001b9c <_malloc_r+0x2d0>
80001b82:	04 93       	mov	r3,r2
80001b84:	c0 38       	rjmp	80001b8a <_malloc_r+0x2be>
80001b86:	2f c3       	sub	r3,-4
80001b88:	a1 7b       	lsl	r11,0x1
80001b8a:	f7 e8 00 09 	and	r9,r11,r8
80001b8e:	ca 71       	brne	80001adc <_malloc_r+0x210>
80001b90:	cf bb       	rjmp	80001b86 <_malloc_r+0x2ba>
80001b92:	00 00       	add	r0,r0
80001b94:	00 00       	add	r0,r0
80001b96:	01 04       	ld.w	r4,r0++
80001b98:	80 00       	ld.sh	r0,r0[0x0]
80001b9a:	1d 2c       	ld.uh	r12,lr++
80001b9c:	68 23       	ld.w	r3,r4[0x8]
80001b9e:	66 12       	ld.w	r2,r3[0x4]
80001ba0:	e0 12 ff fc 	andl	r2,0xfffc
80001ba4:	0e 32       	cp.w	r2,r7
80001ba6:	5f 39       	srlo	r9
80001ba8:	e4 07 01 08 	sub	r8,r2,r7
80001bac:	58 f8       	cp.w	r8,15
80001bae:	5f aa       	srle	r10
80001bb0:	f5 e9 10 09 	or	r9,r10,r9
80001bb4:	e0 80 00 a2 	breq	80001cf8 <_malloc_r+0x42c>
80001bb8:	4c 88       	lddpc	r8,80001cd8 <_malloc_r+0x40c>
80001bba:	70 01       	ld.w	r1,r8[0x0]
80001bbc:	4c 88       	lddpc	r8,80001cdc <_malloc_r+0x410>
80001bbe:	2f 01       	sub	r1,-16
80001bc0:	70 08       	ld.w	r8,r8[0x0]
80001bc2:	0e 01       	add	r1,r7
80001bc4:	5b f8       	cp.w	r8,-1
80001bc6:	c0 40       	breq	80001bce <_malloc_r+0x302>
80001bc8:	28 11       	sub	r1,-127
80001bca:	e0 11 ff 80 	andl	r1,0xff80
80001bce:	02 9b       	mov	r11,r1
80001bd0:	0a 9c       	mov	r12,r5
80001bd2:	f0 1f 00 44 	mcall	80001ce0 <_malloc_r+0x414>
80001bd6:	18 96       	mov	r6,r12
80001bd8:	5b fc       	cp.w	r12,-1
80001bda:	c6 e0       	breq	80001cb6 <_malloc_r+0x3ea>
80001bdc:	e6 02 00 08 	add	r8,r3,r2
80001be0:	10 3c       	cp.w	r12,r8
80001be2:	c0 32       	brcc	80001be8 <_malloc_r+0x31c>
80001be4:	08 33       	cp.w	r3,r4
80001be6:	c6 81       	brne	80001cb6 <_malloc_r+0x3ea>
80001be8:	4b fa       	lddpc	r10,80001ce4 <_malloc_r+0x418>
80001bea:	74 09       	ld.w	r9,r10[0x0]
80001bec:	e2 09 00 09 	add	r9,r1,r9
80001bf0:	95 09       	st.w	r10[0x0],r9
80001bf2:	10 36       	cp.w	r6,r8
80001bf4:	c0 a1       	brne	80001c08 <_malloc_r+0x33c>
80001bf6:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001bfa:	c0 71       	brne	80001c08 <_malloc_r+0x33c>
80001bfc:	e2 02 00 02 	add	r2,r1,r2
80001c00:	68 28       	ld.w	r8,r4[0x8]
80001c02:	a1 a2       	sbr	r2,0x0
80001c04:	91 12       	st.w	r8[0x4],r2
80001c06:	c4 c8       	rjmp	80001c9e <_malloc_r+0x3d2>
80001c08:	4b 5a       	lddpc	r10,80001cdc <_malloc_r+0x410>
80001c0a:	74 0b       	ld.w	r11,r10[0x0]
80001c0c:	5b fb       	cp.w	r11,-1
80001c0e:	c0 31       	brne	80001c14 <_malloc_r+0x348>
80001c10:	95 06       	st.w	r10[0x0],r6
80001c12:	c0 68       	rjmp	80001c1e <_malloc_r+0x352>
80001c14:	ec 09 00 09 	add	r9,r6,r9
80001c18:	4b 3a       	lddpc	r10,80001ce4 <_malloc_r+0x418>
80001c1a:	10 19       	sub	r9,r8
80001c1c:	95 09       	st.w	r10[0x0],r9
80001c1e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001c22:	f0 09 11 08 	rsub	r9,r8,8
80001c26:	58 08       	cp.w	r8,0
80001c28:	f2 08 17 10 	movne	r8,r9
80001c2c:	ed d8 e1 06 	addne	r6,r6,r8
80001c30:	28 08       	sub	r8,-128
80001c32:	ec 01 00 01 	add	r1,r6,r1
80001c36:	0a 9c       	mov	r12,r5
80001c38:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001c3c:	f0 01 01 01 	sub	r1,r8,r1
80001c40:	02 9b       	mov	r11,r1
80001c42:	f0 1f 00 28 	mcall	80001ce0 <_malloc_r+0x414>
80001c46:	4a 88       	lddpc	r8,80001ce4 <_malloc_r+0x418>
80001c48:	5b fc       	cp.w	r12,-1
80001c4a:	ec 0c 17 00 	moveq	r12,r6
80001c4e:	f9 b1 00 00 	moveq	r1,0
80001c52:	70 09       	ld.w	r9,r8[0x0]
80001c54:	0c 1c       	sub	r12,r6
80001c56:	89 26       	st.w	r4[0x8],r6
80001c58:	02 0c       	add	r12,r1
80001c5a:	12 01       	add	r1,r9
80001c5c:	a1 ac       	sbr	r12,0x0
80001c5e:	91 01       	st.w	r8[0x0],r1
80001c60:	8d 1c       	st.w	r6[0x4],r12
80001c62:	08 33       	cp.w	r3,r4
80001c64:	c1 d0       	breq	80001c9e <_malloc_r+0x3d2>
80001c66:	58 f2       	cp.w	r2,15
80001c68:	e0 8b 00 05 	brhi	80001c72 <_malloc_r+0x3a6>
80001c6c:	30 18       	mov	r8,1
80001c6e:	8d 18       	st.w	r6[0x4],r8
80001c70:	c2 38       	rjmp	80001cb6 <_malloc_r+0x3ea>
80001c72:	30 59       	mov	r9,5
80001c74:	20 c2       	sub	r2,12
80001c76:	e0 12 ff f8 	andl	r2,0xfff8
80001c7a:	e6 02 00 08 	add	r8,r3,r2
80001c7e:	91 29       	st.w	r8[0x8],r9
80001c80:	91 19       	st.w	r8[0x4],r9
80001c82:	66 18       	ld.w	r8,r3[0x4]
80001c84:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001c88:	e5 e8 10 08 	or	r8,r2,r8
80001c8c:	87 18       	st.w	r3[0x4],r8
80001c8e:	58 f2       	cp.w	r2,15
80001c90:	e0 88 00 07 	brls	80001c9e <_malloc_r+0x3d2>
80001c94:	e6 cb ff f8 	sub	r11,r3,-8
80001c98:	0a 9c       	mov	r12,r5
80001c9a:	f0 1f 00 14 	mcall	80001ce8 <_malloc_r+0x41c>
80001c9e:	49 49       	lddpc	r9,80001cec <_malloc_r+0x420>
80001ca0:	72 0a       	ld.w	r10,r9[0x0]
80001ca2:	49 18       	lddpc	r8,80001ce4 <_malloc_r+0x418>
80001ca4:	70 08       	ld.w	r8,r8[0x0]
80001ca6:	14 38       	cp.w	r8,r10
80001ca8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001cac:	49 19       	lddpc	r9,80001cf0 <_malloc_r+0x424>
80001cae:	72 0a       	ld.w	r10,r9[0x0]
80001cb0:	14 38       	cp.w	r8,r10
80001cb2:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001cb6:	68 28       	ld.w	r8,r4[0x8]
80001cb8:	70 18       	ld.w	r8,r8[0x4]
80001cba:	e0 18 ff fc 	andl	r8,0xfffc
80001cbe:	0e 38       	cp.w	r8,r7
80001cc0:	5f 39       	srlo	r9
80001cc2:	0e 18       	sub	r8,r7
80001cc4:	58 f8       	cp.w	r8,15
80001cc6:	5f aa       	srle	r10
80001cc8:	f5 e9 10 09 	or	r9,r10,r9
80001ccc:	c1 60       	breq	80001cf8 <_malloc_r+0x42c>
80001cce:	0a 9c       	mov	r12,r5
80001cd0:	f0 1f 00 09 	mcall	80001cf4 <_malloc_r+0x428>
80001cd4:	d8 3a       	popm	r0-r7,pc,r12=0
80001cd6:	00 00       	add	r0,r0
80001cd8:	00 00       	add	r0,r0
80001cda:	05 48       	ld.w	r8,--r2
80001cdc:	00 00       	add	r0,r0
80001cde:	05 10       	ld.sh	r0,r2++
80001ce0:	80 00       	ld.sh	r0,r0[0x0]
80001ce2:	1d 30       	ld.ub	r0,lr++
80001ce4:	00 00       	add	r0,r0
80001ce6:	05 4c       	ld.w	r12,--r2
80001ce8:	80 00       	ld.sh	r0,r0[0x0]
80001cea:	1e 4c       	or	r12,pc
80001cec:	00 00       	add	r0,r0
80001cee:	05 44       	ld.w	r4,--r2
80001cf0:	00 00       	add	r0,r0
80001cf2:	05 40       	ld.w	r0,--r2
80001cf4:	80 00       	ld.sh	r0,r0[0x0]
80001cf6:	1d 2c       	ld.uh	r12,lr++
80001cf8:	68 26       	ld.w	r6,r4[0x8]
80001cfa:	a1 a8       	sbr	r8,0x0
80001cfc:	0e 99       	mov	r9,r7
80001cfe:	a1 a9       	sbr	r9,0x0
80001d00:	8d 19       	st.w	r6[0x4],r9
80001d02:	ec 07 00 07 	add	r7,r6,r7
80001d06:	0a 9c       	mov	r12,r5
80001d08:	89 27       	st.w	r4[0x8],r7
80001d0a:	8f 18       	st.w	r7[0x4],r8
80001d0c:	f0 1f 00 03 	mcall	80001d18 <_malloc_r+0x44c>
80001d10:	ec cc ff f8 	sub	r12,r6,-8
80001d14:	d8 32       	popm	r0-r7,pc
80001d16:	00 00       	add	r0,r0
80001d18:	80 00       	ld.sh	r0,r0[0x0]
80001d1a:	1d 2c       	ld.uh	r12,lr++

80001d1c <memset>:
80001d1c:	18 98       	mov	r8,r12
80001d1e:	c0 38       	rjmp	80001d24 <memset+0x8>
80001d20:	10 cb       	st.b	r8++,r11
80001d22:	20 1a       	sub	r10,1
80001d24:	58 0a       	cp.w	r10,0
80001d26:	cf d1       	brne	80001d20 <memset+0x4>
80001d28:	5e fc       	retal	r12

80001d2a <__malloc_lock>:
80001d2a:	5e fc       	retal	r12

80001d2c <__malloc_unlock>:
80001d2c:	5e fc       	retal	r12
80001d2e:	d7 03       	nop

80001d30 <_sbrk_r>:
80001d30:	d4 21       	pushm	r4-r7,lr
80001d32:	30 08       	mov	r8,0
80001d34:	18 97       	mov	r7,r12
80001d36:	48 76       	lddpc	r6,80001d50 <_sbrk_r+0x20>
80001d38:	16 9c       	mov	r12,r11
80001d3a:	8d 08       	st.w	r6[0x0],r8
80001d3c:	f0 1f 00 06 	mcall	80001d54 <_sbrk_r+0x24>
80001d40:	5b fc       	cp.w	r12,-1
80001d42:	c0 51       	brne	80001d4c <_sbrk_r+0x1c>
80001d44:	6c 08       	ld.w	r8,r6[0x0]
80001d46:	58 08       	cp.w	r8,0
80001d48:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001d4c:	d8 22       	popm	r4-r7,pc
80001d4e:	00 00       	add	r0,r0
80001d50:	00 00       	add	r0,r0
80001d52:	06 38       	cp.w	r8,r3
80001d54:	80 00       	ld.sh	r0,r0[0x0]
80001d56:	1d 58       	ld.sh	r8,--lr

80001d58 <_sbrk>:
80001d58:	d4 01       	pushm	lr
80001d5a:	48 c8       	lddpc	r8,80001d88 <_sbrk+0x30>
80001d5c:	70 09       	ld.w	r9,r8[0x0]
80001d5e:	58 09       	cp.w	r9,0
80001d60:	c0 31       	brne	80001d66 <_sbrk+0xe>
80001d62:	48 b9       	lddpc	r9,80001d8c <_sbrk+0x34>
80001d64:	91 09       	st.w	r8[0x0],r9
80001d66:	48 99       	lddpc	r9,80001d88 <_sbrk+0x30>
80001d68:	48 aa       	lddpc	r10,80001d90 <_sbrk+0x38>
80001d6a:	72 08       	ld.w	r8,r9[0x0]
80001d6c:	f0 0c 00 0c 	add	r12,r8,r12
80001d70:	14 3c       	cp.w	r12,r10
80001d72:	e0 8b 00 04 	brhi	80001d7a <_sbrk+0x22>
80001d76:	93 0c       	st.w	r9[0x0],r12
80001d78:	c0 68       	rjmp	80001d84 <_sbrk+0x2c>
80001d7a:	f0 1f 00 07 	mcall	80001d94 <_sbrk+0x3c>
80001d7e:	30 c8       	mov	r8,12
80001d80:	99 08       	st.w	r12[0x0],r8
80001d82:	3f f8       	mov	r8,-1
80001d84:	10 9c       	mov	r12,r8
80001d86:	d8 02       	popm	pc
80001d88:	00 00       	add	r0,r0
80001d8a:	05 74       	ld.ub	r4,--r2
80001d8c:	00 00       	add	r0,r0
80001d8e:	06 40       	or	r0,r3
80001d90:	00 00       	add	r0,r0
80001d92:	e0 00       	*unknown*
80001d94:	80 00       	ld.sh	r0,r0[0x0]
80001d96:	1d 98       	ld.ub	r8,lr[0x1]

80001d98 <__errno>:
80001d98:	48 28       	lddpc	r8,80001da0 <__errno+0x8>
80001d9a:	70 0c       	ld.w	r12,r8[0x0]
80001d9c:	2f 4c       	sub	r12,-12
80001d9e:	5e fc       	retal	r12
80001da0:	00 00       	add	r0,r0
80001da2:	01 00       	ld.w	r0,r0++

80001da4 <_malloc_trim_r>:
80001da4:	d4 21       	pushm	r4-r7,lr
80001da6:	16 95       	mov	r5,r11
80001da8:	18 97       	mov	r7,r12
80001daa:	f0 1f 00 23 	mcall	80001e34 <_malloc_trim_r+0x90>
80001dae:	4a 34       	lddpc	r4,80001e38 <_malloc_trim_r+0x94>
80001db0:	68 28       	ld.w	r8,r4[0x8]
80001db2:	70 16       	ld.w	r6,r8[0x4]
80001db4:	e0 16 ff fc 	andl	r6,0xfffc
80001db8:	ec c8 ff 91 	sub	r8,r6,-111
80001dbc:	f0 05 01 05 	sub	r5,r8,r5
80001dc0:	e0 15 ff 80 	andl	r5,0xff80
80001dc4:	ea c5 00 80 	sub	r5,r5,128
80001dc8:	e0 45 00 7f 	cp.w	r5,127
80001dcc:	e0 8a 00 23 	brle	80001e12 <_malloc_trim_r+0x6e>
80001dd0:	30 0b       	mov	r11,0
80001dd2:	0e 9c       	mov	r12,r7
80001dd4:	f0 1f 00 1a 	mcall	80001e3c <_malloc_trim_r+0x98>
80001dd8:	68 28       	ld.w	r8,r4[0x8]
80001dda:	0c 08       	add	r8,r6
80001ddc:	10 3c       	cp.w	r12,r8
80001dde:	c1 a1       	brne	80001e12 <_malloc_trim_r+0x6e>
80001de0:	ea 0b 11 00 	rsub	r11,r5,0
80001de4:	0e 9c       	mov	r12,r7
80001de6:	f0 1f 00 16 	mcall	80001e3c <_malloc_trim_r+0x98>
80001dea:	5b fc       	cp.w	r12,-1
80001dec:	c1 71       	brne	80001e1a <_malloc_trim_r+0x76>
80001dee:	30 0b       	mov	r11,0
80001df0:	0e 9c       	mov	r12,r7
80001df2:	f0 1f 00 13 	mcall	80001e3c <_malloc_trim_r+0x98>
80001df6:	68 28       	ld.w	r8,r4[0x8]
80001df8:	f8 08 01 09 	sub	r9,r12,r8
80001dfc:	58 f9       	cp.w	r9,15
80001dfe:	e0 8a 00 0a 	brle	80001e12 <_malloc_trim_r+0x6e>
80001e02:	a1 a9       	sbr	r9,0x0
80001e04:	91 19       	st.w	r8[0x4],r9
80001e06:	48 f8       	lddpc	r8,80001e40 <_malloc_trim_r+0x9c>
80001e08:	70 09       	ld.w	r9,r8[0x0]
80001e0a:	48 f8       	lddpc	r8,80001e44 <_malloc_trim_r+0xa0>
80001e0c:	f8 09 01 09 	sub	r9,r12,r9
80001e10:	91 09       	st.w	r8[0x0],r9
80001e12:	0e 9c       	mov	r12,r7
80001e14:	f0 1f 00 0d 	mcall	80001e48 <_malloc_trim_r+0xa4>
80001e18:	d8 2a       	popm	r4-r7,pc,r12=0
80001e1a:	68 28       	ld.w	r8,r4[0x8]
80001e1c:	0a 16       	sub	r6,r5
80001e1e:	a1 a6       	sbr	r6,0x0
80001e20:	91 16       	st.w	r8[0x4],r6
80001e22:	48 98       	lddpc	r8,80001e44 <_malloc_trim_r+0xa0>
80001e24:	70 09       	ld.w	r9,r8[0x0]
80001e26:	0a 19       	sub	r9,r5
80001e28:	0e 9c       	mov	r12,r7
80001e2a:	91 09       	st.w	r8[0x0],r9
80001e2c:	f0 1f 00 07 	mcall	80001e48 <_malloc_trim_r+0xa4>
80001e30:	da 2a       	popm	r4-r7,pc,r12=1
80001e32:	00 00       	add	r0,r0
80001e34:	80 00       	ld.sh	r0,r0[0x0]
80001e36:	1d 2a       	ld.uh	r10,lr++
80001e38:	00 00       	add	r0,r0
80001e3a:	01 04       	ld.w	r4,r0++
80001e3c:	80 00       	ld.sh	r0,r0[0x0]
80001e3e:	1d 30       	ld.ub	r0,lr++
80001e40:	00 00       	add	r0,r0
80001e42:	05 10       	ld.sh	r0,r2++
80001e44:	00 00       	add	r0,r0
80001e46:	05 4c       	ld.w	r12,--r2
80001e48:	80 00       	ld.sh	r0,r0[0x0]
80001e4a:	1d 2c       	ld.uh	r12,lr++

80001e4c <_free_r>:
80001e4c:	d4 21       	pushm	r4-r7,lr
80001e4e:	16 96       	mov	r6,r11
80001e50:	18 97       	mov	r7,r12
80001e52:	58 0b       	cp.w	r11,0
80001e54:	e0 80 00 c8 	breq	80001fe4 <_free_r+0x198>
80001e58:	f0 1f 00 4c 	mcall	80001f88 <_free_r+0x13c>
80001e5c:	20 86       	sub	r6,8
80001e5e:	4c ca       	lddpc	r10,80001f8c <_free_r+0x140>
80001e60:	6c 18       	ld.w	r8,r6[0x4]
80001e62:	74 2e       	ld.w	lr,r10[0x8]
80001e64:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001e68:	a1 c8       	cbr	r8,0x0
80001e6a:	ec 08 00 09 	add	r9,r6,r8
80001e6e:	72 1b       	ld.w	r11,r9[0x4]
80001e70:	e0 1b ff fc 	andl	r11,0xfffc
80001e74:	1c 39       	cp.w	r9,lr
80001e76:	c1 d1       	brne	80001eb0 <_free_r+0x64>
80001e78:	f6 08 00 08 	add	r8,r11,r8
80001e7c:	58 0c       	cp.w	r12,0
80001e7e:	c0 81       	brne	80001e8e <_free_r+0x42>
80001e80:	6c 09       	ld.w	r9,r6[0x0]
80001e82:	12 16       	sub	r6,r9
80001e84:	12 08       	add	r8,r9
80001e86:	6c 3b       	ld.w	r11,r6[0xc]
80001e88:	6c 29       	ld.w	r9,r6[0x8]
80001e8a:	97 29       	st.w	r11[0x8],r9
80001e8c:	93 3b       	st.w	r9[0xc],r11
80001e8e:	10 99       	mov	r9,r8
80001e90:	95 26       	st.w	r10[0x8],r6
80001e92:	a1 a9       	sbr	r9,0x0
80001e94:	8d 19       	st.w	r6[0x4],r9
80001e96:	4b f9       	lddpc	r9,80001f90 <_free_r+0x144>
80001e98:	72 09       	ld.w	r9,r9[0x0]
80001e9a:	12 38       	cp.w	r8,r9
80001e9c:	c0 63       	brcs	80001ea8 <_free_r+0x5c>
80001e9e:	4b e8       	lddpc	r8,80001f94 <_free_r+0x148>
80001ea0:	0e 9c       	mov	r12,r7
80001ea2:	70 0b       	ld.w	r11,r8[0x0]
80001ea4:	f0 1f 00 3d 	mcall	80001f98 <_free_r+0x14c>
80001ea8:	0e 9c       	mov	r12,r7
80001eaa:	f0 1f 00 3d 	mcall	80001f9c <_free_r+0x150>
80001eae:	d8 22       	popm	r4-r7,pc
80001eb0:	93 1b       	st.w	r9[0x4],r11
80001eb2:	58 0c       	cp.w	r12,0
80001eb4:	c0 30       	breq	80001eba <_free_r+0x6e>
80001eb6:	30 0c       	mov	r12,0
80001eb8:	c1 08       	rjmp	80001ed8 <_free_r+0x8c>
80001eba:	6c 0e       	ld.w	lr,r6[0x0]
80001ebc:	f4 c5 ff f8 	sub	r5,r10,-8
80001ec0:	1c 16       	sub	r6,lr
80001ec2:	1c 08       	add	r8,lr
80001ec4:	6c 2e       	ld.w	lr,r6[0x8]
80001ec6:	0a 3e       	cp.w	lr,r5
80001ec8:	f9 bc 00 01 	moveq	r12,1
80001ecc:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001ed0:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001ed4:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001ed8:	f2 0b 00 0e 	add	lr,r9,r11
80001edc:	7c 1e       	ld.w	lr,lr[0x4]
80001ede:	ed be 00 00 	bld	lr,0x0
80001ee2:	c1 30       	breq	80001f08 <_free_r+0xbc>
80001ee4:	16 08       	add	r8,r11
80001ee6:	58 0c       	cp.w	r12,0
80001ee8:	c0 c1       	brne	80001f00 <_free_r+0xb4>
80001eea:	4a 9e       	lddpc	lr,80001f8c <_free_r+0x140>
80001eec:	72 2b       	ld.w	r11,r9[0x8]
80001eee:	2f 8e       	sub	lr,-8
80001ef0:	1c 3b       	cp.w	r11,lr
80001ef2:	c0 71       	brne	80001f00 <_free_r+0xb4>
80001ef4:	97 36       	st.w	r11[0xc],r6
80001ef6:	97 26       	st.w	r11[0x8],r6
80001ef8:	8d 2b       	st.w	r6[0x8],r11
80001efa:	8d 3b       	st.w	r6[0xc],r11
80001efc:	30 1c       	mov	r12,1
80001efe:	c0 58       	rjmp	80001f08 <_free_r+0xbc>
80001f00:	72 2b       	ld.w	r11,r9[0x8]
80001f02:	72 39       	ld.w	r9,r9[0xc]
80001f04:	93 2b       	st.w	r9[0x8],r11
80001f06:	97 39       	st.w	r11[0xc],r9
80001f08:	10 99       	mov	r9,r8
80001f0a:	ec 08 09 08 	st.w	r6[r8],r8
80001f0e:	a1 a9       	sbr	r9,0x0
80001f10:	8d 19       	st.w	r6[0x4],r9
80001f12:	58 0c       	cp.w	r12,0
80001f14:	c6 51       	brne	80001fde <_free_r+0x192>
80001f16:	e0 48 01 ff 	cp.w	r8,511
80001f1a:	e0 8b 00 13 	brhi	80001f40 <_free_r+0xf4>
80001f1e:	a3 98       	lsr	r8,0x3
80001f20:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001f24:	72 2b       	ld.w	r11,r9[0x8]
80001f26:	8d 39       	st.w	r6[0xc],r9
80001f28:	8d 2b       	st.w	r6[0x8],r11
80001f2a:	97 36       	st.w	r11[0xc],r6
80001f2c:	93 26       	st.w	r9[0x8],r6
80001f2e:	a3 48       	asr	r8,0x2
80001f30:	74 19       	ld.w	r9,r10[0x4]
80001f32:	30 1b       	mov	r11,1
80001f34:	f6 08 09 48 	lsl	r8,r11,r8
80001f38:	f3 e8 10 08 	or	r8,r9,r8
80001f3c:	95 18       	st.w	r10[0x4],r8
80001f3e:	c5 08       	rjmp	80001fde <_free_r+0x192>
80001f40:	f0 0b 16 09 	lsr	r11,r8,0x9
80001f44:	58 4b       	cp.w	r11,4
80001f46:	e0 8b 00 06 	brhi	80001f52 <_free_r+0x106>
80001f4a:	f0 0b 16 06 	lsr	r11,r8,0x6
80001f4e:	2c 8b       	sub	r11,-56
80001f50:	c2 b8       	rjmp	80001fa6 <_free_r+0x15a>
80001f52:	59 4b       	cp.w	r11,20
80001f54:	e0 8b 00 04 	brhi	80001f5c <_free_r+0x110>
80001f58:	2a 5b       	sub	r11,-91
80001f5a:	c2 68       	rjmp	80001fa6 <_free_r+0x15a>
80001f5c:	e0 4b 00 54 	cp.w	r11,84
80001f60:	e0 8b 00 06 	brhi	80001f6c <_free_r+0x120>
80001f64:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001f68:	29 2b       	sub	r11,-110
80001f6a:	c1 e8       	rjmp	80001fa6 <_free_r+0x15a>
80001f6c:	e0 4b 01 54 	cp.w	r11,340
80001f70:	e0 8b 00 06 	brhi	80001f7c <_free_r+0x130>
80001f74:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001f78:	28 9b       	sub	r11,-119
80001f7a:	c1 68       	rjmp	80001fa6 <_free_r+0x15a>
80001f7c:	e0 4b 05 54 	cp.w	r11,1364
80001f80:	e0 88 00 10 	brls	80001fa0 <_free_r+0x154>
80001f84:	37 eb       	mov	r11,126
80001f86:	c1 08       	rjmp	80001fa6 <_free_r+0x15a>
80001f88:	80 00       	ld.sh	r0,r0[0x0]
80001f8a:	1d 2a       	ld.uh	r10,lr++
80001f8c:	00 00       	add	r0,r0
80001f8e:	01 04       	ld.w	r4,r0++
80001f90:	00 00       	add	r0,r0
80001f92:	05 0c       	ld.w	r12,r2++
80001f94:	00 00       	add	r0,r0
80001f96:	05 48       	ld.w	r8,--r2
80001f98:	80 00       	ld.sh	r0,r0[0x0]
80001f9a:	1d a4       	ld.ub	r4,lr[0x2]
80001f9c:	80 00       	ld.sh	r0,r0[0x0]
80001f9e:	1d 2c       	ld.uh	r12,lr++
80001fa0:	f0 0b 16 12 	lsr	r11,r8,0x12
80001fa4:	28 4b       	sub	r11,-124
80001fa6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001faa:	78 29       	ld.w	r9,r12[0x8]
80001fac:	18 39       	cp.w	r9,r12
80001fae:	c0 e1       	brne	80001fca <_free_r+0x17e>
80001fb0:	74 18       	ld.w	r8,r10[0x4]
80001fb2:	a3 4b       	asr	r11,0x2
80001fb4:	30 1c       	mov	r12,1
80001fb6:	f8 0b 09 4b 	lsl	r11,r12,r11
80001fba:	f1 eb 10 0b 	or	r11,r8,r11
80001fbe:	12 98       	mov	r8,r9
80001fc0:	95 1b       	st.w	r10[0x4],r11
80001fc2:	c0 a8       	rjmp	80001fd6 <_free_r+0x18a>
80001fc4:	72 29       	ld.w	r9,r9[0x8]
80001fc6:	18 39       	cp.w	r9,r12
80001fc8:	c0 60       	breq	80001fd4 <_free_r+0x188>
80001fca:	72 1a       	ld.w	r10,r9[0x4]
80001fcc:	e0 1a ff fc 	andl	r10,0xfffc
80001fd0:	14 38       	cp.w	r8,r10
80001fd2:	cf 93       	brcs	80001fc4 <_free_r+0x178>
80001fd4:	72 38       	ld.w	r8,r9[0xc]
80001fd6:	8d 38       	st.w	r6[0xc],r8
80001fd8:	8d 29       	st.w	r6[0x8],r9
80001fda:	93 36       	st.w	r9[0xc],r6
80001fdc:	91 26       	st.w	r8[0x8],r6
80001fde:	0e 9c       	mov	r12,r7
80001fe0:	f0 1f 00 02 	mcall	80001fe8 <_free_r+0x19c>
80001fe4:	d8 22       	popm	r4-r7,pc
80001fe6:	00 00       	add	r0,r0
80001fe8:	80 00       	ld.sh	r0,r0[0x0]
80001fea:	1d 2c       	ld.uh	r12,lr++

Disassembly of section .exception:

80002000 <_evba>:
	...

80002028 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002028:	c7 a8       	rjmp	8000211c <privilegedCalls>
	...

80002100 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002100:	1c 9f       	mov	pc,lr

80002102 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002102:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002106:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000210a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000210e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002112:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002114:	c0 31       	brne	8000211a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002116:	4b 9c       	lddpc	r12,800021f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002118:	18 9f       	mov	pc,r12

8000211a <_int0_exit>:
_int0_exit:
	rete
8000211a:	d6 03       	rete

8000211c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000211c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000211e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002120:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002122:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002124:	9b 3c       	st.w	sp[0xc],r12

80002126 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002126:	4b 6c       	lddpc	r12,800021fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002128:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000212a:	c0 61       	brne	80002136 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000212c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000212e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002130:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002132:	d3 02       	popm	r11-r12
	rete
80002134:	d6 03       	rete

80002136 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002136:	4b 3c       	lddpc	r12,80002200 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002138:	18 3b       	cp.w	r11,r12
	brne privexception
8000213a:	c0 61       	brne	80002146 <privexception>
	ld.w r12,sp[USERSR]
8000213c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000213e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002140:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002142:	d3 02       	popm	r11-r12
	rete
80002144:	d6 03       	rete

80002146 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002146:	c0 08       	rjmp	80002146 <privexception>

80002148 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002148:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000214a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000214e:	4a ec       	lddpc	r12,80002204 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002150:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002152:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002154:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002158:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000215c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002160:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002162:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002164:	1c 9f       	mov	pc,lr

80002166 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002166:	d3 03       	ssrf	0x10
	mov pc,lr
80002168:	1c 9f       	mov	pc,lr

8000216a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000216a:	d5 03       	csrf	0x10
	mov pc,lr
8000216c:	1c 9f       	mov	pc,lr

8000216e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000216e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002172:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002174:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002178:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000217c:	1c 9f       	mov	pc,lr

8000217e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000217e:	4a 3c       	lddpc	r12,80002208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002180:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002182:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002184:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002186:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002188:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000218a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000218c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000218e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002190:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002192:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002194:	33 40       	mov	r0,52
	add r0,r12
80002196:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002198:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000219c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000219e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800021a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800021a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800021a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800021a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800021aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800021ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800021ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800021b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800021b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800021b6:	1c 9f       	mov	pc,lr

800021b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800021b8:	49 4c       	lddpc	r12,80002208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800021ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800021bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800021be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800021c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800021c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800021c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800021c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800021ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800021cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800021ce:	33 40       	mov	r0,52
	add r0,r12
800021d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800021d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800021d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800021d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800021da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800021dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800021de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800021e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800021e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800021e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800021e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800021e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800021ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800021ec:	d4 01       	pushm	lr
	call timerStart
800021ee:	f0 1f 00 08 	mcall	8000220c <contextRestoreFromISR+0x54>
	popm lr
800021f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800021f4:	1c 9f       	mov	pc,lr
800021f6:	00 00       	add	r0,r0
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	10 80       	andn	r0,r8
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	21 66       	sub	r6,22
80002200:	80 00       	ld.sh	r0,r0[0x0]
80002202:	21 6a       	sub	r10,22
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 00       	sub	r0,0
80002208:	00 00       	add	r0,r0
8000220a:	06 20       	rsub	r0,r3
8000220c:	80 00       	ld.sh	r0,r0[0x0]
8000220e:	17 46       	ld.w	r6,--r11
	...
