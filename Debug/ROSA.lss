
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001f70  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002000  80002000  00002400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002400  80002400  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002484  80002484  00002884  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002488  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002994  00003114  2**0
                  ALLOC
  9 .bss          00000090  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da58  000005a8  000005a8  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000638  00000000  00000000  000031b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000bcd  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c1ba  00000000  00000000  000043bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001f05  00000000  00000000  00010577  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004321  00000000  00000000  0001247c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000de0  00000000  00000000  000167a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001e60  00000000  00000000  00017580  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001b74  00000000  00000000  000193e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0053059b  00000000  00000000  0001af54  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000580  00000000  00000000  0054b4ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	17 5c       	ld.sh	r12,--r11

Disassembly of section .text:

80000008 <semaphore_insert_after>:
#include "include/kernel/semaphore.h"

int16_t semaphore_insert_after(semaphore * position, semaphore * new_semaphore)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	ef 4b ff f8 	st.w	r7[-8],r11
	new_semaphore->nextsemaphore = position->nextsemaphore;
80000018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000001c:	70 39       	ld.w	r9,r8[0xc]
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	91 39       	st.w	r8[0xc],r9
	new_semaphore->prevsemaphore = position;
80000024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000028:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000002c:	91 49       	st.w	r8[0x10],r9
	
	position->nextsemaphore = new_semaphore;
8000002e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000032:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000036:	91 39       	st.w	r8[0xc],r9
	new_semaphore->nextsemaphore->prevsemaphore = new_semaphore;
80000038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000003c:	70 38       	ld.w	r8,r8[0xc]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	91 49       	st.w	r8[0x10],r9
}
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	d7 03       	nop

8000004c <semaphoreAdd>:

int16_t semaphoreAdd(semaphore * handle)
{
8000004c:	eb cd 40 80 	pushm	r7,lr
80000050:	1a 97       	mov	r7,sp
80000052:	20 2d       	sub	sp,8
80000054:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = -1;
80000058:	3f f8       	mov	r8,-1
8000005a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( SEMAPHORES == NULL )
8000005e:	49 48       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000060:	70 08       	ld.w	r8,r8[0x0]
80000062:	58 08       	cp.w	r8,0
80000064:	c1 31       	brne	8000008a <semaphoreAdd+0x3e>
	{
		SEMAPHORES = handle;
80000066:	49 28       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000068:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000006c:	91 09       	st.w	r8[0x0],r9
		SEMAPHORES->nextsemaphore = SEMAPHORES;
8000006e:	49 08       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000070:	70 08       	ld.w	r8,r8[0x0]
80000072:	48 f9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
80000074:	72 09       	ld.w	r9,r9[0x0]
80000076:	91 39       	st.w	r8[0xc],r9
		SEMAPHORES->prevsemaphore = SEMAPHORES;
80000078:	48 d8       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000007a:	70 08       	ld.w	r8,r8[0x0]
8000007c:	48 c9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
8000007e:	72 09       	ld.w	r9,r9[0x0]
80000080:	91 49       	st.w	r8[0x10],r9
		
		result = 1;
80000082:	30 18       	mov	r8,1
80000084:	ef 58 ff fe 	st.h	r7[-2],r8
80000088:	c0 c8       	rjmp	800000a0 <semaphoreAdd+0x54>
	}
	else
	{
		semaphore_insert_after(SEMAPHORES->prevsemaphore, handle);
8000008a:	48 98       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000008c:	70 08       	ld.w	r8,r8[0x0]
8000008e:	70 48       	ld.w	r8,r8[0x10]
80000090:	ee fb ff f8 	ld.w	r11,r7[-8]
80000094:	10 9c       	mov	r12,r8
80000096:	f0 1f 00 07 	mcall	800000b0 <semaphoreAdd+0x64>
		
		result = 1;
8000009a:	30 18       	mov	r8,1
8000009c:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
800000a0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800000a4:	10 9c       	mov	r12,r8
800000a6:	2f ed       	sub	sp,-8
800000a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800000ac:	00 00       	add	r0,r0
800000ae:	05 88       	ld.ub	r8,r2[0x0]
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	00 08       	add	r8,r0

800000b4 <ROSA_semaphoreCreate>:

int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * handle, uint8_t ceiling)
{
800000b4:	eb cd 40 80 	pushm	r7,lr
800000b8:	1a 97       	mov	r7,sp
800000ba:	20 3d       	sub	sp,12
800000bc:	ef 4c ff f8 	st.w	r7[-8],r12
800000c0:	16 98       	mov	r8,r11
800000c2:	ef 68 ff f4 	st.b	r7[-12],r8
	interruptDisable();
800000c6:	f0 1f 00 16 	mcall	8000011c <ROSA_semaphoreCreate+0x68>
	int16_t result = -1;
800000ca:	3f f8       	mov	r8,-1
800000cc:	ef 58 ff fe 	st.h	r7[-2],r8
	(*handle) = calloc(1, sizeof(semaphore));
800000d0:	31 4b       	mov	r11,20
800000d2:	30 1c       	mov	r12,1
800000d4:	f0 1f 00 13 	mcall	80000120 <ROSA_semaphoreCreate+0x6c>
800000d8:	18 98       	mov	r8,r12
800000da:	10 99       	mov	r9,r8
800000dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000e0:	91 09       	st.w	r8[0x0],r9
	(*handle)->ceiling = ceiling;
800000e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000e6:	70 09       	ld.w	r9,r8[0x0]
800000e8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800000ec:	b2 88       	st.b	r9[0x0],r8
	result = abs(*handle);
800000ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000f2:	70 08       	ld.w	r8,r8[0x0]
800000f4:	10 9c       	mov	r12,r8
800000f6:	f0 1f 00 0c 	mcall	80000124 <ROSA_semaphoreCreate+0x70>
800000fa:	18 98       	mov	r8,r12
800000fc:	ef 58 ff fe 	st.h	r7[-2],r8
	semaphoreAdd(*handle);
80000100:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000104:	70 08       	ld.w	r8,r8[0x0]
80000106:	10 9c       	mov	r12,r8
80000108:	f0 1f 00 08 	mcall	80000128 <ROSA_semaphoreCreate+0x74>
	interruptEnable();
8000010c:	f0 1f 00 08 	mcall	8000012c <ROSA_semaphoreCreate+0x78>
	
	return result;
80000110:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000114:	10 9c       	mov	r12,r8
80000116:	2f dd       	sub	sp,-12
80000118:	e3 cd 80 80 	ldm	sp++,r7,pc
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	21 66       	sub	r6,22
80000120:	80 00       	ld.sh	r0,r0[0x0]
80000122:	17 e0       	ld.ub	r0,r11[0x6]
80000124:	80 00       	ld.sh	r0,r0[0x0]
80000126:	17 dc       	ld.ub	r12,r11[0x5]
80000128:	80 00       	ld.sh	r0,r0[0x0]
8000012a:	00 4c       	or	r12,r0
8000012c:	80 00       	ld.sh	r0,r0[0x0]
8000012e:	21 6a       	sub	r10,22

80000130 <semaphoreSetCurrentTask>:

int16_t semaphoreSetCurrentTask( semaphore * semaphore_handle, tcb * task_handle )
{
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
80000136:	20 3d       	sub	sp,12
80000138:	ef 4c ff f8 	st.w	r7[-8],r12
8000013c:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = 0;
80000140:	30 08       	mov	r8,0
80000142:	ef 58 ff fe 	st.h	r7[-2],r8
	
	semaphore_handle->current_task = task_handle;
80000146:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000014a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000014e:	91 19       	st.w	r8[0x4],r9
	semaphore_handle->task_priority = task_handle->effective_priority;
80000150:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000154:	f1 38 00 69 	ld.ub	r8,r8[105]
80000158:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000015c:	b2 98       	st.b	r9[0x1],r8
	if( task_handle->effective_priority > semaphore_handle->ceiling )
8000015e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000162:	f1 39 00 69 	ld.ub	r9,r8[105]
80000166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000016a:	11 88       	ld.ub	r8,r8[0x0]
8000016c:	f0 09 18 00 	cp.b	r9,r8
80000170:	e0 88 00 09 	brls	80000182 <semaphoreSetCurrentTask+0x52>
	{
		task_handle->effective_priority = semaphore_handle->ceiling;
80000174:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000178:	11 88       	ld.ub	r8,r8[0x0]
8000017a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000017e:	f3 68 00 69 	st.b	r9[105],r8
	}
	
	return result;
80000182:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000186:	10 9c       	mov	r12,r8
80000188:	2f dd       	sub	sp,-12
8000018a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000018e <semaphoreUnsetCurrentTask>:

int16_t semaphoreUnsetCurrentTask( semaphore * semaphore_handle )
{
8000018e:	eb cd 40 80 	pushm	r7,lr
80000192:	1a 97       	mov	r7,sp
80000194:	20 2d       	sub	sp,8
80000196:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = 0;
8000019a:	30 08       	mov	r8,0
8000019c:	ef 58 ff fe 	st.h	r7[-2],r8
	
	semaphore_handle->current_task->effective_priority = semaphore_handle->task_priority;
800001a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a4:	70 19       	ld.w	r9,r8[0x4]
800001a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001aa:	11 98       	ld.ub	r8,r8[0x1]
800001ac:	f3 68 00 69 	st.b	r9[105],r8
	semaphore_handle->current_task = NULL;
800001b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001b4:	30 09       	mov	r9,0
800001b6:	91 19       	st.w	r8[0x4],r9
	
	return result;
800001b8:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800001bc:	10 9c       	mov	r12,r8
800001be:	2f ed       	sub	sp,-8
800001c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800001c4 <semaphoreBlockTask>:

int16_t semaphoreBlockTask( semaphore * semaphore_handle, tcb * new_task )
{
800001c4:	eb cd 40 80 	pushm	r7,lr
800001c8:	1a 97       	mov	r7,sp
800001ca:	20 3d       	sub	sp,12
800001cc:	ef 4c ff f8 	st.w	r7[-8],r12
800001d0:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = -1;
800001d4:	3f f8       	mov	r8,-1
800001d6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	new_task->blocking_semaphore = semaphore_handle;
800001da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800001de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001e2:	f1 49 00 74 	st.w	r8[116],r9
	
	if( semaphore_handle->BLOCKEDLIST == NULL )
800001e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ea:	70 28       	ld.w	r8,r8[0x8]
800001ec:	58 08       	cp.w	r8,0
800001ee:	c1 71       	brne	8000021c <semaphoreBlockTask+0x58>
	{
		semaphore_handle->BLOCKEDLIST = new_task;
800001f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800001f8:	91 29       	st.w	r8[0x8],r9
		semaphore_handle->BLOCKEDLIST->nexttcb = new_task;
800001fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fe:	70 28       	ld.w	r8,r8[0x8]
80000200:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000204:	91 09       	st.w	r8[0x0],r9
		semaphore_handle->BLOCKEDLIST->prevtcb = new_task;
80000206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000020a:	70 28       	ld.w	r8,r8[0x8]
8000020c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000210:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000214:	30 18       	mov	r8,1
80000216:	ef 58 ff fe 	st.h	r7[-2],r8
8000021a:	c0 d8       	rjmp	80000234 <semaphoreBlockTask+0x70>
	}
	else
	{
		insert_after(semaphore_handle->BLOCKEDLIST->prevtcb, new_task);
8000021c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000220:	70 28       	ld.w	r8,r8[0x8]
80000222:	71 98       	ld.w	r8,r8[0x64]
80000224:	ee fb ff f4 	ld.w	r11,r7[-12]
80000228:	10 9c       	mov	r12,r8
8000022a:	f0 1f 00 06 	mcall	80000240 <semaphoreBlockTask+0x7c>
		
		result = 1;
8000022e:	30 18       	mov	r8,1
80000230:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
80000234:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000238:	10 9c       	mov	r12,r8
8000023a:	2f dd       	sub	sp,-12
8000023c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000240:	80 00       	ld.sh	r0,r0[0x0]
80000242:	08 ac       	st.w	r4++,r12

80000244 <semaphoreUnblockTask>:

int16_t semaphoreUnblockTask( semaphore * semaphore_handle, tcb * task_handle )
{
80000244:	eb cd 40 80 	pushm	r7,lr
80000248:	1a 97       	mov	r7,sp
8000024a:	20 3d       	sub	sp,12
8000024c:	ef 4c ff f8 	st.w	r7[-8],r12
80000250:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = 0;
80000254:	30 08       	mov	r8,0
80000256:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// only one blocked task
	if( semaphore_handle->BLOCKEDLIST == semaphore_handle->BLOCKEDLIST->prevtcb )
8000025a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000025e:	70 29       	ld.w	r9,r8[0x8]
80000260:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000264:	70 28       	ld.w	r8,r8[0x8]
80000266:	71 98       	ld.w	r8,r8[0x64]
80000268:	10 39       	cp.w	r9,r8
8000026a:	c0 61       	brne	80000276 <semaphoreUnblockTask+0x32>
	{
		semaphore_handle->BLOCKEDLIST = NULL;
8000026c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000270:	30 09       	mov	r9,0
80000272:	91 29       	st.w	r8[0x8],r9
80000274:	c0 f8       	rjmp	80000292 <semaphoreUnblockTask+0x4e>
	}
	// more than one blocked task
	else if( task_handle == semaphore_handle->BLOCKEDLIST )
80000276:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000027a:	70 29       	ld.w	r9,r8[0x8]
8000027c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000280:	10 39       	cp.w	r9,r8
80000282:	c0 81       	brne	80000292 <semaphoreUnblockTask+0x4e>
	{
		semaphore_handle->BLOCKEDLIST = semaphore_handle->BLOCKEDLIST->nexttcb;
80000284:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000288:	70 28       	ld.w	r8,r8[0x8]
8000028a:	70 09       	ld.w	r9,r8[0x0]
8000028c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000290:	91 29       	st.w	r8[0x8],r9
	}
	
	remove( task_handle );
80000292:	ee fc ff f4 	ld.w	r12,r7[-12]
80000296:	f0 1f 00 07 	mcall	800002b0 <semaphoreUnblockTask+0x6c>
	
	task_handle->blocking_semaphore = NULL;
8000029a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000029e:	30 09       	mov	r9,0
800002a0:	f1 49 00 74 	st.w	r8[116],r9
	
	return result;
800002a4:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800002a8:	10 9c       	mov	r12,r8
800002aa:	2f dd       	sub	sp,-12
800002ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800002b0:	80 00       	ld.sh	r0,r0[0x0]
800002b2:	0d b8       	ld.ub	r8,r6[0x3]

800002b4 <ROSA_semaphoreLock>:
{
	return (handle->current_task != NULL);
}

int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t handle)
{
800002b4:	eb cd 40 80 	pushm	r7,lr
800002b8:	1a 97       	mov	r7,sp
800002ba:	20 2d       	sub	sp,8
800002bc:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
800002c0:	f0 1f 00 28 	mcall	80000360 <ROSA_semaphoreLock+0xac>
	int16_t result = 0;
800002c4:	30 08       	mov	r8,0
800002c6:	ef 58 ff fe 	st.h	r7[-2],r8
	if( handle->current_task == NULL )
800002ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002ce:	70 18       	ld.w	r8,r8[0x4]
800002d0:	58 08       	cp.w	r8,0
800002d2:	c1 61       	brne	800002fe <ROSA_semaphoreLock+0x4a>
	{
		// If the semaphore is not locked, executing task can lock it
		// Task inherits the priority ceiling of the semaphore
		// Dynamic priority of the task is changed if priority of the task is lower than the ceiling of the semaphore
		
		taskUninstall(EXECTASK);
800002d4:	4a 48       	lddpc	r8,80000364 <ROSA_semaphoreLock+0xb0>
800002d6:	70 08       	ld.w	r8,r8[0x0]
800002d8:	10 9c       	mov	r12,r8
800002da:	f0 1f 00 24 	mcall	80000368 <ROSA_semaphoreLock+0xb4>
		semaphoreSetCurrentTask(handle, EXECTASK);
800002de:	4a 28       	lddpc	r8,80000364 <ROSA_semaphoreLock+0xb0>
800002e0:	70 08       	ld.w	r8,r8[0x0]
800002e2:	10 9b       	mov	r11,r8
800002e4:	ee fc ff f8 	ld.w	r12,r7[-8]
800002e8:	f0 1f 00 21 	mcall	8000036c <ROSA_semaphoreLock+0xb8>
		taskInstall(EXECTASK);
800002ec:	49 e8       	lddpc	r8,80000364 <ROSA_semaphoreLock+0xb0>
800002ee:	70 08       	ld.w	r8,r8[0x0]
800002f0:	10 9c       	mov	r12,r8
800002f2:	f0 1f 00 20 	mcall	80000370 <ROSA_semaphoreLock+0xbc>

		result = 1;
800002f6:	30 18       	mov	r8,1
800002f8:	ef 58 ff fe 	st.h	r7[-2],r8
800002fc:	c2 28       	rjmp	80000340 <ROSA_semaphoreLock+0x8c>
	}
	else if( EXECTASK != handle->current_task )
800002fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000302:	70 19       	ld.w	r9,r8[0x4]
80000304:	49 88       	lddpc	r8,80000364 <ROSA_semaphoreLock+0xb0>
80000306:	70 08       	ld.w	r8,r8[0x0]
80000308:	10 39       	cp.w	r9,r8
8000030a:	c1 10       	breq	8000032c <ROSA_semaphoreLock+0x78>
	{
		// If the semaphore is locked, executing task cannot lock it
		// Task is put into the waiting queue for the specific semaphore
		// Task is also removed from the ready list
		
		taskUninstall(EXECTASK);
8000030c:	49 68       	lddpc	r8,80000364 <ROSA_semaphoreLock+0xb0>
8000030e:	70 08       	ld.w	r8,r8[0x0]
80000310:	10 9c       	mov	r12,r8
80000312:	f0 1f 00 16 	mcall	80000368 <ROSA_semaphoreLock+0xb4>
		semaphoreBlockTask(handle, EXECTASK);
80000316:	49 48       	lddpc	r8,80000364 <ROSA_semaphoreLock+0xb0>
80000318:	70 08       	ld.w	r8,r8[0x0]
8000031a:	10 9b       	mov	r11,r8
8000031c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000320:	f0 1f 00 15 	mcall	80000374 <ROSA_semaphoreLock+0xc0>
		
		result = 1;
80000324:	30 18       	mov	r8,1
80000326:	ef 58 ff fe 	st.h	r7[-2],r8
8000032a:	c0 b8       	rjmp	80000340 <ROSA_semaphoreLock+0x8c>
	}
	else if( EXECTASK == handle->current_task)
8000032c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000330:	70 19       	ld.w	r9,r8[0x4]
80000332:	48 d8       	lddpc	r8,80000364 <ROSA_semaphoreLock+0xb0>
80000334:	70 08       	ld.w	r8,r8[0x0]
80000336:	10 39       	cp.w	r9,r8
80000338:	c0 41       	brne	80000340 <ROSA_semaphoreLock+0x8c>
	{
		result = 2;
8000033a:	30 28       	mov	r8,2
8000033c:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	interruptEnable();
80000340:	f0 1f 00 0e 	mcall	80000378 <ROSA_semaphoreLock+0xc4>
	if(result == 1)
80000344:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80000348:	30 18       	mov	r8,1
8000034a:	f0 09 19 00 	cp.h	r9,r8
8000034e:	c0 31       	brne	80000354 <ROSA_semaphoreLock+0xa0>
	{
		ROSA_yield();
80000350:	f0 1f 00 0b 	mcall	8000037c <ROSA_semaphoreLock+0xc8>
	}
	
	return result;
80000354:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000358:	10 9c       	mov	r12,r8
8000035a:	2f ed       	sub	sp,-8
8000035c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000360:	80 00       	ld.sh	r0,r0[0x0]
80000362:	21 66       	sub	r6,22
80000364:	00 00       	add	r0,r0
80000366:	05 8c       	ld.ub	r12,r2[0x0]
80000368:	80 00       	ld.sh	r0,r0[0x0]
8000036a:	0c 64       	and	r4,r6
8000036c:	80 00       	ld.sh	r0,r0[0x0]
8000036e:	01 30       	ld.ub	r0,r0++
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	09 18       	ld.sh	r8,r4++
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	01 c4       	ld.ub	r4,r0[0x4]
80000378:	80 00       	ld.sh	r0,r0[0x0]
8000037a:	21 6a       	sub	r10,22
8000037c:	80 00       	ld.sh	r0,r0[0x0]
8000037e:	0f 5e       	ld.sh	lr,--r7

80000380 <ROSA_semaphoreUnlock>:

int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t handle)
{
80000380:	eb cd 40 80 	pushm	r7,lr
80000384:	1a 97       	mov	r7,sp
80000386:	20 3d       	sub	sp,12
80000388:	ef 4c ff f4 	st.w	r7[-12],r12
	interruptDisable();
8000038c:	f0 1f 00 22 	mcall	80000414 <ROSA_semaphoreUnlock+0x94>
	int16_t result = 0;
80000390:	30 08       	mov	r8,0
80000392:	ef 58 ff fa 	st.h	r7[-6],r8
	if( handle->current_task == EXECTASK )
80000396:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000039a:	70 19       	ld.w	r9,r8[0x4]
8000039c:	49 f8       	lddpc	r8,80000418 <ROSA_semaphoreUnlock+0x98>
8000039e:	70 08       	ld.w	r8,r8[0x0]
800003a0:	10 39       	cp.w	r9,r8
800003a2:	c1 21       	brne	800003c6 <ROSA_semaphoreUnlock+0x46>
	{
		// If the semaphore is locked, unlock it, change the priority of the task to the last effective priority
		// Set the pointer to the current task to NULL
		taskUninstall(EXECTASK);
800003a4:	49 d8       	lddpc	r8,80000418 <ROSA_semaphoreUnlock+0x98>
800003a6:	70 08       	ld.w	r8,r8[0x0]
800003a8:	10 9c       	mov	r12,r8
800003aa:	f0 1f 00 1d 	mcall	8000041c <ROSA_semaphoreUnlock+0x9c>
		semaphoreUnsetCurrentTask(handle);
800003ae:	ee fc ff f4 	ld.w	r12,r7[-12]
800003b2:	f0 1f 00 1c 	mcall	80000420 <ROSA_semaphoreUnlock+0xa0>
		taskInstall(EXECTASK);
800003b6:	49 98       	lddpc	r8,80000418 <ROSA_semaphoreUnlock+0x98>
800003b8:	70 08       	ld.w	r8,r8[0x0]
800003ba:	10 9c       	mov	r12,r8
800003bc:	f0 1f 00 1a 	mcall	80000424 <ROSA_semaphoreUnlock+0xa4>
		
		result = 1;
800003c0:	30 18       	mov	r8,1
800003c2:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	if(handle->BLOCKEDLIST != NULL)
800003c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003ca:	70 28       	ld.w	r8,r8[0x8]
800003cc:	58 08       	cp.w	r8,0
800003ce:	c1 90       	breq	80000400 <ROSA_semaphoreUnlock+0x80>
	{
		// If there are still some task waiting to take the semaphore, take the first one from the waiting queue
		// Put the task back to ready list
		
		tcb * temp = handle->BLOCKEDLIST;
800003d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003d4:	70 28       	ld.w	r8,r8[0x8]
800003d6:	ef 48 ff fc 	st.w	r7[-4],r8
		semaphoreUnblockTask( handle, temp );
800003da:	ee fb ff fc 	ld.w	r11,r7[-4]
800003de:	ee fc ff f4 	ld.w	r12,r7[-12]
800003e2:	f0 1f 00 12 	mcall	80000428 <ROSA_semaphoreUnlock+0xa8>
		semaphoreSetCurrentTask(handle, temp);
800003e6:	ee fb ff fc 	ld.w	r11,r7[-4]
800003ea:	ee fc ff f4 	ld.w	r12,r7[-12]
800003ee:	f0 1f 00 10 	mcall	8000042c <ROSA_semaphoreUnlock+0xac>
		
		taskInstall( temp );
800003f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800003f6:	f0 1f 00 0c 	mcall	80000424 <ROSA_semaphoreUnlock+0xa4>
		result = 1;
800003fa:	30 18       	mov	r8,1
800003fc:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	//ROSA_yield();
	interruptEnable();
80000400:	f0 1f 00 0c 	mcall	80000430 <ROSA_semaphoreUnlock+0xb0>
	ROSA_yield();
80000404:	f0 1f 00 0c 	mcall	80000434 <ROSA_semaphoreUnlock+0xb4>
	
	return result;
80000408:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
8000040c:	10 9c       	mov	r12,r8
8000040e:	2f dd       	sub	sp,-12
80000410:	e3 cd 80 80 	ldm	sp++,r7,pc
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	21 66       	sub	r6,22
80000418:	00 00       	add	r0,r0
8000041a:	05 8c       	ld.ub	r12,r2[0x0]
8000041c:	80 00       	ld.sh	r0,r0[0x0]
8000041e:	0c 64       	and	r4,r6
80000420:	80 00       	ld.sh	r0,r0[0x0]
80000422:	01 8e       	ld.ub	lr,r0[0x0]
80000424:	80 00       	ld.sh	r0,r0[0x0]
80000426:	09 18       	ld.sh	r8,r4++
80000428:	80 00       	ld.sh	r0,r0[0x0]
8000042a:	02 44       	or	r4,r1
8000042c:	80 00       	ld.sh	r0,r0[0x0]
8000042e:	01 30       	ld.ub	r0,r0++
80000430:	80 00       	ld.sh	r0,r0[0x0]
80000432:	21 6a       	sub	r10,22
80000434:	80 00       	ld.sh	r0,r0[0x0]
80000436:	0f 5e       	ld.sh	lr,--r7

80000438 <usart_options>:
80000438:	00 00 e1 00 08 04 00 00 00 00 00 00 68 6f 67 53     ............hogS
80000448:	00 00 00 00 74 73 6b 31 00 00 00 00 74 73 6b 32     ....tsk1....tsk2
80000458:	00 00 00 00 74 73 6b 33 00 00 00 00                 ....tsk3....

80000464 <hog_semaphores_task>:
ROSA_semaphoreHandle_t S2 = NULL;
ROSA_semaphoreHandle_t S3 = NULL;
ROSA_semaphoreHandle_t S4 = NULL;

void hog_semaphores_task(void)
{
80000464:	eb cd 40 80 	pushm	r7,lr
80000468:	1a 97       	mov	r7,sp
	while(1)
	{
		ROSA_semaphoreLock(S4);
8000046a:	4a 48       	lddpc	r8,800004f8 <hog_semaphores_task+0x94>
8000046c:	70 08       	ld.w	r8,r8[0x0]
8000046e:	10 9c       	mov	r12,r8
80000470:	f0 1f 00 23 	mcall	800004fc <hog_semaphores_task+0x98>
		ROSA_delay(300);
80000474:	e0 6a 01 2c 	mov	r10,300
80000478:	30 0b       	mov	r11,0
8000047a:	f0 1f 00 22 	mcall	80000500 <hog_semaphores_task+0x9c>
		ROSA_semaphoreLock(S1);
8000047e:	4a 28       	lddpc	r8,80000504 <hog_semaphores_task+0xa0>
80000480:	70 08       	ld.w	r8,r8[0x0]
80000482:	10 9c       	mov	r12,r8
80000484:	f0 1f 00 1e 	mcall	800004fc <hog_semaphores_task+0x98>
		ROSA_delay(300);
80000488:	e0 6a 01 2c 	mov	r10,300
8000048c:	30 0b       	mov	r11,0
8000048e:	f0 1f 00 1d 	mcall	80000500 <hog_semaphores_task+0x9c>
		ROSA_semaphoreLock(S2);
80000492:	49 e8       	lddpc	r8,80000508 <hog_semaphores_task+0xa4>
80000494:	70 08       	ld.w	r8,r8[0x0]
80000496:	10 9c       	mov	r12,r8
80000498:	f0 1f 00 19 	mcall	800004fc <hog_semaphores_task+0x98>
		ROSA_delay(300);
8000049c:	e0 6a 01 2c 	mov	r10,300
800004a0:	30 0b       	mov	r11,0
800004a2:	f0 1f 00 18 	mcall	80000500 <hog_semaphores_task+0x9c>
		ROSA_semaphoreLock(S3);
800004a6:	49 a8       	lddpc	r8,8000050c <hog_semaphores_task+0xa8>
800004a8:	70 08       	ld.w	r8,r8[0x0]
800004aa:	10 9c       	mov	r12,r8
800004ac:	f0 1f 00 14 	mcall	800004fc <hog_semaphores_task+0x98>
		ROSA_delay(300);
800004b0:	e0 6a 01 2c 	mov	r10,300
800004b4:	30 0b       	mov	r11,0
800004b6:	f0 1f 00 13 	mcall	80000500 <hog_semaphores_task+0x9c>
		ROSA_semaphoreUnlock(S4);
800004ba:	49 08       	lddpc	r8,800004f8 <hog_semaphores_task+0x94>
800004bc:	70 08       	ld.w	r8,r8[0x0]
800004be:	10 9c       	mov	r12,r8
800004c0:	f0 1f 00 14 	mcall	80000510 <hog_semaphores_task+0xac>
		ROSA_delay(1000);
800004c4:	e0 6a 03 e8 	mov	r10,1000
800004c8:	30 0b       	mov	r11,0
800004ca:	f0 1f 00 0e 	mcall	80000500 <hog_semaphores_task+0x9c>
		ROSA_semaphoreUnlock(S4);
800004ce:	48 b8       	lddpc	r8,800004f8 <hog_semaphores_task+0x94>
800004d0:	70 08       	ld.w	r8,r8[0x0]
800004d2:	10 9c       	mov	r12,r8
800004d4:	f0 1f 00 0f 	mcall	80000510 <hog_semaphores_task+0xac>
		ROSA_semaphoreUnlock(S3);
800004d8:	48 d8       	lddpc	r8,8000050c <hog_semaphores_task+0xa8>
800004da:	70 08       	ld.w	r8,r8[0x0]
800004dc:	10 9c       	mov	r12,r8
800004de:	f0 1f 00 0d 	mcall	80000510 <hog_semaphores_task+0xac>
		ROSA_semaphoreUnlock(S2);
800004e2:	48 a8       	lddpc	r8,80000508 <hog_semaphores_task+0xa4>
800004e4:	70 08       	ld.w	r8,r8[0x0]
800004e6:	10 9c       	mov	r12,r8
800004e8:	f0 1f 00 0a 	mcall	80000510 <hog_semaphores_task+0xac>
		ROSA_semaphoreUnlock(S1);
800004ec:	48 68       	lddpc	r8,80000504 <hog_semaphores_task+0xa0>
800004ee:	70 08       	ld.w	r8,r8[0x0]
800004f0:	10 9c       	mov	r12,r8
800004f2:	f0 1f 00 08 	mcall	80000510 <hog_semaphores_task+0xac>
	}
800004f6:	cb ab       	rjmp	8000046a <hog_semaphores_task+0x6>
800004f8:	00 00       	add	r0,r0
800004fa:	05 2c       	ld.uh	r12,r2++
800004fc:	80 00       	ld.sh	r0,r0[0x0]
800004fe:	02 b4       	st.h	r1++,r4
80000500:	80 00       	ld.sh	r0,r0[0x0]
80000502:	0e 20       	rsub	r0,r7
80000504:	00 00       	add	r0,r0
80000506:	05 20       	ld.uh	r0,r2++
80000508:	00 00       	add	r0,r0
8000050a:	05 24       	ld.uh	r4,r2++
8000050c:	00 00       	add	r0,r0
8000050e:	05 28       	ld.uh	r8,r2++
80000510:	80 00       	ld.sh	r0,r0[0x0]
80000512:	03 80       	ld.ub	r0,r1[0x0]

80000514 <task1>:
}

void task1(void)
{
80000514:	eb cd 40 80 	pushm	r7,lr
80000518:	1a 97       	mov	r7,sp
8000051a:	20 2d       	sub	sp,8
	uint64_t time = ROSA_getTickCount();
8000051c:	f0 1f 00 18 	mcall	8000057c <task1+0x68>
80000520:	14 98       	mov	r8,r10
80000522:	16 99       	mov	r9,r11
80000524:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S1);
80000528:	49 68       	lddpc	r8,80000580 <task1+0x6c>
8000052a:	70 08       	ld.w	r8,r8[0x0]
8000052c:	10 9c       	mov	r12,r8
8000052e:	f0 1f 00 16 	mcall	80000584 <task1+0x70>
		
		if( ROSA_getTickCount() - time < 1000 )
80000532:	f0 1f 00 13 	mcall	8000057c <task1+0x68>
80000536:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000053a:	f4 08 01 08 	sub	r8,r10,r8
8000053e:	f6 09 01 49 	sbc	r9,r11,r9
80000542:	e0 48 03 e7 	cp.w	r8,999
80000546:	5c 29       	cpc	r9
80000548:	e0 8b 00 06 	brhi	80000554 <task1+0x40>
		{
			ledToggle(LED0_GPIO);
8000054c:	33 bc       	mov	r12,59
8000054e:	f0 1f 00 0f 	mcall	80000588 <task1+0x74>
80000552:	c0 f8       	rjmp	80000570 <task1+0x5c>
		}
		else
		{
			ledOff(LED0_GPIO);
80000554:	33 bc       	mov	r12,59
80000556:	f0 1f 00 0e 	mcall	8000058c <task1+0x78>
			time = ROSA_getTickCount();
8000055a:	f0 1f 00 09 	mcall	8000057c <task1+0x68>
8000055e:	14 98       	mov	r8,r10
80000560:	16 99       	mov	r9,r11
80000562:	ee e9 ff f8 	st.d	r7[-8],r8
			ROSA_semaphoreUnlock(S1);
80000566:	48 78       	lddpc	r8,80000580 <task1+0x6c>
80000568:	70 08       	ld.w	r8,r8[0x0]
8000056a:	10 9c       	mov	r12,r8
8000056c:	f0 1f 00 09 	mcall	80000590 <task1+0x7c>
		}
		ROSA_delay(100);
80000570:	36 4a       	mov	r10,100
80000572:	30 0b       	mov	r11,0
80000574:	f0 1f 00 08 	mcall	80000594 <task1+0x80>
	}
80000578:	cd 8b       	rjmp	80000528 <task1+0x14>
8000057a:	00 00       	add	r0,r0
8000057c:	80 00       	ld.sh	r0,r0[0x0]
8000057e:	08 94       	mov	r4,r4
80000580:	00 00       	add	r0,r0
80000582:	05 20       	ld.uh	r0,r2++
80000584:	80 00       	ld.sh	r0,r0[0x0]
80000586:	02 b4       	st.h	r1++,r4
80000588:	80 00       	ld.sh	r0,r0[0x0]
8000058a:	13 ac       	ld.ub	r12,r9[0x2]
8000058c:	80 00       	ld.sh	r0,r0[0x0]
8000058e:	13 8c       	ld.ub	r12,r9[0x0]
80000590:	80 00       	ld.sh	r0,r0[0x0]
80000592:	03 80       	ld.ub	r0,r1[0x0]
80000594:	80 00       	ld.sh	r0,r0[0x0]
80000596:	0e 20       	rsub	r0,r7

80000598 <task2>:
}

void task2(void)
{
80000598:	eb cd 40 80 	pushm	r7,lr
8000059c:	1a 97       	mov	r7,sp
8000059e:	20 2d       	sub	sp,8
	uint64_t time = ROSA_getTickCount();
800005a0:	f0 1f 00 18 	mcall	80000600 <task2+0x68>
800005a4:	14 98       	mov	r8,r10
800005a6:	16 99       	mov	r9,r11
800005a8:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S2);
800005ac:	49 68       	lddpc	r8,80000604 <task2+0x6c>
800005ae:	70 08       	ld.w	r8,r8[0x0]
800005b0:	10 9c       	mov	r12,r8
800005b2:	f0 1f 00 16 	mcall	80000608 <task2+0x70>
		
		if( ROSA_getTickCount() - time < 1000 )
800005b6:	f0 1f 00 13 	mcall	80000600 <task2+0x68>
800005ba:	ee e8 ff f8 	ld.d	r8,r7[-8]
800005be:	f4 08 01 08 	sub	r8,r10,r8
800005c2:	f6 09 01 49 	sbc	r9,r11,r9
800005c6:	e0 48 03 e7 	cp.w	r8,999
800005ca:	5c 29       	cpc	r9
800005cc:	e0 8b 00 06 	brhi	800005d8 <task2+0x40>
		{
			ledToggle(LED1_GPIO);
800005d0:	33 cc       	mov	r12,60
800005d2:	f0 1f 00 0f 	mcall	8000060c <task2+0x74>
800005d6:	c0 f8       	rjmp	800005f4 <task2+0x5c>
		}
		else
		{
			ledOff(LED1_GPIO);
800005d8:	33 cc       	mov	r12,60
800005da:	f0 1f 00 0e 	mcall	80000610 <task2+0x78>
			time = ROSA_getTickCount();
800005de:	f0 1f 00 09 	mcall	80000600 <task2+0x68>
800005e2:	14 98       	mov	r8,r10
800005e4:	16 99       	mov	r9,r11
800005e6:	ee e9 ff f8 	st.d	r7[-8],r8
			ROSA_semaphoreUnlock(S2);
800005ea:	48 78       	lddpc	r8,80000604 <task2+0x6c>
800005ec:	70 08       	ld.w	r8,r8[0x0]
800005ee:	10 9c       	mov	r12,r8
800005f0:	f0 1f 00 09 	mcall	80000614 <task2+0x7c>
		}
		ROSA_delay(100);
800005f4:	36 4a       	mov	r10,100
800005f6:	30 0b       	mov	r11,0
800005f8:	f0 1f 00 08 	mcall	80000618 <task2+0x80>
	}
800005fc:	cd 8b       	rjmp	800005ac <task2+0x14>
800005fe:	00 00       	add	r0,r0
80000600:	80 00       	ld.sh	r0,r0[0x0]
80000602:	08 94       	mov	r4,r4
80000604:	00 00       	add	r0,r0
80000606:	05 24       	ld.uh	r4,r2++
80000608:	80 00       	ld.sh	r0,r0[0x0]
8000060a:	02 b4       	st.h	r1++,r4
8000060c:	80 00       	ld.sh	r0,r0[0x0]
8000060e:	13 ac       	ld.ub	r12,r9[0x2]
80000610:	80 00       	ld.sh	r0,r0[0x0]
80000612:	13 8c       	ld.ub	r12,r9[0x0]
80000614:	80 00       	ld.sh	r0,r0[0x0]
80000616:	03 80       	ld.ub	r0,r1[0x0]
80000618:	80 00       	ld.sh	r0,r0[0x0]
8000061a:	0e 20       	rsub	r0,r7

8000061c <task3>:
}

void task3(void)
{
8000061c:	eb cd 40 80 	pushm	r7,lr
80000620:	1a 97       	mov	r7,sp
80000622:	20 2d       	sub	sp,8
	uint64_t time = ROSA_getTickCount();
80000624:	f0 1f 00 18 	mcall	80000684 <task3+0x68>
80000628:	14 98       	mov	r8,r10
8000062a:	16 99       	mov	r9,r11
8000062c:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S3);
80000630:	49 68       	lddpc	r8,80000688 <task3+0x6c>
80000632:	70 08       	ld.w	r8,r8[0x0]
80000634:	10 9c       	mov	r12,r8
80000636:	f0 1f 00 16 	mcall	8000068c <task3+0x70>
		
		if( ROSA_getTickCount() - time < 1000 )
8000063a:	f0 1f 00 13 	mcall	80000684 <task3+0x68>
8000063e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000642:	f4 08 01 08 	sub	r8,r10,r8
80000646:	f6 09 01 49 	sbc	r9,r11,r9
8000064a:	e0 48 03 e7 	cp.w	r8,999
8000064e:	5c 29       	cpc	r9
80000650:	e0 8b 00 06 	brhi	8000065c <task3+0x40>
		{
			ledToggle(LED2_GPIO);
80000654:	33 dc       	mov	r12,61
80000656:	f0 1f 00 0f 	mcall	80000690 <task3+0x74>
8000065a:	c0 f8       	rjmp	80000678 <task3+0x5c>
		}
		else
		{
			ledOff(LED2_GPIO);
8000065c:	33 dc       	mov	r12,61
8000065e:	f0 1f 00 0e 	mcall	80000694 <task3+0x78>
			time = ROSA_getTickCount();
80000662:	f0 1f 00 09 	mcall	80000684 <task3+0x68>
80000666:	14 98       	mov	r8,r10
80000668:	16 99       	mov	r9,r11
8000066a:	ee e9 ff f8 	st.d	r7[-8],r8
			ROSA_semaphoreUnlock(S3);
8000066e:	48 78       	lddpc	r8,80000688 <task3+0x6c>
80000670:	70 08       	ld.w	r8,r8[0x0]
80000672:	10 9c       	mov	r12,r8
80000674:	f0 1f 00 09 	mcall	80000698 <task3+0x7c>
		}
		ROSA_delay(100);
80000678:	36 4a       	mov	r10,100
8000067a:	30 0b       	mov	r11,0
8000067c:	f0 1f 00 08 	mcall	8000069c <task3+0x80>
	}
80000680:	cd 8b       	rjmp	80000630 <task3+0x14>
80000682:	00 00       	add	r0,r0
80000684:	80 00       	ld.sh	r0,r0[0x0]
80000686:	08 94       	mov	r4,r4
80000688:	00 00       	add	r0,r0
8000068a:	05 28       	ld.uh	r8,r2++
8000068c:	80 00       	ld.sh	r0,r0[0x0]
8000068e:	02 b4       	st.h	r1++,r4
80000690:	80 00       	ld.sh	r0,r0[0x0]
80000692:	13 ac       	ld.ub	r12,r9[0x2]
80000694:	80 00       	ld.sh	r0,r0[0x0]
80000696:	13 8c       	ld.ub	r12,r9[0x0]
80000698:	80 00       	ld.sh	r0,r0[0x0]
8000069a:	03 80       	ld.ub	r0,r1[0x0]
8000069c:	80 00       	ld.sh	r0,r0[0x0]
8000069e:	0e 20       	rsub	r0,r7

800006a0 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800006a0:	eb cd 40 80 	pushm	r7,lr
800006a4:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800006a6:	f0 1f 00 1a 	mcall	8000070c <main+0x6c>
	
	ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 2);
800006aa:	30 28       	mov	r8,2
800006ac:	34 09       	mov	r9,64
800006ae:	49 9a       	lddpc	r10,80000710 <main+0x70>
800006b0:	49 9b       	lddpc	r11,80000714 <main+0x74>
800006b2:	49 ac       	lddpc	r12,80000718 <main+0x78>
800006b4:	f0 1f 00 1a 	mcall	8000071c <main+0x7c>
	ROSA_taskCreate(& task1_handle,					"tsk1", task1, STACK_SIZE, 3);
800006b8:	30 38       	mov	r8,3
800006ba:	34 09       	mov	r9,64
800006bc:	49 9a       	lddpc	r10,80000720 <main+0x80>
800006be:	49 ab       	lddpc	r11,80000724 <main+0x84>
800006c0:	49 ac       	lddpc	r12,80000728 <main+0x88>
800006c2:	f0 1f 00 17 	mcall	8000071c <main+0x7c>
	ROSA_taskCreate(& task2_handle,					"tsk2", task2, STACK_SIZE, 3);
800006c6:	30 38       	mov	r8,3
800006c8:	34 09       	mov	r9,64
800006ca:	49 9a       	lddpc	r10,8000072c <main+0x8c>
800006cc:	49 9b       	lddpc	r11,80000730 <main+0x90>
800006ce:	49 ac       	lddpc	r12,80000734 <main+0x94>
800006d0:	f0 1f 00 13 	mcall	8000071c <main+0x7c>
	ROSA_taskCreate(& task3_handle,					"tsk3", task3, STACK_SIZE, 3);
800006d4:	30 38       	mov	r8,3
800006d6:	34 09       	mov	r9,64
800006d8:	49 8a       	lddpc	r10,80000738 <main+0x98>
800006da:	49 9b       	lddpc	r11,8000073c <main+0x9c>
800006dc:	49 9c       	lddpc	r12,80000740 <main+0xa0>
800006de:	f0 1f 00 10 	mcall	8000071c <main+0x7c>
	//ROSA_taskCreate(& arbiter_task_handle,			"arbt", arbiter_task, STACK_SIZE, 1);
	
	//ROSA_taskCreate(& light1_handle, "lgt1", light1, STACK_SIZE, 1);
	//ROSA_taskCreate(& light2_handle, "lgt2", light2, STACK_SIZE, 1);
	
	ROSA_semaphoreCreate(& S1, 2);
800006e2:	30 2b       	mov	r11,2
800006e4:	49 8c       	lddpc	r12,80000744 <main+0xa4>
800006e6:	f0 1f 00 19 	mcall	80000748 <main+0xa8>
	ROSA_semaphoreCreate(& S2, 2);
800006ea:	30 2b       	mov	r11,2
800006ec:	49 8c       	lddpc	r12,8000074c <main+0xac>
800006ee:	f0 1f 00 17 	mcall	80000748 <main+0xa8>
	ROSA_semaphoreCreate(& S3, 2);
800006f2:	30 2b       	mov	r11,2
800006f4:	49 7c       	lddpc	r12,80000750 <main+0xb0>
800006f6:	f0 1f 00 15 	mcall	80000748 <main+0xa8>
	ROSA_semaphoreCreate(& S4, 1);
800006fa:	30 1b       	mov	r11,1
800006fc:	49 6c       	lddpc	r12,80000754 <main+0xb4>
800006fe:	f0 1f 00 13 	mcall	80000748 <main+0xa8>
	
	timerStart();
80000702:	f0 1f 00 16 	mcall	80000758 <main+0xb8>
	ROSA_start();
80000706:	f0 1f 00 16 	mcall	8000075c <main+0xbc>
	/* Execution will never return here */
	while(1);
8000070a:	c0 08       	rjmp	8000070a <main+0x6a>
8000070c:	80 00       	ld.sh	r0,r0[0x0]
8000070e:	07 bc       	ld.ub	r12,r3[0x3]
80000710:	80 00       	ld.sh	r0,r0[0x0]
80000712:	04 64       	and	r4,r2
80000714:	80 00       	ld.sh	r0,r0[0x0]
80000716:	04 44       	or	r4,r2
80000718:	00 00       	add	r0,r0
8000071a:	05 68       	ld.uh	r8,--r2
8000071c:	80 00       	ld.sh	r0,r0[0x0]
8000071e:	0a 3c       	cp.w	r12,r5
80000720:	80 00       	ld.sh	r0,r0[0x0]
80000722:	05 14       	ld.sh	r4,r2++
80000724:	80 00       	ld.sh	r0,r0[0x0]
80000726:	04 4c       	or	r12,r2
80000728:	00 00       	add	r0,r0
8000072a:	05 6c       	ld.uh	r12,--r2
8000072c:	80 00       	ld.sh	r0,r0[0x0]
8000072e:	05 98       	ld.ub	r8,r2[0x1]
80000730:	80 00       	ld.sh	r0,r0[0x0]
80000732:	04 54       	eor	r4,r2
80000734:	00 00       	add	r0,r0
80000736:	05 70       	ld.ub	r0,--r2
80000738:	80 00       	ld.sh	r0,r0[0x0]
8000073a:	06 1c       	sub	r12,r3
8000073c:	80 00       	ld.sh	r0,r0[0x0]
8000073e:	04 5c       	eor	r12,r2
80000740:	00 00       	add	r0,r0
80000742:	05 78       	ld.ub	r8,--r2
80000744:	00 00       	add	r0,r0
80000746:	05 20       	ld.uh	r0,r2++
80000748:	80 00       	ld.sh	r0,r0[0x0]
8000074a:	00 b4       	st.h	r0++,r4
8000074c:	00 00       	add	r0,r0
8000074e:	05 24       	ld.uh	r4,r2++
80000750:	00 00       	add	r0,r0
80000752:	05 28       	ld.uh	r8,r2++
80000754:	00 00       	add	r0,r0
80000756:	05 2c       	ld.uh	r12,r2++
80000758:	80 00       	ld.sh	r0,r0[0x0]
8000075a:	16 d2       	st.w	--r11,r2
8000075c:	80 00       	ld.sh	r0,r0[0x0]
8000075e:	0e 9c       	mov	r12,r7

80000760 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000760:	eb cd 40 80 	pushm	r7,lr
80000764:	1a 97       	mov	r7,sp
	interruptDisable;
	contextSaveFromISR();	  //Save the task context
80000766:	f0 1f 00 0c 	mcall	80000794 <ROSA_yieldFromISR+0x34>
	system_ticks ++;
8000076a:	48 c8       	lddpc	r8,80000798 <ROSA_yieldFromISR+0x38>
8000076c:	f0 ea 00 00 	ld.d	r10,r8[0]
80000770:	30 18       	mov	r8,1
80000772:	30 09       	mov	r9,0
80000774:	f4 08 00 08 	add	r8,r10,r8
80000778:	f6 09 00 49 	adc	r9,r11,r9
8000077c:	48 7a       	lddpc	r10,80000798 <ROSA_yieldFromISR+0x38>
8000077e:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
80000782:	f0 1f 00 07 	mcall	8000079c <ROSA_yieldFromISR+0x3c>
	contextRestoreFromISR();  //...and switch over to it.
80000786:	f0 1f 00 07 	mcall	800007a0 <ROSA_yieldFromISR+0x40>
	interruptEnable();
8000078a:	f0 1f 00 07 	mcall	800007a4 <ROSA_yieldFromISR+0x44>
}
8000078e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000792:	00 00       	add	r0,r0
80000794:	80 00       	ld.sh	r0,r0[0x0]
80000796:	21 7e       	sub	lr,23
80000798:	00 00       	add	r0,r0
8000079a:	05 98       	ld.ub	r8,r2[0x1]
8000079c:	80 00       	ld.sh	r0,r0[0x0]
8000079e:	0f 7c       	ld.ub	r12,--r7
800007a0:	80 00       	ld.sh	r0,r0[0x0]
800007a2:	21 b8       	sub	r8,27
800007a4:	80 00       	ld.sh	r0,r0[0x0]
800007a6:	21 6a       	sub	r10,22

800007a8 <usart_options>:
800007a8:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
800007b8:	00 00 00 00                                         ....

800007bc <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
800007bc:	eb cd 40 80 	pushm	r7,lr
800007c0:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
800007c2:	f0 1f 00 21 	mcall	80000844 <ROSA_init+0x88>
	buttonInit();								//Buttons
800007c6:	f0 1f 00 21 	mcall	80000848 <ROSA_init+0x8c>
	joystickInit();								//Joystick
800007ca:	f0 1f 00 21 	mcall	8000084c <ROSA_init+0x90>
	potInit();									//Potentiometer
800007ce:	f0 1f 00 21 	mcall	80000850 <ROSA_init+0x94>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
800007d2:	e0 6a 1b 00 	mov	r10,6912
800007d6:	ea 1a 00 b7 	orh	r10,0xb7
800007da:	49 fb       	lddpc	r11,80000854 <ROSA_init+0x98>
800007dc:	fe 7c 14 00 	mov	r12,-60416
800007e0:	f0 1f 00 1e 	mcall	80000858 <ROSA_init+0x9c>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST				= NULL;
800007e4:	49 e8       	lddpc	r8,8000085c <ROSA_init+0xa0>
800007e6:	30 09       	mov	r9,0
800007e8:	91 09       	st.w	r8[0x0],r9
	SUSPENDEDLIST		= NULL;
800007ea:	49 e8       	lddpc	r8,80000860 <ROSA_init+0xa4>
800007ec:	30 09       	mov	r9,0
800007ee:	91 09       	st.w	r8[0x0],r9
	EXECTASK			= NULL;
800007f0:	49 d8       	lddpc	r8,80000864 <ROSA_init+0xa8>
800007f2:	30 09       	mov	r9,0
800007f4:	91 09       	st.w	r8[0x0],r9
	ROUNDROBIN_end		= NULL;
800007f6:	49 d8       	lddpc	r8,80000868 <ROSA_init+0xac>
800007f8:	30 09       	mov	r9,0
800007fa:	91 09       	st.w	r8[0x0],r9
	SEMAPHORES			= NULL;
800007fc:	49 c8       	lddpc	r8,8000086c <ROSA_init+0xb0>
800007fe:	30 09       	mov	r9,0
80000800:	91 09       	st.w	r8[0x0],r9
	
#if IDLE_TASK_ENABLED
	IDLETASK = NULL;
80000802:	49 c8       	lddpc	r8,80000870 <ROSA_init+0xb4>
80000804:	30 09       	mov	r9,0
80000806:	91 09       	st.w	r8[0x0],r9
	ROSA_taskCreate(&IDLETASK, "idle", idle, 0x40, 255);
80000808:	e0 68 00 ff 	mov	r8,255
8000080c:	34 09       	mov	r9,64
8000080e:	49 aa       	lddpc	r10,80000874 <ROSA_init+0xb8>
80000810:	49 ab       	lddpc	r11,80000878 <ROSA_init+0xbc>
80000812:	49 8c       	lddpc	r12,80000870 <ROSA_init+0xb4>
80000814:	f0 1f 00 1a 	mcall	8000087c <ROSA_init+0xc0>
	taskUninstall(IDLETASK);
80000818:	49 68       	lddpc	r8,80000870 <ROSA_init+0xb4>
8000081a:	70 08       	ld.w	r8,r8[0x0]
8000081c:	10 9c       	mov	r12,r8
8000081e:	f0 1f 00 19 	mcall	80000880 <ROSA_init+0xc4>
#endif
	
	//initialize system time
	system_ticks = 0;
80000822:	49 9a       	lddpc	r10,80000884 <ROSA_init+0xc8>
80000824:	30 08       	mov	r8,0
80000826:	30 09       	mov	r9,0
80000828:	f4 e9 00 00 	st.d	r10[0],r8
	round_robin_ticks = 0;
8000082c:	49 7a       	lddpc	r10,80000888 <ROSA_init+0xcc>
8000082e:	30 08       	mov	r8,0
80000830:	30 09       	mov	r9,0
80000832:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Initialize the timer to 1 ms period.
	//...
	interruptInit();
80000836:	f0 1f 00 16 	mcall	8000088c <ROSA_init+0xd0>
	timerInit(1);
8000083a:	30 1c       	mov	r12,1
8000083c:	f0 1f 00 15 	mcall	80000890 <ROSA_init+0xd4>
	//...
}
80000840:	e3 cd 80 80 	ldm	sp++,r7,pc
80000844:	80 00       	ld.sh	r0,r0[0x0]
80000846:	13 00       	ld.w	r0,r9++
80000848:	80 00       	ld.sh	r0,r0[0x0]
8000084a:	11 58       	ld.sh	r8,--r8
8000084c:	80 00       	ld.sh	r0,r0[0x0]
8000084e:	11 80       	ld.ub	r0,r8[0x0]
80000850:	80 00       	ld.sh	r0,r0[0x0]
80000852:	13 cc       	ld.ub	r12,r9[0x4]
80000854:	80 00       	ld.sh	r0,r0[0x0]
80000856:	07 a8       	ld.ub	r8,r3[0x2]
80000858:	80 00       	ld.sh	r0,r0[0x0]
8000085a:	15 80       	ld.ub	r0,r10[0x0]
8000085c:	00 00       	add	r0,r0
8000085e:	05 80       	ld.ub	r0,r2[0x0]
80000860:	00 00       	add	r0,r0
80000862:	05 84       	ld.ub	r4,r2[0x0]
80000864:	00 00       	add	r0,r0
80000866:	05 8c       	ld.ub	r12,r2[0x0]
80000868:	00 00       	add	r0,r0
8000086a:	05 a0       	ld.ub	r0,r2[0x2]
8000086c:	00 00       	add	r0,r0
8000086e:	05 88       	ld.ub	r8,r2[0x0]
80000870:	00 00       	add	r0,r0
80000872:	05 7c       	ld.ub	r12,--r2
80000874:	80 00       	ld.sh	r0,r0[0x0]
80000876:	0e 94       	mov	r4,r7
80000878:	80 00       	ld.sh	r0,r0[0x0]
8000087a:	07 b4       	ld.ub	r4,r3[0x3]
8000087c:	80 00       	ld.sh	r0,r0[0x0]
8000087e:	0a 3c       	cp.w	r12,r5
80000880:	80 00       	ld.sh	r0,r0[0x0]
80000882:	0c 64       	and	r4,r6
80000884:	00 00       	add	r0,r0
80000886:	05 98       	ld.ub	r8,r2[0x1]
80000888:	00 00       	add	r0,r0
8000088a:	05 90       	ld.ub	r0,r2[0x1]
8000088c:	80 00       	ld.sh	r0,r0[0x0]
8000088e:	21 48       	sub	r8,20
80000890:	80 00       	ld.sh	r0,r0[0x0]
80000892:	16 a4       	st.w	r11++,r4

80000894 <ROSA_getTickCount>:

uint64_t ROSA_getTickCount(void)
{
80000894:	eb cd 40 80 	pushm	r7,lr
80000898:	1a 97       	mov	r7,sp
	return system_ticks;
8000089a:	48 48       	lddpc	r8,800008a8 <ROSA_getTickCount+0x14>
8000089c:	f0 e8 00 00 	ld.d	r8,r8[0]
}
800008a0:	10 9a       	mov	r10,r8
800008a2:	12 9b       	mov	r11,r9
800008a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800008a8:	00 00       	add	r0,r0
800008aa:	05 98       	ld.ub	r8,r2[0x1]

800008ac <insert_after>:
		//ROUNDROBIN_end = NULL;
	//}
//}

uint16_t insert_after( tcb * position, tcb * new_task )
{
800008ac:	eb cd 40 80 	pushm	r7,lr
800008b0:	1a 97       	mov	r7,sp
800008b2:	20 3d       	sub	sp,12
800008b4:	ef 4c ff f8 	st.w	r7[-8],r12
800008b8:	ef 4b ff f4 	st.w	r7[-12],r11
	uint16_t result = -1;
800008bc:	3f f8       	mov	r8,-1
800008be:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( position != NULL )
800008c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008c6:	58 08       	cp.w	r8,0
800008c8:	c2 10       	breq	8000090a <insert_after+0x5e>
	{
		new_task->prevtcb = position;
800008ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008d2:	f1 49 00 64 	st.w	r8[100],r9
		new_task->nexttcb = position->nexttcb;
800008d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008da:	70 09       	ld.w	r9,r8[0x0]
800008dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008e0:	91 09       	st.w	r8[0x0],r9
		
		position->nexttcb = new_task;
800008e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800008ea:	91 09       	st.w	r8[0x0],r9
		if( new_task->nexttcb != NULL )
800008ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008f0:	70 08       	ld.w	r8,r8[0x0]
800008f2:	58 08       	cp.w	r8,0
800008f4:	c0 80       	breq	80000904 <insert_after+0x58>
		{
			(new_task->nexttcb)->prevtcb = new_task;
800008f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008fa:	70 08       	ld.w	r8,r8[0x0]
800008fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000900:	f1 49 00 64 	st.w	r8[100],r9
		}
		result = 1;
80000904:	30 18       	mov	r8,1
80000906:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	return result;
8000090a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000090e:	10 9c       	mov	r12,r8
80000910:	2f dd       	sub	sp,-12
80000912:	e3 cd 80 80 	ldm	sp++,r7,pc
80000916:	d7 03       	nop

80000918 <taskInstall>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

uint16_t taskInstall(tcb * task)
{
80000918:	eb cd 40 80 	pushm	r7,lr
8000091c:	1a 97       	mov	r7,sp
8000091e:	20 3d       	sub	sp,12
80000920:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
80000924:	3f f8       	mov	r8,-1
80000926:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( TCBLIST == NULL )
8000092a:	4c 28       	lddpc	r8,80000a30 <taskInstall+0x118>
8000092c:	70 08       	ld.w	r8,r8[0x0]
8000092e:	58 08       	cp.w	r8,0
80000930:	c1 71       	brne	8000095e <taskInstall+0x46>
	{
		TCBLIST		  = task;
80000932:	4c 08       	lddpc	r8,80000a30 <taskInstall+0x118>
80000934:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000938:	91 09       	st.w	r8[0x0],r9
		task->nexttcb = task;
8000093a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000093e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000942:	91 09       	st.w	r8[0x0],r9
		task->prevtcb = task;
80000944:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000948:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000094c:	f1 49 00 64 	st.w	r8[100],r9

#if ROUND_ROBIN_MODE_ENABLED
		ROUNDROBIN_end = NULL; // shouldn't be necessary, but is safer
80000950:	4b 98       	lddpc	r8,80000a34 <taskInstall+0x11c>
80000952:	30 09       	mov	r9,0
80000954:	91 09       	st.w	r8[0x0],r9
#endif

		result = 1;
80000956:	30 18       	mov	r8,1
80000958:	ef 58 ff fa 	st.h	r7[-6],r8
8000095c:	c5 58       	rjmp	80000a06 <taskInstall+0xee>
	}
	//if this task should be inserted before the first task in the list
	else if( task->effective_priority < TCBLIST->effective_priority )
8000095e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000962:	f1 39 00 69 	ld.ub	r9,r8[105]
80000966:	4b 38       	lddpc	r8,80000a30 <taskInstall+0x118>
80000968:	70 08       	ld.w	r8,r8[0x0]
8000096a:	f1 38 00 69 	ld.ub	r8,r8[105]
8000096e:	f0 09 18 00 	cp.b	r9,r8
80000972:	c1 12       	brcc	80000994 <taskInstall+0x7c>
	{
		insert_after(TCBLIST->prevtcb, task);
80000974:	4a f8       	lddpc	r8,80000a30 <taskInstall+0x118>
80000976:	70 08       	ld.w	r8,r8[0x0]
80000978:	71 98       	ld.w	r8,r8[0x64]
8000097a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000097e:	10 9c       	mov	r12,r8
80000980:	f0 1f 00 2e 	mcall	80000a38 <taskInstall+0x120>
		TCBLIST = task;
80000984:	4a b8       	lddpc	r8,80000a30 <taskInstall+0x118>
80000986:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000098a:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
8000098c:	30 18       	mov	r8,1
8000098e:	ef 58 ff fa 	st.h	r7[-6],r8
80000992:	c3 a8       	rjmp	80000a06 <taskInstall+0xee>
	}
	else if( task->effective_priority >= (TCBLIST->prevtcb)->effective_priority )
80000994:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000998:	f1 39 00 69 	ld.ub	r9,r8[105]
8000099c:	4a 58       	lddpc	r8,80000a30 <taskInstall+0x118>
8000099e:	70 08       	ld.w	r8,r8[0x0]
800009a0:	71 98       	ld.w	r8,r8[0x64]
800009a2:	f1 38 00 69 	ld.ub	r8,r8[105]
800009a6:	f0 09 18 00 	cp.b	r9,r8
800009aa:	c0 a3       	brcs	800009be <taskInstall+0xa6>
	{
		insert_after(TCBLIST->prevtcb, task);
800009ac:	4a 18       	lddpc	r8,80000a30 <taskInstall+0x118>
800009ae:	70 08       	ld.w	r8,r8[0x0]
800009b0:	71 98       	ld.w	r8,r8[0x64]
800009b2:	ee fb ff f4 	ld.w	r11,r7[-12]
800009b6:	10 9c       	mov	r12,r8
800009b8:	f0 1f 00 20 	mcall	80000a38 <taskInstall+0x120>
800009bc:	c2 58       	rjmp	80000a06 <taskInstall+0xee>
	}
	else
	{
		iterator = TCBLIST;
800009be:	49 d8       	lddpc	r8,80000a30 <taskInstall+0x118>
800009c0:	70 08       	ld.w	r8,r8[0x0]
800009c2:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->effective_priority >= iterator->effective_priority )
800009c6:	c0 68       	rjmp	800009d2 <taskInstall+0xba>
		{
			iterator = iterator->nexttcb;
800009c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009cc:	70 08       	ld.w	r8,r8[0x0]
800009ce:	ef 48 ff fc 	st.w	r7[-4],r8
		insert_after(TCBLIST->prevtcb, task);
	}
	else
	{
		iterator = TCBLIST;
		while( iterator && task->effective_priority >= iterator->effective_priority )
800009d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009d6:	58 08       	cp.w	r8,0
800009d8:	c0 c0       	breq	800009f0 <taskInstall+0xd8>
800009da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009de:	f1 39 00 69 	ld.ub	r9,r8[105]
800009e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009e6:	f1 38 00 69 	ld.ub	r8,r8[105]
800009ea:	f0 09 18 00 	cp.b	r9,r8
800009ee:	ce d2       	brcc	800009c8 <taskInstall+0xb0>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
800009f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009f4:	71 98       	ld.w	r8,r8[0x64]
800009f6:	ee fb ff f4 	ld.w	r11,r7[-12]
800009fa:	10 9c       	mov	r12,r8
800009fc:	f0 1f 00 0f 	mcall	80000a38 <taskInstall+0x120>
		
		result = 1;
80000a00:	30 18       	mov	r8,1
80000a02:	ef 58 ff fa 	st.h	r7[-6],r8
	}

#if ROUND_ROBIN_MODE_ENABLED
	if( TCBLIST->effective_priority == task->effective_priority )
80000a06:	48 b8       	lddpc	r8,80000a30 <taskInstall+0x118>
80000a08:	70 08       	ld.w	r8,r8[0x0]
80000a0a:	f1 39 00 69 	ld.ub	r9,r8[105]
80000a0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a12:	f1 38 00 69 	ld.ub	r8,r8[105]
80000a16:	f0 09 18 00 	cp.b	r9,r8
80000a1a:	c0 51       	brne	80000a24 <taskInstall+0x10c>
	{
		ROUNDROBIN_end = task;
80000a1c:	48 68       	lddpc	r8,80000a34 <taskInstall+0x11c>
80000a1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a22:	91 09       	st.w	r8[0x0],r9
	}
#endif

	return result;
80000a24:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000a28:	10 9c       	mov	r12,r8
80000a2a:	2f dd       	sub	sp,-12
80000a2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a30:	00 00       	add	r0,r0
80000a32:	05 80       	ld.ub	r0,r2[0x0]
80000a34:	00 00       	add	r0,r0
80000a36:	05 a0       	ld.ub	r0,r2[0x2]
80000a38:	80 00       	ld.sh	r0,r0[0x0]
80000a3a:	08 ac       	st.w	r4++,r12

80000a3c <ROSA_taskCreate>:
	
	return result;
}

uint16_t ROSA_taskCreate(ROSA_taskHandle_t* th, char* id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000a3c:	eb cd 40 80 	pushm	r7,lr
80000a40:	1a 97       	mov	r7,sp
80000a42:	20 8d       	sub	sp,32
80000a44:	ef 4c ff f0 	st.w	r7[-16],r12
80000a48:	ef 4b ff ec 	st.w	r7[-20],r11
80000a4c:	ef 4a ff e8 	st.w	r7[-24],r10
80000a50:	ef 49 ff e4 	st.w	r7[-28],r9
80000a54:	ef 68 ff e0 	st.b	r7[-32],r8
	uint16_t result = 0;
80000a58:	30 08       	mov	r8,0
80000a5a:	ef 58 ff f6 	st.h	r7[-10],r8
	
	if(! *th)
80000a5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a62:	70 08       	ld.w	r8,r8[0x0]
80000a64:	58 08       	cp.w	r8,0
80000a66:	c6 91       	brne	80000b38 <ROSA_taskCreate+0xfc>
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
80000a68:	37 8b       	mov	r11,120
80000a6a:	30 1c       	mov	r12,1
80000a6c:	f0 1f 00 36 	mcall	80000b44 <ROSA_taskCreate+0x108>
80000a70:	18 98       	mov	r8,r12
80000a72:	10 99       	mov	r9,r8
80000a74:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a78:	91 09       	st.w	r8[0x0],r9
		tcb* temp = *th;
80000a7a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a7e:	70 08       	ld.w	r8,r8[0x0]
80000a80:	ef 48 ff f8 	st.w	r7[-8],r8
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80000a84:	30 08       	mov	r8,0
80000a86:	ef 48 ff fc 	st.w	r7[-4],r8
80000a8a:	c1 48       	rjmp	80000ab2 <ROSA_taskCreate+0x76>
		{
			temp->id[i] = id[i];		//copy task id
80000a8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000a90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a94:	ee fa ff ec 	ld.w	r10,r7[-20]
80000a98:	f4 08 00 08 	add	r8,r10,r8
80000a9c:	11 88       	ld.ub	r8,r8[0x0]
80000a9e:	ee fa ff f8 	ld.w	r10,r7[-8]
80000aa2:	f4 09 00 09 	add	r9,r10,r9
80000aa6:	b2 c8       	st.b	r9[0x4],r8
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
		tcb* temp = *th;
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80000aa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aac:	2f f8       	sub	r8,-1
80000aae:	ef 48 ff fc 	st.w	r7[-4],r8
80000ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ab6:	58 38       	cp.w	r8,3
80000ab8:	fe 9a ff ea 	brle	80000a8c <ROSA_taskCreate+0x50>
		{
			temp->id[i] = id[i];		//copy task id
		}
		
		temp->staddr = taskFunction;
80000abc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000ac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ac4:	91 29       	st.w	r8[0x8],r9
		temp->retaddr = (int)taskFunction;
80000ac6:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000aca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ace:	91 99       	st.w	r8[0x24],r9
		
		temp->datasize = stackSize;
80000ad0:	ee f9 ff e4 	ld.w	r9,r7[-28]
80000ad4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ad8:	91 49       	st.w	r8[0x10],r9
		temp->dataarea = (int*)calloc(stackSize, sizeof(int)) + stackSize;
80000ada:	30 4b       	mov	r11,4
80000adc:	ee fc ff e4 	ld.w	r12,r7[-28]
80000ae0:	f0 1f 00 19 	mcall	80000b44 <ROSA_taskCreate+0x108>
80000ae4:	18 98       	mov	r8,r12
80000ae6:	10 99       	mov	r9,r8
80000ae8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000aec:	a3 68       	lsl	r8,0x2
80000aee:	10 09       	add	r9,r8
80000af0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000af4:	91 39       	st.w	r8[0xc],r9
		temp->saveusp = temp->dataarea;
80000af6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000afa:	70 39       	ld.w	r9,r8[0xc]
80000afc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b00:	91 59       	st.w	r8[0x14],r9
		
		temp->savesr = ROSA_INITIALSR;
80000b02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b06:	fc 19 00 1c 	movh	r9,0x1c
80000b0a:	91 89       	st.w	r8[0x20],r9
		
		temp->priority = priority;
80000b0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b10:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000b14:	f3 68 00 68 	st.b	r9[104],r8
		temp->effective_priority = priority;
80000b18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b1c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000b20:	f3 68 00 69 	st.b	r9[105],r8
		
		contextInit(temp);
80000b24:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b28:	f0 1f 00 08 	mcall	80000b48 <ROSA_taskCreate+0x10c>
		
		taskInstall(* th);
80000b2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b30:	70 08       	ld.w	r8,r8[0x0]
80000b32:	10 9c       	mov	r12,r8
80000b34:	f0 1f 00 06 	mcall	80000b4c <ROSA_taskCreate+0x110>
	}
	return result;
80000b38:	ef 08 ff f6 	ld.sh	r8,r7[-10]
}
80000b3c:	10 9c       	mov	r12,r8
80000b3e:	2f 8d       	sub	sp,-32
80000b40:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b44:	80 00       	ld.sh	r0,r0[0x0]
80000b46:	17 e0       	ld.ub	r0,r11[0x6]
80000b48:	80 00       	ld.sh	r0,r0[0x0]
80000b4a:	0e d2       	st.w	--r7,r2
80000b4c:	80 00       	ld.sh	r0,r0[0x0]
80000b4e:	09 18       	ld.sh	r8,r4++

80000b50 <taskSuspend>:

uint16_t taskSuspend(tcb * task)
{
80000b50:	eb cd 40 80 	pushm	r7,lr
80000b54:	1a 97       	mov	r7,sp
80000b56:	20 3d       	sub	sp,12
80000b58:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
80000b5c:	3f f8       	mov	r8,-1
80000b5e:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( SUSPENDEDLIST == NULL )
80000b62:	4b f8       	lddpc	r8,80000c5c <taskSuspend+0x10c>
80000b64:	70 08       	ld.w	r8,r8[0x0]
80000b66:	58 08       	cp.w	r8,0
80000b68:	c1 41       	brne	80000b90 <taskSuspend+0x40>
	{
		SUSPENDEDLIST		= task;
80000b6a:	4b d8       	lddpc	r8,80000c5c <taskSuspend+0x10c>
80000b6c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000b70:	91 09       	st.w	r8[0x0],r9
		task->nexttcb		= task;
80000b72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b76:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000b7a:	91 09       	st.w	r8[0x0],r9
		task->prevtcb		= task;
80000b7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b80:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000b84:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000b88:	30 18       	mov	r8,1
80000b8a:	ef 58 ff fa 	st.h	r7[-6],r8
80000b8e:	c6 18       	rjmp	80000c50 <taskSuspend+0x100>
	}
	//if this task should be inserted before the first task in the list
	else if( task->back_online_time < SUSPENDEDLIST->back_online_time )
80000b90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b94:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000b98:	4b 18       	lddpc	r8,80000c5c <taskSuspend+0x10c>
80000b9a:	70 08       	ld.w	r8,r8[0x0]
80000b9c:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000ba0:	10 3a       	cp.w	r10,r8
80000ba2:	f2 0b 13 00 	cpc	r11,r9
80000ba6:	c1 12       	brcc	80000bc8 <taskSuspend+0x78>
	{
		insert_after(SUSPENDEDLIST->prevtcb, task);
80000ba8:	4a d8       	lddpc	r8,80000c5c <taskSuspend+0x10c>
80000baa:	70 08       	ld.w	r8,r8[0x0]
80000bac:	71 98       	ld.w	r8,r8[0x64]
80000bae:	ee fb ff f4 	ld.w	r11,r7[-12]
80000bb2:	10 9c       	mov	r12,r8
80000bb4:	f0 1f 00 2b 	mcall	80000c60 <taskSuspend+0x110>
		SUSPENDEDLIST = task;
80000bb8:	4a 98       	lddpc	r8,80000c5c <taskSuspend+0x10c>
80000bba:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000bbe:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
80000bc0:	30 18       	mov	r8,1
80000bc2:	ef 58 ff fa 	st.h	r7[-6],r8
80000bc6:	c4 58       	rjmp	80000c50 <taskSuspend+0x100>
	}
	//if this task should be inserted after the last task in the list
	else if( task->back_online_time >= (SUSPENDEDLIST->prevtcb)->back_online_time )
80000bc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bcc:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000bd0:	4a 38       	lddpc	r8,80000c5c <taskSuspend+0x10c>
80000bd2:	70 08       	ld.w	r8,r8[0x0]
80000bd4:	71 98       	ld.w	r8,r8[0x64]
80000bd6:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000bda:	10 3a       	cp.w	r10,r8
80000bdc:	f2 0b 13 00 	cpc	r11,r9
80000be0:	c1 33       	brcs	80000c06 <taskSuspend+0xb6>
	{
		insert_after(SUSPENDEDLIST->prevtcb, task);
80000be2:	49 f8       	lddpc	r8,80000c5c <taskSuspend+0x10c>
80000be4:	70 08       	ld.w	r8,r8[0x0]
80000be6:	71 98       	ld.w	r8,r8[0x64]
80000be8:	ee fb ff f4 	ld.w	r11,r7[-12]
80000bec:	10 9c       	mov	r12,r8
80000bee:	f0 1f 00 1d 	mcall	80000c60 <taskSuspend+0x110>
		SUSPENDEDLIST->prevtcb = task;
80000bf2:	49 b8       	lddpc	r8,80000c5c <taskSuspend+0x10c>
80000bf4:	70 08       	ld.w	r8,r8[0x0]
80000bf6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000bfa:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000bfe:	30 18       	mov	r8,1
80000c00:	ef 58 ff fa 	st.h	r7[-6],r8
80000c04:	c2 68       	rjmp	80000c50 <taskSuspend+0x100>
	}
	//if this task should be inserted somewhere in the middle of the list
	else
	{
		iterator = SUSPENDEDLIST;
80000c06:	49 68       	lddpc	r8,80000c5c <taskSuspend+0x10c>
80000c08:	70 08       	ld.w	r8,r8[0x0]
80000c0a:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->back_online_time >= iterator->back_online_time )
80000c0e:	c0 68       	rjmp	80000c1a <taskSuspend+0xca>
		{
			iterator = iterator->nexttcb;
80000c10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c14:	70 08       	ld.w	r8,r8[0x0]
80000c16:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	//if this task should be inserted somewhere in the middle of the list
	else
	{
		iterator = SUSPENDEDLIST;
		while( iterator && task->back_online_time >= iterator->back_online_time )
80000c1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c1e:	58 08       	cp.w	r8,0
80000c20:	c0 d0       	breq	80000c3a <taskSuspend+0xea>
80000c22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c26:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000c2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c2e:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000c32:	10 3a       	cp.w	r10,r8
80000c34:	f2 0b 13 00 	cpc	r11,r9
80000c38:	ce c2       	brcc	80000c10 <taskSuspend+0xc0>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
80000c3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c3e:	71 98       	ld.w	r8,r8[0x64]
80000c40:	ee fb ff f4 	ld.w	r11,r7[-12]
80000c44:	10 9c       	mov	r12,r8
80000c46:	f0 1f 00 07 	mcall	80000c60 <taskSuspend+0x110>
		
		result = 1;
80000c4a:	30 18       	mov	r8,1
80000c4c:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	return result;
80000c50:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000c54:	10 9c       	mov	r12,r8
80000c56:	2f dd       	sub	sp,-12
80000c58:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c5c:	00 00       	add	r0,r0
80000c5e:	05 84       	ld.ub	r4,r2[0x0]
80000c60:	80 00       	ld.sh	r0,r0[0x0]
80000c62:	08 ac       	st.w	r4++,r12

80000c64 <taskUninstall>:

uint16_t taskUninstall( tcb * task )
{
80000c64:	eb cd 40 80 	pushm	r7,lr
80000c68:	1a 97       	mov	r7,sp
80000c6a:	20 2d       	sub	sp,8
80000c6c:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000c70:	3f f8       	mov	r8,-1
80000c72:	ef 58 ff fe 	st.h	r7[-2],r8

#if ROUND_ROBIN_MODE_ENABLED
	// if the uninstalled task has the same priority as the first task and we are in round robin mode
	if( task->effective_priority == TCBLIST->effective_priority && ROUNDROBIN_end != NULL ) // ROUNDROBIN_end is potentially affected
80000c76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c7a:	f1 39 00 69 	ld.ub	r9,r8[105]
80000c7e:	4a 88       	lddpc	r8,80000d1c <taskUninstall+0xb8>
80000c80:	70 08       	ld.w	r8,r8[0x0]
80000c82:	f1 38 00 69 	ld.ub	r8,r8[105]
80000c86:	f0 09 18 00 	cp.b	r9,r8
80000c8a:	c1 b1       	brne	80000cc0 <taskUninstall+0x5c>
80000c8c:	4a 58       	lddpc	r8,80000d20 <taskUninstall+0xbc>
80000c8e:	70 08       	ld.w	r8,r8[0x0]
80000c90:	58 08       	cp.w	r8,0
80000c92:	c1 70       	breq	80000cc0 <taskUninstall+0x5c>
	{
		// if there are only two tasks in the round robin
		if( TCBLIST->nexttcb == ROUNDROBIN_end )
80000c94:	4a 28       	lddpc	r8,80000d1c <taskUninstall+0xb8>
80000c96:	70 08       	ld.w	r8,r8[0x0]
80000c98:	70 09       	ld.w	r9,r8[0x0]
80000c9a:	4a 28       	lddpc	r8,80000d20 <taskUninstall+0xbc>
80000c9c:	70 08       	ld.w	r8,r8[0x0]
80000c9e:	10 39       	cp.w	r9,r8
80000ca0:	c0 51       	brne	80000caa <taskUninstall+0x46>
		{
			ROUNDROBIN_end = NULL;
80000ca2:	4a 08       	lddpc	r8,80000d20 <taskUninstall+0xbc>
80000ca4:	30 09       	mov	r9,0
80000ca6:	91 09       	st.w	r8[0x0],r9
80000ca8:	c0 c8       	rjmp	80000cc0 <taskUninstall+0x5c>
		}
		else if( task == ROUNDROBIN_end )
80000caa:	49 e8       	lddpc	r8,80000d20 <taskUninstall+0xbc>
80000cac:	70 08       	ld.w	r8,r8[0x0]
80000cae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cb2:	10 39       	cp.w	r9,r8
80000cb4:	c0 61       	brne	80000cc0 <taskUninstall+0x5c>
		{
			ROUNDROBIN_end = ROUNDROBIN_end->prevtcb;
80000cb6:	49 b8       	lddpc	r8,80000d20 <taskUninstall+0xbc>
80000cb8:	70 08       	ld.w	r8,r8[0x0]
80000cba:	71 99       	ld.w	r9,r8[0x64]
80000cbc:	49 98       	lddpc	r8,80000d20 <taskUninstall+0xbc>
80000cbe:	91 09       	st.w	r8[0x0],r9
		}
	}
#endif
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
80000cc0:	49 78       	lddpc	r8,80000d1c <taskUninstall+0xb8>
80000cc2:	70 09       	ld.w	r9,r8[0x0]
80000cc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cc8:	10 39       	cp.w	r9,r8
80000cca:	c0 c1       	brne	80000ce2 <taskUninstall+0x7e>
80000ccc:	49 48       	lddpc	r8,80000d1c <taskUninstall+0xb8>
80000cce:	70 08       	ld.w	r8,r8[0x0]
80000cd0:	71 99       	ld.w	r9,r8[0x64]
80000cd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cd6:	10 39       	cp.w	r9,r8
80000cd8:	c0 51       	brne	80000ce2 <taskUninstall+0x7e>
	{
		TCBLIST	= NULL;
80000cda:	49 18       	lddpc	r8,80000d1c <taskUninstall+0xb8>
80000cdc:	30 09       	mov	r9,0
80000cde:	91 09       	st.w	r8[0x0],r9
		}
	}
#endif
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
80000ce0:	c0 c8       	rjmp	80000cf8 <taskUninstall+0x94>
	{
		TCBLIST	= NULL;
	}
	else if( TCBLIST == task )
80000ce2:	48 f8       	lddpc	r8,80000d1c <taskUninstall+0xb8>
80000ce4:	70 09       	ld.w	r9,r8[0x0]
80000ce6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cea:	10 39       	cp.w	r9,r8
80000cec:	c0 61       	brne	80000cf8 <taskUninstall+0x94>
	{
		TCBLIST = TCBLIST->nexttcb;
80000cee:	48 c8       	lddpc	r8,80000d1c <taskUninstall+0xb8>
80000cf0:	70 08       	ld.w	r8,r8[0x0]
80000cf2:	70 09       	ld.w	r9,r8[0x0]
80000cf4:	48 a8       	lddpc	r8,80000d1c <taskUninstall+0xb8>
80000cf6:	91 09       	st.w	r8[0x0],r9
	}
	
	result = remove(task);
80000cf8:	ee fc ff f8 	ld.w	r12,r7[-8]
80000cfc:	f0 1f 00 0a 	mcall	80000d24 <taskUninstall+0xc0>
80000d00:	18 98       	mov	r8,r12
80000d02:	5c 88       	casts.h	r8
80000d04:	ef 58 ff fe 	st.h	r7[-2],r8
	
	result = 1;
80000d08:	30 18       	mov	r8,1
80000d0a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000d0e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000d12:	10 9c       	mov	r12,r8
80000d14:	2f ed       	sub	sp,-8
80000d16:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d1a:	00 00       	add	r0,r0
80000d1c:	00 00       	add	r0,r0
80000d1e:	05 80       	ld.ub	r0,r2[0x0]
80000d20:	00 00       	add	r0,r0
80000d22:	05 a0       	ld.ub	r0,r2[0x2]
80000d24:	80 00       	ld.sh	r0,r0[0x0]
80000d26:	0d b8       	ld.ub	r8,r6[0x3]

80000d28 <taskUnsuspend>:

uint16_t taskUnsuspend( tcb * task )
{
80000d28:	eb cd 40 80 	pushm	r7,lr
80000d2c:	1a 97       	mov	r7,sp
80000d2e:	20 2d       	sub	sp,8
80000d30:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000d34:	3f f8       	mov	r8,-1
80000d36:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80000d3a:	49 e8       	lddpc	r8,80000db0 <taskUnsuspend+0x88>
80000d3c:	70 09       	ld.w	r9,r8[0x0]
80000d3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d42:	10 39       	cp.w	r9,r8
80000d44:	c0 c1       	brne	80000d5c <taskUnsuspend+0x34>
80000d46:	49 b8       	lddpc	r8,80000db0 <taskUnsuspend+0x88>
80000d48:	70 08       	ld.w	r8,r8[0x0]
80000d4a:	71 99       	ld.w	r9,r8[0x64]
80000d4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d50:	10 39       	cp.w	r9,r8
80000d52:	c0 51       	brne	80000d5c <taskUnsuspend+0x34>
	{
		SUSPENDEDLIST		= NULL;
80000d54:	49 78       	lddpc	r8,80000db0 <taskUnsuspend+0x88>
80000d56:	30 09       	mov	r9,0
80000d58:	91 09       	st.w	r8[0x0],r9
uint16_t taskUnsuspend( tcb * task )
{
	uint16_t result = -1;
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80000d5a:	c1 c8       	rjmp	80000d92 <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST		= NULL;
	}
	else if( SUSPENDEDLIST == task )
80000d5c:	49 58       	lddpc	r8,80000db0 <taskUnsuspend+0x88>
80000d5e:	70 09       	ld.w	r9,r8[0x0]
80000d60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d64:	10 39       	cp.w	r9,r8
80000d66:	c0 71       	brne	80000d74 <taskUnsuspend+0x4c>
	{
		SUSPENDEDLIST = SUSPENDEDLIST->nexttcb;
80000d68:	49 28       	lddpc	r8,80000db0 <taskUnsuspend+0x88>
80000d6a:	70 08       	ld.w	r8,r8[0x0]
80000d6c:	70 09       	ld.w	r9,r8[0x0]
80000d6e:	49 18       	lddpc	r8,80000db0 <taskUnsuspend+0x88>
80000d70:	91 09       	st.w	r8[0x0],r9
80000d72:	c1 08       	rjmp	80000d92 <taskUnsuspend+0x6a>
	}
	else if( SUSPENDEDLIST->prevtcb == task )
80000d74:	48 f8       	lddpc	r8,80000db0 <taskUnsuspend+0x88>
80000d76:	70 08       	ld.w	r8,r8[0x0]
80000d78:	71 99       	ld.w	r9,r8[0x64]
80000d7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d7e:	10 39       	cp.w	r9,r8
80000d80:	c0 91       	brne	80000d92 <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST->prevtcb = (SUSPENDEDLIST->prevtcb)->prevtcb;
80000d82:	48 c8       	lddpc	r8,80000db0 <taskUnsuspend+0x88>
80000d84:	70 08       	ld.w	r8,r8[0x0]
80000d86:	48 b9       	lddpc	r9,80000db0 <taskUnsuspend+0x88>
80000d88:	72 09       	ld.w	r9,r9[0x0]
80000d8a:	73 99       	ld.w	r9,r9[0x64]
80000d8c:	73 99       	ld.w	r9,r9[0x64]
80000d8e:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	result = remove(task);
80000d92:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d96:	f0 1f 00 08 	mcall	80000db4 <taskUnsuspend+0x8c>
80000d9a:	18 98       	mov	r8,r12
80000d9c:	5c 88       	casts.h	r8
80000d9e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000da2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000da6:	10 9c       	mov	r12,r8
80000da8:	2f ed       	sub	sp,-8
80000daa:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dae:	00 00       	add	r0,r0
80000db0:	00 00       	add	r0,r0
80000db2:	05 84       	ld.ub	r4,r2[0x0]
80000db4:	80 00       	ld.sh	r0,r0[0x0]
80000db6:	0d b8       	ld.ub	r8,r6[0x3]

80000db8 <remove>:

uint16_t remove(tcb * removed_task)
{
80000db8:	eb cd 40 80 	pushm	r7,lr
80000dbc:	1a 97       	mov	r7,sp
80000dbe:	20 2d       	sub	sp,8
80000dc0:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000dc4:	3f f8       	mov	r8,-1
80000dc6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( removed_task->prevtcb != NULL )
80000dca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dce:	71 98       	ld.w	r8,r8[0x64]
80000dd0:	58 08       	cp.w	r8,0
80000dd2:	c0 80       	breq	80000de2 <remove+0x2a>
	{
		(removed_task->prevtcb)->nexttcb = removed_task->nexttcb;
80000dd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dd8:	71 98       	ld.w	r8,r8[0x64]
80000dda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000dde:	72 09       	ld.w	r9,r9[0x0]
80000de0:	91 09       	st.w	r8[0x0],r9
	}
	
	if( removed_task->nexttcb != NULL )
80000de2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000de6:	70 08       	ld.w	r8,r8[0x0]
80000de8:	58 08       	cp.w	r8,0
80000dea:	c0 90       	breq	80000dfc <remove+0x44>
	{
		(removed_task->nexttcb)->prevtcb = removed_task->prevtcb;
80000dec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000df0:	70 08       	ld.w	r8,r8[0x0]
80000df2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000df6:	73 99       	ld.w	r9,r9[0x64]
80000df8:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	// nullify pointers
	removed_task->prevtcb = NULL;
80000dfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e00:	30 09       	mov	r9,0
80000e02:	f1 49 00 64 	st.w	r8[100],r9
	removed_task->nexttcb = NULL;
80000e06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e0a:	30 09       	mov	r9,0
80000e0c:	91 09       	st.w	r8[0x0],r9
		
	result = 1;
80000e0e:	30 18       	mov	r8,1
80000e10:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000e14:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000e18:	10 9c       	mov	r12,r8
80000e1a:	2f ed       	sub	sp,-8
80000e1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e20 <ROSA_delay>:

uint16_t ROSA_delay( uint64_t ticks )
{
80000e20:	eb cd 40 c0 	pushm	r6-r7,lr
80000e24:	1a 97       	mov	r7,sp
80000e26:	20 3d       	sub	sp,12
80000e28:	ee eb ff f4 	st.d	r7[-12],r10
	interruptDisable;
	uint16_t result = -1;
80000e2c:	3f f8       	mov	r8,-1
80000e2e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	taskUninstall(EXECTASK);
80000e32:	49 38       	lddpc	r8,80000e7c <ROSA_delay+0x5c>
80000e34:	70 08       	ld.w	r8,r8[0x0]
80000e36:	10 9c       	mov	r12,r8
80000e38:	f0 1f 00 12 	mcall	80000e80 <ROSA_delay+0x60>
	EXECTASK->back_online_time = ROSA_getTickCount() + ticks;
80000e3c:	49 08       	lddpc	r8,80000e7c <ROSA_delay+0x5c>
80000e3e:	70 06       	ld.w	r6,r8[0x0]
80000e40:	f0 1f 00 11 	mcall	80000e84 <ROSA_delay+0x64>
80000e44:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000e48:	f4 08 00 08 	add	r8,r10,r8
80000e4c:	f6 09 00 49 	adc	r9,r11,r9
80000e50:	ec e9 00 6c 	st.d	r6[108],r8
	taskSuspend(EXECTASK);
80000e54:	48 a8       	lddpc	r8,80000e7c <ROSA_delay+0x5c>
80000e56:	70 08       	ld.w	r8,r8[0x0]
80000e58:	10 9c       	mov	r12,r8
80000e5a:	f0 1f 00 0c 	mcall	80000e88 <ROSA_delay+0x68>
	
	result = ticks;
80000e5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e62:	ef 58 ff fe 	st.h	r7[-2],r8
	
	interruptEnable();
80000e66:	f0 1f 00 0a 	mcall	80000e8c <ROSA_delay+0x6c>
	ROSA_yield();
80000e6a:	f0 1f 00 0a 	mcall	80000e90 <ROSA_delay+0x70>
	return result;
80000e6e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000e72:	10 9c       	mov	r12,r8
80000e74:	2f dd       	sub	sp,-12
80000e76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000e7a:	00 00       	add	r0,r0
80000e7c:	00 00       	add	r0,r0
80000e7e:	05 8c       	ld.ub	r12,r2[0x0]
80000e80:	80 00       	ld.sh	r0,r0[0x0]
80000e82:	0c 64       	and	r4,r6
80000e84:	80 00       	ld.sh	r0,r0[0x0]
80000e86:	08 94       	mov	r4,r4
80000e88:	80 00       	ld.sh	r0,r0[0x0]
80000e8a:	0b 50       	ld.sh	r0,--r5
80000e8c:	80 00       	ld.sh	r0,r0[0x0]
80000e8e:	21 6a       	sub	r10,22
80000e90:	80 00       	ld.sh	r0,r0[0x0]
80000e92:	0f 5e       	ld.sh	lr,--r7

80000e94 <idle>:
	return result;
}

#if IDLE_TASK_ENABLED
void idle(void)
{
80000e94:	eb cd 40 80 	pushm	r7,lr
80000e98:	1a 97       	mov	r7,sp
	while(1);
80000e9a:	c0 08       	rjmp	80000e9a <idle+0x6>

80000e9c <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000e9c:	4b 5c       	lddpc	r12,80000f70 <_yield+0xa>
	lda.w r11,EXECTASK
80000e9e:	4b 6b       	lddpc	r11,80000f74 <_yield+0xe>
	ld.w r12,r12[0x0]
80000ea0:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000ea2:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000ea4:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000ea6:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000ea8:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000eac:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000eae:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000eb0:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000eb2:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000eb6:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000eb8:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000eba:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000ebc:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000ebe:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000ec0:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000ec2:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000ec4:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000ec6:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000ec8:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000eca:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000ecc:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000ece:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000ed0:	1c 9f       	mov	pc,lr

80000ed2 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000ed2:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000ed4:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000ed6:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000ed8:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000edc:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000ee0:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000ee4:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000ee8:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000eec:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000ef0:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000ef4:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000ef8:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000efc:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000efe:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000f00:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000f02:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000f04:	1c 9f       	mov	pc,lr

80000f06 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000f06:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000f08:	49 bc       	lddpc	r12,80000f74 <_yield+0xe>
	ld.w r12,r12[0x0]
80000f0a:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000f0c:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000f0e:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000f10:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000f12:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000f14:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000f16:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000f18:	33 40       	mov	r0,52
	add r0,r12
80000f1a:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000f1c:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000f20:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000f22:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000f24:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000f28:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000f2a:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000f2c:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000f2e:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000f30:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000f32:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000f34:	1c 9f       	mov	pc,lr

80000f36 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000f36:	49 0c       	lddpc	r12,80000f74 <_yield+0xe>
	ld.w r12,r12[0x0]
80000f38:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000f3a:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000f3c:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000f3e:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000f42:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000f44:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000f46:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000f48:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000f4a:	33 40       	mov	r0,52
	add r0,r12
80000f4c:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000f4e:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000f52:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000f54:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000f56:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000f58:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000f5a:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000f5c:	d6 13       	rets

80000f5e <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000f5e:	d4 01       	pushm	lr
	lda.w lr,_yield
80000f60:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000f64:	d7 33       	scall

80000f66 <_yield>:
_yield:
	call contextSave
80000f66:	cd 0f       	rcall	80000f06 <contextSave>
	call scheduler
80000f68:	f0 1f 00 04 	mcall	80000f78 <_yield+0x12>
	call contextRestore
80000f6c:	ce 5f       	rcall	80000f36 <contextRestore>
80000f6e:	00 00       	add	r0,r0
80000f70:	00 00       	add	r0,r0
80000f72:	05 80       	ld.ub	r0,r2[0x0]
80000f74:	00 00       	add	r0,r0
80000f76:	05 8c       	ld.ub	r12,r2[0x0]
80000f78:	80 00       	ld.sh	r0,r0[0x0]
80000f7a:	0f 7c       	ld.ub	r12,--r7

80000f7c <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000f7c:	eb cd 40 80 	pushm	r7,lr
80000f80:	1a 97       	mov	r7,sp
80000f82:	20 2d       	sub	sp,8
// for handling possible round robin configuration
/*******************************************************************/
#if ROUND_ROBIN_MODE_ENABLED
	if( ROUNDROBIN_end )
80000f84:	4b 08       	lddpc	r8,80001044 <scheduler+0xc8>
80000f86:	70 08       	ld.w	r8,r8[0x0]
80000f88:	58 08       	cp.w	r8,0
80000f8a:	c2 40       	breq	80000fd2 <scheduler+0x56>
	{
		round_robin_ticks ++;
80000f8c:	4a f8       	lddpc	r8,80001048 <scheduler+0xcc>
80000f8e:	f0 ea 00 00 	ld.d	r10,r8[0]
80000f92:	30 18       	mov	r8,1
80000f94:	30 09       	mov	r9,0
80000f96:	f4 08 00 08 	add	r8,r10,r8
80000f9a:	f6 09 00 49 	adc	r9,r11,r9
80000f9e:	4a ba       	lddpc	r10,80001048 <scheduler+0xcc>
80000fa0:	f4 e9 00 00 	st.d	r10[0],r8
		
		if( round_robin_ticks >= MAX_ROUND_ROBIN_TICKS )
80000fa4:	4a 98       	lddpc	r8,80001048 <scheduler+0xcc>
80000fa6:	f0 e8 00 00 	ld.d	r8,r8[0]
80000faa:	e0 48 00 62 	cp.w	r8,98
80000fae:	5c 29       	cpc	r9
80000fb0:	e0 88 00 11 	brls	80000fd2 <scheduler+0x56>
		{
			// this really should be possible to optimize
			taskUninstall(EXECTASK);
80000fb4:	4a 68       	lddpc	r8,8000104c <scheduler+0xd0>
80000fb6:	70 08       	ld.w	r8,r8[0x0]
80000fb8:	10 9c       	mov	r12,r8
80000fba:	f0 1f 00 26 	mcall	80001050 <scheduler+0xd4>
			taskInstall(EXECTASK);
80000fbe:	4a 48       	lddpc	r8,8000104c <scheduler+0xd0>
80000fc0:	70 08       	ld.w	r8,r8[0x0]
80000fc2:	10 9c       	mov	r12,r8
80000fc4:	f0 1f 00 24 	mcall	80001054 <scheduler+0xd8>
			//TCBLIST = TCBLIST->nexttcb;
			//remove(EXECTASK);
			//insert_after(ROUNDROBIN_end, EXECTASK);
			//ROUNDROBIN_end = EXECTASK;
			
			round_robin_ticks = 0;
80000fc8:	4a 0a       	lddpc	r10,80001048 <scheduler+0xcc>
80000fca:	30 08       	mov	r8,0
80000fcc:	30 09       	mov	r9,0
80000fce:	f4 e9 00 00 	st.d	r10[0],r8
		}
	}
#endif
/*******************************************************************/

	tcb * iterator = SUSPENDEDLIST;
80000fd2:	4a 28       	lddpc	r8,80001058 <scheduler+0xdc>
80000fd4:	70 08       	ld.w	r8,r8[0x0]
80000fd6:	ef 48 ff f8 	st.w	r7[-8],r8
	while( iterator && iterator->back_online_time <= system_ticks )
80000fda:	c0 d8       	rjmp	80000ff4 <scheduler+0x78>
	{
		taskUnsuspend(iterator);
80000fdc:	ee fc ff f8 	ld.w	r12,r7[-8]
80000fe0:	f0 1f 00 1f 	mcall	8000105c <scheduler+0xe0>
		taskInstall(iterator);
80000fe4:	ee fc ff f8 	ld.w	r12,r7[-8]
80000fe8:	f0 1f 00 1b 	mcall	80001054 <scheduler+0xd8>
		iterator = SUSPENDEDLIST;
80000fec:	49 b8       	lddpc	r8,80001058 <scheduler+0xdc>
80000fee:	70 08       	ld.w	r8,r8[0x0]
80000ff0:	ef 48 ff f8 	st.w	r7[-8],r8
	}
#endif
/*******************************************************************/

	tcb * iterator = SUSPENDEDLIST;
	while( iterator && iterator->back_online_time <= system_ticks )
80000ff4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ff8:	58 08       	cp.w	r8,0
80000ffa:	c0 d0       	breq	80001014 <scheduler+0x98>
80000ffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001000:	f0 ea 00 6c 	ld.d	r10,r8[108]
80001004:	49 78       	lddpc	r8,80001060 <scheduler+0xe4>
80001006:	f0 e8 00 00 	ld.d	r8,r8[0]
8000100a:	10 3a       	cp.w	r10,r8
8000100c:	f2 0b 13 00 	cpc	r11,r9
80001010:	fe 98 ff e6 	brls	80000fdc <scheduler+0x60>
		iterator = SUSPENDEDLIST;
	}
	
#if IDLE_TASK_ENABLED
	// if no tasks are ready, run the idle task
	if( TCBLIST == NULL )
80001014:	49 48       	lddpc	r8,80001064 <scheduler+0xe8>
80001016:	70 08       	ld.w	r8,r8[0x0]
80001018:	58 08       	cp.w	r8,0
8000101a:	c0 61       	brne	80001026 <scheduler+0xaa>
	{
		EXECTASK = IDLETASK;
8000101c:	49 38       	lddpc	r8,80001068 <scheduler+0xec>
8000101e:	70 09       	ld.w	r9,r8[0x0]
80001020:	48 b8       	lddpc	r8,8000104c <scheduler+0xd0>
80001022:	91 09       	st.w	r8[0x0],r9
80001024:	c0 58       	rjmp	8000102e <scheduler+0xb2>
	}
	// if at least one task is ready, run the highest priority task
	else
	{
		EXECTASK = TCBLIST;
80001026:	49 08       	lddpc	r8,80001064 <scheduler+0xe8>
80001028:	70 09       	ld.w	r9,r8[0x0]
8000102a:	48 98       	lddpc	r8,8000104c <scheduler+0xd0>
8000102c:	91 09       	st.w	r8[0x0],r9
	}
#else
	EXECTASK = TCBLIST;
#endif

	if( EXECTASK == NULL )
8000102e:	48 88       	lddpc	r8,8000104c <scheduler+0xd0>
80001030:	70 08       	ld.w	r8,r8[0x0]
80001032:	58 08       	cp.w	r8,0
80001034:	c0 41       	brne	8000103c <scheduler+0xc0>
	{
		int i = 0;
80001036:	30 08       	mov	r8,0
80001038:	ef 48 ff fc 	st.w	r7[-4],r8
	}

}
8000103c:	2f ed       	sub	sp,-8
8000103e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001042:	00 00       	add	r0,r0
80001044:	00 00       	add	r0,r0
80001046:	05 a0       	ld.ub	r0,r2[0x2]
80001048:	00 00       	add	r0,r0
8000104a:	05 90       	ld.ub	r0,r2[0x1]
8000104c:	00 00       	add	r0,r0
8000104e:	05 8c       	ld.ub	r12,r2[0x0]
80001050:	80 00       	ld.sh	r0,r0[0x0]
80001052:	0c 64       	and	r4,r6
80001054:	80 00       	ld.sh	r0,r0[0x0]
80001056:	09 18       	ld.sh	r8,r4++
80001058:	00 00       	add	r0,r0
8000105a:	05 84       	ld.ub	r4,r2[0x0]
8000105c:	80 00       	ld.sh	r0,r0[0x0]
8000105e:	0d 28       	ld.uh	r8,r6++
80001060:	00 00       	add	r0,r0
80001062:	05 98       	ld.ub	r8,r2[0x1]
80001064:	00 00       	add	r0,r0
80001066:	05 80       	ld.ub	r0,r2[0x0]
80001068:	00 00       	add	r0,r0
8000106a:	05 7c       	ld.ub	r12,--r2

8000106c <C.0.9446>:
8000106c:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

8000107c <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
8000107c:	eb cd 40 80 	pushm	r7,lr
80001080:	1a 97       	mov	r7,sp
80001082:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80001084:	fe 78 38 00 	mov	r8,-51200
80001088:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
8000108c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001090:	70 88       	ld.w	r8,r8[0x20]
80001092:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
80001096:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000109a:	e2 18 00 10 	andl	r8,0x10,COH
8000109e:	c0 30       	breq	800010a4 <timerISR+0x28>
		ROSA_yieldFromISR();
800010a0:	f0 1f 00 03 	mcall	800010ac <timerISR+0x30>
}
800010a4:	2f ed       	sub	sp,-8
800010a6:	e3 cd 40 80 	ldm	sp++,r7,lr
800010aa:	d6 03       	rete
800010ac:	80 00       	ld.sh	r0,r0[0x0]
800010ae:	07 60       	ld.uh	r0,--r3

800010b0 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800010b0:	eb cd 40 80 	pushm	r7,lr
800010b4:	1a 97       	mov	r7,sp
800010b6:	20 7d       	sub	sp,28
800010b8:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
800010bc:	4a 48       	lddpc	r8,8000114c <timerPeriodSet+0x9c>
800010be:	ee ca 00 18 	sub	r10,r7,24
800010c2:	10 9b       	mov	r11,r8
800010c4:	f6 e8 00 00 	ld.d	r8,r11[0]
800010c8:	f4 e9 00 00 	st.d	r10[0],r8
800010cc:	f6 e8 00 08 	ld.d	r8,r11[8]
800010d0:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
800010d4:	30 48       	mov	r8,4
800010d6:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
800010da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010de:	20 18       	sub	r8,1
800010e0:	a3 68       	lsl	r8,0x2
800010e2:	ee 08 00 08 	add	r8,r7,r8
800010e6:	f0 f9 ff e8 	ld.w	r9,r8[-24]
800010ea:	e0 68 1b 00 	mov	r8,6912
800010ee:	ea 18 00 b7 	orh	r8,0xb7
800010f2:	f0 09 0c 08 	divs	r8,r8,r9
800010f6:	10 99       	mov	r9,r8
800010f8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010fc:	b1 39       	mul	r9,r8
800010fe:	e0 68 4d d3 	mov	r8,19923
80001102:	ea 18 10 62 	orh	r8,0x1062
80001106:	f2 08 06 48 	mulu.d	r8,r9,r8
8000110a:	f2 08 16 06 	lsr	r8,r9,0x6
8000110e:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80001112:	ee fc ff fc 	ld.w	r12,r7[-4]
80001116:	f0 1f 00 0f 	mcall	80001150 <timerPeriodSet+0xa0>
	timerRCSet(rc);
8000111a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000111e:	f0 1f 00 0e 	mcall	80001154 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80001122:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001126:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000112a:	f2 08 02 4a 	mul	r10,r9,r8
8000112e:	e0 68 9f 81 	mov	r8,40833
80001132:	ea 18 16 5e 	orh	r8,0x165e
80001136:	f4 08 04 48 	muls.d	r8,r10,r8
8000113a:	b5 49       	asr	r9,0x14
8000113c:	f4 08 14 1f 	asr	r8,r10,0x1f
80001140:	f2 08 01 08 	sub	r8,r9,r8
80001144:	10 9c       	mov	r12,r8
80001146:	2f 9d       	sub	sp,-28
80001148:	e3 cd 80 80 	ldm	sp++,r7,pc
8000114c:	80 00       	ld.sh	r0,r0[0x0]
8000114e:	10 6c       	and	r12,r8
80001150:	80 00       	ld.sh	r0,r0[0x0]
80001152:	17 18       	ld.sh	r8,r11++
80001154:	80 00       	ld.sh	r0,r0[0x0]
80001156:	17 02       	ld.w	r2,r11++

80001158 <buttonInit>:
80001158:	eb cd 40 80 	pushm	r7,lr
8000115c:	1a 97       	mov	r7,sp
8000115e:	30 1b       	mov	r11,1
80001160:	35 8c       	mov	r12,88
80001162:	f0 1f 00 07 	mcall	8000117c <buttonInit+0x24>
80001166:	30 1b       	mov	r11,1
80001168:	35 5c       	mov	r12,85
8000116a:	f0 1f 00 05 	mcall	8000117c <buttonInit+0x24>
8000116e:	30 1b       	mov	r11,1
80001170:	35 2c       	mov	r12,82
80001172:	f0 1f 00 03 	mcall	8000117c <buttonInit+0x24>
80001176:	e3 cd 80 80 	ldm	sp++,r7,pc
8000117a:	00 00       	add	r0,r0
8000117c:	80 00       	ld.sh	r0,r0[0x0]
8000117e:	11 b8       	ld.ub	r8,r8[0x3]

80001180 <joystickInit>:
80001180:	eb cd 40 80 	pushm	r7,lr
80001184:	1a 97       	mov	r7,sp
80001186:	30 1b       	mov	r11,1
80001188:	31 bc       	mov	r12,27
8000118a:	f0 1f 00 0b 	mcall	800011b4 <joystickInit+0x34>
8000118e:	30 1b       	mov	r11,1
80001190:	31 9c       	mov	r12,25
80001192:	f0 1f 00 09 	mcall	800011b4 <joystickInit+0x34>
80001196:	30 1b       	mov	r11,1
80001198:	31 cc       	mov	r12,28
8000119a:	f0 1f 00 07 	mcall	800011b4 <joystickInit+0x34>
8000119e:	30 1b       	mov	r11,1
800011a0:	31 4c       	mov	r12,20
800011a2:	f0 1f 00 05 	mcall	800011b4 <joystickInit+0x34>
800011a6:	30 1b       	mov	r11,1
800011a8:	31 ac       	mov	r12,26
800011aa:	f0 1f 00 03 	mcall	800011b4 <joystickInit+0x34>
800011ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800011b2:	00 00       	add	r0,r0
800011b4:	80 00       	ld.sh	r0,r0[0x0]
800011b6:	11 b8       	ld.ub	r8,r8[0x3]

800011b8 <gpioInit>:
800011b8:	eb cd 40 80 	pushm	r7,lr
800011bc:	1a 97       	mov	r7,sp
800011be:	20 7d       	sub	sp,28
800011c0:	ef 4c ff ec 	st.w	r7[-20],r12
800011c4:	ef 4b ff e8 	st.w	r7[-24],r11
800011c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800011cc:	a5 58       	asr	r8,0x5
800011ce:	ef 48 ff f4 	st.w	r7[-12],r8
800011d2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800011d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800011da:	ef 48 ff fc 	st.w	r7[-4],r8
800011de:	30 19       	mov	r9,1
800011e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800011e4:	f2 08 09 48 	lsl	r8,r9,r8
800011e8:	ef 48 ff f8 	st.w	r7[-8],r8
800011ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011f0:	a9 68       	lsl	r8,0x8
800011f2:	e0 28 f0 00 	sub	r8,61440
800011f6:	ef 48 ff f0 	st.w	r7[-16],r8
800011fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800011fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001202:	91 19       	st.w	r8[0x4],r9
80001204:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001208:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000120c:	91 69       	st.w	r8[0x18],r9
8000120e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001212:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001216:	91 a9       	st.w	r8[0x28],r9
80001218:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000121c:	ef 48 ff e4 	st.w	r7[-28],r8
80001220:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001224:	58 08       	cp.w	r8,0
80001226:	c0 60       	breq	80001232 <gpioInit+0x7a>
80001228:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000122c:	58 18       	cp.w	r8,1
8000122e:	c0 90       	breq	80001240 <gpioInit+0x88>
80001230:	c0 f8       	rjmp	8000124e <gpioInit+0x96>
80001232:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001236:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000123a:	f1 49 00 44 	st.w	r8[68],r9
8000123e:	c0 e8       	rjmp	8000125a <gpioInit+0xa2>
80001240:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001244:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001248:	f1 49 00 48 	st.w	r8[72],r9
8000124c:	c0 78       	rjmp	8000125a <gpioInit+0xa2>
8000124e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001252:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001256:	f1 49 00 48 	st.w	r8[72],r9
8000125a:	2f 9d       	sub	sp,-28
8000125c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001260 <gpioSet>:
80001260:	eb cd 40 80 	pushm	r7,lr
80001264:	1a 97       	mov	r7,sp
80001266:	20 5d       	sub	sp,20
80001268:	ef 4c ff ec 	st.w	r7[-20],r12
8000126c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001270:	a5 58       	asr	r8,0x5
80001272:	ef 48 ff f4 	st.w	r7[-12],r8
80001276:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000127a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000127e:	ef 48 ff fc 	st.w	r7[-4],r8
80001282:	30 19       	mov	r9,1
80001284:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001288:	f2 08 09 48 	lsl	r8,r9,r8
8000128c:	ef 48 ff f8 	st.w	r7[-8],r8
80001290:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001294:	a9 68       	lsl	r8,0x8
80001296:	e0 28 f0 00 	sub	r8,61440
8000129a:	ef 48 ff f0 	st.w	r7[-16],r8
8000129e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012a6:	f1 49 00 54 	st.w	r8[84],r9
800012aa:	2f bd       	sub	sp,-20
800012ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800012b0 <gpioToggle>:
800012b0:	eb cd 40 80 	pushm	r7,lr
800012b4:	1a 97       	mov	r7,sp
800012b6:	20 5d       	sub	sp,20
800012b8:	ef 4c ff ec 	st.w	r7[-20],r12
800012bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800012c0:	a5 58       	asr	r8,0x5
800012c2:	ef 48 ff f4 	st.w	r7[-12],r8
800012c6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800012ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800012ce:	ef 48 ff fc 	st.w	r7[-4],r8
800012d2:	30 19       	mov	r9,1
800012d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012d8:	f2 08 09 48 	lsl	r8,r9,r8
800012dc:	ef 48 ff f8 	st.w	r7[-8],r8
800012e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012e4:	a9 68       	lsl	r8,0x8
800012e6:	e0 28 f0 00 	sub	r8,61440
800012ea:	ef 48 ff f0 	st.w	r7[-16],r8
800012ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012f6:	f1 49 00 5c 	st.w	r8[92],r9
800012fa:	2f bd       	sub	sp,-20
800012fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80001300 <ledInit>:
80001300:	eb cd 40 80 	pushm	r7,lr
80001304:	1a 97       	mov	r7,sp
80001306:	20 9d       	sub	sp,36
80001308:	49 e8       	lddpc	r8,80001380 <ledInit+0x80>
8000130a:	ee cb 00 24 	sub	r11,r7,36
8000130e:	10 9a       	mov	r10,r8
80001310:	f4 e8 00 00 	ld.d	r8,r10[0]
80001314:	f6 e9 00 00 	st.d	r11[0],r8
80001318:	f4 e8 00 08 	ld.d	r8,r10[8]
8000131c:	f6 e9 00 08 	st.d	r11[8],r8
80001320:	f4 e8 00 10 	ld.d	r8,r10[16]
80001324:	f6 e9 00 10 	st.d	r11[16],r8
80001328:	f4 e8 00 18 	ld.d	r8,r10[24]
8000132c:	f6 e9 00 18 	st.d	r11[24],r8
80001330:	30 08       	mov	r8,0
80001332:	ef 48 ff fc 	st.w	r7[-4],r8
80001336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000133a:	a3 68       	lsl	r8,0x2
8000133c:	ee 08 00 08 	add	r8,r7,r8
80001340:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001344:	10 9c       	mov	r12,r8
80001346:	f0 1f 00 10 	mcall	80001384 <ledInit+0x84>
8000134a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000134e:	a3 68       	lsl	r8,0x2
80001350:	ee 08 00 08 	add	r8,r7,r8
80001354:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001358:	30 0b       	mov	r11,0
8000135a:	10 9c       	mov	r12,r8
8000135c:	f0 1f 00 0b 	mcall	80001388 <ledInit+0x88>
80001360:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001364:	58 78       	cp.w	r8,7
80001366:	5f 18       	srne	r8
80001368:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000136c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001370:	2f f8       	sub	r8,-1
80001372:	ef 48 ff fc 	st.w	r7[-4],r8
80001376:	58 09       	cp.w	r9,0
80001378:	cd f1       	brne	80001336 <ledInit+0x36>
8000137a:	2f 7d       	sub	sp,-36
8000137c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001380:	80 00       	ld.sh	r0,r0[0x0]
80001382:	24 00       	sub	r0,64
80001384:	80 00       	ld.sh	r0,r0[0x0]
80001386:	13 8c       	ld.ub	r12,r9[0x0]
80001388:	80 00       	ld.sh	r0,r0[0x0]
8000138a:	11 b8       	ld.ub	r8,r8[0x3]

8000138c <ledOff>:
8000138c:	eb cd 40 80 	pushm	r7,lr
80001390:	1a 97       	mov	r7,sp
80001392:	20 1d       	sub	sp,4
80001394:	ef 4c ff fc 	st.w	r7[-4],r12
80001398:	ee fc ff fc 	ld.w	r12,r7[-4]
8000139c:	f0 1f 00 03 	mcall	800013a8 <ledOff+0x1c>
800013a0:	2f fd       	sub	sp,-4
800013a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800013a6:	00 00       	add	r0,r0
800013a8:	80 00       	ld.sh	r0,r0[0x0]
800013aa:	12 60       	and	r0,r9

800013ac <ledToggle>:
800013ac:	eb cd 40 80 	pushm	r7,lr
800013b0:	1a 97       	mov	r7,sp
800013b2:	20 1d       	sub	sp,4
800013b4:	ef 4c ff fc 	st.w	r7[-4],r12
800013b8:	ee fc ff fc 	ld.w	r12,r7[-4]
800013bc:	f0 1f 00 03 	mcall	800013c8 <ledToggle+0x1c>
800013c0:	2f fd       	sub	sp,-4
800013c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800013c6:	00 00       	add	r0,r0
800013c8:	80 00       	ld.sh	r0,r0[0x0]
800013ca:	12 b0       	st.h	r9++,r0

800013cc <potInit>:
800013cc:	d3 01       	pushm	r11-r12
800013ce:	e0 6c 10 00 	mov	r12,4096
800013d2:	ea 1c ff ff 	orh	r12,0xffff
800013d6:	31 6b       	mov	r11,22
800013d8:	99 2b       	st.w	r12[0x8],r11
800013da:	99 6b       	st.w	r12[0x18],r11
800013dc:	99 6b       	st.w	r12[0x18],r11
800013de:	e0 6c 3c 00 	mov	r12,15360
800013e2:	ea 1c ff ff 	orh	r12,0xffff
800013e6:	30 1b       	mov	r11,1
800013e8:	99 0b       	st.w	r12[0x0],r11
800013ea:	e0 6b 0f 1f 	mov	r11,3871
800013ee:	b1 6b       	lsl	r11,0x10
800013f0:	99 1b       	st.w	r12[0x4],r11
800013f2:	30 2b       	mov	r11,2
800013f4:	99 4b       	st.w	r12[0x10],r11
800013f6:	d3 02       	popm	r11-r12
800013f8:	1c 9f       	mov	pc,lr

800013fa <potGetValue>:
800013fa:	d1 81       	pushm	r10-r11
800013fc:	e0 6c 3c 00 	mov	r12,15360
80001400:	ea 1c ff ff 	orh	r12,0xffff
80001404:	30 2b       	mov	r11,2
80001406:	99 0b       	st.w	r12[0x0],r11

80001408 <a1>:
80001408:	78 7a       	ld.w	r10,r12[0x1c]
8000140a:	16 7a       	tst	r10,r11
8000140c:	cf e0       	breq	80001408 <a1>
8000140e:	78 dc       	ld.w	r12,r12[0x34]
80001410:	d1 82       	popm	r10-r11
80001412:	1c 9f       	mov	pc,lr

80001414 <usartReset>:
80001414:	eb cd 40 80 	pushm	r7,lr
80001418:	1a 97       	mov	r7,sp
8000141a:	20 3d       	sub	sp,12
8000141c:	ef 4c ff f8 	st.w	r7[-8],r12
80001420:	f0 1f 00 16 	mcall	80001478 <usartReset+0x64>
80001424:	18 98       	mov	r8,r12
80001426:	ef 48 ff fc 	st.w	r7[-4],r8
8000142a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000142e:	58 08       	cp.w	r8,0
80001430:	c0 30       	breq	80001436 <usartReset+0x22>
80001432:	f0 1f 00 13 	mcall	8000147c <usartReset+0x68>
80001436:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000143a:	3f f8       	mov	r8,-1
8000143c:	93 38       	st.w	r9[0xc],r8
8000143e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001442:	70 58       	ld.w	r8,r8[0x14]
80001444:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001448:	58 08       	cp.w	r8,0
8000144a:	c0 30       	breq	80001450 <usartReset+0x3c>
8000144c:	f0 1f 00 0d 	mcall	80001480 <usartReset+0x6c>
80001450:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001454:	30 08       	mov	r8,0
80001456:	93 18       	st.w	r9[0x4],r8
80001458:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000145c:	30 08       	mov	r8,0
8000145e:	93 98       	st.w	r9[0x24],r8
80001460:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001464:	30 08       	mov	r8,0
80001466:	93 a8       	st.w	r9[0x28],r8
80001468:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000146c:	ea 68 61 0c 	mov	r8,680204
80001470:	93 08       	st.w	r9[0x0],r8
80001472:	2f dd       	sub	sp,-12
80001474:	e3 cd 80 80 	ldm	sp++,r7,pc
80001478:	80 00       	ld.sh	r0,r0[0x0]
8000147a:	21 6e       	sub	lr,22
8000147c:	80 00       	ld.sh	r0,r0[0x0]
8000147e:	21 66       	sub	r6,22
80001480:	80 00       	ld.sh	r0,r0[0x0]
80001482:	21 6a       	sub	r10,22

80001484 <usartSetBaudrate>:
80001484:	eb cd 40 80 	pushm	r7,lr
80001488:	1a 97       	mov	r7,sp
8000148a:	20 bd       	sub	sp,44
8000148c:	ef 4c ff ec 	st.w	r7[-20],r12
80001490:	ef 4b ff e8 	st.w	r7[-24],r11
80001494:	ef 4a ff e4 	st.w	r7[-28],r10
80001498:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000149c:	f0 09 15 04 	lsl	r9,r8,0x4
800014a0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800014a4:	10 39       	cp.w	r9,r8
800014a6:	e0 8b 00 06 	brhi	800014b2 <usartSetBaudrate+0x2e>
800014aa:	31 09       	mov	r9,16
800014ac:	ef 49 ff d4 	st.w	r7[-44],r9
800014b0:	c0 48       	rjmp	800014b8 <usartSetBaudrate+0x34>
800014b2:	30 88       	mov	r8,8
800014b4:	ef 48 ff d4 	st.w	r7[-44],r8
800014b8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800014bc:	ef 49 ff f0 	st.w	r7[-16],r9
800014c0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800014c4:	f0 0a 15 03 	lsl	r10,r8,0x3
800014c8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800014cc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800014d0:	f2 08 02 48 	mul	r8,r9,r8
800014d4:	a1 98       	lsr	r8,0x1
800014d6:	10 0a       	add	r10,r8
800014d8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800014dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800014e0:	f2 08 02 48 	mul	r8,r9,r8
800014e4:	f4 08 0d 08 	divu	r8,r10,r8
800014e8:	ef 48 ff f4 	st.w	r7[-12],r8
800014ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800014f0:	a3 98       	lsr	r8,0x3
800014f2:	ef 48 ff f8 	st.w	r7[-8],r8
800014f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800014fa:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800014fe:	ef 48 ff fc 	st.w	r7[-4],r8
80001502:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001506:	58 08       	cp.w	r8,0
80001508:	c0 70       	breq	80001516 <usartSetBaudrate+0x92>
8000150a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000150e:	e0 48 ff ff 	cp.w	r8,65535
80001512:	e0 88 00 06 	brls	8000151e <usartSetBaudrate+0x9a>
80001516:	30 18       	mov	r8,1
80001518:	ef 48 ff d8 	st.w	r7[-40],r8
8000151c:	c2 c8       	rjmp	80001574 <usartSetBaudrate+0xf0>
8000151e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001522:	70 18       	ld.w	r8,r8[0x4]
80001524:	10 99       	mov	r9,r8
80001526:	e4 19 ff f7 	andh	r9,0xfff7
8000152a:	e0 19 fe cf 	andl	r9,0xfecf
8000152e:	ef 49 ff dc 	st.w	r7[-36],r9
80001532:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001536:	59 08       	cp.w	r8,16
80001538:	c0 60       	breq	80001544 <usartSetBaudrate+0xc0>
8000153a:	e8 68 00 00 	mov	r8,524288
8000153e:	ef 48 ff e0 	st.w	r7[-32],r8
80001542:	c0 48       	rjmp	8000154a <usartSetBaudrate+0xc6>
80001544:	30 09       	mov	r9,0
80001546:	ef 49 ff e0 	st.w	r7[-32],r9
8000154a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000154e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001552:	10 49       	or	r9,r8
80001554:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001558:	91 19       	st.w	r8[0x4],r9
8000155a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000155e:	f0 09 15 10 	lsl	r9,r8,0x10
80001562:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001566:	10 49       	or	r9,r8
80001568:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000156c:	91 89       	st.w	r8[0x20],r9
8000156e:	30 09       	mov	r9,0
80001570:	ef 49 ff d8 	st.w	r7[-40],r9
80001574:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001578:	10 9c       	mov	r12,r8
8000157a:	2f 5d       	sub	sp,-44
8000157c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001580 <usartInit>:
80001580:	eb cd 40 80 	pushm	r7,lr
80001584:	1a 97       	mov	r7,sp
80001586:	20 4d       	sub	sp,16
80001588:	ef 4c ff f8 	st.w	r7[-8],r12
8000158c:	ef 4b ff f4 	st.w	r7[-12],r11
80001590:	ef 4a ff f0 	st.w	r7[-16],r10
80001594:	fe 78 10 00 	mov	r8,-61440
80001598:	ef 48 ff fc 	st.w	r7[-4],r8
8000159c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800015a0:	30 18       	mov	r8,1
800015a2:	93 28       	st.w	r9[0x8],r8
800015a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800015a8:	30 28       	mov	r8,2
800015aa:	93 28       	st.w	r9[0x8],r8
800015ac:	ee fc ff f8 	ld.w	r12,r7[-8]
800015b0:	f0 1f 00 3b 	mcall	8000169c <usartInit+0x11c>
800015b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800015b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015bc:	70 08       	ld.w	r8,r8[0x0]
800015be:	12 9a       	mov	r10,r9
800015c0:	10 9b       	mov	r11,r8
800015c2:	ee fc ff f8 	ld.w	r12,r7[-8]
800015c6:	f0 1f 00 37 	mcall	800016a0 <usartInit+0x120>
800015ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015ce:	11 c9       	ld.ub	r9,r8[0x4]
800015d0:	30 98       	mov	r8,9
800015d2:	f0 09 18 00 	cp.b	r9,r8
800015d6:	c0 a1       	brne	800015ea <usartInit+0x6a>
800015d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015dc:	70 18       	ld.w	r8,r8[0x4]
800015de:	10 99       	mov	r9,r8
800015e0:	b1 b9       	sbr	r9,0x11
800015e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015e6:	91 19       	st.w	r8[0x4],r9
800015e8:	c0 d8       	rjmp	80001602 <usartInit+0x82>
800015ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015ee:	70 19       	ld.w	r9,r8[0x4]
800015f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015f4:	11 c8       	ld.ub	r8,r8[0x4]
800015f6:	20 58       	sub	r8,5
800015f8:	a7 68       	lsl	r8,0x6
800015fa:	10 49       	or	r9,r8
800015fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001600:	91 19       	st.w	r8[0x4],r9
80001602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001606:	70 1a       	ld.w	r10,r8[0x4]
80001608:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000160c:	11 d8       	ld.ub	r8,r8[0x5]
8000160e:	f0 09 15 09 	lsl	r9,r8,0x9
80001612:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001616:	f1 38 00 08 	ld.ub	r8,r8[8]
8000161a:	af 68       	lsl	r8,0xe
8000161c:	f3 e8 10 08 	or	r8,r9,r8
80001620:	f5 e8 10 09 	or	r9,r10,r8
80001624:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001628:	91 19       	st.w	r8[0x4],r9
8000162a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000162e:	90 39       	ld.sh	r9,r8[0x6]
80001630:	30 28       	mov	r8,2
80001632:	f0 09 19 00 	cp.h	r9,r8
80001636:	e0 88 00 14 	brls	8000165e <usartInit+0xde>
8000163a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000163e:	70 18       	ld.w	r8,r8[0x4]
80001640:	10 99       	mov	r9,r8
80001642:	ad b9       	sbr	r9,0xd
80001644:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001648:	91 19       	st.w	r8[0x4],r9
8000164a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000164e:	90 38       	ld.sh	r8,r8[0x6]
80001650:	5c 78       	castu.h	r8
80001652:	20 28       	sub	r8,2
80001654:	10 99       	mov	r9,r8
80001656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000165a:	91 a9       	st.w	r8[0x28],r9
8000165c:	c0 d8       	rjmp	80001676 <usartInit+0xf6>
8000165e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001662:	70 19       	ld.w	r9,r8[0x4]
80001664:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001668:	90 38       	ld.sh	r8,r8[0x6]
8000166a:	5c 78       	castu.h	r8
8000166c:	ad 68       	lsl	r8,0xc
8000166e:	10 49       	or	r9,r8
80001670:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001674:	91 19       	st.w	r8[0x4],r9
80001676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000167a:	70 18       	ld.w	r8,r8[0x4]
8000167c:	10 99       	mov	r9,r8
8000167e:	e0 19 ff f0 	andl	r9,0xfff0
80001682:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001686:	91 19       	st.w	r8[0x4],r9
80001688:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000168c:	35 08       	mov	r8,80
8000168e:	93 08       	st.w	r9[0x0],r8
80001690:	30 08       	mov	r8,0
80001692:	10 9c       	mov	r12,r8
80001694:	2f cd       	sub	sp,-16
80001696:	e3 cd 80 80 	ldm	sp++,r7,pc
8000169a:	00 00       	add	r0,r0
8000169c:	80 00       	ld.sh	r0,r0[0x0]
8000169e:	14 14       	sub	r4,r10
800016a0:	80 00       	ld.sh	r0,r0[0x0]
800016a2:	14 84       	andn	r4,r10

800016a4 <timerInit>:
800016a4:	d5 01       	pushm	r11,lr
800016a6:	d2 01       	pushm	r12
800016a8:	f0 1f 00 28 	mcall	80001748 <timerClearInterrupt+0x10>
800016ac:	f0 1f 00 28 	mcall	8000174c <timerClearInterrupt+0x14>
800016b0:	e0 6c 38 00 	mov	r12,14336
800016b4:	ea 1c ff ff 	orh	r12,0xffff
800016b8:	e0 6b c0 00 	mov	r11,49152
800016bc:	ea 1b 00 00 	orh	r11,0x0
800016c0:	99 1b       	st.w	r12[0x4],r11
800016c2:	30 1b       	mov	r11,1
800016c4:	a5 6b       	lsl	r11,0x4
800016c6:	99 9b       	st.w	r12[0x24],r11
800016c8:	d2 02       	popm	r12
800016ca:	f0 1f 00 22 	mcall	80001750 <timerClearInterrupt+0x18>
800016ce:	d5 02       	popm	r11,lr
800016d0:	1c 9f       	mov	pc,lr

800016d2 <timerReset>:
800016d2:	d3 01       	pushm	r11-r12
800016d4:	e0 6c 38 00 	mov	r12,14336
800016d8:	ea 1c ff ff 	orh	r12,0xffff
800016dc:	30 5b       	mov	r11,5
800016de:	99 0b       	st.w	r12[0x0],r11
800016e0:	e0 6b 00 08 	mov	r11,8
800016e4:	ea 1b 00 00 	orh	r11,0x0
800016e8:	76 0b       	ld.w	r11,r11[0x0]
800016ea:	99 7b       	st.w	r12[0x1c],r11
800016ec:	d3 02       	popm	r11-r12
800016ee:	1c 9f       	mov	pc,lr

800016f0 <timerStop>:
800016f0:	d3 01       	pushm	r11-r12
800016f2:	e0 6c 38 00 	mov	r12,14336
800016f6:	ea 1c ff ff 	orh	r12,0xffff
800016fa:	30 2b       	mov	r11,2
800016fc:	99 0b       	st.w	r12[0x0],r11
800016fe:	d3 02       	popm	r11-r12
80001700:	1c 9f       	mov	pc,lr

80001702 <timerRCSet>:
80001702:	d3 01       	pushm	r11-r12
80001704:	49 4b       	lddpc	r11,80001754 <timerClearInterrupt+0x1c>
80001706:	97 0c       	st.w	r11[0x0],r12
80001708:	e0 6c 38 00 	mov	r12,14336
8000170c:	ea 1c ff ff 	orh	r12,0xffff
80001710:	76 0b       	ld.w	r11,r11[0x0]
80001712:	99 7b       	st.w	r12[0x1c],r11
80001714:	d3 02       	popm	r11-r12
80001716:	1c 9f       	mov	pc,lr

80001718 <timerPrescaleSet>:
80001718:	d3 81       	pushm	r10-r12
8000171a:	49 0b       	lddpc	r11,80001758 <timerClearInterrupt+0x20>
8000171c:	97 0c       	st.w	r11[0x0],r12
8000171e:	e0 6c 38 00 	mov	r12,14336
80001722:	ea 1c ff ff 	orh	r12,0xffff
80001726:	78 1a       	ld.w	r10,r12[0x4]
80001728:	3f 8b       	mov	r11,-8
8000172a:	16 6a       	and	r10,r11
8000172c:	48 bb       	lddpc	r11,80001758 <timerClearInterrupt+0x20>
8000172e:	76 0b       	ld.w	r11,r11[0x0]
80001730:	14 4b       	or	r11,r10
80001732:	99 1b       	st.w	r12[0x4],r11
80001734:	d3 82       	popm	r10-r12
80001736:	1c 9f       	mov	pc,lr

80001738 <timerClearInterrupt>:
80001738:	d2 01       	pushm	r12
8000173a:	e0 6c 38 00 	mov	r12,14336
8000173e:	ea 1c ff ff 	orh	r12,0xffff
80001742:	78 8c       	ld.w	r12,r12[0x20]
80001744:	d2 02       	popm	r12
80001746:	1c 9f       	mov	pc,lr
80001748:	80 00       	ld.sh	r0,r0[0x0]
8000174a:	21 66       	sub	r6,22
8000174c:	80 00       	ld.sh	r0,r0[0x0]
8000174e:	17 38       	ld.ub	r8,r11++
80001750:	80 00       	ld.sh	r0,r0[0x0]
80001752:	10 b0       	st.h	r8++,r0
80001754:	00 00       	add	r0,r0
80001756:	00 08       	add	r8,r0
80001758:	00 00       	add	r0,r0
8000175a:	00 0c       	add	r12,r0

8000175c <_stext>:
8000175c:	49 7d       	lddpc	sp,800017b8 <udata_end+0x4>
8000175e:	49 80       	lddpc	r0,800017bc <udata_end+0x8>
80001760:	1a d0       	st.w	--sp,r0
80001762:	e5 cd 20 00 	ldmts	sp,sp
80001766:	1b 00       	ld.w	r0,sp++
80001768:	49 60       	lddpc	r0,800017c0 <udata_end+0xc>
8000176a:	e3 b0 00 01 	mtsr	0x4,r0
8000176e:	d5 53       	csrf	0x15
80001770:	e0 6c 0c 00 	mov	r12,3072
80001774:	ea 1c ff ff 	orh	r12,0xffff
80001778:	e0 6b 01 07 	mov	r11,263
8000177c:	99 ab       	st.w	r12[0x28],r11
8000177e:	30 4b       	mov	r11,4
80001780:	99 0b       	st.w	r12[0x0],r11
80001782:	e0 6a 00 80 	mov	r10,128

80001786 <xw8>:
80001786:	79 5b       	ld.w	r11,r12[0x54]
80001788:	14 7b       	tst	r11,r10
8000178a:	cf e0       	breq	80001786 <xw8>
8000178c:	30 5b       	mov	r11,5
8000178e:	99 0b       	st.w	r12[0x0],r11

80001790 <idata_>:
80001790:	48 d0       	lddpc	r0,800017c4 <udata_end+0x10>
80001792:	48 e1       	lddpc	r1,800017c8 <udata_end+0x14>
80001794:	02 30       	cp.w	r0,r1
80001796:	c0 62       	brcc	800017a2 <idata_end>
80001798:	48 d2       	lddpc	r2,800017cc <udata_end+0x18>

8000179a <idata_loop>:
8000179a:	05 04       	ld.w	r4,r2++
8000179c:	00 a4       	st.w	r0++,r4
8000179e:	02 30       	cp.w	r0,r1
800017a0:	cf d3       	brcs	8000179a <idata_loop>

800017a2 <idata_end>:
800017a2:	48 c0       	lddpc	r0,800017d0 <udata_end+0x1c>
800017a4:	48 c1       	lddpc	r1,800017d4 <udata_end+0x20>
800017a6:	02 30       	cp.w	r0,r1
800017a8:	c0 62       	brcc	800017b4 <udata_end>
800017aa:	30 02       	mov	r2,0
800017ac:	30 03       	mov	r3,0

800017ae <udata_loop>:
800017ae:	00 a2       	st.w	r0++,r2
800017b0:	02 30       	cp.w	r0,r1
800017b2:	cf e3       	brcs	800017ae <udata_loop>

800017b4 <udata_end>:
800017b4:	48 9f       	lddpc	pc,800017d8 <udata_end+0x24>
800017b6:	00 00       	add	r0,r0
800017b8:	00 01       	add	r1,r0
800017ba:	00 00       	add	r0,r0
800017bc:	00 00       	add	r0,r0
800017be:	f0 00       	*unknown*
800017c0:	80 00       	ld.sh	r0,r0[0x0]
800017c2:	20 00       	sub	r0,0
800017c4:	00 00       	add	r0,r0
800017c6:	00 08       	add	r8,r0
800017c8:	00 00       	add	r0,r0
800017ca:	05 18       	ld.sh	r8,r2++
800017cc:	80 00       	ld.sh	r0,r0[0x0]
800017ce:	24 88       	sub	r8,72
800017d0:	00 00       	add	r0,r0
800017d2:	05 18       	ld.sh	r8,r2++
800017d4:	00 00       	add	r0,r0
800017d6:	05 a8       	ld.ub	r8,r2[0x2]
800017d8:	80 00       	ld.sh	r0,r0[0x0]
800017da:	06 a0       	st.w	r3++,r0

800017dc <abs>:
800017dc:	5c 4c       	abs	r12
800017de:	5e fc       	retal	r12

800017e0 <calloc>:
800017e0:	d4 01       	pushm	lr
800017e2:	48 48       	lddpc	r8,800017f0 <calloc+0x10>
800017e4:	16 9a       	mov	r10,r11
800017e6:	18 9b       	mov	r11,r12
800017e8:	70 0c       	ld.w	r12,r8[0x0]
800017ea:	f0 1f 00 03 	mcall	800017f4 <calloc+0x14>
800017ee:	d8 02       	popm	pc
800017f0:	00 00       	add	r0,r0
800017f2:	01 00       	ld.w	r0,r0++
800017f4:	80 00       	ld.sh	r0,r0[0x0]
800017f6:	17 f8       	ld.ub	r8,r11[0x7]

800017f8 <_calloc_r>:
800017f8:	d4 21       	pushm	r4-r7,lr
800017fa:	f4 0b 02 4b 	mul	r11,r10,r11
800017fe:	f0 1f 00 15 	mcall	80001850 <_calloc_r+0x58>
80001802:	18 97       	mov	r7,r12
80001804:	c2 30       	breq	8000184a <_calloc_r+0x52>
80001806:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000180a:	e0 1a ff fc 	andl	r10,0xfffc
8000180e:	20 4a       	sub	r10,4
80001810:	e0 4a 00 24 	cp.w	r10,36
80001814:	e0 8b 00 18 	brhi	80001844 <_calloc_r+0x4c>
80001818:	18 98       	mov	r8,r12
8000181a:	59 3a       	cp.w	r10,19
8000181c:	e0 88 00 0f 	brls	8000183a <_calloc_r+0x42>
80001820:	30 09       	mov	r9,0
80001822:	10 a9       	st.w	r8++,r9
80001824:	10 a9       	st.w	r8++,r9
80001826:	59 ba       	cp.w	r10,27
80001828:	e0 88 00 09 	brls	8000183a <_calloc_r+0x42>
8000182c:	10 a9       	st.w	r8++,r9
8000182e:	10 a9       	st.w	r8++,r9
80001830:	e0 4a 00 24 	cp.w	r10,36
80001834:	c0 31       	brne	8000183a <_calloc_r+0x42>
80001836:	10 a9       	st.w	r8++,r9
80001838:	10 a9       	st.w	r8++,r9
8000183a:	30 09       	mov	r9,0
8000183c:	10 a9       	st.w	r8++,r9
8000183e:	91 19       	st.w	r8[0x4],r9
80001840:	91 09       	st.w	r8[0x0],r9
80001842:	c0 48       	rjmp	8000184a <_calloc_r+0x52>
80001844:	30 0b       	mov	r11,0
80001846:	f0 1f 00 04 	mcall	80001854 <_calloc_r+0x5c>
8000184a:	0e 9c       	mov	r12,r7
8000184c:	d8 22       	popm	r4-r7,pc
8000184e:	00 00       	add	r0,r0
80001850:	80 00       	ld.sh	r0,r0[0x0]
80001852:	18 58       	eor	r8,r12
80001854:	80 00       	ld.sh	r0,r0[0x0]
80001856:	1c a8       	st.w	lr++,r8

80001858 <_malloc_r>:
80001858:	d4 31       	pushm	r0-r7,lr
8000185a:	f6 c8 ff f5 	sub	r8,r11,-11
8000185e:	18 95       	mov	r5,r12
80001860:	10 97       	mov	r7,r8
80001862:	e0 17 ff f8 	andl	r7,0xfff8
80001866:	59 68       	cp.w	r8,22
80001868:	f9 b7 08 10 	movls	r7,16
8000186c:	16 37       	cp.w	r7,r11
8000186e:	5f 38       	srlo	r8
80001870:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001874:	c0 50       	breq	8000187e <_malloc_r+0x26>
80001876:	30 c8       	mov	r8,12
80001878:	99 38       	st.w	r12[0xc],r8
8000187a:	e0 8f 01 f3 	bral	80001c60 <_malloc_r+0x408>
8000187e:	f0 1f 00 50 	mcall	800019bc <_malloc_r+0x164>
80001882:	e0 47 01 f7 	cp.w	r7,503
80001886:	e0 8b 00 1c 	brhi	800018be <_malloc_r+0x66>
8000188a:	ee 03 16 03 	lsr	r3,r7,0x3
8000188e:	4c d8       	lddpc	r8,800019c0 <_malloc_r+0x168>
80001890:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001894:	70 36       	ld.w	r6,r8[0xc]
80001896:	10 36       	cp.w	r6,r8
80001898:	c0 61       	brne	800018a4 <_malloc_r+0x4c>
8000189a:	ec c8 ff f8 	sub	r8,r6,-8
8000189e:	70 36       	ld.w	r6,r8[0xc]
800018a0:	10 36       	cp.w	r6,r8
800018a2:	c0 c0       	breq	800018ba <_malloc_r+0x62>
800018a4:	6c 18       	ld.w	r8,r6[0x4]
800018a6:	e0 18 ff fc 	andl	r8,0xfffc
800018aa:	6c 3a       	ld.w	r10,r6[0xc]
800018ac:	ec 08 00 09 	add	r9,r6,r8
800018b0:	0a 9c       	mov	r12,r5
800018b2:	6c 28       	ld.w	r8,r6[0x8]
800018b4:	95 28       	st.w	r10[0x8],r8
800018b6:	91 3a       	st.w	r8[0xc],r10
800018b8:	c4 68       	rjmp	80001944 <_malloc_r+0xec>
800018ba:	2f e3       	sub	r3,-2
800018bc:	c4 c8       	rjmp	80001954 <_malloc_r+0xfc>
800018be:	ee 03 16 09 	lsr	r3,r7,0x9
800018c2:	c0 41       	brne	800018ca <_malloc_r+0x72>
800018c4:	ee 03 16 03 	lsr	r3,r7,0x3
800018c8:	c2 68       	rjmp	80001914 <_malloc_r+0xbc>
800018ca:	58 43       	cp.w	r3,4
800018cc:	e0 8b 00 06 	brhi	800018d8 <_malloc_r+0x80>
800018d0:	ee 03 16 06 	lsr	r3,r7,0x6
800018d4:	2c 83       	sub	r3,-56
800018d6:	c1 f8       	rjmp	80001914 <_malloc_r+0xbc>
800018d8:	59 43       	cp.w	r3,20
800018da:	e0 8b 00 04 	brhi	800018e2 <_malloc_r+0x8a>
800018de:	2a 53       	sub	r3,-91
800018e0:	c1 a8       	rjmp	80001914 <_malloc_r+0xbc>
800018e2:	e0 43 00 54 	cp.w	r3,84
800018e6:	e0 8b 00 06 	brhi	800018f2 <_malloc_r+0x9a>
800018ea:	ee 03 16 0c 	lsr	r3,r7,0xc
800018ee:	29 23       	sub	r3,-110
800018f0:	c1 28       	rjmp	80001914 <_malloc_r+0xbc>
800018f2:	e0 43 01 54 	cp.w	r3,340
800018f6:	e0 8b 00 06 	brhi	80001902 <_malloc_r+0xaa>
800018fa:	ee 03 16 0f 	lsr	r3,r7,0xf
800018fe:	28 93       	sub	r3,-119
80001900:	c0 a8       	rjmp	80001914 <_malloc_r+0xbc>
80001902:	e0 43 05 54 	cp.w	r3,1364
80001906:	e0 88 00 04 	brls	8000190e <_malloc_r+0xb6>
8000190a:	37 e3       	mov	r3,126
8000190c:	c0 48       	rjmp	80001914 <_malloc_r+0xbc>
8000190e:	ee 03 16 12 	lsr	r3,r7,0x12
80001912:	28 43       	sub	r3,-124
80001914:	4a ba       	lddpc	r10,800019c0 <_malloc_r+0x168>
80001916:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000191a:	74 36       	ld.w	r6,r10[0xc]
8000191c:	c1 98       	rjmp	8000194e <_malloc_r+0xf6>
8000191e:	6c 19       	ld.w	r9,r6[0x4]
80001920:	e0 19 ff fc 	andl	r9,0xfffc
80001924:	f2 07 01 0b 	sub	r11,r9,r7
80001928:	58 fb       	cp.w	r11,15
8000192a:	e0 8a 00 04 	brle	80001932 <_malloc_r+0xda>
8000192e:	20 13       	sub	r3,1
80001930:	c1 18       	rjmp	80001952 <_malloc_r+0xfa>
80001932:	6c 38       	ld.w	r8,r6[0xc]
80001934:	58 0b       	cp.w	r11,0
80001936:	c0 b5       	brlt	8000194c <_malloc_r+0xf4>
80001938:	6c 2a       	ld.w	r10,r6[0x8]
8000193a:	ec 09 00 09 	add	r9,r6,r9
8000193e:	0a 9c       	mov	r12,r5
80001940:	91 2a       	st.w	r8[0x8],r10
80001942:	95 38       	st.w	r10[0xc],r8
80001944:	72 18       	ld.w	r8,r9[0x4]
80001946:	a1 a8       	sbr	r8,0x0
80001948:	93 18       	st.w	r9[0x4],r8
8000194a:	cb c8       	rjmp	80001ac2 <_malloc_r+0x26a>
8000194c:	10 96       	mov	r6,r8
8000194e:	14 36       	cp.w	r6,r10
80001950:	ce 71       	brne	8000191e <_malloc_r+0xc6>
80001952:	2f f3       	sub	r3,-1
80001954:	49 ba       	lddpc	r10,800019c0 <_malloc_r+0x168>
80001956:	f4 cc ff f8 	sub	r12,r10,-8
8000195a:	78 26       	ld.w	r6,r12[0x8]
8000195c:	18 36       	cp.w	r6,r12
8000195e:	c6 e0       	breq	80001a3a <_malloc_r+0x1e2>
80001960:	6c 19       	ld.w	r9,r6[0x4]
80001962:	e0 19 ff fc 	andl	r9,0xfffc
80001966:	f2 07 01 08 	sub	r8,r9,r7
8000196a:	58 f8       	cp.w	r8,15
8000196c:	e0 89 00 90 	brgt	80001a8c <_malloc_r+0x234>
80001970:	99 3c       	st.w	r12[0xc],r12
80001972:	99 2c       	st.w	r12[0x8],r12
80001974:	58 08       	cp.w	r8,0
80001976:	c0 55       	brlt	80001980 <_malloc_r+0x128>
80001978:	ec 09 00 09 	add	r9,r6,r9
8000197c:	0a 9c       	mov	r12,r5
8000197e:	ce 3b       	rjmp	80001944 <_malloc_r+0xec>
80001980:	e0 49 01 ff 	cp.w	r9,511
80001984:	e0 8b 00 13 	brhi	800019aa <_malloc_r+0x152>
80001988:	a3 99       	lsr	r9,0x3
8000198a:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000198e:	70 2b       	ld.w	r11,r8[0x8]
80001990:	8d 38       	st.w	r6[0xc],r8
80001992:	8d 2b       	st.w	r6[0x8],r11
80001994:	97 36       	st.w	r11[0xc],r6
80001996:	91 26       	st.w	r8[0x8],r6
80001998:	a3 49       	asr	r9,0x2
8000199a:	74 18       	ld.w	r8,r10[0x4]
8000199c:	30 1b       	mov	r11,1
8000199e:	f6 09 09 49 	lsl	r9,r11,r9
800019a2:	f1 e9 10 09 	or	r9,r8,r9
800019a6:	95 19       	st.w	r10[0x4],r9
800019a8:	c4 98       	rjmp	80001a3a <_malloc_r+0x1e2>
800019aa:	f2 0a 16 09 	lsr	r10,r9,0x9
800019ae:	58 4a       	cp.w	r10,4
800019b0:	e0 8b 00 0a 	brhi	800019c4 <_malloc_r+0x16c>
800019b4:	f2 0a 16 06 	lsr	r10,r9,0x6
800019b8:	2c 8a       	sub	r10,-56
800019ba:	c2 38       	rjmp	80001a00 <_malloc_r+0x1a8>
800019bc:	80 00       	ld.sh	r0,r0[0x0]
800019be:	1c b6       	st.h	lr++,r6
800019c0:	00 00       	add	r0,r0
800019c2:	01 04       	ld.w	r4,r0++
800019c4:	59 4a       	cp.w	r10,20
800019c6:	e0 8b 00 04 	brhi	800019ce <_malloc_r+0x176>
800019ca:	2a 5a       	sub	r10,-91
800019cc:	c1 a8       	rjmp	80001a00 <_malloc_r+0x1a8>
800019ce:	e0 4a 00 54 	cp.w	r10,84
800019d2:	e0 8b 00 06 	brhi	800019de <_malloc_r+0x186>
800019d6:	f2 0a 16 0c 	lsr	r10,r9,0xc
800019da:	29 2a       	sub	r10,-110
800019dc:	c1 28       	rjmp	80001a00 <_malloc_r+0x1a8>
800019de:	e0 4a 01 54 	cp.w	r10,340
800019e2:	e0 8b 00 06 	brhi	800019ee <_malloc_r+0x196>
800019e6:	f2 0a 16 0f 	lsr	r10,r9,0xf
800019ea:	28 9a       	sub	r10,-119
800019ec:	c0 a8       	rjmp	80001a00 <_malloc_r+0x1a8>
800019ee:	e0 4a 05 54 	cp.w	r10,1364
800019f2:	e0 88 00 04 	brls	800019fa <_malloc_r+0x1a2>
800019f6:	37 ea       	mov	r10,126
800019f8:	c0 48       	rjmp	80001a00 <_malloc_r+0x1a8>
800019fa:	f2 0a 16 12 	lsr	r10,r9,0x12
800019fe:	28 4a       	sub	r10,-124
80001a00:	4c 8b       	lddpc	r11,80001b20 <_malloc_r+0x2c8>
80001a02:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001a06:	68 28       	ld.w	r8,r4[0x8]
80001a08:	08 38       	cp.w	r8,r4
80001a0a:	c0 e1       	brne	80001a26 <_malloc_r+0x1ce>
80001a0c:	76 19       	ld.w	r9,r11[0x4]
80001a0e:	a3 4a       	asr	r10,0x2
80001a10:	30 1e       	mov	lr,1
80001a12:	fc 0a 09 4a 	lsl	r10,lr,r10
80001a16:	f3 ea 10 0a 	or	r10,r9,r10
80001a1a:	10 99       	mov	r9,r8
80001a1c:	97 1a       	st.w	r11[0x4],r10
80001a1e:	c0 a8       	rjmp	80001a32 <_malloc_r+0x1da>
80001a20:	70 28       	ld.w	r8,r8[0x8]
80001a22:	08 38       	cp.w	r8,r4
80001a24:	c0 60       	breq	80001a30 <_malloc_r+0x1d8>
80001a26:	70 1a       	ld.w	r10,r8[0x4]
80001a28:	e0 1a ff fc 	andl	r10,0xfffc
80001a2c:	14 39       	cp.w	r9,r10
80001a2e:	cf 93       	brcs	80001a20 <_malloc_r+0x1c8>
80001a30:	70 39       	ld.w	r9,r8[0xc]
80001a32:	8d 39       	st.w	r6[0xc],r9
80001a34:	8d 28       	st.w	r6[0x8],r8
80001a36:	91 36       	st.w	r8[0xc],r6
80001a38:	93 26       	st.w	r9[0x8],r6
80001a3a:	e6 08 14 02 	asr	r8,r3,0x2
80001a3e:	30 1b       	mov	r11,1
80001a40:	4b 84       	lddpc	r4,80001b20 <_malloc_r+0x2c8>
80001a42:	f6 08 09 4b 	lsl	r11,r11,r8
80001a46:	68 18       	ld.w	r8,r4[0x4]
80001a48:	10 3b       	cp.w	r11,r8
80001a4a:	e0 8b 00 6f 	brhi	80001b28 <_malloc_r+0x2d0>
80001a4e:	f7 e8 00 09 	and	r9,r11,r8
80001a52:	c0 b1       	brne	80001a68 <_malloc_r+0x210>
80001a54:	e0 13 ff fc 	andl	r3,0xfffc
80001a58:	a1 7b       	lsl	r11,0x1
80001a5a:	2f c3       	sub	r3,-4
80001a5c:	c0 38       	rjmp	80001a62 <_malloc_r+0x20a>
80001a5e:	2f c3       	sub	r3,-4
80001a60:	a1 7b       	lsl	r11,0x1
80001a62:	f7 e8 00 09 	and	r9,r11,r8
80001a66:	cf c0       	breq	80001a5e <_malloc_r+0x206>
80001a68:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001a6c:	06 92       	mov	r2,r3
80001a6e:	1c 91       	mov	r1,lr
80001a70:	62 36       	ld.w	r6,r1[0xc]
80001a72:	c2 e8       	rjmp	80001ace <_malloc_r+0x276>
80001a74:	6c 1a       	ld.w	r10,r6[0x4]
80001a76:	e0 1a ff fc 	andl	r10,0xfffc
80001a7a:	f4 07 01 08 	sub	r8,r10,r7
80001a7e:	58 f8       	cp.w	r8,15
80001a80:	e0 8a 00 15 	brle	80001aaa <_malloc_r+0x252>
80001a84:	6c 3a       	ld.w	r10,r6[0xc]
80001a86:	6c 29       	ld.w	r9,r6[0x8]
80001a88:	95 29       	st.w	r10[0x8],r9
80001a8a:	93 3a       	st.w	r9[0xc],r10
80001a8c:	0e 99       	mov	r9,r7
80001a8e:	ec 07 00 07 	add	r7,r6,r7
80001a92:	a1 a9       	sbr	r9,0x0
80001a94:	99 37       	st.w	r12[0xc],r7
80001a96:	99 27       	st.w	r12[0x8],r7
80001a98:	8d 19       	st.w	r6[0x4],r9
80001a9a:	ee 08 09 08 	st.w	r7[r8],r8
80001a9e:	8f 2c       	st.w	r7[0x8],r12
80001aa0:	8f 3c       	st.w	r7[0xc],r12
80001aa2:	a1 a8       	sbr	r8,0x0
80001aa4:	0a 9c       	mov	r12,r5
80001aa6:	8f 18       	st.w	r7[0x4],r8
80001aa8:	c0 d8       	rjmp	80001ac2 <_malloc_r+0x26a>
80001aaa:	6c 39       	ld.w	r9,r6[0xc]
80001aac:	58 08       	cp.w	r8,0
80001aae:	c0 f5       	brlt	80001acc <_malloc_r+0x274>
80001ab0:	ec 0a 00 0a 	add	r10,r6,r10
80001ab4:	74 18       	ld.w	r8,r10[0x4]
80001ab6:	a1 a8       	sbr	r8,0x0
80001ab8:	0a 9c       	mov	r12,r5
80001aba:	95 18       	st.w	r10[0x4],r8
80001abc:	6c 28       	ld.w	r8,r6[0x8]
80001abe:	93 28       	st.w	r9[0x8],r8
80001ac0:	91 39       	st.w	r8[0xc],r9
80001ac2:	f0 1f 00 19 	mcall	80001b24 <_malloc_r+0x2cc>
80001ac6:	ec cc ff f8 	sub	r12,r6,-8
80001aca:	d8 32       	popm	r0-r7,pc
80001acc:	12 96       	mov	r6,r9
80001ace:	02 36       	cp.w	r6,r1
80001ad0:	cd 21       	brne	80001a74 <_malloc_r+0x21c>
80001ad2:	2f f2       	sub	r2,-1
80001ad4:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001ad8:	c0 30       	breq	80001ade <_malloc_r+0x286>
80001ada:	2f 81       	sub	r1,-8
80001adc:	cc ab       	rjmp	80001a70 <_malloc_r+0x218>
80001ade:	1c 98       	mov	r8,lr
80001ae0:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001ae4:	c0 81       	brne	80001af4 <_malloc_r+0x29c>
80001ae6:	68 19       	ld.w	r9,r4[0x4]
80001ae8:	f6 08 11 ff 	rsub	r8,r11,-1
80001aec:	f3 e8 00 08 	and	r8,r9,r8
80001af0:	89 18       	st.w	r4[0x4],r8
80001af2:	c0 78       	rjmp	80001b00 <_malloc_r+0x2a8>
80001af4:	f0 c9 00 08 	sub	r9,r8,8
80001af8:	20 13       	sub	r3,1
80001afa:	70 08       	ld.w	r8,r8[0x0]
80001afc:	12 38       	cp.w	r8,r9
80001afe:	cf 10       	breq	80001ae0 <_malloc_r+0x288>
80001b00:	a1 7b       	lsl	r11,0x1
80001b02:	68 18       	ld.w	r8,r4[0x4]
80001b04:	10 3b       	cp.w	r11,r8
80001b06:	e0 8b 00 11 	brhi	80001b28 <_malloc_r+0x2d0>
80001b0a:	58 0b       	cp.w	r11,0
80001b0c:	c0 e0       	breq	80001b28 <_malloc_r+0x2d0>
80001b0e:	04 93       	mov	r3,r2
80001b10:	c0 38       	rjmp	80001b16 <_malloc_r+0x2be>
80001b12:	2f c3       	sub	r3,-4
80001b14:	a1 7b       	lsl	r11,0x1
80001b16:	f7 e8 00 09 	and	r9,r11,r8
80001b1a:	ca 71       	brne	80001a68 <_malloc_r+0x210>
80001b1c:	cf bb       	rjmp	80001b12 <_malloc_r+0x2ba>
80001b1e:	00 00       	add	r0,r0
80001b20:	00 00       	add	r0,r0
80001b22:	01 04       	ld.w	r4,r0++
80001b24:	80 00       	ld.sh	r0,r0[0x0]
80001b26:	1c b8       	st.h	lr++,r8
80001b28:	68 23       	ld.w	r3,r4[0x8]
80001b2a:	66 12       	ld.w	r2,r3[0x4]
80001b2c:	e0 12 ff fc 	andl	r2,0xfffc
80001b30:	0e 32       	cp.w	r2,r7
80001b32:	5f 39       	srlo	r9
80001b34:	e4 07 01 08 	sub	r8,r2,r7
80001b38:	58 f8       	cp.w	r8,15
80001b3a:	5f aa       	srle	r10
80001b3c:	f5 e9 10 09 	or	r9,r10,r9
80001b40:	e0 80 00 a2 	breq	80001c84 <_malloc_r+0x42c>
80001b44:	4c 88       	lddpc	r8,80001c64 <_malloc_r+0x40c>
80001b46:	70 01       	ld.w	r1,r8[0x0]
80001b48:	4c 88       	lddpc	r8,80001c68 <_malloc_r+0x410>
80001b4a:	2f 01       	sub	r1,-16
80001b4c:	70 08       	ld.w	r8,r8[0x0]
80001b4e:	0e 01       	add	r1,r7
80001b50:	5b f8       	cp.w	r8,-1
80001b52:	c0 40       	breq	80001b5a <_malloc_r+0x302>
80001b54:	28 11       	sub	r1,-127
80001b56:	e0 11 ff 80 	andl	r1,0xff80
80001b5a:	02 9b       	mov	r11,r1
80001b5c:	0a 9c       	mov	r12,r5
80001b5e:	f0 1f 00 44 	mcall	80001c6c <_malloc_r+0x414>
80001b62:	18 96       	mov	r6,r12
80001b64:	5b fc       	cp.w	r12,-1
80001b66:	c6 e0       	breq	80001c42 <_malloc_r+0x3ea>
80001b68:	e6 02 00 08 	add	r8,r3,r2
80001b6c:	10 3c       	cp.w	r12,r8
80001b6e:	c0 32       	brcc	80001b74 <_malloc_r+0x31c>
80001b70:	08 33       	cp.w	r3,r4
80001b72:	c6 81       	brne	80001c42 <_malloc_r+0x3ea>
80001b74:	4b fa       	lddpc	r10,80001c70 <_malloc_r+0x418>
80001b76:	74 09       	ld.w	r9,r10[0x0]
80001b78:	e2 09 00 09 	add	r9,r1,r9
80001b7c:	95 09       	st.w	r10[0x0],r9
80001b7e:	10 36       	cp.w	r6,r8
80001b80:	c0 a1       	brne	80001b94 <_malloc_r+0x33c>
80001b82:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001b86:	c0 71       	brne	80001b94 <_malloc_r+0x33c>
80001b88:	e2 02 00 02 	add	r2,r1,r2
80001b8c:	68 28       	ld.w	r8,r4[0x8]
80001b8e:	a1 a2       	sbr	r2,0x0
80001b90:	91 12       	st.w	r8[0x4],r2
80001b92:	c4 c8       	rjmp	80001c2a <_malloc_r+0x3d2>
80001b94:	4b 5a       	lddpc	r10,80001c68 <_malloc_r+0x410>
80001b96:	74 0b       	ld.w	r11,r10[0x0]
80001b98:	5b fb       	cp.w	r11,-1
80001b9a:	c0 31       	brne	80001ba0 <_malloc_r+0x348>
80001b9c:	95 06       	st.w	r10[0x0],r6
80001b9e:	c0 68       	rjmp	80001baa <_malloc_r+0x352>
80001ba0:	ec 09 00 09 	add	r9,r6,r9
80001ba4:	4b 3a       	lddpc	r10,80001c70 <_malloc_r+0x418>
80001ba6:	10 19       	sub	r9,r8
80001ba8:	95 09       	st.w	r10[0x0],r9
80001baa:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001bae:	f0 09 11 08 	rsub	r9,r8,8
80001bb2:	58 08       	cp.w	r8,0
80001bb4:	f2 08 17 10 	movne	r8,r9
80001bb8:	ed d8 e1 06 	addne	r6,r6,r8
80001bbc:	28 08       	sub	r8,-128
80001bbe:	ec 01 00 01 	add	r1,r6,r1
80001bc2:	0a 9c       	mov	r12,r5
80001bc4:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001bc8:	f0 01 01 01 	sub	r1,r8,r1
80001bcc:	02 9b       	mov	r11,r1
80001bce:	f0 1f 00 28 	mcall	80001c6c <_malloc_r+0x414>
80001bd2:	4a 88       	lddpc	r8,80001c70 <_malloc_r+0x418>
80001bd4:	5b fc       	cp.w	r12,-1
80001bd6:	ec 0c 17 00 	moveq	r12,r6
80001bda:	f9 b1 00 00 	moveq	r1,0
80001bde:	70 09       	ld.w	r9,r8[0x0]
80001be0:	0c 1c       	sub	r12,r6
80001be2:	89 26       	st.w	r4[0x8],r6
80001be4:	02 0c       	add	r12,r1
80001be6:	12 01       	add	r1,r9
80001be8:	a1 ac       	sbr	r12,0x0
80001bea:	91 01       	st.w	r8[0x0],r1
80001bec:	8d 1c       	st.w	r6[0x4],r12
80001bee:	08 33       	cp.w	r3,r4
80001bf0:	c1 d0       	breq	80001c2a <_malloc_r+0x3d2>
80001bf2:	58 f2       	cp.w	r2,15
80001bf4:	e0 8b 00 05 	brhi	80001bfe <_malloc_r+0x3a6>
80001bf8:	30 18       	mov	r8,1
80001bfa:	8d 18       	st.w	r6[0x4],r8
80001bfc:	c2 38       	rjmp	80001c42 <_malloc_r+0x3ea>
80001bfe:	30 59       	mov	r9,5
80001c00:	20 c2       	sub	r2,12
80001c02:	e0 12 ff f8 	andl	r2,0xfff8
80001c06:	e6 02 00 08 	add	r8,r3,r2
80001c0a:	91 29       	st.w	r8[0x8],r9
80001c0c:	91 19       	st.w	r8[0x4],r9
80001c0e:	66 18       	ld.w	r8,r3[0x4]
80001c10:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001c14:	e5 e8 10 08 	or	r8,r2,r8
80001c18:	87 18       	st.w	r3[0x4],r8
80001c1a:	58 f2       	cp.w	r2,15
80001c1c:	e0 88 00 07 	brls	80001c2a <_malloc_r+0x3d2>
80001c20:	e6 cb ff f8 	sub	r11,r3,-8
80001c24:	0a 9c       	mov	r12,r5
80001c26:	f0 1f 00 14 	mcall	80001c74 <_malloc_r+0x41c>
80001c2a:	49 49       	lddpc	r9,80001c78 <_malloc_r+0x420>
80001c2c:	72 0a       	ld.w	r10,r9[0x0]
80001c2e:	49 18       	lddpc	r8,80001c70 <_malloc_r+0x418>
80001c30:	70 08       	ld.w	r8,r8[0x0]
80001c32:	14 38       	cp.w	r8,r10
80001c34:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001c38:	49 19       	lddpc	r9,80001c7c <_malloc_r+0x424>
80001c3a:	72 0a       	ld.w	r10,r9[0x0]
80001c3c:	14 38       	cp.w	r8,r10
80001c3e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001c42:	68 28       	ld.w	r8,r4[0x8]
80001c44:	70 18       	ld.w	r8,r8[0x4]
80001c46:	e0 18 ff fc 	andl	r8,0xfffc
80001c4a:	0e 38       	cp.w	r8,r7
80001c4c:	5f 39       	srlo	r9
80001c4e:	0e 18       	sub	r8,r7
80001c50:	58 f8       	cp.w	r8,15
80001c52:	5f aa       	srle	r10
80001c54:	f5 e9 10 09 	or	r9,r10,r9
80001c58:	c1 60       	breq	80001c84 <_malloc_r+0x42c>
80001c5a:	0a 9c       	mov	r12,r5
80001c5c:	f0 1f 00 09 	mcall	80001c80 <_malloc_r+0x428>
80001c60:	d8 3a       	popm	r0-r7,pc,r12=0
80001c62:	00 00       	add	r0,r0
80001c64:	00 00       	add	r0,r0
80001c66:	05 38       	ld.ub	r8,r2++
80001c68:	00 00       	add	r0,r0
80001c6a:	05 10       	ld.sh	r0,r2++
80001c6c:	80 00       	ld.sh	r0,r0[0x0]
80001c6e:	1c bc       	st.h	lr++,r12
80001c70:	00 00       	add	r0,r0
80001c72:	05 3c       	ld.ub	r12,r2++
80001c74:	80 00       	ld.sh	r0,r0[0x0]
80001c76:	1d d8       	ld.ub	r8,lr[0x5]
80001c78:	00 00       	add	r0,r0
80001c7a:	05 34       	ld.ub	r4,r2++
80001c7c:	00 00       	add	r0,r0
80001c7e:	05 30       	ld.ub	r0,r2++
80001c80:	80 00       	ld.sh	r0,r0[0x0]
80001c82:	1c b8       	st.h	lr++,r8
80001c84:	68 26       	ld.w	r6,r4[0x8]
80001c86:	a1 a8       	sbr	r8,0x0
80001c88:	0e 99       	mov	r9,r7
80001c8a:	a1 a9       	sbr	r9,0x0
80001c8c:	8d 19       	st.w	r6[0x4],r9
80001c8e:	ec 07 00 07 	add	r7,r6,r7
80001c92:	0a 9c       	mov	r12,r5
80001c94:	89 27       	st.w	r4[0x8],r7
80001c96:	8f 18       	st.w	r7[0x4],r8
80001c98:	f0 1f 00 03 	mcall	80001ca4 <_malloc_r+0x44c>
80001c9c:	ec cc ff f8 	sub	r12,r6,-8
80001ca0:	d8 32       	popm	r0-r7,pc
80001ca2:	00 00       	add	r0,r0
80001ca4:	80 00       	ld.sh	r0,r0[0x0]
80001ca6:	1c b8       	st.h	lr++,r8

80001ca8 <memset>:
80001ca8:	18 98       	mov	r8,r12
80001caa:	c0 38       	rjmp	80001cb0 <memset+0x8>
80001cac:	10 cb       	st.b	r8++,r11
80001cae:	20 1a       	sub	r10,1
80001cb0:	58 0a       	cp.w	r10,0
80001cb2:	cf d1       	brne	80001cac <memset+0x4>
80001cb4:	5e fc       	retal	r12

80001cb6 <__malloc_lock>:
80001cb6:	5e fc       	retal	r12

80001cb8 <__malloc_unlock>:
80001cb8:	5e fc       	retal	r12
80001cba:	d7 03       	nop

80001cbc <_sbrk_r>:
80001cbc:	d4 21       	pushm	r4-r7,lr
80001cbe:	30 08       	mov	r8,0
80001cc0:	18 97       	mov	r7,r12
80001cc2:	48 76       	lddpc	r6,80001cdc <_sbrk_r+0x20>
80001cc4:	16 9c       	mov	r12,r11
80001cc6:	8d 08       	st.w	r6[0x0],r8
80001cc8:	f0 1f 00 06 	mcall	80001ce0 <_sbrk_r+0x24>
80001ccc:	5b fc       	cp.w	r12,-1
80001cce:	c0 51       	brne	80001cd8 <_sbrk_r+0x1c>
80001cd0:	6c 08       	ld.w	r8,r6[0x0]
80001cd2:	58 08       	cp.w	r8,0
80001cd4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001cd8:	d8 22       	popm	r4-r7,pc
80001cda:	00 00       	add	r0,r0
80001cdc:	00 00       	add	r0,r0
80001cde:	05 a4       	ld.ub	r4,r2[0x2]
80001ce0:	80 00       	ld.sh	r0,r0[0x0]
80001ce2:	1c e4       	st.h	--lr,r4

80001ce4 <_sbrk>:
80001ce4:	d4 01       	pushm	lr
80001ce6:	48 c8       	lddpc	r8,80001d14 <_sbrk+0x30>
80001ce8:	70 09       	ld.w	r9,r8[0x0]
80001cea:	58 09       	cp.w	r9,0
80001cec:	c0 31       	brne	80001cf2 <_sbrk+0xe>
80001cee:	48 b9       	lddpc	r9,80001d18 <_sbrk+0x34>
80001cf0:	91 09       	st.w	r8[0x0],r9
80001cf2:	48 99       	lddpc	r9,80001d14 <_sbrk+0x30>
80001cf4:	48 aa       	lddpc	r10,80001d1c <_sbrk+0x38>
80001cf6:	72 08       	ld.w	r8,r9[0x0]
80001cf8:	f0 0c 00 0c 	add	r12,r8,r12
80001cfc:	14 3c       	cp.w	r12,r10
80001cfe:	e0 8b 00 04 	brhi	80001d06 <_sbrk+0x22>
80001d02:	93 0c       	st.w	r9[0x0],r12
80001d04:	c0 68       	rjmp	80001d10 <_sbrk+0x2c>
80001d06:	f0 1f 00 07 	mcall	80001d20 <_sbrk+0x3c>
80001d0a:	30 c8       	mov	r8,12
80001d0c:	99 08       	st.w	r12[0x0],r8
80001d0e:	3f f8       	mov	r8,-1
80001d10:	10 9c       	mov	r12,r8
80001d12:	d8 02       	popm	pc
80001d14:	00 00       	add	r0,r0
80001d16:	05 64       	ld.uh	r4,--r2
80001d18:	00 00       	add	r0,r0
80001d1a:	05 a8       	ld.ub	r8,r2[0x2]
80001d1c:	00 00       	add	r0,r0
80001d1e:	e0 00       	*unknown*
80001d20:	80 00       	ld.sh	r0,r0[0x0]
80001d22:	1d 24       	ld.uh	r4,lr++

80001d24 <__errno>:
80001d24:	48 28       	lddpc	r8,80001d2c <__errno+0x8>
80001d26:	70 0c       	ld.w	r12,r8[0x0]
80001d28:	2f 4c       	sub	r12,-12
80001d2a:	5e fc       	retal	r12
80001d2c:	00 00       	add	r0,r0
80001d2e:	01 00       	ld.w	r0,r0++

80001d30 <_malloc_trim_r>:
80001d30:	d4 21       	pushm	r4-r7,lr
80001d32:	16 95       	mov	r5,r11
80001d34:	18 97       	mov	r7,r12
80001d36:	f0 1f 00 23 	mcall	80001dc0 <_malloc_trim_r+0x90>
80001d3a:	4a 34       	lddpc	r4,80001dc4 <_malloc_trim_r+0x94>
80001d3c:	68 28       	ld.w	r8,r4[0x8]
80001d3e:	70 16       	ld.w	r6,r8[0x4]
80001d40:	e0 16 ff fc 	andl	r6,0xfffc
80001d44:	ec c8 ff 91 	sub	r8,r6,-111
80001d48:	f0 05 01 05 	sub	r5,r8,r5
80001d4c:	e0 15 ff 80 	andl	r5,0xff80
80001d50:	ea c5 00 80 	sub	r5,r5,128
80001d54:	e0 45 00 7f 	cp.w	r5,127
80001d58:	e0 8a 00 23 	brle	80001d9e <_malloc_trim_r+0x6e>
80001d5c:	30 0b       	mov	r11,0
80001d5e:	0e 9c       	mov	r12,r7
80001d60:	f0 1f 00 1a 	mcall	80001dc8 <_malloc_trim_r+0x98>
80001d64:	68 28       	ld.w	r8,r4[0x8]
80001d66:	0c 08       	add	r8,r6
80001d68:	10 3c       	cp.w	r12,r8
80001d6a:	c1 a1       	brne	80001d9e <_malloc_trim_r+0x6e>
80001d6c:	ea 0b 11 00 	rsub	r11,r5,0
80001d70:	0e 9c       	mov	r12,r7
80001d72:	f0 1f 00 16 	mcall	80001dc8 <_malloc_trim_r+0x98>
80001d76:	5b fc       	cp.w	r12,-1
80001d78:	c1 71       	brne	80001da6 <_malloc_trim_r+0x76>
80001d7a:	30 0b       	mov	r11,0
80001d7c:	0e 9c       	mov	r12,r7
80001d7e:	f0 1f 00 13 	mcall	80001dc8 <_malloc_trim_r+0x98>
80001d82:	68 28       	ld.w	r8,r4[0x8]
80001d84:	f8 08 01 09 	sub	r9,r12,r8
80001d88:	58 f9       	cp.w	r9,15
80001d8a:	e0 8a 00 0a 	brle	80001d9e <_malloc_trim_r+0x6e>
80001d8e:	a1 a9       	sbr	r9,0x0
80001d90:	91 19       	st.w	r8[0x4],r9
80001d92:	48 f8       	lddpc	r8,80001dcc <_malloc_trim_r+0x9c>
80001d94:	70 09       	ld.w	r9,r8[0x0]
80001d96:	48 f8       	lddpc	r8,80001dd0 <_malloc_trim_r+0xa0>
80001d98:	f8 09 01 09 	sub	r9,r12,r9
80001d9c:	91 09       	st.w	r8[0x0],r9
80001d9e:	0e 9c       	mov	r12,r7
80001da0:	f0 1f 00 0d 	mcall	80001dd4 <_malloc_trim_r+0xa4>
80001da4:	d8 2a       	popm	r4-r7,pc,r12=0
80001da6:	68 28       	ld.w	r8,r4[0x8]
80001da8:	0a 16       	sub	r6,r5
80001daa:	a1 a6       	sbr	r6,0x0
80001dac:	91 16       	st.w	r8[0x4],r6
80001dae:	48 98       	lddpc	r8,80001dd0 <_malloc_trim_r+0xa0>
80001db0:	70 09       	ld.w	r9,r8[0x0]
80001db2:	0a 19       	sub	r9,r5
80001db4:	0e 9c       	mov	r12,r7
80001db6:	91 09       	st.w	r8[0x0],r9
80001db8:	f0 1f 00 07 	mcall	80001dd4 <_malloc_trim_r+0xa4>
80001dbc:	da 2a       	popm	r4-r7,pc,r12=1
80001dbe:	00 00       	add	r0,r0
80001dc0:	80 00       	ld.sh	r0,r0[0x0]
80001dc2:	1c b6       	st.h	lr++,r6
80001dc4:	00 00       	add	r0,r0
80001dc6:	01 04       	ld.w	r4,r0++
80001dc8:	80 00       	ld.sh	r0,r0[0x0]
80001dca:	1c bc       	st.h	lr++,r12
80001dcc:	00 00       	add	r0,r0
80001dce:	05 10       	ld.sh	r0,r2++
80001dd0:	00 00       	add	r0,r0
80001dd2:	05 3c       	ld.ub	r12,r2++
80001dd4:	80 00       	ld.sh	r0,r0[0x0]
80001dd6:	1c b8       	st.h	lr++,r8

80001dd8 <_free_r>:
80001dd8:	d4 21       	pushm	r4-r7,lr
80001dda:	16 96       	mov	r6,r11
80001ddc:	18 97       	mov	r7,r12
80001dde:	58 0b       	cp.w	r11,0
80001de0:	e0 80 00 c8 	breq	80001f70 <_free_r+0x198>
80001de4:	f0 1f 00 4c 	mcall	80001f14 <_free_r+0x13c>
80001de8:	20 86       	sub	r6,8
80001dea:	4c ca       	lddpc	r10,80001f18 <_free_r+0x140>
80001dec:	6c 18       	ld.w	r8,r6[0x4]
80001dee:	74 2e       	ld.w	lr,r10[0x8]
80001df0:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001df4:	a1 c8       	cbr	r8,0x0
80001df6:	ec 08 00 09 	add	r9,r6,r8
80001dfa:	72 1b       	ld.w	r11,r9[0x4]
80001dfc:	e0 1b ff fc 	andl	r11,0xfffc
80001e00:	1c 39       	cp.w	r9,lr
80001e02:	c1 d1       	brne	80001e3c <_free_r+0x64>
80001e04:	f6 08 00 08 	add	r8,r11,r8
80001e08:	58 0c       	cp.w	r12,0
80001e0a:	c0 81       	brne	80001e1a <_free_r+0x42>
80001e0c:	6c 09       	ld.w	r9,r6[0x0]
80001e0e:	12 16       	sub	r6,r9
80001e10:	12 08       	add	r8,r9
80001e12:	6c 3b       	ld.w	r11,r6[0xc]
80001e14:	6c 29       	ld.w	r9,r6[0x8]
80001e16:	97 29       	st.w	r11[0x8],r9
80001e18:	93 3b       	st.w	r9[0xc],r11
80001e1a:	10 99       	mov	r9,r8
80001e1c:	95 26       	st.w	r10[0x8],r6
80001e1e:	a1 a9       	sbr	r9,0x0
80001e20:	8d 19       	st.w	r6[0x4],r9
80001e22:	4b f9       	lddpc	r9,80001f1c <_free_r+0x144>
80001e24:	72 09       	ld.w	r9,r9[0x0]
80001e26:	12 38       	cp.w	r8,r9
80001e28:	c0 63       	brcs	80001e34 <_free_r+0x5c>
80001e2a:	4b e8       	lddpc	r8,80001f20 <_free_r+0x148>
80001e2c:	0e 9c       	mov	r12,r7
80001e2e:	70 0b       	ld.w	r11,r8[0x0]
80001e30:	f0 1f 00 3d 	mcall	80001f24 <_free_r+0x14c>
80001e34:	0e 9c       	mov	r12,r7
80001e36:	f0 1f 00 3d 	mcall	80001f28 <_free_r+0x150>
80001e3a:	d8 22       	popm	r4-r7,pc
80001e3c:	93 1b       	st.w	r9[0x4],r11
80001e3e:	58 0c       	cp.w	r12,0
80001e40:	c0 30       	breq	80001e46 <_free_r+0x6e>
80001e42:	30 0c       	mov	r12,0
80001e44:	c1 08       	rjmp	80001e64 <_free_r+0x8c>
80001e46:	6c 0e       	ld.w	lr,r6[0x0]
80001e48:	f4 c5 ff f8 	sub	r5,r10,-8
80001e4c:	1c 16       	sub	r6,lr
80001e4e:	1c 08       	add	r8,lr
80001e50:	6c 2e       	ld.w	lr,r6[0x8]
80001e52:	0a 3e       	cp.w	lr,r5
80001e54:	f9 bc 00 01 	moveq	r12,1
80001e58:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001e5c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001e60:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001e64:	f2 0b 00 0e 	add	lr,r9,r11
80001e68:	7c 1e       	ld.w	lr,lr[0x4]
80001e6a:	ed be 00 00 	bld	lr,0x0
80001e6e:	c1 30       	breq	80001e94 <_free_r+0xbc>
80001e70:	16 08       	add	r8,r11
80001e72:	58 0c       	cp.w	r12,0
80001e74:	c0 c1       	brne	80001e8c <_free_r+0xb4>
80001e76:	4a 9e       	lddpc	lr,80001f18 <_free_r+0x140>
80001e78:	72 2b       	ld.w	r11,r9[0x8]
80001e7a:	2f 8e       	sub	lr,-8
80001e7c:	1c 3b       	cp.w	r11,lr
80001e7e:	c0 71       	brne	80001e8c <_free_r+0xb4>
80001e80:	97 36       	st.w	r11[0xc],r6
80001e82:	97 26       	st.w	r11[0x8],r6
80001e84:	8d 2b       	st.w	r6[0x8],r11
80001e86:	8d 3b       	st.w	r6[0xc],r11
80001e88:	30 1c       	mov	r12,1
80001e8a:	c0 58       	rjmp	80001e94 <_free_r+0xbc>
80001e8c:	72 2b       	ld.w	r11,r9[0x8]
80001e8e:	72 39       	ld.w	r9,r9[0xc]
80001e90:	93 2b       	st.w	r9[0x8],r11
80001e92:	97 39       	st.w	r11[0xc],r9
80001e94:	10 99       	mov	r9,r8
80001e96:	ec 08 09 08 	st.w	r6[r8],r8
80001e9a:	a1 a9       	sbr	r9,0x0
80001e9c:	8d 19       	st.w	r6[0x4],r9
80001e9e:	58 0c       	cp.w	r12,0
80001ea0:	c6 51       	brne	80001f6a <_free_r+0x192>
80001ea2:	e0 48 01 ff 	cp.w	r8,511
80001ea6:	e0 8b 00 13 	brhi	80001ecc <_free_r+0xf4>
80001eaa:	a3 98       	lsr	r8,0x3
80001eac:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001eb0:	72 2b       	ld.w	r11,r9[0x8]
80001eb2:	8d 39       	st.w	r6[0xc],r9
80001eb4:	8d 2b       	st.w	r6[0x8],r11
80001eb6:	97 36       	st.w	r11[0xc],r6
80001eb8:	93 26       	st.w	r9[0x8],r6
80001eba:	a3 48       	asr	r8,0x2
80001ebc:	74 19       	ld.w	r9,r10[0x4]
80001ebe:	30 1b       	mov	r11,1
80001ec0:	f6 08 09 48 	lsl	r8,r11,r8
80001ec4:	f3 e8 10 08 	or	r8,r9,r8
80001ec8:	95 18       	st.w	r10[0x4],r8
80001eca:	c5 08       	rjmp	80001f6a <_free_r+0x192>
80001ecc:	f0 0b 16 09 	lsr	r11,r8,0x9
80001ed0:	58 4b       	cp.w	r11,4
80001ed2:	e0 8b 00 06 	brhi	80001ede <_free_r+0x106>
80001ed6:	f0 0b 16 06 	lsr	r11,r8,0x6
80001eda:	2c 8b       	sub	r11,-56
80001edc:	c2 b8       	rjmp	80001f32 <_free_r+0x15a>
80001ede:	59 4b       	cp.w	r11,20
80001ee0:	e0 8b 00 04 	brhi	80001ee8 <_free_r+0x110>
80001ee4:	2a 5b       	sub	r11,-91
80001ee6:	c2 68       	rjmp	80001f32 <_free_r+0x15a>
80001ee8:	e0 4b 00 54 	cp.w	r11,84
80001eec:	e0 8b 00 06 	brhi	80001ef8 <_free_r+0x120>
80001ef0:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001ef4:	29 2b       	sub	r11,-110
80001ef6:	c1 e8       	rjmp	80001f32 <_free_r+0x15a>
80001ef8:	e0 4b 01 54 	cp.w	r11,340
80001efc:	e0 8b 00 06 	brhi	80001f08 <_free_r+0x130>
80001f00:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001f04:	28 9b       	sub	r11,-119
80001f06:	c1 68       	rjmp	80001f32 <_free_r+0x15a>
80001f08:	e0 4b 05 54 	cp.w	r11,1364
80001f0c:	e0 88 00 10 	brls	80001f2c <_free_r+0x154>
80001f10:	37 eb       	mov	r11,126
80001f12:	c1 08       	rjmp	80001f32 <_free_r+0x15a>
80001f14:	80 00       	ld.sh	r0,r0[0x0]
80001f16:	1c b6       	st.h	lr++,r6
80001f18:	00 00       	add	r0,r0
80001f1a:	01 04       	ld.w	r4,r0++
80001f1c:	00 00       	add	r0,r0
80001f1e:	05 0c       	ld.w	r12,r2++
80001f20:	00 00       	add	r0,r0
80001f22:	05 38       	ld.ub	r8,r2++
80001f24:	80 00       	ld.sh	r0,r0[0x0]
80001f26:	1d 30       	ld.ub	r0,lr++
80001f28:	80 00       	ld.sh	r0,r0[0x0]
80001f2a:	1c b8       	st.h	lr++,r8
80001f2c:	f0 0b 16 12 	lsr	r11,r8,0x12
80001f30:	28 4b       	sub	r11,-124
80001f32:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001f36:	78 29       	ld.w	r9,r12[0x8]
80001f38:	18 39       	cp.w	r9,r12
80001f3a:	c0 e1       	brne	80001f56 <_free_r+0x17e>
80001f3c:	74 18       	ld.w	r8,r10[0x4]
80001f3e:	a3 4b       	asr	r11,0x2
80001f40:	30 1c       	mov	r12,1
80001f42:	f8 0b 09 4b 	lsl	r11,r12,r11
80001f46:	f1 eb 10 0b 	or	r11,r8,r11
80001f4a:	12 98       	mov	r8,r9
80001f4c:	95 1b       	st.w	r10[0x4],r11
80001f4e:	c0 a8       	rjmp	80001f62 <_free_r+0x18a>
80001f50:	72 29       	ld.w	r9,r9[0x8]
80001f52:	18 39       	cp.w	r9,r12
80001f54:	c0 60       	breq	80001f60 <_free_r+0x188>
80001f56:	72 1a       	ld.w	r10,r9[0x4]
80001f58:	e0 1a ff fc 	andl	r10,0xfffc
80001f5c:	14 38       	cp.w	r8,r10
80001f5e:	cf 93       	brcs	80001f50 <_free_r+0x178>
80001f60:	72 38       	ld.w	r8,r9[0xc]
80001f62:	8d 38       	st.w	r6[0xc],r8
80001f64:	8d 29       	st.w	r6[0x8],r9
80001f66:	93 36       	st.w	r9[0xc],r6
80001f68:	91 26       	st.w	r8[0x8],r6
80001f6a:	0e 9c       	mov	r12,r7
80001f6c:	f0 1f 00 02 	mcall	80001f74 <_free_r+0x19c>
80001f70:	d8 22       	popm	r4-r7,pc
80001f72:	00 00       	add	r0,r0
80001f74:	80 00       	ld.sh	r0,r0[0x0]
80001f76:	1c b8       	st.h	lr++,r8

Disassembly of section .exception:

80002000 <_evba>:
	...

80002028 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002028:	c7 a8       	rjmp	8000211c <privilegedCalls>
	...

80002100 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002100:	1c 9f       	mov	pc,lr

80002102 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002102:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002106:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000210a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000210e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002112:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002114:	c0 31       	brne	8000211a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002116:	4b 9c       	lddpc	r12,800021f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002118:	18 9f       	mov	pc,r12

8000211a <_int0_exit>:
_int0_exit:
	rete
8000211a:	d6 03       	rete

8000211c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000211c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000211e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002120:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002122:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002124:	9b 3c       	st.w	sp[0xc],r12

80002126 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002126:	4b 6c       	lddpc	r12,800021fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002128:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000212a:	c0 61       	brne	80002136 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000212c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000212e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002130:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002132:	d3 02       	popm	r11-r12
	rete
80002134:	d6 03       	rete

80002136 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002136:	4b 3c       	lddpc	r12,80002200 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002138:	18 3b       	cp.w	r11,r12
	brne privexception
8000213a:	c0 61       	brne	80002146 <privexception>
	ld.w r12,sp[USERSR]
8000213c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000213e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002140:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002142:	d3 02       	popm	r11-r12
	rete
80002144:	d6 03       	rete

80002146 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002146:	c0 08       	rjmp	80002146 <privexception>

80002148 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002148:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000214a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000214e:	4a ec       	lddpc	r12,80002204 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002150:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002152:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002154:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002158:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000215c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002160:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002162:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002164:	1c 9f       	mov	pc,lr

80002166 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002166:	d3 03       	ssrf	0x10
	mov pc,lr
80002168:	1c 9f       	mov	pc,lr

8000216a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000216a:	d5 03       	csrf	0x10
	mov pc,lr
8000216c:	1c 9f       	mov	pc,lr

8000216e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000216e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002172:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002174:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002178:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000217c:	1c 9f       	mov	pc,lr

8000217e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000217e:	4a 3c       	lddpc	r12,80002208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002180:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002182:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002184:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002186:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002188:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000218a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000218c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000218e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002190:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002192:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002194:	33 40       	mov	r0,52
	add r0,r12
80002196:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002198:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000219c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000219e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800021a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800021a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800021a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800021a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800021aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800021ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800021ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800021b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800021b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800021b6:	1c 9f       	mov	pc,lr

800021b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800021b8:	49 4c       	lddpc	r12,80002208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800021ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800021bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800021be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800021c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800021c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800021c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800021c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800021ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800021cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800021ce:	33 40       	mov	r0,52
	add r0,r12
800021d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800021d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800021d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800021d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800021da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800021dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800021de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800021e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800021e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800021e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800021e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800021e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800021ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800021ec:	d4 01       	pushm	lr
	call timerStart
800021ee:	f0 1f 00 08 	mcall	8000220c <contextRestoreFromISR+0x54>
	popm lr
800021f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800021f4:	1c 9f       	mov	pc,lr
800021f6:	00 00       	add	r0,r0
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	10 7c       	tst	r12,r8
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	21 66       	sub	r6,22
80002200:	80 00       	ld.sh	r0,r0[0x0]
80002202:	21 6a       	sub	r10,22
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 00       	sub	r0,0
80002208:	00 00       	add	r0,r0
8000220a:	05 8c       	ld.ub	r12,r2[0x0]
8000220c:	80 00       	ld.sh	r0,r0[0x0]
8000220e:	16 d2       	st.w	--r11,r2
	...
