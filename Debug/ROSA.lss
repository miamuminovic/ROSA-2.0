
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001b98  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001c00  80001c00  00002000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002000  80002000  00002400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002084  80002084  00002484  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002088  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002594  00002d14  2**0
                  ALLOC
  9 .bss          00000100  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d9e8  00000618  00000618  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000006c8  00000000  00000000  00002db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000ffe  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c1bd  00000000  00000000  0000447e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001deb  00000000  00000000  0001063b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004058  00000000  00000000  00012426  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000106c  00000000  00000000  00016480  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002041  00000000  00000000  000174ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001f94  00000000  00000000  0001952d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 004530ab  00000000  00000000  0001b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000620  00000000  00000000  0046e56c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	13 88       	ld.ub	r8,r9[0x0]

Disassembly of section .text:

80000008 <usart_options>:
80000008:	00 00 e1 00 08 04 00 00 00 00 00 00 68 6f 67 53     ............hogS
80000018:	00 00 00 00 66 73 64 6a 00 00 00 00 74 65 73 74     ....fsdj....test
80000028:	00 00 00 00                                         ....

8000002c <init_tc>:
ROSA_taskHandle_t task_handle_30;
ROSA_taskHandle_t task_handle_31;
ROSA_taskHandle_t task_handle_32;

void init_tc()
{
8000002c:	eb cd 40 80 	pushm	r7,lr
80000030:	1a 97       	mov	r7,sp
	*((unsigned int*)0xFFFF3844) = 0x0000C002;				// set waveform options
80000032:	fe 78 38 44 	mov	r8,-51132
80000036:	e0 69 c0 02 	mov	r9,49154
8000003a:	91 09       	st.w	r8[0x0],r9
	*((unsigned int*)0xFFFF385C) = 0x000036D0;				// initialize CV to 0
8000003c:	fe 78 38 5c 	mov	r8,-51108
80000040:	e0 69 36 d0 	mov	r9,14032
80000044:	91 09       	st.w	r8[0x0],r9
	*((unsigned int*)0xFFFF3840) = 0x00000004 | 0x00000001; //start
80000046:	fe 78 38 40 	mov	r8,-51136
8000004a:	30 59       	mov	r9,5
8000004c:	91 09       	st.w	r8[0x0],r9
}
8000004e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000052:	d7 03       	nop

80000054 <toggle_1>:

void toggle_1(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                     
80000054:	eb cd 40 80 	pushm	r7,lr
80000058:	1a 97       	mov	r7,sp
8000005a:	33 dc       	mov	r12,61
8000005c:	f0 1f 00 02 	mcall	80000064 <toggle_1+0x10>
80000060:	cf db       	rjmp	8000005a <toggle_1+0x6>
80000062:	00 00       	add	r0,r0
80000064:	80 00       	ld.sh	r0,r0[0x0]
80000066:	0f d8       	ld.ub	r8,r7[0x5]

80000068 <toggle_2>:
void toggle_2(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                     
80000068:	eb cd 40 80 	pushm	r7,lr
8000006c:	1a 97       	mov	r7,sp
8000006e:	33 ec       	mov	r12,62
80000070:	f0 1f 00 02 	mcall	80000078 <toggle_2+0x10>
80000074:	cf db       	rjmp	8000006e <toggle_2+0x6>
80000076:	00 00       	add	r0,r0
80000078:	80 00       	ld.sh	r0,r0[0x0]
8000007a:	0f d8       	ld.ub	r8,r7[0x5]

8000007c <toggle_3>:
void toggle_3(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                     
8000007c:	eb cd 40 80 	pushm	r7,lr
80000080:	1a 97       	mov	r7,sp
80000082:	33 3c       	mov	r12,51
80000084:	f0 1f 00 02 	mcall	8000008c <toggle_3+0x10>
80000088:	cf db       	rjmp	80000082 <toggle_3+0x6>
8000008a:	00 00       	add	r0,r0
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	0f d8       	ld.ub	r8,r7[0x5]

80000090 <toggle_4>:
void toggle_4(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                     
80000090:	eb cd 40 80 	pushm	r7,lr
80000094:	1a 97       	mov	r7,sp
80000096:	33 4c       	mov	r12,52
80000098:	f0 1f 00 02 	mcall	800000a0 <toggle_4+0x10>
8000009c:	cf db       	rjmp	80000096 <toggle_4+0x6>
8000009e:	00 00       	add	r0,r0
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	0f d8       	ld.ub	r8,r7[0x5]

800000a4 <toggle_5>:
void toggle_5(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                     
800000a4:	eb cd 40 80 	pushm	r7,lr
800000a8:	1a 97       	mov	r7,sp
800000aa:	33 5c       	mov	r12,53
800000ac:	f0 1f 00 02 	mcall	800000b4 <toggle_5+0x10>
800000b0:	cf db       	rjmp	800000aa <toggle_5+0x6>
800000b2:	00 00       	add	r0,r0
800000b4:	80 00       	ld.sh	r0,r0[0x0]
800000b6:	0f d8       	ld.ub	r8,r7[0x5]

800000b8 <toggle_6>:
void toggle_6(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                     
800000b8:	eb cd 40 80 	pushm	r7,lr
800000bc:	1a 97       	mov	r7,sp
800000be:	33 cc       	mov	r12,60
800000c0:	f0 1f 00 02 	mcall	800000c8 <toggle_6+0x10>
800000c4:	cf db       	rjmp	800000be <toggle_6+0x6>
800000c6:	00 00       	add	r0,r0
800000c8:	80 00       	ld.sh	r0,r0[0x0]
800000ca:	0f d8       	ld.ub	r8,r7[0x5]

800000cc <toggle_7>:
void toggle_7(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                     
800000cc:	eb cd 40 80 	pushm	r7,lr
800000d0:	1a 97       	mov	r7,sp
800000d2:	33 dc       	mov	r12,61
800000d4:	f0 1f 00 02 	mcall	800000dc <toggle_7+0x10>
800000d8:	cf db       	rjmp	800000d2 <toggle_7+0x6>
800000da:	00 00       	add	r0,r0
800000dc:	80 00       	ld.sh	r0,r0[0x0]
800000de:	0f d8       	ld.ub	r8,r7[0x5]

800000e0 <toggle_8>:
void toggle_8(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                     
800000e0:	eb cd 40 80 	pushm	r7,lr
800000e4:	1a 97       	mov	r7,sp
800000e6:	33 ec       	mov	r12,62
800000e8:	f0 1f 00 02 	mcall	800000f0 <toggle_8+0x10>
800000ec:	cf db       	rjmp	800000e6 <toggle_8+0x6>
800000ee:	00 00       	add	r0,r0
800000f0:	80 00       	ld.sh	r0,r0[0x0]
800000f2:	0f d8       	ld.ub	r8,r7[0x5]

800000f4 <toggle_9>:
void toggle_9(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                     
800000f4:	eb cd 40 80 	pushm	r7,lr
800000f8:	1a 97       	mov	r7,sp
800000fa:	33 3c       	mov	r12,51
800000fc:	f0 1f 00 02 	mcall	80000104 <toggle_9+0x10>
80000100:	cf db       	rjmp	800000fa <toggle_9+0x6>
80000102:	00 00       	add	r0,r0
80000104:	80 00       	ld.sh	r0,r0[0x0]
80000106:	0f d8       	ld.ub	r8,r7[0x5]

80000108 <toggle_10>:
void toggle_10(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                    
80000108:	eb cd 40 80 	pushm	r7,lr
8000010c:	1a 97       	mov	r7,sp
8000010e:	33 4c       	mov	r12,52
80000110:	f0 1f 00 02 	mcall	80000118 <toggle_10+0x10>
80000114:	cf db       	rjmp	8000010e <toggle_10+0x6>
80000116:	00 00       	add	r0,r0
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	0f d8       	ld.ub	r8,r7[0x5]

8000011c <toggle_11>:
void toggle_11(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                    
8000011c:	eb cd 40 80 	pushm	r7,lr
80000120:	1a 97       	mov	r7,sp
80000122:	33 5c       	mov	r12,53
80000124:	f0 1f 00 02 	mcall	8000012c <toggle_11+0x10>
80000128:	cf db       	rjmp	80000122 <toggle_11+0x6>
8000012a:	00 00       	add	r0,r0
8000012c:	80 00       	ld.sh	r0,r0[0x0]
8000012e:	0f d8       	ld.ub	r8,r7[0x5]

80000130 <toggle_12>:
void toggle_12(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                    
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
80000136:	33 cc       	mov	r12,60
80000138:	f0 1f 00 02 	mcall	80000140 <toggle_12+0x10>
8000013c:	cf db       	rjmp	80000136 <toggle_12+0x6>
8000013e:	00 00       	add	r0,r0
80000140:	80 00       	ld.sh	r0,r0[0x0]
80000142:	0f d8       	ld.ub	r8,r7[0x5]

80000144 <toggle_13>:
void toggle_13(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                    
80000144:	eb cd 40 80 	pushm	r7,lr
80000148:	1a 97       	mov	r7,sp
8000014a:	33 dc       	mov	r12,61
8000014c:	f0 1f 00 02 	mcall	80000154 <toggle_13+0x10>
80000150:	cf db       	rjmp	8000014a <toggle_13+0x6>
80000152:	00 00       	add	r0,r0
80000154:	80 00       	ld.sh	r0,r0[0x0]
80000156:	0f d8       	ld.ub	r8,r7[0x5]

80000158 <toggle_14>:
void toggle_14(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                    
80000158:	eb cd 40 80 	pushm	r7,lr
8000015c:	1a 97       	mov	r7,sp
8000015e:	33 ec       	mov	r12,62
80000160:	f0 1f 00 02 	mcall	80000168 <toggle_14+0x10>
80000164:	cf db       	rjmp	8000015e <toggle_14+0x6>
80000166:	00 00       	add	r0,r0
80000168:	80 00       	ld.sh	r0,r0[0x0]
8000016a:	0f d8       	ld.ub	r8,r7[0x5]

8000016c <toggle_15>:
void toggle_15(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                    
8000016c:	eb cd 40 80 	pushm	r7,lr
80000170:	1a 97       	mov	r7,sp
80000172:	33 3c       	mov	r12,51
80000174:	f0 1f 00 02 	mcall	8000017c <toggle_15+0x10>
80000178:	cf db       	rjmp	80000172 <toggle_15+0x6>
8000017a:	00 00       	add	r0,r0
8000017c:	80 00       	ld.sh	r0,r0[0x0]
8000017e:	0f d8       	ld.ub	r8,r7[0x5]

80000180 <toggle_16>:
void toggle_16(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                    
80000180:	eb cd 40 80 	pushm	r7,lr
80000184:	1a 97       	mov	r7,sp
80000186:	33 4c       	mov	r12,52
80000188:	f0 1f 00 02 	mcall	80000190 <toggle_16+0x10>
8000018c:	cf db       	rjmp	80000186 <toggle_16+0x6>
8000018e:	00 00       	add	r0,r0
80000190:	80 00       	ld.sh	r0,r0[0x0]
80000192:	0f d8       	ld.ub	r8,r7[0x5]

80000194 <toggle_17>:
void toggle_17(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                    
80000194:	eb cd 40 80 	pushm	r7,lr
80000198:	1a 97       	mov	r7,sp
8000019a:	33 5c       	mov	r12,53
8000019c:	f0 1f 00 02 	mcall	800001a4 <toggle_17+0x10>
800001a0:	cf db       	rjmp	8000019a <toggle_17+0x6>
800001a2:	00 00       	add	r0,r0
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	0f d8       	ld.ub	r8,r7[0x5]

800001a8 <toggle_18>:
void toggle_18(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                    
800001a8:	eb cd 40 80 	pushm	r7,lr
800001ac:	1a 97       	mov	r7,sp
800001ae:	33 cc       	mov	r12,60
800001b0:	f0 1f 00 02 	mcall	800001b8 <toggle_18+0x10>
800001b4:	cf db       	rjmp	800001ae <toggle_18+0x6>
800001b6:	00 00       	add	r0,r0
800001b8:	80 00       	ld.sh	r0,r0[0x0]
800001ba:	0f d8       	ld.ub	r8,r7[0x5]

800001bc <toggle_19>:
void toggle_19(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                    
800001bc:	eb cd 40 80 	pushm	r7,lr
800001c0:	1a 97       	mov	r7,sp
800001c2:	33 dc       	mov	r12,61
800001c4:	f0 1f 00 02 	mcall	800001cc <toggle_19+0x10>
800001c8:	cf db       	rjmp	800001c2 <toggle_19+0x6>
800001ca:	00 00       	add	r0,r0
800001cc:	80 00       	ld.sh	r0,r0[0x0]
800001ce:	0f d8       	ld.ub	r8,r7[0x5]

800001d0 <toggle_20>:
void toggle_20(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                    
800001d0:	eb cd 40 80 	pushm	r7,lr
800001d4:	1a 97       	mov	r7,sp
800001d6:	33 ec       	mov	r12,62
800001d8:	f0 1f 00 02 	mcall	800001e0 <toggle_20+0x10>
800001dc:	cf db       	rjmp	800001d6 <toggle_20+0x6>
800001de:	00 00       	add	r0,r0
800001e0:	80 00       	ld.sh	r0,r0[0x0]
800001e2:	0f d8       	ld.ub	r8,r7[0x5]

800001e4 <toggle_21>:
void toggle_21(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                    
800001e4:	eb cd 40 80 	pushm	r7,lr
800001e8:	1a 97       	mov	r7,sp
800001ea:	33 3c       	mov	r12,51
800001ec:	f0 1f 00 02 	mcall	800001f4 <toggle_21+0x10>
800001f0:	cf db       	rjmp	800001ea <toggle_21+0x6>
800001f2:	00 00       	add	r0,r0
800001f4:	80 00       	ld.sh	r0,r0[0x0]
800001f6:	0f d8       	ld.ub	r8,r7[0x5]

800001f8 <toggle_22>:
void toggle_22(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                    
800001f8:	eb cd 40 80 	pushm	r7,lr
800001fc:	1a 97       	mov	r7,sp
800001fe:	33 4c       	mov	r12,52
80000200:	f0 1f 00 02 	mcall	80000208 <toggle_22+0x10>
80000204:	cf db       	rjmp	800001fe <toggle_22+0x6>
80000206:	00 00       	add	r0,r0
80000208:	80 00       	ld.sh	r0,r0[0x0]
8000020a:	0f d8       	ld.ub	r8,r7[0x5]

8000020c <toggle_23>:
void toggle_23(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                    
8000020c:	eb cd 40 80 	pushm	r7,lr
80000210:	1a 97       	mov	r7,sp
80000212:	33 5c       	mov	r12,53
80000214:	f0 1f 00 02 	mcall	8000021c <toggle_23+0x10>
80000218:	cf db       	rjmp	80000212 <toggle_23+0x6>
8000021a:	00 00       	add	r0,r0
8000021c:	80 00       	ld.sh	r0,r0[0x0]
8000021e:	0f d8       	ld.ub	r8,r7[0x5]

80000220 <toggle_24>:
void toggle_24(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                    
80000220:	eb cd 40 80 	pushm	r7,lr
80000224:	1a 97       	mov	r7,sp
80000226:	33 cc       	mov	r12,60
80000228:	f0 1f 00 02 	mcall	80000230 <toggle_24+0x10>
8000022c:	cf db       	rjmp	80000226 <toggle_24+0x6>
8000022e:	00 00       	add	r0,r0
80000230:	80 00       	ld.sh	r0,r0[0x0]
80000232:	0f d8       	ld.ub	r8,r7[0x5]

80000234 <toggle_25>:
void toggle_25(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                    
80000234:	eb cd 40 80 	pushm	r7,lr
80000238:	1a 97       	mov	r7,sp
8000023a:	33 dc       	mov	r12,61
8000023c:	f0 1f 00 02 	mcall	80000244 <toggle_25+0x10>
80000240:	cf db       	rjmp	8000023a <toggle_25+0x6>
80000242:	00 00       	add	r0,r0
80000244:	80 00       	ld.sh	r0,r0[0x0]
80000246:	0f d8       	ld.ub	r8,r7[0x5]

80000248 <toggle_26>:
void toggle_26(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }                                                    
80000248:	eb cd 40 80 	pushm	r7,lr
8000024c:	1a 97       	mov	r7,sp
8000024e:	33 ec       	mov	r12,62
80000250:	f0 1f 00 02 	mcall	80000258 <toggle_26+0x10>
80000254:	cf db       	rjmp	8000024e <toggle_26+0x6>
80000256:	00 00       	add	r0,r0
80000258:	80 00       	ld.sh	r0,r0[0x0]
8000025a:	0f d8       	ld.ub	r8,r7[0x5]

8000025c <toggle_27>:
void toggle_27(void){ while(1){ledToggle(LED4_GPIO); /* ROSA_delay(100); */} }                                                    
8000025c:	eb cd 40 80 	pushm	r7,lr
80000260:	1a 97       	mov	r7,sp
80000262:	33 3c       	mov	r12,51
80000264:	f0 1f 00 02 	mcall	8000026c <toggle_27+0x10>
80000268:	cf db       	rjmp	80000262 <toggle_27+0x6>
8000026a:	00 00       	add	r0,r0
8000026c:	80 00       	ld.sh	r0,r0[0x0]
8000026e:	0f d8       	ld.ub	r8,r7[0x5]

80000270 <toggle_28>:
void toggle_28(void){ while(1){ledToggle(LED5_GPIO); /* ROSA_delay(100); */} }                                                    
80000270:	eb cd 40 80 	pushm	r7,lr
80000274:	1a 97       	mov	r7,sp
80000276:	33 4c       	mov	r12,52
80000278:	f0 1f 00 02 	mcall	80000280 <toggle_28+0x10>
8000027c:	cf db       	rjmp	80000276 <toggle_28+0x6>
8000027e:	00 00       	add	r0,r0
80000280:	80 00       	ld.sh	r0,r0[0x0]
80000282:	0f d8       	ld.ub	r8,r7[0x5]

80000284 <toggle_29>:
void toggle_29(void){ while(1){ledToggle(LED6_GPIO); /* ROSA_delay(100); */} }                                                    
80000284:	eb cd 40 80 	pushm	r7,lr
80000288:	1a 97       	mov	r7,sp
8000028a:	33 5c       	mov	r12,53
8000028c:	f0 1f 00 02 	mcall	80000294 <toggle_29+0x10>
80000290:	cf db       	rjmp	8000028a <toggle_29+0x6>
80000292:	00 00       	add	r0,r0
80000294:	80 00       	ld.sh	r0,r0[0x0]
80000296:	0f d8       	ld.ub	r8,r7[0x5]

80000298 <toggle_30>:
void toggle_30(void){ while(1){ledToggle(LED1_GPIO); /* ROSA_delay(100); */} }                                                    
80000298:	eb cd 40 80 	pushm	r7,lr
8000029c:	1a 97       	mov	r7,sp
8000029e:	33 cc       	mov	r12,60
800002a0:	f0 1f 00 02 	mcall	800002a8 <toggle_30+0x10>
800002a4:	cf db       	rjmp	8000029e <toggle_30+0x6>
800002a6:	00 00       	add	r0,r0
800002a8:	80 00       	ld.sh	r0,r0[0x0]
800002aa:	0f d8       	ld.ub	r8,r7[0x5]

800002ac <toggle_31>:
void toggle_31(void){ while(1){ledToggle(LED2_GPIO); /* ROSA_delay(100); */} }                                                    
800002ac:	eb cd 40 80 	pushm	r7,lr
800002b0:	1a 97       	mov	r7,sp
800002b2:	33 dc       	mov	r12,61
800002b4:	f0 1f 00 02 	mcall	800002bc <toggle_31+0x10>
800002b8:	cf db       	rjmp	800002b2 <toggle_31+0x6>
800002ba:	00 00       	add	r0,r0
800002bc:	80 00       	ld.sh	r0,r0[0x0]
800002be:	0f d8       	ld.ub	r8,r7[0x5]

800002c0 <toggle_32>:
void toggle_32(void){ while(1){ledToggle(LED3_GPIO); /* ROSA_delay(100); */} }  
800002c0:	eb cd 40 80 	pushm	r7,lr
800002c4:	1a 97       	mov	r7,sp
800002c6:	33 ec       	mov	r12,62
800002c8:	f0 1f 00 02 	mcall	800002d0 <toggle_32+0x10>
800002cc:	cf db       	rjmp	800002c6 <toggle_32+0x6>
800002ce:	00 00       	add	r0,r0
800002d0:	80 00       	ld.sh	r0,r0[0x0]
800002d2:	0f d8       	ld.ub	r8,r7[0x5]

800002d4 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800002d4:	eb cd 40 80 	pushm	r7,lr
800002d8:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800002da:	f0 1f 00 75 	mcall	800004ac <main+0x1d8>
	//ROSA_semaphoreCreate(& S1, 3);
	//ROSA_semaphoreCreate(& S2, 3);
	//ROSA_semaphoreCreate(& S3, 3);
	//ROSA_semaphoreCreate(& S4, 3);
	
	ROSA_taskCreate(& task_handle_1, "fsdj", toggle_1, STACK_SIZE, 3);
800002de:	30 38       	mov	r8,3
800002e0:	34 09       	mov	r9,64
800002e2:	4f 4a       	lddpc	r10,800004b0 <main+0x1dc>
800002e4:	4f 4b       	lddpc	r11,800004b4 <main+0x1e0>
800002e6:	4f 5c       	lddpc	r12,800004b8 <main+0x1e4>
800002e8:	f0 1f 00 75 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_2, "test", toggle_2, STACK_SIZE, 3);
800002ec:	30 38       	mov	r8,3
800002ee:	34 09       	mov	r9,64
800002f0:	4f 4a       	lddpc	r10,800004c0 <main+0x1ec>
800002f2:	4f 5b       	lddpc	r11,800004c4 <main+0x1f0>
800002f4:	4f 5c       	lddpc	r12,800004c8 <main+0x1f4>
800002f6:	f0 1f 00 72 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_3, "test", toggle_3, STACK_SIZE, 3);
800002fa:	30 38       	mov	r8,3
800002fc:	34 09       	mov	r9,64
800002fe:	4f 4a       	lddpc	r10,800004cc <main+0x1f8>
80000300:	4f 1b       	lddpc	r11,800004c4 <main+0x1f0>
80000302:	4f 4c       	lddpc	r12,800004d0 <main+0x1fc>
80000304:	f0 1f 00 6e 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_4, "test", toggle_4, STACK_SIZE, 3);
80000308:	30 38       	mov	r8,3
8000030a:	34 09       	mov	r9,64
8000030c:	4f 2a       	lddpc	r10,800004d4 <main+0x200>
8000030e:	4e eb       	lddpc	r11,800004c4 <main+0x1f0>
80000310:	4f 2c       	lddpc	r12,800004d8 <main+0x204>
80000312:	f0 1f 00 6b 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_5, "test", toggle_5, STACK_SIZE, 3);
80000316:	30 38       	mov	r8,3
80000318:	34 09       	mov	r9,64
8000031a:	4f 1a       	lddpc	r10,800004dc <main+0x208>
8000031c:	4e ab       	lddpc	r11,800004c4 <main+0x1f0>
8000031e:	4f 1c       	lddpc	r12,800004e0 <main+0x20c>
80000320:	f0 1f 00 67 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_6, "test", toggle_6, STACK_SIZE, 3);
80000324:	30 38       	mov	r8,3
80000326:	34 09       	mov	r9,64
80000328:	4e fa       	lddpc	r10,800004e4 <main+0x210>
8000032a:	4e 7b       	lddpc	r11,800004c4 <main+0x1f0>
8000032c:	4e fc       	lddpc	r12,800004e8 <main+0x214>
8000032e:	f0 1f 00 64 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_7, "test", toggle_7, STACK_SIZE, 3);
80000332:	30 38       	mov	r8,3
80000334:	34 09       	mov	r9,64
80000336:	4e ea       	lddpc	r10,800004ec <main+0x218>
80000338:	4e 3b       	lddpc	r11,800004c4 <main+0x1f0>
8000033a:	4e ec       	lddpc	r12,800004f0 <main+0x21c>
8000033c:	f0 1f 00 60 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_8, "test", toggle_8, STACK_SIZE, 3);
80000340:	30 38       	mov	r8,3
80000342:	34 09       	mov	r9,64
80000344:	4e ca       	lddpc	r10,800004f4 <main+0x220>
80000346:	4e 0b       	lddpc	r11,800004c4 <main+0x1f0>
80000348:	4e cc       	lddpc	r12,800004f8 <main+0x224>
8000034a:	f0 1f 00 5d 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_9, "test", toggle_9, STACK_SIZE, 3);
8000034e:	30 38       	mov	r8,3
80000350:	34 09       	mov	r9,64
80000352:	4e ba       	lddpc	r10,800004fc <main+0x228>
80000354:	4d cb       	lddpc	r11,800004c4 <main+0x1f0>
80000356:	4e bc       	lddpc	r12,80000500 <main+0x22c>
80000358:	f0 1f 00 59 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_10, "test", toggle_10, STACK_SIZE, 3);
8000035c:	30 38       	mov	r8,3
8000035e:	34 09       	mov	r9,64
80000360:	4e 9a       	lddpc	r10,80000504 <main+0x230>
80000362:	4d 9b       	lddpc	r11,800004c4 <main+0x1f0>
80000364:	4e 9c       	lddpc	r12,80000508 <main+0x234>
80000366:	f0 1f 00 56 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_11, "test", toggle_11, STACK_SIZE, 3);
8000036a:	30 38       	mov	r8,3
8000036c:	34 09       	mov	r9,64
8000036e:	4e 8a       	lddpc	r10,8000050c <main+0x238>
80000370:	4d 5b       	lddpc	r11,800004c4 <main+0x1f0>
80000372:	4e 8c       	lddpc	r12,80000510 <main+0x23c>
80000374:	f0 1f 00 52 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_12, "test", toggle_12, STACK_SIZE, 3);
80000378:	30 38       	mov	r8,3
8000037a:	34 09       	mov	r9,64
8000037c:	4e 6a       	lddpc	r10,80000514 <main+0x240>
8000037e:	4d 2b       	lddpc	r11,800004c4 <main+0x1f0>
80000380:	4e 6c       	lddpc	r12,80000518 <main+0x244>
80000382:	f0 1f 00 4f 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_13, "test", toggle_13, STACK_SIZE, 3);
80000386:	30 38       	mov	r8,3
80000388:	34 09       	mov	r9,64
8000038a:	4e 5a       	lddpc	r10,8000051c <main+0x248>
8000038c:	4c eb       	lddpc	r11,800004c4 <main+0x1f0>
8000038e:	4e 5c       	lddpc	r12,80000520 <main+0x24c>
80000390:	f0 1f 00 4b 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_14, "test", toggle_14, STACK_SIZE, 3);
80000394:	30 38       	mov	r8,3
80000396:	34 09       	mov	r9,64
80000398:	4e 3a       	lddpc	r10,80000524 <main+0x250>
8000039a:	4c bb       	lddpc	r11,800004c4 <main+0x1f0>
8000039c:	4e 3c       	lddpc	r12,80000528 <main+0x254>
8000039e:	f0 1f 00 48 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_15, "test", toggle_15, STACK_SIZE, 3);
800003a2:	30 38       	mov	r8,3
800003a4:	34 09       	mov	r9,64
800003a6:	4e 2a       	lddpc	r10,8000052c <main+0x258>
800003a8:	4c 7b       	lddpc	r11,800004c4 <main+0x1f0>
800003aa:	4e 2c       	lddpc	r12,80000530 <main+0x25c>
800003ac:	f0 1f 00 44 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_16, "test", toggle_16, STACK_SIZE, 3);
800003b0:	30 38       	mov	r8,3
800003b2:	34 09       	mov	r9,64
800003b4:	4e 0a       	lddpc	r10,80000534 <main+0x260>
800003b6:	4c 4b       	lddpc	r11,800004c4 <main+0x1f0>
800003b8:	4e 0c       	lddpc	r12,80000538 <main+0x264>
800003ba:	f0 1f 00 41 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_17, "test", toggle_17, STACK_SIZE, 3);
800003be:	30 38       	mov	r8,3
800003c0:	34 09       	mov	r9,64
800003c2:	4d fa       	lddpc	r10,8000053c <main+0x268>
800003c4:	4c 0b       	lddpc	r11,800004c4 <main+0x1f0>
800003c6:	4d fc       	lddpc	r12,80000540 <main+0x26c>
800003c8:	f0 1f 00 3d 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_18, "test", toggle_18, STACK_SIZE, 3);
800003cc:	30 38       	mov	r8,3
800003ce:	34 09       	mov	r9,64
800003d0:	4d da       	lddpc	r10,80000544 <main+0x270>
800003d2:	4b db       	lddpc	r11,800004c4 <main+0x1f0>
800003d4:	4d dc       	lddpc	r12,80000548 <main+0x274>
800003d6:	f0 1f 00 3a 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_19, "test", toggle_19, STACK_SIZE, 3);
800003da:	30 38       	mov	r8,3
800003dc:	34 09       	mov	r9,64
800003de:	4d ca       	lddpc	r10,8000054c <main+0x278>
800003e0:	4b 9b       	lddpc	r11,800004c4 <main+0x1f0>
800003e2:	4d cc       	lddpc	r12,80000550 <main+0x27c>
800003e4:	f0 1f 00 36 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_20, "test", toggle_20, STACK_SIZE, 3);
800003e8:	30 38       	mov	r8,3
800003ea:	34 09       	mov	r9,64
800003ec:	4d aa       	lddpc	r10,80000554 <main+0x280>
800003ee:	4b 6b       	lddpc	r11,800004c4 <main+0x1f0>
800003f0:	4d ac       	lddpc	r12,80000558 <main+0x284>
800003f2:	f0 1f 00 33 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_21, "test", toggle_21, STACK_SIZE, 3);
800003f6:	30 38       	mov	r8,3
800003f8:	34 09       	mov	r9,64
800003fa:	4d 9a       	lddpc	r10,8000055c <main+0x288>
800003fc:	4b 2b       	lddpc	r11,800004c4 <main+0x1f0>
800003fe:	4d 9c       	lddpc	r12,80000560 <main+0x28c>
80000400:	f0 1f 00 2f 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_22, "test", toggle_22, STACK_SIZE, 3);
80000404:	30 38       	mov	r8,3
80000406:	34 09       	mov	r9,64
80000408:	4d 7a       	lddpc	r10,80000564 <main+0x290>
8000040a:	4a fb       	lddpc	r11,800004c4 <main+0x1f0>
8000040c:	4d 7c       	lddpc	r12,80000568 <main+0x294>
8000040e:	f0 1f 00 2c 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_23, "test", toggle_23, STACK_SIZE, 3);
80000412:	30 38       	mov	r8,3
80000414:	34 09       	mov	r9,64
80000416:	4d 6a       	lddpc	r10,8000056c <main+0x298>
80000418:	4a bb       	lddpc	r11,800004c4 <main+0x1f0>
8000041a:	4d 6c       	lddpc	r12,80000570 <main+0x29c>
8000041c:	f0 1f 00 28 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_24, "test", toggle_24, STACK_SIZE, 3);
80000420:	30 38       	mov	r8,3
80000422:	34 09       	mov	r9,64
80000424:	4d 4a       	lddpc	r10,80000574 <main+0x2a0>
80000426:	4a 8b       	lddpc	r11,800004c4 <main+0x1f0>
80000428:	4d 4c       	lddpc	r12,80000578 <main+0x2a4>
8000042a:	f0 1f 00 25 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_25, "test", toggle_25, STACK_SIZE, 3);
8000042e:	30 38       	mov	r8,3
80000430:	34 09       	mov	r9,64
80000432:	4d 3a       	lddpc	r10,8000057c <main+0x2a8>
80000434:	4a 4b       	lddpc	r11,800004c4 <main+0x1f0>
80000436:	4d 3c       	lddpc	r12,80000580 <main+0x2ac>
80000438:	f0 1f 00 21 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_26, "test", toggle_26, STACK_SIZE, 3);
8000043c:	30 38       	mov	r8,3
8000043e:	34 09       	mov	r9,64
80000440:	4d 1a       	lddpc	r10,80000584 <main+0x2b0>
80000442:	4a 1b       	lddpc	r11,800004c4 <main+0x1f0>
80000444:	4d 1c       	lddpc	r12,80000588 <main+0x2b4>
80000446:	f0 1f 00 1e 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_27, "test", toggle_27, STACK_SIZE, 3);
8000044a:	30 38       	mov	r8,3
8000044c:	34 09       	mov	r9,64
8000044e:	4d 0a       	lddpc	r10,8000058c <main+0x2b8>
80000450:	49 db       	lddpc	r11,800004c4 <main+0x1f0>
80000452:	4d 0c       	lddpc	r12,80000590 <main+0x2bc>
80000454:	f0 1f 00 1a 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_28, "test", toggle_28, STACK_SIZE, 3);
80000458:	30 38       	mov	r8,3
8000045a:	34 09       	mov	r9,64
8000045c:	4c ea       	lddpc	r10,80000594 <main+0x2c0>
8000045e:	49 ab       	lddpc	r11,800004c4 <main+0x1f0>
80000460:	4c ec       	lddpc	r12,80000598 <main+0x2c4>
80000462:	f0 1f 00 17 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_29, "test", toggle_29, STACK_SIZE, 3);
80000466:	30 38       	mov	r8,3
80000468:	34 09       	mov	r9,64
8000046a:	4c da       	lddpc	r10,8000059c <main+0x2c8>
8000046c:	49 6b       	lddpc	r11,800004c4 <main+0x1f0>
8000046e:	4c dc       	lddpc	r12,800005a0 <main+0x2cc>
80000470:	f0 1f 00 13 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_30, "test", toggle_30, STACK_SIZE, 3);
80000474:	30 38       	mov	r8,3
80000476:	34 09       	mov	r9,64
80000478:	4c ba       	lddpc	r10,800005a4 <main+0x2d0>
8000047a:	49 3b       	lddpc	r11,800004c4 <main+0x1f0>
8000047c:	4c bc       	lddpc	r12,800005a8 <main+0x2d4>
8000047e:	f0 1f 00 10 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_31, "test", toggle_31, STACK_SIZE, 3);
80000482:	30 38       	mov	r8,3
80000484:	34 09       	mov	r9,64
80000486:	4c aa       	lddpc	r10,800005ac <main+0x2d8>
80000488:	48 fb       	lddpc	r11,800004c4 <main+0x1f0>
8000048a:	4c ac       	lddpc	r12,800005b0 <main+0x2dc>
8000048c:	f0 1f 00 0c 	mcall	800004bc <main+0x1e8>
	ROSA_taskCreate(& task_handle_32, "test", toggle_32, STACK_SIZE, 3);
80000490:	30 38       	mov	r8,3
80000492:	34 09       	mov	r9,64
80000494:	4c 8a       	lddpc	r10,800005b4 <main+0x2e0>
80000496:	48 cb       	lddpc	r11,800004c4 <main+0x1f0>
80000498:	4c 8c       	lddpc	r12,800005b8 <main+0x2e4>
8000049a:	f0 1f 00 09 	mcall	800004bc <main+0x1e8>
	
	init_tc();
8000049e:	f0 1f 00 48 	mcall	800005bc <main+0x2e8>
	
	timerStart();
800004a2:	f0 1f 00 48 	mcall	800005c0 <main+0x2ec>
	ROSA_start();
800004a6:	f0 1f 00 48 	mcall	800005c4 <main+0x2f0>
	/* Execution will never return here */
	while(1);
800004aa:	c0 08       	rjmp	800004aa <main+0x1d6>
800004ac:	80 00       	ld.sh	r0,r0[0x0]
800004ae:	06 24       	rsub	r4,r3
800004b0:	80 00       	ld.sh	r0,r0[0x0]
800004b2:	00 54       	eor	r4,r0
800004b4:	80 00       	ld.sh	r0,r0[0x0]
800004b6:	00 1c       	sub	r12,r0
800004b8:	00 00       	add	r0,r0
800004ba:	05 8c       	ld.ub	r12,r2[0x0]
800004bc:	80 00       	ld.sh	r0,r0[0x0]
800004be:	08 4c       	or	r12,r4
800004c0:	80 00       	ld.sh	r0,r0[0x0]
800004c2:	00 68       	and	r8,r0
800004c4:	80 00       	ld.sh	r0,r0[0x0]
800004c6:	00 24       	rsub	r4,r0
800004c8:	00 00       	add	r0,r0
800004ca:	05 70       	ld.ub	r0,--r2
800004cc:	80 00       	ld.sh	r0,r0[0x0]
800004ce:	00 7c       	tst	r12,r0
800004d0:	00 00       	add	r0,r0
800004d2:	05 64       	ld.uh	r4,--r2
800004d4:	80 00       	ld.sh	r0,r0[0x0]
800004d6:	00 90       	mov	r0,r0
800004d8:	00 00       	add	r0,r0
800004da:	05 58       	ld.sh	r8,--r2
800004dc:	80 00       	ld.sh	r0,r0[0x0]
800004de:	00 a4       	st.w	r0++,r4
800004e0:	00 00       	add	r0,r0
800004e2:	05 a8       	ld.ub	r8,r2[0x2]
800004e4:	80 00       	ld.sh	r0,r0[0x0]
800004e6:	00 b8       	st.h	r0++,r8
800004e8:	00 00       	add	r0,r0
800004ea:	05 50       	ld.sh	r0,--r2
800004ec:	80 00       	ld.sh	r0,r0[0x0]
800004ee:	00 cc       	st.b	r0++,r12
800004f0:	00 00       	add	r0,r0
800004f2:	05 ac       	ld.ub	r12,r2[0x2]
800004f4:	80 00       	ld.sh	r0,r0[0x0]
800004f6:	00 e0       	st.h	--r0,r0
800004f8:	00 00       	add	r0,r0
800004fa:	05 80       	ld.ub	r0,r2[0x0]
800004fc:	80 00       	ld.sh	r0,r0[0x0]
800004fe:	00 f4       	st.b	--r0,r4
80000500:	00 00       	add	r0,r0
80000502:	05 68       	ld.uh	r8,--r2
80000504:	80 00       	ld.sh	r0,r0[0x0]
80000506:	01 08       	ld.w	r8,r0++
80000508:	00 00       	add	r0,r0
8000050a:	05 d0       	ld.ub	r0,r2[0x5]
8000050c:	80 00       	ld.sh	r0,r0[0x0]
8000050e:	01 1c       	ld.sh	r12,r0++
80000510:	00 00       	add	r0,r0
80000512:	05 6c       	ld.uh	r12,--r2
80000514:	80 00       	ld.sh	r0,r0[0x0]
80000516:	01 30       	ld.ub	r0,r0++
80000518:	00 00       	add	r0,r0
8000051a:	05 a0       	ld.ub	r0,r2[0x2]
8000051c:	80 00       	ld.sh	r0,r0[0x0]
8000051e:	01 44       	ld.w	r4,--r0
80000520:	00 00       	add	r0,r0
80000522:	05 60       	ld.uh	r0,--r2
80000524:	80 00       	ld.sh	r0,r0[0x0]
80000526:	01 58       	ld.sh	r8,--r0
80000528:	00 00       	add	r0,r0
8000052a:	05 84       	ld.ub	r4,r2[0x0]
8000052c:	80 00       	ld.sh	r0,r0[0x0]
8000052e:	01 6c       	ld.uh	r12,--r0
80000530:	00 00       	add	r0,r0
80000532:	05 c0       	ld.ub	r0,r2[0x4]
80000534:	80 00       	ld.sh	r0,r0[0x0]
80000536:	01 80       	ld.ub	r0,r0[0x0]
80000538:	00 00       	add	r0,r0
8000053a:	05 c4       	ld.ub	r4,r2[0x4]
8000053c:	80 00       	ld.sh	r0,r0[0x0]
8000053e:	01 94       	ld.ub	r4,r0[0x1]
80000540:	00 00       	add	r0,r0
80000542:	05 54       	ld.sh	r4,--r2
80000544:	80 00       	ld.sh	r0,r0[0x0]
80000546:	01 a8       	ld.ub	r8,r0[0x2]
80000548:	00 00       	add	r0,r0
8000054a:	05 cc       	ld.ub	r12,r2[0x4]
8000054c:	80 00       	ld.sh	r0,r0[0x0]
8000054e:	01 bc       	ld.ub	r12,r0[0x3]
80000550:	00 00       	add	r0,r0
80000552:	05 94       	ld.ub	r4,r2[0x1]
80000554:	80 00       	ld.sh	r0,r0[0x0]
80000556:	01 d0       	ld.ub	r0,r0[0x5]
80000558:	00 00       	add	r0,r0
8000055a:	05 90       	ld.ub	r0,r2[0x1]
8000055c:	80 00       	ld.sh	r0,r0[0x0]
8000055e:	01 e4       	ld.ub	r4,r0[0x6]
80000560:	00 00       	add	r0,r0
80000562:	05 7c       	ld.ub	r12,--r2
80000564:	80 00       	ld.sh	r0,r0[0x0]
80000566:	01 f8       	ld.ub	r8,r0[0x7]
80000568:	00 00       	add	r0,r0
8000056a:	05 b0       	ld.ub	r0,r2[0x3]
8000056c:	80 00       	ld.sh	r0,r0[0x0]
8000056e:	02 0c       	add	r12,r1
80000570:	00 00       	add	r0,r0
80000572:	05 c8       	ld.ub	r8,r2[0x4]
80000574:	80 00       	ld.sh	r0,r0[0x0]
80000576:	02 20       	rsub	r0,r1
80000578:	00 00       	add	r0,r0
8000057a:	05 88       	ld.ub	r8,r2[0x0]
8000057c:	80 00       	ld.sh	r0,r0[0x0]
8000057e:	02 34       	cp.w	r4,r1
80000580:	00 00       	add	r0,r0
80000582:	05 b4       	ld.ub	r4,r2[0x3]
80000584:	80 00       	ld.sh	r0,r0[0x0]
80000586:	02 48       	or	r8,r1
80000588:	00 00       	add	r0,r0
8000058a:	05 e4       	ld.ub	r4,r2[0x6]
8000058c:	80 00       	ld.sh	r0,r0[0x0]
8000058e:	02 5c       	eor	r12,r1
80000590:	00 00       	add	r0,r0
80000592:	05 9c       	ld.ub	r12,r2[0x1]
80000594:	80 00       	ld.sh	r0,r0[0x0]
80000596:	02 70       	tst	r0,r1
80000598:	00 00       	add	r0,r0
8000059a:	05 d4       	ld.ub	r4,r2[0x5]
8000059c:	80 00       	ld.sh	r0,r0[0x0]
8000059e:	02 84       	andn	r4,r1
800005a0:	00 00       	add	r0,r0
800005a2:	05 b8       	ld.ub	r8,r2[0x3]
800005a4:	80 00       	ld.sh	r0,r0[0x0]
800005a6:	02 98       	mov	r8,r1
800005a8:	00 00       	add	r0,r0
800005aa:	05 78       	ld.ub	r8,--r2
800005ac:	80 00       	ld.sh	r0,r0[0x0]
800005ae:	02 ac       	st.w	r1++,r12
800005b0:	00 00       	add	r0,r0
800005b2:	05 d8       	ld.ub	r8,r2[0x5]
800005b4:	80 00       	ld.sh	r0,r0[0x0]
800005b6:	02 c0       	st.b	r1++,r0
800005b8:	00 00       	add	r0,r0
800005ba:	05 bc       	ld.ub	r12,r2[0x3]
800005bc:	80 00       	ld.sh	r0,r0[0x0]
800005be:	00 2c       	rsub	r12,r0
800005c0:	80 00       	ld.sh	r0,r0[0x0]
800005c2:	12 fe       	st.b	--r9,lr
800005c4:	80 00       	ld.sh	r0,r0[0x0]
800005c6:	0a e8       	st.h	--r5,r8

800005c8 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800005c8:	eb cd 40 80 	pushm	r7,lr
800005cc:	1a 97       	mov	r7,sp
	interruptDisable;
	contextSaveFromISR();	  //Save the task context
800005ce:	f0 1f 00 0c 	mcall	800005fc <ROSA_yieldFromISR+0x34>
	system_ticks ++;
800005d2:	48 c8       	lddpc	r8,80000600 <ROSA_yieldFromISR+0x38>
800005d4:	f0 ea 00 00 	ld.d	r10,r8[0]
800005d8:	30 18       	mov	r8,1
800005da:	30 09       	mov	r9,0
800005dc:	f4 08 00 08 	add	r8,r10,r8
800005e0:	f6 09 00 49 	adc	r9,r11,r9
800005e4:	48 7a       	lddpc	r10,80000600 <ROSA_yieldFromISR+0x38>
800005e6:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
800005ea:	f0 1f 00 07 	mcall	80000604 <ROSA_yieldFromISR+0x3c>
	contextRestoreFromISR();  //...and switch over to it.
800005ee:	f0 1f 00 07 	mcall	80000608 <ROSA_yieldFromISR+0x40>
	interruptEnable();
800005f2:	f0 1f 00 07 	mcall	8000060c <ROSA_yieldFromISR+0x44>
}
800005f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800005fa:	00 00       	add	r0,r0
800005fc:	80 00       	ld.sh	r0,r0[0x0]
800005fe:	1d 7e       	ld.ub	lr,--lr
80000600:	00 00       	add	r0,r0
80000602:	06 04       	add	r4,r3
80000604:	80 00       	ld.sh	r0,r0[0x0]
80000606:	0b c8       	ld.ub	r8,r5[0x4]
80000608:	80 00       	ld.sh	r0,r0[0x0]
8000060a:	1d b8       	ld.ub	r8,lr[0x3]
8000060c:	80 00       	ld.sh	r0,r0[0x0]
8000060e:	1d 6a       	ld.uh	r10,--lr

80000610 <usart_options>:
80000610:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000620:	00 00 00 00                                         ....

80000624 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000624:	eb cd 40 80 	pushm	r7,lr
80000628:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000062a:	f0 1f 00 1d 	mcall	8000069c <ROSA_init+0x78>
	buttonInit();								//Buttons
8000062e:	f0 1f 00 1d 	mcall	800006a0 <ROSA_init+0x7c>
	joystickInit();								//Joystick
80000632:	f0 1f 00 1d 	mcall	800006a4 <ROSA_init+0x80>
	potInit();									//Potentiometer
80000636:	f0 1f 00 1d 	mcall	800006a8 <ROSA_init+0x84>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000063a:	e0 6a 1b 00 	mov	r10,6912
8000063e:	ea 1a 00 b7 	orh	r10,0xb7
80000642:	49 bb       	lddpc	r11,800006ac <ROSA_init+0x88>
80000644:	fe 7c 14 00 	mov	r12,-60416
80000648:	f0 1f 00 1a 	mcall	800006b0 <ROSA_init+0x8c>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST				= NULL;
8000064c:	49 a8       	lddpc	r8,800006b4 <ROSA_init+0x90>
8000064e:	30 09       	mov	r9,0
80000650:	91 09       	st.w	r8[0x0],r9
	SUSPENDEDLIST		= NULL;
80000652:	49 a8       	lddpc	r8,800006b8 <ROSA_init+0x94>
80000654:	30 09       	mov	r9,0
80000656:	91 09       	st.w	r8[0x0],r9
	EXECTASK			= NULL;
80000658:	49 98       	lddpc	r8,800006bc <ROSA_init+0x98>
8000065a:	30 09       	mov	r9,0
8000065c:	91 09       	st.w	r8[0x0],r9
	SEMAPHORES			= NULL;
8000065e:	49 98       	lddpc	r8,800006c0 <ROSA_init+0x9c>
80000660:	30 09       	mov	r9,0
80000662:	91 09       	st.w	r8[0x0],r9
	
#if IDLE_TASK_ENABLED
	IDLETASK = NULL;
80000664:	49 88       	lddpc	r8,800006c4 <ROSA_init+0xa0>
80000666:	30 09       	mov	r9,0
80000668:	91 09       	st.w	r8[0x0],r9
	ROSA_taskCreate(&IDLETASK, "idle", idle, 0x40, 255);
8000066a:	e0 68 00 ff 	mov	r8,255
8000066e:	34 09       	mov	r9,64
80000670:	49 6a       	lddpc	r10,800006c8 <ROSA_init+0xa4>
80000672:	49 7b       	lddpc	r11,800006cc <ROSA_init+0xa8>
80000674:	49 4c       	lddpc	r12,800006c4 <ROSA_init+0xa0>
80000676:	f0 1f 00 17 	mcall	800006d0 <ROSA_init+0xac>
	//taskUninstall(IDLETASK);
#endif
	
	//initialize system time
	system_ticks = 0;
8000067a:	49 7a       	lddpc	r10,800006d4 <ROSA_init+0xb0>
8000067c:	30 08       	mov	r8,0
8000067e:	30 09       	mov	r9,0
80000680:	f4 e9 00 00 	st.d	r10[0],r8
	round_robin_ticks = 0;
80000684:	49 5a       	lddpc	r10,800006d8 <ROSA_init+0xb4>
80000686:	30 08       	mov	r8,0
80000688:	30 09       	mov	r9,0
8000068a:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Initialize the timer to 1 ms period.
	//...
	interruptInit();
8000068e:	f0 1f 00 14 	mcall	800006dc <ROSA_init+0xb8>
	timerInit(1);
80000692:	30 1c       	mov	r12,1
80000694:	f0 1f 00 13 	mcall	800006e0 <ROSA_init+0xbc>
	//...
}
80000698:	e3 cd 80 80 	ldm	sp++,r7,pc
8000069c:	80 00       	ld.sh	r0,r0[0x0]
8000069e:	0f 2c       	ld.uh	r12,r7++
800006a0:	80 00       	ld.sh	r0,r0[0x0]
800006a2:	0d 84       	ld.ub	r4,r6[0x0]
800006a4:	80 00       	ld.sh	r0,r0[0x0]
800006a6:	0d ac       	ld.ub	r12,r6[0x2]
800006a8:	80 00       	ld.sh	r0,r0[0x0]
800006aa:	0f f8       	ld.ub	r8,r7[0x7]
800006ac:	80 00       	ld.sh	r0,r0[0x0]
800006ae:	06 10       	sub	r0,r3
800006b0:	80 00       	ld.sh	r0,r0[0x0]
800006b2:	11 ac       	ld.ub	r12,r8[0x2]
800006b4:	00 00       	add	r0,r0
800006b6:	05 ec       	ld.ub	r12,r2[0x6]
800006b8:	00 00       	add	r0,r0
800006ba:	05 f0       	ld.ub	r0,r2[0x7]
800006bc:	00 00       	add	r0,r0
800006be:	05 f8       	ld.ub	r8,r2[0x7]
800006c0:	00 00       	add	r0,r0
800006c2:	05 f4       	ld.ub	r4,r2[0x7]
800006c4:	00 00       	add	r0,r0
800006c6:	05 e8       	ld.ub	r8,r2[0x6]
800006c8:	80 00       	ld.sh	r0,r0[0x0]
800006ca:	0a e0       	st.h	--r5,r0
800006cc:	80 00       	ld.sh	r0,r0[0x0]
800006ce:	06 1c       	sub	r12,r3
800006d0:	80 00       	ld.sh	r0,r0[0x0]
800006d2:	08 4c       	or	r12,r4
800006d4:	00 00       	add	r0,r0
800006d6:	06 04       	add	r4,r3
800006d8:	00 00       	add	r0,r0
800006da:	05 fc       	ld.ub	r12,r2[0x7]
800006dc:	80 00       	ld.sh	r0,r0[0x0]
800006de:	1d 48       	ld.w	r8,--lr
800006e0:	80 00       	ld.sh	r0,r0[0x0]
800006e2:	12 d0       	st.w	--r9,r0

800006e4 <insert_after>:
{
	return system_ticks;
}

uint16_t insert_after( tcb * position, tcb * new_task )
{
800006e4:	eb cd 40 80 	pushm	r7,lr
800006e8:	1a 97       	mov	r7,sp
800006ea:	20 3d       	sub	sp,12
800006ec:	ef 4c ff f8 	st.w	r7[-8],r12
800006f0:	ef 4b ff f4 	st.w	r7[-12],r11
	uint16_t result = -1;
800006f4:	3f f8       	mov	r8,-1
800006f6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( position != NULL )
800006fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006fe:	58 08       	cp.w	r8,0
80000700:	c2 10       	breq	80000742 <insert_after+0x5e>
	{
		new_task->prevtcb = position;
80000702:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000706:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000070a:	f1 49 00 64 	st.w	r8[100],r9
		new_task->nexttcb = position->nexttcb;
8000070e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000712:	70 09       	ld.w	r9,r8[0x0]
80000714:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000718:	91 09       	st.w	r8[0x0],r9
		
		position->nexttcb = new_task;
8000071a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000071e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000722:	91 09       	st.w	r8[0x0],r9
		if( new_task->nexttcb != NULL )
80000724:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000728:	70 08       	ld.w	r8,r8[0x0]
8000072a:	58 08       	cp.w	r8,0
8000072c:	c0 80       	breq	8000073c <insert_after+0x58>
		{
			(new_task->nexttcb)->prevtcb = new_task;
8000072e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000732:	70 08       	ld.w	r8,r8[0x0]
80000734:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000738:	f1 49 00 64 	st.w	r8[100],r9
		}
		result = 1;
8000073c:	30 18       	mov	r8,1
8000073e:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	return result;
80000742:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000746:	10 9c       	mov	r12,r8
80000748:	2f dd       	sub	sp,-12
8000074a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000074e:	d7 03       	nop

80000750 <taskInstall>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

uint16_t taskInstall(tcb * task)
{
80000750:	eb cd 40 80 	pushm	r7,lr
80000754:	1a 97       	mov	r7,sp
80000756:	20 3d       	sub	sp,12
80000758:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
8000075c:	3f f8       	mov	r8,-1
8000075e:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( TCBLIST == NULL )
80000762:	4b 98       	lddpc	r8,80000844 <taskInstall+0xf4>
80000764:	70 08       	ld.w	r8,r8[0x0]
80000766:	58 08       	cp.w	r8,0
80000768:	c1 41       	brne	80000790 <taskInstall+0x40>
	{
		TCBLIST		  = task;
8000076a:	4b 78       	lddpc	r8,80000844 <taskInstall+0xf4>
8000076c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000770:	91 09       	st.w	r8[0x0],r9
		task->nexttcb = task;
80000772:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000776:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000077a:	91 09       	st.w	r8[0x0],r9
		task->prevtcb = task;
8000077c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000780:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000784:	f1 49 00 64 	st.w	r8[100],r9

		result = 1;
80000788:	30 18       	mov	r8,1
8000078a:	ef 58 ff fa 	st.h	r7[-6],r8
8000078e:	c5 58       	rjmp	80000838 <taskInstall+0xe8>
	}
	//if this task should be inserted before the first task in the list
	else if( task->effective_priority < TCBLIST->effective_priority )
80000790:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000794:	f1 39 00 69 	ld.ub	r9,r8[105]
80000798:	4a b8       	lddpc	r8,80000844 <taskInstall+0xf4>
8000079a:	70 08       	ld.w	r8,r8[0x0]
8000079c:	f1 38 00 69 	ld.ub	r8,r8[105]
800007a0:	f0 09 18 00 	cp.b	r9,r8
800007a4:	c1 12       	brcc	800007c6 <taskInstall+0x76>
	{
		insert_after(TCBLIST->prevtcb, task);
800007a6:	4a 88       	lddpc	r8,80000844 <taskInstall+0xf4>
800007a8:	70 08       	ld.w	r8,r8[0x0]
800007aa:	71 98       	ld.w	r8,r8[0x64]
800007ac:	ee fb ff f4 	ld.w	r11,r7[-12]
800007b0:	10 9c       	mov	r12,r8
800007b2:	f0 1f 00 26 	mcall	80000848 <taskInstall+0xf8>
		TCBLIST = task;
800007b6:	4a 48       	lddpc	r8,80000844 <taskInstall+0xf4>
800007b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800007bc:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
800007be:	30 18       	mov	r8,1
800007c0:	ef 58 ff fa 	st.h	r7[-6],r8
800007c4:	c3 a8       	rjmp	80000838 <taskInstall+0xe8>
	}
	else if( task->effective_priority >= (TCBLIST->prevtcb)->effective_priority )
800007c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007ca:	f1 39 00 69 	ld.ub	r9,r8[105]
800007ce:	49 e8       	lddpc	r8,80000844 <taskInstall+0xf4>
800007d0:	70 08       	ld.w	r8,r8[0x0]
800007d2:	71 98       	ld.w	r8,r8[0x64]
800007d4:	f1 38 00 69 	ld.ub	r8,r8[105]
800007d8:	f0 09 18 00 	cp.b	r9,r8
800007dc:	c0 a3       	brcs	800007f0 <taskInstall+0xa0>
	{
		insert_after(TCBLIST->prevtcb, task);
800007de:	49 a8       	lddpc	r8,80000844 <taskInstall+0xf4>
800007e0:	70 08       	ld.w	r8,r8[0x0]
800007e2:	71 98       	ld.w	r8,r8[0x64]
800007e4:	ee fb ff f4 	ld.w	r11,r7[-12]
800007e8:	10 9c       	mov	r12,r8
800007ea:	f0 1f 00 18 	mcall	80000848 <taskInstall+0xf8>
800007ee:	c2 58       	rjmp	80000838 <taskInstall+0xe8>
	}
	else
	{
		iterator = TCBLIST;
800007f0:	49 58       	lddpc	r8,80000844 <taskInstall+0xf4>
800007f2:	70 08       	ld.w	r8,r8[0x0]
800007f4:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->effective_priority >= iterator->effective_priority )
800007f8:	c0 68       	rjmp	80000804 <taskInstall+0xb4>
		{
			iterator = iterator->nexttcb;
800007fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007fe:	70 08       	ld.w	r8,r8[0x0]
80000800:	ef 48 ff fc 	st.w	r7[-4],r8
		insert_after(TCBLIST->prevtcb, task);
	}
	else
	{
		iterator = TCBLIST;
		while( iterator && task->effective_priority >= iterator->effective_priority )
80000804:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000808:	58 08       	cp.w	r8,0
8000080a:	c0 c0       	breq	80000822 <taskInstall+0xd2>
8000080c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000810:	f1 39 00 69 	ld.ub	r9,r8[105]
80000814:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000818:	f1 38 00 69 	ld.ub	r8,r8[105]
8000081c:	f0 09 18 00 	cp.b	r9,r8
80000820:	ce d2       	brcc	800007fa <taskInstall+0xaa>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
80000822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000826:	71 98       	ld.w	r8,r8[0x64]
80000828:	ee fb ff f4 	ld.w	r11,r7[-12]
8000082c:	10 9c       	mov	r12,r8
8000082e:	f0 1f 00 07 	mcall	80000848 <taskInstall+0xf8>
		
		result = 1;
80000832:	30 18       	mov	r8,1
80000834:	ef 58 ff fa 	st.h	r7[-6],r8
	}

	return result;
80000838:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
8000083c:	10 9c       	mov	r12,r8
8000083e:	2f dd       	sub	sp,-12
80000840:	e3 cd 80 80 	ldm	sp++,r7,pc
80000844:	00 00       	add	r0,r0
80000846:	05 ec       	ld.ub	r12,r2[0x6]
80000848:	80 00       	ld.sh	r0,r0[0x0]
8000084a:	06 e4       	st.h	--r3,r4

8000084c <ROSA_taskCreate>:
	
	return result;
}

uint16_t ROSA_taskCreate(ROSA_taskHandle_t* th, char* id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
8000084c:	eb cd 40 80 	pushm	r7,lr
80000850:	1a 97       	mov	r7,sp
80000852:	20 8d       	sub	sp,32
80000854:	ef 4c ff f0 	st.w	r7[-16],r12
80000858:	ef 4b ff ec 	st.w	r7[-20],r11
8000085c:	ef 4a ff e8 	st.w	r7[-24],r10
80000860:	ef 49 ff e4 	st.w	r7[-28],r9
80000864:	ef 68 ff e0 	st.b	r7[-32],r8
	uint16_t result = 0;
80000868:	30 08       	mov	r8,0
8000086a:	ef 58 ff f6 	st.h	r7[-10],r8
	
	if(! *th)
8000086e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000872:	70 08       	ld.w	r8,r8[0x0]
80000874:	58 08       	cp.w	r8,0
80000876:	c6 e1       	brne	80000952 <ROSA_taskCreate+0x106>
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
80000878:	37 cb       	mov	r11,124
8000087a:	30 1c       	mov	r12,1
8000087c:	f0 1f 00 39 	mcall	80000960 <ROSA_taskCreate+0x114>
80000880:	18 98       	mov	r8,r12
80000882:	10 99       	mov	r9,r8
80000884:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000888:	91 09       	st.w	r8[0x0],r9
		tcb* temp = *th;
8000088a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000088e:	70 08       	ld.w	r8,r8[0x0]
80000890:	ef 48 ff f8 	st.w	r7[-8],r8
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80000894:	30 08       	mov	r8,0
80000896:	ef 48 ff fc 	st.w	r7[-4],r8
8000089a:	c1 48       	rjmp	800008c2 <ROSA_taskCreate+0x76>
		{
			temp->id[i] = id[i];		//copy task id
8000089c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800008a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008a4:	ee fa ff ec 	ld.w	r10,r7[-20]
800008a8:	f4 08 00 08 	add	r8,r10,r8
800008ac:	11 88       	ld.ub	r8,r8[0x0]
800008ae:	ee fa ff f8 	ld.w	r10,r7[-8]
800008b2:	f4 09 00 09 	add	r9,r10,r9
800008b6:	b2 c8       	st.b	r9[0x4],r8
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
		tcb* temp = *th;
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
800008b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008bc:	2f f8       	sub	r8,-1
800008be:	ef 48 ff fc 	st.w	r7[-4],r8
800008c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008c6:	58 38       	cp.w	r8,3
800008c8:	fe 9a ff ea 	brle	8000089c <ROSA_taskCreate+0x50>
		{
			temp->id[i] = id[i];		//copy task id
		}
		
		temp->staddr = taskFunction;
800008cc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800008d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008d4:	91 29       	st.w	r8[0x8],r9
		temp->retaddr = (int)taskFunction;
800008d6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800008da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008de:	91 99       	st.w	r8[0x24],r9
		
		temp->datasize = stackSize;
800008e0:	ee f9 ff e4 	ld.w	r9,r7[-28]
800008e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008e8:	91 49       	st.w	r8[0x10],r9
		temp->dataarea = (int*)calloc(stackSize, sizeof(int)) + stackSize;
800008ea:	30 4b       	mov	r11,4
800008ec:	ee fc ff e4 	ld.w	r12,r7[-28]
800008f0:	f0 1f 00 1c 	mcall	80000960 <ROSA_taskCreate+0x114>
800008f4:	18 98       	mov	r8,r12
800008f6:	10 99       	mov	r9,r8
800008f8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800008fc:	a3 68       	lsl	r8,0x2
800008fe:	10 09       	add	r9,r8
80000900:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000904:	91 39       	st.w	r8[0xc],r9
		temp->saveusp = temp->dataarea;
80000906:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000090a:	70 39       	ld.w	r9,r8[0xc]
8000090c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000910:	91 59       	st.w	r8[0x14],r9
		
		temp->savesr = ROSA_INITIALSR;
80000912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000916:	fc 19 00 1c 	movh	r9,0x1c
8000091a:	91 89       	st.w	r8[0x20],r9
		
		temp->priority = priority;
8000091c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000920:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000924:	f3 68 00 68 	st.b	r9[104],r8
		temp->effective_priority = priority;
80000928:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000092c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000930:	f3 68 00 69 	st.b	r9[105],r8
		
		temp->suspended = 0;
80000934:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000938:	30 09       	mov	r9,0
8000093a:	f1 49 00 78 	st.w	r8[120],r9
		
		contextInit(temp);
8000093e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000942:	f0 1f 00 09 	mcall	80000964 <ROSA_taskCreate+0x118>
		
		taskInstall(* th);
80000946:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000094a:	70 08       	ld.w	r8,r8[0x0]
8000094c:	10 9c       	mov	r12,r8
8000094e:	f0 1f 00 07 	mcall	80000968 <ROSA_taskCreate+0x11c>
	}
	return result;
80000952:	ef 08 ff f6 	ld.sh	r8,r7[-10]
}
80000956:	10 9c       	mov	r12,r8
80000958:	2f 8d       	sub	sp,-32
8000095a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000095e:	00 00       	add	r0,r0
80000960:	80 00       	ld.sh	r0,r0[0x0]
80000962:	14 08       	add	r8,r10
80000964:	80 00       	ld.sh	r0,r0[0x0]
80000966:	0b 1e       	ld.sh	lr,r5++
80000968:	80 00       	ld.sh	r0,r0[0x0]
8000096a:	07 50       	ld.sh	r0,--r3

8000096c <taskUninstall>:
	
	return result;
}

uint16_t taskUninstall( tcb * task )
{
8000096c:	eb cd 40 80 	pushm	r7,lr
80000970:	1a 97       	mov	r7,sp
80000972:	20 2d       	sub	sp,8
80000974:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000978:	3f f8       	mov	r8,-1
8000097a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
8000097e:	49 78       	lddpc	r8,800009d8 <taskUninstall+0x6c>
80000980:	70 09       	ld.w	r9,r8[0x0]
80000982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000986:	10 39       	cp.w	r9,r8
80000988:	c0 c1       	brne	800009a0 <taskUninstall+0x34>
8000098a:	49 48       	lddpc	r8,800009d8 <taskUninstall+0x6c>
8000098c:	70 08       	ld.w	r8,r8[0x0]
8000098e:	71 99       	ld.w	r9,r8[0x64]
80000990:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000994:	10 39       	cp.w	r9,r8
80000996:	c0 51       	brne	800009a0 <taskUninstall+0x34>
	{
		TCBLIST	= NULL;
80000998:	49 08       	lddpc	r8,800009d8 <taskUninstall+0x6c>
8000099a:	30 09       	mov	r9,0
8000099c:	91 09       	st.w	r8[0x0],r9
uint16_t taskUninstall( tcb * task )
{
	uint16_t result = -1;
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
8000099e:	c0 c8       	rjmp	800009b6 <taskUninstall+0x4a>
	{
		TCBLIST	= NULL;
	}
	else if( TCBLIST == task )
800009a0:	48 e8       	lddpc	r8,800009d8 <taskUninstall+0x6c>
800009a2:	70 09       	ld.w	r9,r8[0x0]
800009a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009a8:	10 39       	cp.w	r9,r8
800009aa:	c0 61       	brne	800009b6 <taskUninstall+0x4a>
	{
		TCBLIST = TCBLIST->nexttcb;
800009ac:	48 b8       	lddpc	r8,800009d8 <taskUninstall+0x6c>
800009ae:	70 08       	ld.w	r8,r8[0x0]
800009b0:	70 09       	ld.w	r9,r8[0x0]
800009b2:	48 a8       	lddpc	r8,800009d8 <taskUninstall+0x6c>
800009b4:	91 09       	st.w	r8[0x0],r9
	}
	
	result = remove(task);
800009b6:	ee fc ff f8 	ld.w	r12,r7[-8]
800009ba:	f0 1f 00 09 	mcall	800009dc <taskUninstall+0x70>
800009be:	18 98       	mov	r8,r12
800009c0:	5c 88       	casts.h	r8
800009c2:	ef 58 ff fe 	st.h	r7[-2],r8
	
	result = 1;
800009c6:	30 18       	mov	r8,1
800009c8:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
800009cc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800009d0:	10 9c       	mov	r12,r8
800009d2:	2f ed       	sub	sp,-8
800009d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800009d8:	00 00       	add	r0,r0
800009da:	05 ec       	ld.ub	r12,r2[0x6]
800009dc:	80 00       	ld.sh	r0,r0[0x0]
800009de:	0a 78       	tst	r8,r5

800009e0 <taskUnsuspend>:

uint16_t taskUnsuspend( tcb * task )
{
800009e0:	eb cd 40 80 	pushm	r7,lr
800009e4:	1a 97       	mov	r7,sp
800009e6:	20 2d       	sub	sp,8
800009e8:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
800009ec:	3f f8       	mov	r8,-1
800009ee:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
800009f2:	4a 08       	lddpc	r8,80000a70 <taskUnsuspend+0x90>
800009f4:	70 09       	ld.w	r9,r8[0x0]
800009f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009fa:	10 39       	cp.w	r9,r8
800009fc:	c0 c1       	brne	80000a14 <taskUnsuspend+0x34>
800009fe:	49 d8       	lddpc	r8,80000a70 <taskUnsuspend+0x90>
80000a00:	70 08       	ld.w	r8,r8[0x0]
80000a02:	71 99       	ld.w	r9,r8[0x64]
80000a04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a08:	10 39       	cp.w	r9,r8
80000a0a:	c0 51       	brne	80000a14 <taskUnsuspend+0x34>
	{
		SUSPENDEDLIST		= NULL;
80000a0c:	49 98       	lddpc	r8,80000a70 <taskUnsuspend+0x90>
80000a0e:	30 09       	mov	r9,0
80000a10:	91 09       	st.w	r8[0x0],r9
uint16_t taskUnsuspend( tcb * task )
{
	uint16_t result = -1;
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80000a12:	c1 c8       	rjmp	80000a4a <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST		= NULL;
	}
	else if( SUSPENDEDLIST == task )
80000a14:	49 78       	lddpc	r8,80000a70 <taskUnsuspend+0x90>
80000a16:	70 09       	ld.w	r9,r8[0x0]
80000a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a1c:	10 39       	cp.w	r9,r8
80000a1e:	c0 71       	brne	80000a2c <taskUnsuspend+0x4c>
	{
		SUSPENDEDLIST = SUSPENDEDLIST->nexttcb;
80000a20:	49 48       	lddpc	r8,80000a70 <taskUnsuspend+0x90>
80000a22:	70 08       	ld.w	r8,r8[0x0]
80000a24:	70 09       	ld.w	r9,r8[0x0]
80000a26:	49 38       	lddpc	r8,80000a70 <taskUnsuspend+0x90>
80000a28:	91 09       	st.w	r8[0x0],r9
80000a2a:	c1 08       	rjmp	80000a4a <taskUnsuspend+0x6a>
	}
	else if( SUSPENDEDLIST->prevtcb == task )
80000a2c:	49 18       	lddpc	r8,80000a70 <taskUnsuspend+0x90>
80000a2e:	70 08       	ld.w	r8,r8[0x0]
80000a30:	71 99       	ld.w	r9,r8[0x64]
80000a32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a36:	10 39       	cp.w	r9,r8
80000a38:	c0 91       	brne	80000a4a <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST->prevtcb = (SUSPENDEDLIST->prevtcb)->prevtcb;
80000a3a:	48 e8       	lddpc	r8,80000a70 <taskUnsuspend+0x90>
80000a3c:	70 08       	ld.w	r8,r8[0x0]
80000a3e:	48 d9       	lddpc	r9,80000a70 <taskUnsuspend+0x90>
80000a40:	72 09       	ld.w	r9,r9[0x0]
80000a42:	73 99       	ld.w	r9,r9[0x64]
80000a44:	73 99       	ld.w	r9,r9[0x64]
80000a46:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	result = remove(task);
80000a4a:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a4e:	f0 1f 00 0a 	mcall	80000a74 <taskUnsuspend+0x94>
80000a52:	18 98       	mov	r8,r12
80000a54:	5c 88       	casts.h	r8
80000a56:	ef 58 ff fe 	st.h	r7[-2],r8
	task->suspended = 0;
80000a5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a5e:	30 09       	mov	r9,0
80000a60:	f1 49 00 78 	st.w	r8[120],r9
	
	return result;
80000a64:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000a68:	10 9c       	mov	r12,r8
80000a6a:	2f ed       	sub	sp,-8
80000a6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a70:	00 00       	add	r0,r0
80000a72:	05 f0       	ld.ub	r0,r2[0x7]
80000a74:	80 00       	ld.sh	r0,r0[0x0]
80000a76:	0a 78       	tst	r8,r5

80000a78 <remove>:

uint16_t remove(tcb * removed_task)
{
80000a78:	eb cd 40 80 	pushm	r7,lr
80000a7c:	1a 97       	mov	r7,sp
80000a7e:	20 2d       	sub	sp,8
80000a80:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000a84:	3f f8       	mov	r8,-1
80000a86:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( removed_task->prevtcb != NULL )
80000a8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a8e:	71 98       	ld.w	r8,r8[0x64]
80000a90:	58 08       	cp.w	r8,0
80000a92:	c0 80       	breq	80000aa2 <remove+0x2a>
	{
		(removed_task->prevtcb)->nexttcb = removed_task->nexttcb;
80000a94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a98:	71 98       	ld.w	r8,r8[0x64]
80000a9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a9e:	72 09       	ld.w	r9,r9[0x0]
80000aa0:	91 09       	st.w	r8[0x0],r9
	}
	
	if( removed_task->nexttcb != NULL )
80000aa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000aa6:	70 08       	ld.w	r8,r8[0x0]
80000aa8:	58 08       	cp.w	r8,0
80000aaa:	c0 90       	breq	80000abc <remove+0x44>
	{
		(removed_task->nexttcb)->prevtcb = removed_task->prevtcb;
80000aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ab0:	70 08       	ld.w	r8,r8[0x0]
80000ab2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ab6:	73 99       	ld.w	r9,r9[0x64]
80000ab8:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	// nullify pointers
	removed_task->prevtcb = NULL;
80000abc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ac0:	30 09       	mov	r9,0
80000ac2:	f1 49 00 64 	st.w	r8[100],r9
	removed_task->nexttcb = NULL;
80000ac6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000aca:	30 09       	mov	r9,0
80000acc:	91 09       	st.w	r8[0x0],r9
		
	result = 1;
80000ace:	30 18       	mov	r8,1
80000ad0:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000ad4:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000ad8:	10 9c       	mov	r12,r8
80000ada:	2f ed       	sub	sp,-8
80000adc:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ae0 <idle>:
	return result;
}

#if IDLE_TASK_ENABLED
void idle(void)
{
80000ae0:	eb cd 40 80 	pushm	r7,lr
80000ae4:	1a 97       	mov	r7,sp
	while(1);
80000ae6:	c0 08       	rjmp	80000ae6 <idle+0x6>

80000ae8 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000ae8:	4b 5c       	lddpc	r12,80000bbc <_yield+0xa>
	lda.w r11,EXECTASK
80000aea:	4b 6b       	lddpc	r11,80000bc0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000aec:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000aee:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000af0:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000af2:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000af4:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000af8:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000afa:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000afc:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000afe:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000b02:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000b04:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000b06:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000b08:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000b0a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000b0c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000b0e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000b10:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000b12:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000b14:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000b16:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000b18:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000b1a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000b1c:	1c 9f       	mov	pc,lr

80000b1e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000b1e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000b20:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000b22:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000b24:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000b28:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000b2c:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000b30:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000b34:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000b38:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000b3c:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000b40:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000b44:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000b48:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000b4a:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000b4c:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000b4e:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000b50:	1c 9f       	mov	pc,lr

80000b52 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000b52:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000b54:	49 bc       	lddpc	r12,80000bc0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000b56:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000b58:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000b5a:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000b5c:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000b5e:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000b60:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000b62:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000b64:	33 40       	mov	r0,52
	add r0,r12
80000b66:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000b68:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000b6c:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000b6e:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000b70:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000b74:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000b76:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000b78:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000b7a:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000b7c:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000b7e:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000b80:	1c 9f       	mov	pc,lr

80000b82 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000b82:	49 0c       	lddpc	r12,80000bc0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000b84:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000b86:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000b88:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000b8a:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000b8e:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000b90:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000b92:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000b94:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000b96:	33 40       	mov	r0,52
	add r0,r12
80000b98:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000b9a:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000b9e:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000ba0:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000ba2:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000ba4:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000ba6:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000ba8:	d6 13       	rets

80000baa <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000baa:	d4 01       	pushm	lr
	lda.w lr,_yield
80000bac:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000bb0:	d7 33       	scall

80000bb2 <_yield>:
_yield:
	call contextSave
80000bb2:	cd 0f       	rcall	80000b52 <contextSave>
	call scheduler
80000bb4:	f0 1f 00 04 	mcall	80000bc4 <_yield+0x12>
	call contextRestore
80000bb8:	ce 5f       	rcall	80000b82 <contextRestore>
80000bba:	00 00       	add	r0,r0
80000bbc:	00 00       	add	r0,r0
80000bbe:	05 ec       	ld.ub	r12,r2[0x6]
80000bc0:	00 00       	add	r0,r0
80000bc2:	05 f8       	ld.ub	r8,r2[0x7]
80000bc4:	80 00       	ld.sh	r0,r0[0x0]
80000bc6:	0b c8       	ld.ub	r8,r5[0x4]

80000bc8 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000bc8:	eb cd 40 80 	pushm	r7,lr
80000bcc:	1a 97       	mov	r7,sp
// for handling possible round robin configuration
/*******************************************************************/
#if ROUND_ROBIN_MODE_ENABLED
	//if( ROUNDROBIN_end )
	//{
		round_robin_ticks ++;
80000bce:	4a a8       	lddpc	r8,80000c74 <scheduler+0xac>
80000bd0:	f0 ea 00 00 	ld.d	r10,r8[0]
80000bd4:	30 18       	mov	r8,1
80000bd6:	30 09       	mov	r9,0
80000bd8:	f4 08 00 08 	add	r8,r10,r8
80000bdc:	f6 09 00 49 	adc	r9,r11,r9
80000be0:	4a 5a       	lddpc	r10,80000c74 <scheduler+0xac>
80000be2:	f4 e9 00 00 	st.d	r10[0],r8
		
		if( round_robin_ticks >= MAX_ROUND_ROBIN_TICKS )
80000be6:	4a 48       	lddpc	r8,80000c74 <scheduler+0xac>
80000be8:	f0 e8 00 00 	ld.d	r8,r8[0]
80000bec:	58 98       	cp.w	r8,9
80000bee:	5c 29       	cpc	r9
80000bf0:	e0 88 00 2b 	brls	80000c46 <scheduler+0x7e>
		{
			// this really should be possible to optimize
			if( EXECTASK->blocking_semaphore == NULL && EXECTASK->suspended == 0 )
80000bf4:	4a 18       	lddpc	r8,80000c78 <scheduler+0xb0>
80000bf6:	70 08       	ld.w	r8,r8[0x0]
80000bf8:	71 d8       	ld.w	r8,r8[0x74]
80000bfa:	58 08       	cp.w	r8,0
80000bfc:	c1 01       	brne	80000c1c <scheduler+0x54>
80000bfe:	49 f8       	lddpc	r8,80000c78 <scheduler+0xb0>
80000c00:	70 08       	ld.w	r8,r8[0x0]
80000c02:	71 e8       	ld.w	r8,r8[0x78]
80000c04:	58 08       	cp.w	r8,0
80000c06:	c0 b1       	brne	80000c1c <scheduler+0x54>
			{
				taskUninstall(EXECTASK);
80000c08:	49 c8       	lddpc	r8,80000c78 <scheduler+0xb0>
80000c0a:	70 08       	ld.w	r8,r8[0x0]
80000c0c:	10 9c       	mov	r12,r8
80000c0e:	f0 1f 00 1c 	mcall	80000c7c <scheduler+0xb4>
				taskInstall(EXECTASK);
80000c12:	49 a8       	lddpc	r8,80000c78 <scheduler+0xb0>
80000c14:	70 08       	ld.w	r8,r8[0x0]
80000c16:	10 9c       	mov	r12,r8
80000c18:	f0 1f 00 1a 	mcall	80000c80 <scheduler+0xb8>
			}
			round_robin_ticks = 0;
80000c1c:	49 6a       	lddpc	r10,80000c74 <scheduler+0xac>
80000c1e:	30 08       	mov	r8,0
80000c20:	30 09       	mov	r9,0
80000c22:	f4 e9 00 00 	st.d	r10[0],r8
		}
	//}
#endif
/*******************************************************************/
	
	while( SUSPENDEDLIST && SUSPENDEDLIST->back_online_time <= system_ticks )
80000c26:	c1 18       	rjmp	80000c48 <scheduler+0x80>
	{
		iterator = SUSPENDEDLIST;
80000c28:	49 78       	lddpc	r8,80000c84 <scheduler+0xbc>
80000c2a:	70 09       	ld.w	r9,r8[0x0]
80000c2c:	49 78       	lddpc	r8,80000c88 <scheduler+0xc0>
80000c2e:	91 09       	st.w	r8[0x0],r9
		taskUnsuspend(iterator);
80000c30:	49 68       	lddpc	r8,80000c88 <scheduler+0xc0>
80000c32:	70 08       	ld.w	r8,r8[0x0]
80000c34:	10 9c       	mov	r12,r8
80000c36:	f0 1f 00 16 	mcall	80000c8c <scheduler+0xc4>
		taskInstall(iterator);
80000c3a:	49 48       	lddpc	r8,80000c88 <scheduler+0xc0>
80000c3c:	70 08       	ld.w	r8,r8[0x0]
80000c3e:	10 9c       	mov	r12,r8
80000c40:	f0 1f 00 10 	mcall	80000c80 <scheduler+0xb8>
80000c44:	c0 28       	rjmp	80000c48 <scheduler+0x80>
		}
	//}
#endif
/*******************************************************************/
	
	while( SUSPENDEDLIST && SUSPENDEDLIST->back_online_time <= system_ticks )
80000c46:	d7 03       	nop
80000c48:	48 f8       	lddpc	r8,80000c84 <scheduler+0xbc>
80000c4a:	70 08       	ld.w	r8,r8[0x0]
80000c4c:	58 08       	cp.w	r8,0
80000c4e:	c0 d0       	breq	80000c68 <scheduler+0xa0>
80000c50:	48 d8       	lddpc	r8,80000c84 <scheduler+0xbc>
80000c52:	70 08       	ld.w	r8,r8[0x0]
80000c54:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000c58:	48 e8       	lddpc	r8,80000c90 <scheduler+0xc8>
80000c5a:	f0 e8 00 00 	ld.d	r8,r8[0]
80000c5e:	10 3a       	cp.w	r10,r8
80000c60:	f2 0b 13 00 	cpc	r11,r9
80000c64:	fe 98 ff e2 	brls	80000c28 <scheduler+0x60>
		iterator = SUSPENDEDLIST;
		taskUnsuspend(iterator);
		taskInstall(iterator);
	}
	
	EXECTASK = TCBLIST;
80000c68:	48 b8       	lddpc	r8,80000c94 <scheduler+0xcc>
80000c6a:	70 09       	ld.w	r9,r8[0x0]
80000c6c:	48 38       	lddpc	r8,80000c78 <scheduler+0xb0>
80000c6e:	91 09       	st.w	r8[0x0],r9

}
80000c70:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c74:	00 00       	add	r0,r0
80000c76:	05 fc       	ld.ub	r12,r2[0x7]
80000c78:	00 00       	add	r0,r0
80000c7a:	05 f8       	ld.ub	r8,r2[0x7]
80000c7c:	80 00       	ld.sh	r0,r0[0x0]
80000c7e:	09 6c       	ld.uh	r12,--r4
80000c80:	80 00       	ld.sh	r0,r0[0x0]
80000c82:	07 50       	ld.sh	r0,--r3
80000c84:	00 00       	add	r0,r0
80000c86:	05 f0       	ld.ub	r0,r2[0x7]
80000c88:	00 00       	add	r0,r0
80000c8a:	06 0c       	add	r12,r3
80000c8c:	80 00       	ld.sh	r0,r0[0x0]
80000c8e:	09 e0       	ld.ub	r0,r4[0x6]
80000c90:	00 00       	add	r0,r0
80000c92:	06 04       	add	r4,r3
80000c94:	00 00       	add	r0,r0
80000c96:	05 ec       	ld.ub	r12,r2[0x6]

80000c98 <C.0.9446>:
80000c98:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000ca8 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000ca8:	eb cd 40 80 	pushm	r7,lr
80000cac:	1a 97       	mov	r7,sp
80000cae:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000cb0:	fe 78 38 00 	mov	r8,-51200
80000cb4:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000cb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cbc:	70 88       	ld.w	r8,r8[0x20]
80000cbe:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
80000cc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cc6:	e2 18 00 10 	andl	r8,0x10,COH
80000cca:	c0 30       	breq	80000cd0 <timerISR+0x28>
		ROSA_yieldFromISR();
80000ccc:	f0 1f 00 03 	mcall	80000cd8 <timerISR+0x30>
}
80000cd0:	2f ed       	sub	sp,-8
80000cd2:	e3 cd 40 80 	ldm	sp++,r7,lr
80000cd6:	d6 03       	rete
80000cd8:	80 00       	ld.sh	r0,r0[0x0]
80000cda:	05 c8       	ld.ub	r8,r2[0x4]

80000cdc <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000cdc:	eb cd 40 80 	pushm	r7,lr
80000ce0:	1a 97       	mov	r7,sp
80000ce2:	20 7d       	sub	sp,28
80000ce4:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000ce8:	4a 48       	lddpc	r8,80000d78 <timerPeriodSet+0x9c>
80000cea:	ee ca 00 18 	sub	r10,r7,24
80000cee:	10 9b       	mov	r11,r8
80000cf0:	f6 e8 00 00 	ld.d	r8,r11[0]
80000cf4:	f4 e9 00 00 	st.d	r10[0],r8
80000cf8:	f6 e8 00 08 	ld.d	r8,r11[8]
80000cfc:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000d00:	30 48       	mov	r8,4
80000d02:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000d06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d0a:	20 18       	sub	r8,1
80000d0c:	a3 68       	lsl	r8,0x2
80000d0e:	ee 08 00 08 	add	r8,r7,r8
80000d12:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000d16:	e0 68 1b 00 	mov	r8,6912
80000d1a:	ea 18 00 b7 	orh	r8,0xb7
80000d1e:	f0 09 0c 08 	divs	r8,r8,r9
80000d22:	10 99       	mov	r9,r8
80000d24:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000d28:	b1 39       	mul	r9,r8
80000d2a:	e0 68 4d d3 	mov	r8,19923
80000d2e:	ea 18 10 62 	orh	r8,0x1062
80000d32:	f2 08 06 48 	mulu.d	r8,r9,r8
80000d36:	f2 08 16 06 	lsr	r8,r9,0x6
80000d3a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000d3e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d42:	f0 1f 00 0f 	mcall	80000d7c <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000d46:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d4a:	f0 1f 00 0e 	mcall	80000d80 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000d4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d56:	f2 08 02 4a 	mul	r10,r9,r8
80000d5a:	e0 68 9f 81 	mov	r8,40833
80000d5e:	ea 18 16 5e 	orh	r8,0x165e
80000d62:	f4 08 04 48 	muls.d	r8,r10,r8
80000d66:	b5 49       	asr	r9,0x14
80000d68:	f4 08 14 1f 	asr	r8,r10,0x1f
80000d6c:	f2 08 01 08 	sub	r8,r9,r8
80000d70:	10 9c       	mov	r12,r8
80000d72:	2f 9d       	sub	sp,-28
80000d74:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d78:	80 00       	ld.sh	r0,r0[0x0]
80000d7a:	0c 98       	mov	r8,r6
80000d7c:	80 00       	ld.sh	r0,r0[0x0]
80000d7e:	13 44       	ld.w	r4,--r9
80000d80:	80 00       	ld.sh	r0,r0[0x0]
80000d82:	13 2e       	ld.uh	lr,r9++

80000d84 <buttonInit>:
80000d84:	eb cd 40 80 	pushm	r7,lr
80000d88:	1a 97       	mov	r7,sp
80000d8a:	30 1b       	mov	r11,1
80000d8c:	35 8c       	mov	r12,88
80000d8e:	f0 1f 00 07 	mcall	80000da8 <buttonInit+0x24>
80000d92:	30 1b       	mov	r11,1
80000d94:	35 5c       	mov	r12,85
80000d96:	f0 1f 00 05 	mcall	80000da8 <buttonInit+0x24>
80000d9a:	30 1b       	mov	r11,1
80000d9c:	35 2c       	mov	r12,82
80000d9e:	f0 1f 00 03 	mcall	80000da8 <buttonInit+0x24>
80000da2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000da6:	00 00       	add	r0,r0
80000da8:	80 00       	ld.sh	r0,r0[0x0]
80000daa:	0d e4       	ld.ub	r4,r6[0x6]

80000dac <joystickInit>:
80000dac:	eb cd 40 80 	pushm	r7,lr
80000db0:	1a 97       	mov	r7,sp
80000db2:	30 1b       	mov	r11,1
80000db4:	31 bc       	mov	r12,27
80000db6:	f0 1f 00 0b 	mcall	80000de0 <joystickInit+0x34>
80000dba:	30 1b       	mov	r11,1
80000dbc:	31 9c       	mov	r12,25
80000dbe:	f0 1f 00 09 	mcall	80000de0 <joystickInit+0x34>
80000dc2:	30 1b       	mov	r11,1
80000dc4:	31 cc       	mov	r12,28
80000dc6:	f0 1f 00 07 	mcall	80000de0 <joystickInit+0x34>
80000dca:	30 1b       	mov	r11,1
80000dcc:	31 4c       	mov	r12,20
80000dce:	f0 1f 00 05 	mcall	80000de0 <joystickInit+0x34>
80000dd2:	30 1b       	mov	r11,1
80000dd4:	31 ac       	mov	r12,26
80000dd6:	f0 1f 00 03 	mcall	80000de0 <joystickInit+0x34>
80000dda:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dde:	00 00       	add	r0,r0
80000de0:	80 00       	ld.sh	r0,r0[0x0]
80000de2:	0d e4       	ld.ub	r4,r6[0x6]

80000de4 <gpioInit>:
80000de4:	eb cd 40 80 	pushm	r7,lr
80000de8:	1a 97       	mov	r7,sp
80000dea:	20 7d       	sub	sp,28
80000dec:	ef 4c ff ec 	st.w	r7[-20],r12
80000df0:	ef 4b ff e8 	st.w	r7[-24],r11
80000df4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000df8:	a5 58       	asr	r8,0x5
80000dfa:	ef 48 ff f4 	st.w	r7[-12],r8
80000dfe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000e06:	ef 48 ff fc 	st.w	r7[-4],r8
80000e0a:	30 19       	mov	r9,1
80000e0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e10:	f2 08 09 48 	lsl	r8,r9,r8
80000e14:	ef 48 ff f8 	st.w	r7[-8],r8
80000e18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e1c:	a9 68       	lsl	r8,0x8
80000e1e:	e0 28 f0 00 	sub	r8,61440
80000e22:	ef 48 ff f0 	st.w	r7[-16],r8
80000e26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e2e:	91 19       	st.w	r8[0x4],r9
80000e30:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e38:	91 69       	st.w	r8[0x18],r9
80000e3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e42:	91 a9       	st.w	r8[0x28],r9
80000e44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000e48:	ef 48 ff e4 	st.w	r7[-28],r8
80000e4c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000e50:	58 08       	cp.w	r8,0
80000e52:	c0 60       	breq	80000e5e <gpioInit+0x7a>
80000e54:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000e58:	58 18       	cp.w	r8,1
80000e5a:	c0 90       	breq	80000e6c <gpioInit+0x88>
80000e5c:	c0 f8       	rjmp	80000e7a <gpioInit+0x96>
80000e5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e62:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e66:	f1 49 00 44 	st.w	r8[68],r9
80000e6a:	c0 e8       	rjmp	80000e86 <gpioInit+0xa2>
80000e6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e74:	f1 49 00 48 	st.w	r8[72],r9
80000e78:	c0 78       	rjmp	80000e86 <gpioInit+0xa2>
80000e7a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e82:	f1 49 00 48 	st.w	r8[72],r9
80000e86:	2f 9d       	sub	sp,-28
80000e88:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e8c <gpioSet>:
80000e8c:	eb cd 40 80 	pushm	r7,lr
80000e90:	1a 97       	mov	r7,sp
80000e92:	20 5d       	sub	sp,20
80000e94:	ef 4c ff ec 	st.w	r7[-20],r12
80000e98:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e9c:	a5 58       	asr	r8,0x5
80000e9e:	ef 48 ff f4 	st.w	r7[-12],r8
80000ea2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ea6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000eaa:	ef 48 ff fc 	st.w	r7[-4],r8
80000eae:	30 19       	mov	r9,1
80000eb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000eb4:	f2 08 09 48 	lsl	r8,r9,r8
80000eb8:	ef 48 ff f8 	st.w	r7[-8],r8
80000ebc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ec0:	a9 68       	lsl	r8,0x8
80000ec2:	e0 28 f0 00 	sub	r8,61440
80000ec6:	ef 48 ff f0 	st.w	r7[-16],r8
80000eca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ece:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ed2:	f1 49 00 54 	st.w	r8[84],r9
80000ed6:	2f bd       	sub	sp,-20
80000ed8:	e3 cd 80 80 	ldm	sp++,r7,pc

80000edc <gpioToggle>:
80000edc:	eb cd 40 80 	pushm	r7,lr
80000ee0:	1a 97       	mov	r7,sp
80000ee2:	20 5d       	sub	sp,20
80000ee4:	ef 4c ff ec 	st.w	r7[-20],r12
80000ee8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000eec:	a5 58       	asr	r8,0x5
80000eee:	ef 48 ff f4 	st.w	r7[-12],r8
80000ef2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ef6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000efa:	ef 48 ff fc 	st.w	r7[-4],r8
80000efe:	30 19       	mov	r9,1
80000f00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f04:	f2 08 09 48 	lsl	r8,r9,r8
80000f08:	ef 48 ff f8 	st.w	r7[-8],r8
80000f0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f10:	a9 68       	lsl	r8,0x8
80000f12:	e0 28 f0 00 	sub	r8,61440
80000f16:	ef 48 ff f0 	st.w	r7[-16],r8
80000f1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f22:	f1 49 00 5c 	st.w	r8[92],r9
80000f26:	2f bd       	sub	sp,-20
80000f28:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f2c <ledInit>:
80000f2c:	eb cd 40 80 	pushm	r7,lr
80000f30:	1a 97       	mov	r7,sp
80000f32:	20 9d       	sub	sp,36
80000f34:	49 e8       	lddpc	r8,80000fac <ledInit+0x80>
80000f36:	ee cb 00 24 	sub	r11,r7,36
80000f3a:	10 9a       	mov	r10,r8
80000f3c:	f4 e8 00 00 	ld.d	r8,r10[0]
80000f40:	f6 e9 00 00 	st.d	r11[0],r8
80000f44:	f4 e8 00 08 	ld.d	r8,r10[8]
80000f48:	f6 e9 00 08 	st.d	r11[8],r8
80000f4c:	f4 e8 00 10 	ld.d	r8,r10[16]
80000f50:	f6 e9 00 10 	st.d	r11[16],r8
80000f54:	f4 e8 00 18 	ld.d	r8,r10[24]
80000f58:	f6 e9 00 18 	st.d	r11[24],r8
80000f5c:	30 08       	mov	r8,0
80000f5e:	ef 48 ff fc 	st.w	r7[-4],r8
80000f62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f66:	a3 68       	lsl	r8,0x2
80000f68:	ee 08 00 08 	add	r8,r7,r8
80000f6c:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000f70:	10 9c       	mov	r12,r8
80000f72:	f0 1f 00 10 	mcall	80000fb0 <ledInit+0x84>
80000f76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f7a:	a3 68       	lsl	r8,0x2
80000f7c:	ee 08 00 08 	add	r8,r7,r8
80000f80:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000f84:	30 0b       	mov	r11,0
80000f86:	10 9c       	mov	r12,r8
80000f88:	f0 1f 00 0b 	mcall	80000fb4 <ledInit+0x88>
80000f8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f90:	58 78       	cp.w	r8,7
80000f92:	5f 18       	srne	r8
80000f94:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000f98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f9c:	2f f8       	sub	r8,-1
80000f9e:	ef 48 ff fc 	st.w	r7[-4],r8
80000fa2:	58 09       	cp.w	r9,0
80000fa4:	cd f1       	brne	80000f62 <ledInit+0x36>
80000fa6:	2f 7d       	sub	sp,-36
80000fa8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fac:	80 00       	ld.sh	r0,r0[0x0]
80000fae:	20 00       	sub	r0,0
80000fb0:	80 00       	ld.sh	r0,r0[0x0]
80000fb2:	0f b8       	ld.ub	r8,r7[0x3]
80000fb4:	80 00       	ld.sh	r0,r0[0x0]
80000fb6:	0d e4       	ld.ub	r4,r6[0x6]

80000fb8 <ledOff>:
80000fb8:	eb cd 40 80 	pushm	r7,lr
80000fbc:	1a 97       	mov	r7,sp
80000fbe:	20 1d       	sub	sp,4
80000fc0:	ef 4c ff fc 	st.w	r7[-4],r12
80000fc4:	ee fc ff fc 	ld.w	r12,r7[-4]
80000fc8:	f0 1f 00 03 	mcall	80000fd4 <ledOff+0x1c>
80000fcc:	2f fd       	sub	sp,-4
80000fce:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fd2:	00 00       	add	r0,r0
80000fd4:	80 00       	ld.sh	r0,r0[0x0]
80000fd6:	0e 8c       	andn	r12,r7

80000fd8 <ledToggle>:
80000fd8:	eb cd 40 80 	pushm	r7,lr
80000fdc:	1a 97       	mov	r7,sp
80000fde:	20 1d       	sub	sp,4
80000fe0:	ef 4c ff fc 	st.w	r7[-4],r12
80000fe4:	ee fc ff fc 	ld.w	r12,r7[-4]
80000fe8:	f0 1f 00 03 	mcall	80000ff4 <ledToggle+0x1c>
80000fec:	2f fd       	sub	sp,-4
80000fee:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ff2:	00 00       	add	r0,r0
80000ff4:	80 00       	ld.sh	r0,r0[0x0]
80000ff6:	0e dc       	st.w	--r7,r12

80000ff8 <potInit>:
80000ff8:	d3 01       	pushm	r11-r12
80000ffa:	e0 6c 10 00 	mov	r12,4096
80000ffe:	ea 1c ff ff 	orh	r12,0xffff
80001002:	31 6b       	mov	r11,22
80001004:	99 2b       	st.w	r12[0x8],r11
80001006:	99 6b       	st.w	r12[0x18],r11
80001008:	99 6b       	st.w	r12[0x18],r11
8000100a:	e0 6c 3c 00 	mov	r12,15360
8000100e:	ea 1c ff ff 	orh	r12,0xffff
80001012:	30 1b       	mov	r11,1
80001014:	99 0b       	st.w	r12[0x0],r11
80001016:	e0 6b 0f 1f 	mov	r11,3871
8000101a:	b1 6b       	lsl	r11,0x10
8000101c:	99 1b       	st.w	r12[0x4],r11
8000101e:	30 2b       	mov	r11,2
80001020:	99 4b       	st.w	r12[0x10],r11
80001022:	d3 02       	popm	r11-r12
80001024:	1c 9f       	mov	pc,lr

80001026 <potGetValue>:
80001026:	d1 81       	pushm	r10-r11
80001028:	e0 6c 3c 00 	mov	r12,15360
8000102c:	ea 1c ff ff 	orh	r12,0xffff
80001030:	30 2b       	mov	r11,2
80001032:	99 0b       	st.w	r12[0x0],r11

80001034 <a1>:
80001034:	78 7a       	ld.w	r10,r12[0x1c]
80001036:	16 7a       	tst	r10,r11
80001038:	cf e0       	breq	80001034 <a1>
8000103a:	78 dc       	ld.w	r12,r12[0x34]
8000103c:	d1 82       	popm	r10-r11
8000103e:	1c 9f       	mov	pc,lr

80001040 <usartReset>:
80001040:	eb cd 40 80 	pushm	r7,lr
80001044:	1a 97       	mov	r7,sp
80001046:	20 3d       	sub	sp,12
80001048:	ef 4c ff f8 	st.w	r7[-8],r12
8000104c:	f0 1f 00 16 	mcall	800010a4 <usartReset+0x64>
80001050:	18 98       	mov	r8,r12
80001052:	ef 48 ff fc 	st.w	r7[-4],r8
80001056:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000105a:	58 08       	cp.w	r8,0
8000105c:	c0 30       	breq	80001062 <usartReset+0x22>
8000105e:	f0 1f 00 13 	mcall	800010a8 <usartReset+0x68>
80001062:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001066:	3f f8       	mov	r8,-1
80001068:	93 38       	st.w	r9[0xc],r8
8000106a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000106e:	70 58       	ld.w	r8,r8[0x14]
80001070:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001074:	58 08       	cp.w	r8,0
80001076:	c0 30       	breq	8000107c <usartReset+0x3c>
80001078:	f0 1f 00 0d 	mcall	800010ac <usartReset+0x6c>
8000107c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001080:	30 08       	mov	r8,0
80001082:	93 18       	st.w	r9[0x4],r8
80001084:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001088:	30 08       	mov	r8,0
8000108a:	93 98       	st.w	r9[0x24],r8
8000108c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001090:	30 08       	mov	r8,0
80001092:	93 a8       	st.w	r9[0x28],r8
80001094:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001098:	ea 68 61 0c 	mov	r8,680204
8000109c:	93 08       	st.w	r9[0x0],r8
8000109e:	2f dd       	sub	sp,-12
800010a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800010a4:	80 00       	ld.sh	r0,r0[0x0]
800010a6:	1d 6e       	ld.uh	lr,--lr
800010a8:	80 00       	ld.sh	r0,r0[0x0]
800010aa:	1d 66       	ld.uh	r6,--lr
800010ac:	80 00       	ld.sh	r0,r0[0x0]
800010ae:	1d 6a       	ld.uh	r10,--lr

800010b0 <usartSetBaudrate>:
800010b0:	eb cd 40 80 	pushm	r7,lr
800010b4:	1a 97       	mov	r7,sp
800010b6:	20 bd       	sub	sp,44
800010b8:	ef 4c ff ec 	st.w	r7[-20],r12
800010bc:	ef 4b ff e8 	st.w	r7[-24],r11
800010c0:	ef 4a ff e4 	st.w	r7[-28],r10
800010c4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800010c8:	f0 09 15 04 	lsl	r9,r8,0x4
800010cc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010d0:	10 39       	cp.w	r9,r8
800010d2:	e0 8b 00 06 	brhi	800010de <usartSetBaudrate+0x2e>
800010d6:	31 09       	mov	r9,16
800010d8:	ef 49 ff d4 	st.w	r7[-44],r9
800010dc:	c0 48       	rjmp	800010e4 <usartSetBaudrate+0x34>
800010de:	30 88       	mov	r8,8
800010e0:	ef 48 ff d4 	st.w	r7[-44],r8
800010e4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800010e8:	ef 49 ff f0 	st.w	r7[-16],r9
800010ec:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010f0:	f0 0a 15 03 	lsl	r10,r8,0x3
800010f4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800010f8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800010fc:	f2 08 02 48 	mul	r8,r9,r8
80001100:	a1 98       	lsr	r8,0x1
80001102:	10 0a       	add	r10,r8
80001104:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001108:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000110c:	f2 08 02 48 	mul	r8,r9,r8
80001110:	f4 08 0d 08 	divu	r8,r10,r8
80001114:	ef 48 ff f4 	st.w	r7[-12],r8
80001118:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000111c:	a3 98       	lsr	r8,0x3
8000111e:	ef 48 ff f8 	st.w	r7[-8],r8
80001122:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001126:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000112a:	ef 48 ff fc 	st.w	r7[-4],r8
8000112e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001132:	58 08       	cp.w	r8,0
80001134:	c0 70       	breq	80001142 <usartSetBaudrate+0x92>
80001136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000113a:	e0 48 ff ff 	cp.w	r8,65535
8000113e:	e0 88 00 06 	brls	8000114a <usartSetBaudrate+0x9a>
80001142:	30 18       	mov	r8,1
80001144:	ef 48 ff d8 	st.w	r7[-40],r8
80001148:	c2 c8       	rjmp	800011a0 <usartSetBaudrate+0xf0>
8000114a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000114e:	70 18       	ld.w	r8,r8[0x4]
80001150:	10 99       	mov	r9,r8
80001152:	e4 19 ff f7 	andh	r9,0xfff7
80001156:	e0 19 fe cf 	andl	r9,0xfecf
8000115a:	ef 49 ff dc 	st.w	r7[-36],r9
8000115e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001162:	59 08       	cp.w	r8,16
80001164:	c0 60       	breq	80001170 <usartSetBaudrate+0xc0>
80001166:	e8 68 00 00 	mov	r8,524288
8000116a:	ef 48 ff e0 	st.w	r7[-32],r8
8000116e:	c0 48       	rjmp	80001176 <usartSetBaudrate+0xc6>
80001170:	30 09       	mov	r9,0
80001172:	ef 49 ff e0 	st.w	r7[-32],r9
80001176:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000117a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000117e:	10 49       	or	r9,r8
80001180:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001184:	91 19       	st.w	r8[0x4],r9
80001186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000118a:	f0 09 15 10 	lsl	r9,r8,0x10
8000118e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001192:	10 49       	or	r9,r8
80001194:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001198:	91 89       	st.w	r8[0x20],r9
8000119a:	30 09       	mov	r9,0
8000119c:	ef 49 ff d8 	st.w	r7[-40],r9
800011a0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800011a4:	10 9c       	mov	r12,r8
800011a6:	2f 5d       	sub	sp,-44
800011a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800011ac <usartInit>:
800011ac:	eb cd 40 80 	pushm	r7,lr
800011b0:	1a 97       	mov	r7,sp
800011b2:	20 4d       	sub	sp,16
800011b4:	ef 4c ff f8 	st.w	r7[-8],r12
800011b8:	ef 4b ff f4 	st.w	r7[-12],r11
800011bc:	ef 4a ff f0 	st.w	r7[-16],r10
800011c0:	fe 78 10 00 	mov	r8,-61440
800011c4:	ef 48 ff fc 	st.w	r7[-4],r8
800011c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800011cc:	30 18       	mov	r8,1
800011ce:	93 28       	st.w	r9[0x8],r8
800011d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800011d4:	30 28       	mov	r8,2
800011d6:	93 28       	st.w	r9[0x8],r8
800011d8:	ee fc ff f8 	ld.w	r12,r7[-8]
800011dc:	f0 1f 00 3b 	mcall	800012c8 <usartInit+0x11c>
800011e0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800011e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011e8:	70 08       	ld.w	r8,r8[0x0]
800011ea:	12 9a       	mov	r10,r9
800011ec:	10 9b       	mov	r11,r8
800011ee:	ee fc ff f8 	ld.w	r12,r7[-8]
800011f2:	f0 1f 00 37 	mcall	800012cc <usartInit+0x120>
800011f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011fa:	11 c9       	ld.ub	r9,r8[0x4]
800011fc:	30 98       	mov	r8,9
800011fe:	f0 09 18 00 	cp.b	r9,r8
80001202:	c0 a1       	brne	80001216 <usartInit+0x6a>
80001204:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001208:	70 18       	ld.w	r8,r8[0x4]
8000120a:	10 99       	mov	r9,r8
8000120c:	b1 b9       	sbr	r9,0x11
8000120e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001212:	91 19       	st.w	r8[0x4],r9
80001214:	c0 d8       	rjmp	8000122e <usartInit+0x82>
80001216:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000121a:	70 19       	ld.w	r9,r8[0x4]
8000121c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001220:	11 c8       	ld.ub	r8,r8[0x4]
80001222:	20 58       	sub	r8,5
80001224:	a7 68       	lsl	r8,0x6
80001226:	10 49       	or	r9,r8
80001228:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000122c:	91 19       	st.w	r8[0x4],r9
8000122e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001232:	70 1a       	ld.w	r10,r8[0x4]
80001234:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001238:	11 d8       	ld.ub	r8,r8[0x5]
8000123a:	f0 09 15 09 	lsl	r9,r8,0x9
8000123e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001242:	f1 38 00 08 	ld.ub	r8,r8[8]
80001246:	af 68       	lsl	r8,0xe
80001248:	f3 e8 10 08 	or	r8,r9,r8
8000124c:	f5 e8 10 09 	or	r9,r10,r8
80001250:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001254:	91 19       	st.w	r8[0x4],r9
80001256:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000125a:	90 39       	ld.sh	r9,r8[0x6]
8000125c:	30 28       	mov	r8,2
8000125e:	f0 09 19 00 	cp.h	r9,r8
80001262:	e0 88 00 14 	brls	8000128a <usartInit+0xde>
80001266:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000126a:	70 18       	ld.w	r8,r8[0x4]
8000126c:	10 99       	mov	r9,r8
8000126e:	ad b9       	sbr	r9,0xd
80001270:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001274:	91 19       	st.w	r8[0x4],r9
80001276:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000127a:	90 38       	ld.sh	r8,r8[0x6]
8000127c:	5c 78       	castu.h	r8
8000127e:	20 28       	sub	r8,2
80001280:	10 99       	mov	r9,r8
80001282:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001286:	91 a9       	st.w	r8[0x28],r9
80001288:	c0 d8       	rjmp	800012a2 <usartInit+0xf6>
8000128a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000128e:	70 19       	ld.w	r9,r8[0x4]
80001290:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001294:	90 38       	ld.sh	r8,r8[0x6]
80001296:	5c 78       	castu.h	r8
80001298:	ad 68       	lsl	r8,0xc
8000129a:	10 49       	or	r9,r8
8000129c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012a0:	91 19       	st.w	r8[0x4],r9
800012a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012a6:	70 18       	ld.w	r8,r8[0x4]
800012a8:	10 99       	mov	r9,r8
800012aa:	e0 19 ff f0 	andl	r9,0xfff0
800012ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012b2:	91 19       	st.w	r8[0x4],r9
800012b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012b8:	35 08       	mov	r8,80
800012ba:	93 08       	st.w	r9[0x0],r8
800012bc:	30 08       	mov	r8,0
800012be:	10 9c       	mov	r12,r8
800012c0:	2f cd       	sub	sp,-16
800012c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800012c6:	00 00       	add	r0,r0
800012c8:	80 00       	ld.sh	r0,r0[0x0]
800012ca:	10 40       	or	r0,r8
800012cc:	80 00       	ld.sh	r0,r0[0x0]
800012ce:	10 b0       	st.h	r8++,r0

800012d0 <timerInit>:
800012d0:	d5 01       	pushm	r11,lr
800012d2:	d2 01       	pushm	r12
800012d4:	f0 1f 00 28 	mcall	80001374 <timerClearInterrupt+0x10>
800012d8:	f0 1f 00 28 	mcall	80001378 <timerClearInterrupt+0x14>
800012dc:	e0 6c 38 00 	mov	r12,14336
800012e0:	ea 1c ff ff 	orh	r12,0xffff
800012e4:	e0 6b c0 00 	mov	r11,49152
800012e8:	ea 1b 00 00 	orh	r11,0x0
800012ec:	99 1b       	st.w	r12[0x4],r11
800012ee:	30 1b       	mov	r11,1
800012f0:	a5 6b       	lsl	r11,0x4
800012f2:	99 9b       	st.w	r12[0x24],r11
800012f4:	d2 02       	popm	r12
800012f6:	f0 1f 00 22 	mcall	8000137c <timerClearInterrupt+0x18>
800012fa:	d5 02       	popm	r11,lr
800012fc:	1c 9f       	mov	pc,lr

800012fe <timerReset>:
800012fe:	d3 01       	pushm	r11-r12
80001300:	e0 6c 38 00 	mov	r12,14336
80001304:	ea 1c ff ff 	orh	r12,0xffff
80001308:	30 5b       	mov	r11,5
8000130a:	99 0b       	st.w	r12[0x0],r11
8000130c:	e0 6b 00 08 	mov	r11,8
80001310:	ea 1b 00 00 	orh	r11,0x0
80001314:	76 0b       	ld.w	r11,r11[0x0]
80001316:	99 7b       	st.w	r12[0x1c],r11
80001318:	d3 02       	popm	r11-r12
8000131a:	1c 9f       	mov	pc,lr

8000131c <timerStop>:
8000131c:	d3 01       	pushm	r11-r12
8000131e:	e0 6c 38 00 	mov	r12,14336
80001322:	ea 1c ff ff 	orh	r12,0xffff
80001326:	30 2b       	mov	r11,2
80001328:	99 0b       	st.w	r12[0x0],r11
8000132a:	d3 02       	popm	r11-r12
8000132c:	1c 9f       	mov	pc,lr

8000132e <timerRCSet>:
8000132e:	d3 01       	pushm	r11-r12
80001330:	49 4b       	lddpc	r11,80001380 <timerClearInterrupt+0x1c>
80001332:	97 0c       	st.w	r11[0x0],r12
80001334:	e0 6c 38 00 	mov	r12,14336
80001338:	ea 1c ff ff 	orh	r12,0xffff
8000133c:	76 0b       	ld.w	r11,r11[0x0]
8000133e:	99 7b       	st.w	r12[0x1c],r11
80001340:	d3 02       	popm	r11-r12
80001342:	1c 9f       	mov	pc,lr

80001344 <timerPrescaleSet>:
80001344:	d3 81       	pushm	r10-r12
80001346:	49 0b       	lddpc	r11,80001384 <timerClearInterrupt+0x20>
80001348:	97 0c       	st.w	r11[0x0],r12
8000134a:	e0 6c 38 00 	mov	r12,14336
8000134e:	ea 1c ff ff 	orh	r12,0xffff
80001352:	78 1a       	ld.w	r10,r12[0x4]
80001354:	3f 8b       	mov	r11,-8
80001356:	16 6a       	and	r10,r11
80001358:	48 bb       	lddpc	r11,80001384 <timerClearInterrupt+0x20>
8000135a:	76 0b       	ld.w	r11,r11[0x0]
8000135c:	14 4b       	or	r11,r10
8000135e:	99 1b       	st.w	r12[0x4],r11
80001360:	d3 82       	popm	r10-r12
80001362:	1c 9f       	mov	pc,lr

80001364 <timerClearInterrupt>:
80001364:	d2 01       	pushm	r12
80001366:	e0 6c 38 00 	mov	r12,14336
8000136a:	ea 1c ff ff 	orh	r12,0xffff
8000136e:	78 8c       	ld.w	r12,r12[0x20]
80001370:	d2 02       	popm	r12
80001372:	1c 9f       	mov	pc,lr
80001374:	80 00       	ld.sh	r0,r0[0x0]
80001376:	1d 66       	ld.uh	r6,--lr
80001378:	80 00       	ld.sh	r0,r0[0x0]
8000137a:	13 64       	ld.uh	r4,--r9
8000137c:	80 00       	ld.sh	r0,r0[0x0]
8000137e:	0c dc       	st.w	--r6,r12
80001380:	00 00       	add	r0,r0
80001382:	00 08       	add	r8,r0
80001384:	00 00       	add	r0,r0
80001386:	00 0c       	add	r12,r0

80001388 <_stext>:
80001388:	49 7d       	lddpc	sp,800013e4 <udata_end+0x4>
8000138a:	49 80       	lddpc	r0,800013e8 <udata_end+0x8>
8000138c:	1a d0       	st.w	--sp,r0
8000138e:	e5 cd 20 00 	ldmts	sp,sp
80001392:	1b 00       	ld.w	r0,sp++
80001394:	49 60       	lddpc	r0,800013ec <udata_end+0xc>
80001396:	e3 b0 00 01 	mtsr	0x4,r0
8000139a:	d5 53       	csrf	0x15
8000139c:	e0 6c 0c 00 	mov	r12,3072
800013a0:	ea 1c ff ff 	orh	r12,0xffff
800013a4:	e0 6b 01 07 	mov	r11,263
800013a8:	99 ab       	st.w	r12[0x28],r11
800013aa:	30 4b       	mov	r11,4
800013ac:	99 0b       	st.w	r12[0x0],r11
800013ae:	e0 6a 00 80 	mov	r10,128

800013b2 <xw8>:
800013b2:	79 5b       	ld.w	r11,r12[0x54]
800013b4:	14 7b       	tst	r11,r10
800013b6:	cf e0       	breq	800013b2 <xw8>
800013b8:	30 5b       	mov	r11,5
800013ba:	99 0b       	st.w	r12[0x0],r11

800013bc <idata_>:
800013bc:	48 d0       	lddpc	r0,800013f0 <udata_end+0x10>
800013be:	48 e1       	lddpc	r1,800013f4 <udata_end+0x14>
800013c0:	02 30       	cp.w	r0,r1
800013c2:	c0 62       	brcc	800013ce <idata_end>
800013c4:	48 d2       	lddpc	r2,800013f8 <udata_end+0x18>

800013c6 <idata_loop>:
800013c6:	05 04       	ld.w	r4,r2++
800013c8:	00 a4       	st.w	r0++,r4
800013ca:	02 30       	cp.w	r0,r1
800013cc:	cf d3       	brcs	800013c6 <idata_loop>

800013ce <idata_end>:
800013ce:	48 c0       	lddpc	r0,800013fc <udata_end+0x1c>
800013d0:	48 c1       	lddpc	r1,80001400 <udata_end+0x20>
800013d2:	02 30       	cp.w	r0,r1
800013d4:	c0 62       	brcc	800013e0 <udata_end>
800013d6:	30 02       	mov	r2,0
800013d8:	30 03       	mov	r3,0

800013da <udata_loop>:
800013da:	00 a2       	st.w	r0++,r2
800013dc:	02 30       	cp.w	r0,r1
800013de:	cf e3       	brcs	800013da <udata_loop>

800013e0 <udata_end>:
800013e0:	48 9f       	lddpc	pc,80001404 <udata_end+0x24>
800013e2:	00 00       	add	r0,r0
800013e4:	00 01       	add	r1,r0
800013e6:	00 00       	add	r0,r0
800013e8:	00 00       	add	r0,r0
800013ea:	f0 00       	*unknown*
800013ec:	80 00       	ld.sh	r0,r0[0x0]
800013ee:	1c 00       	add	r0,lr
800013f0:	00 00       	add	r0,r0
800013f2:	00 08       	add	r8,r0
800013f4:	00 00       	add	r0,r0
800013f6:	05 18       	ld.sh	r8,r2++
800013f8:	80 00       	ld.sh	r0,r0[0x0]
800013fa:	20 88       	sub	r8,8
800013fc:	00 00       	add	r0,r0
800013fe:	05 18       	ld.sh	r8,r2++
80001400:	00 00       	add	r0,r0
80001402:	06 18       	sub	r8,r3
80001404:	80 00       	ld.sh	r0,r0[0x0]
80001406:	02 d4       	st.w	--r1,r4

80001408 <calloc>:
80001408:	d4 01       	pushm	lr
8000140a:	48 48       	lddpc	r8,80001418 <calloc+0x10>
8000140c:	16 9a       	mov	r10,r11
8000140e:	18 9b       	mov	r11,r12
80001410:	70 0c       	ld.w	r12,r8[0x0]
80001412:	f0 1f 00 03 	mcall	8000141c <calloc+0x14>
80001416:	d8 02       	popm	pc
80001418:	00 00       	add	r0,r0
8000141a:	01 00       	ld.w	r0,r0++
8000141c:	80 00       	ld.sh	r0,r0[0x0]
8000141e:	14 20       	rsub	r0,r10

80001420 <_calloc_r>:
80001420:	d4 21       	pushm	r4-r7,lr
80001422:	f4 0b 02 4b 	mul	r11,r10,r11
80001426:	f0 1f 00 15 	mcall	80001478 <_calloc_r+0x58>
8000142a:	18 97       	mov	r7,r12
8000142c:	c2 30       	breq	80001472 <_calloc_r+0x52>
8000142e:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001432:	e0 1a ff fc 	andl	r10,0xfffc
80001436:	20 4a       	sub	r10,4
80001438:	e0 4a 00 24 	cp.w	r10,36
8000143c:	e0 8b 00 18 	brhi	8000146c <_calloc_r+0x4c>
80001440:	18 98       	mov	r8,r12
80001442:	59 3a       	cp.w	r10,19
80001444:	e0 88 00 0f 	brls	80001462 <_calloc_r+0x42>
80001448:	30 09       	mov	r9,0
8000144a:	10 a9       	st.w	r8++,r9
8000144c:	10 a9       	st.w	r8++,r9
8000144e:	59 ba       	cp.w	r10,27
80001450:	e0 88 00 09 	brls	80001462 <_calloc_r+0x42>
80001454:	10 a9       	st.w	r8++,r9
80001456:	10 a9       	st.w	r8++,r9
80001458:	e0 4a 00 24 	cp.w	r10,36
8000145c:	c0 31       	brne	80001462 <_calloc_r+0x42>
8000145e:	10 a9       	st.w	r8++,r9
80001460:	10 a9       	st.w	r8++,r9
80001462:	30 09       	mov	r9,0
80001464:	10 a9       	st.w	r8++,r9
80001466:	91 19       	st.w	r8[0x4],r9
80001468:	91 09       	st.w	r8[0x0],r9
8000146a:	c0 48       	rjmp	80001472 <_calloc_r+0x52>
8000146c:	30 0b       	mov	r11,0
8000146e:	f0 1f 00 04 	mcall	8000147c <_calloc_r+0x5c>
80001472:	0e 9c       	mov	r12,r7
80001474:	d8 22       	popm	r4-r7,pc
80001476:	00 00       	add	r0,r0
80001478:	80 00       	ld.sh	r0,r0[0x0]
8000147a:	14 80       	andn	r0,r10
8000147c:	80 00       	ld.sh	r0,r0[0x0]
8000147e:	18 d0       	st.w	--r12,r0

80001480 <_malloc_r>:
80001480:	d4 31       	pushm	r0-r7,lr
80001482:	f6 c8 ff f5 	sub	r8,r11,-11
80001486:	18 95       	mov	r5,r12
80001488:	10 97       	mov	r7,r8
8000148a:	e0 17 ff f8 	andl	r7,0xfff8
8000148e:	59 68       	cp.w	r8,22
80001490:	f9 b7 08 10 	movls	r7,16
80001494:	16 37       	cp.w	r7,r11
80001496:	5f 38       	srlo	r8
80001498:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000149c:	c0 50       	breq	800014a6 <_malloc_r+0x26>
8000149e:	30 c8       	mov	r8,12
800014a0:	99 38       	st.w	r12[0xc],r8
800014a2:	e0 8f 01 f3 	bral	80001888 <_malloc_r+0x408>
800014a6:	f0 1f 00 50 	mcall	800015e4 <_malloc_r+0x164>
800014aa:	e0 47 01 f7 	cp.w	r7,503
800014ae:	e0 8b 00 1c 	brhi	800014e6 <_malloc_r+0x66>
800014b2:	ee 03 16 03 	lsr	r3,r7,0x3
800014b6:	4c d8       	lddpc	r8,800015e8 <_malloc_r+0x168>
800014b8:	f0 03 00 38 	add	r8,r8,r3<<0x3
800014bc:	70 36       	ld.w	r6,r8[0xc]
800014be:	10 36       	cp.w	r6,r8
800014c0:	c0 61       	brne	800014cc <_malloc_r+0x4c>
800014c2:	ec c8 ff f8 	sub	r8,r6,-8
800014c6:	70 36       	ld.w	r6,r8[0xc]
800014c8:	10 36       	cp.w	r6,r8
800014ca:	c0 c0       	breq	800014e2 <_malloc_r+0x62>
800014cc:	6c 18       	ld.w	r8,r6[0x4]
800014ce:	e0 18 ff fc 	andl	r8,0xfffc
800014d2:	6c 3a       	ld.w	r10,r6[0xc]
800014d4:	ec 08 00 09 	add	r9,r6,r8
800014d8:	0a 9c       	mov	r12,r5
800014da:	6c 28       	ld.w	r8,r6[0x8]
800014dc:	95 28       	st.w	r10[0x8],r8
800014de:	91 3a       	st.w	r8[0xc],r10
800014e0:	c4 68       	rjmp	8000156c <_malloc_r+0xec>
800014e2:	2f e3       	sub	r3,-2
800014e4:	c4 c8       	rjmp	8000157c <_malloc_r+0xfc>
800014e6:	ee 03 16 09 	lsr	r3,r7,0x9
800014ea:	c0 41       	brne	800014f2 <_malloc_r+0x72>
800014ec:	ee 03 16 03 	lsr	r3,r7,0x3
800014f0:	c2 68       	rjmp	8000153c <_malloc_r+0xbc>
800014f2:	58 43       	cp.w	r3,4
800014f4:	e0 8b 00 06 	brhi	80001500 <_malloc_r+0x80>
800014f8:	ee 03 16 06 	lsr	r3,r7,0x6
800014fc:	2c 83       	sub	r3,-56
800014fe:	c1 f8       	rjmp	8000153c <_malloc_r+0xbc>
80001500:	59 43       	cp.w	r3,20
80001502:	e0 8b 00 04 	brhi	8000150a <_malloc_r+0x8a>
80001506:	2a 53       	sub	r3,-91
80001508:	c1 a8       	rjmp	8000153c <_malloc_r+0xbc>
8000150a:	e0 43 00 54 	cp.w	r3,84
8000150e:	e0 8b 00 06 	brhi	8000151a <_malloc_r+0x9a>
80001512:	ee 03 16 0c 	lsr	r3,r7,0xc
80001516:	29 23       	sub	r3,-110
80001518:	c1 28       	rjmp	8000153c <_malloc_r+0xbc>
8000151a:	e0 43 01 54 	cp.w	r3,340
8000151e:	e0 8b 00 06 	brhi	8000152a <_malloc_r+0xaa>
80001522:	ee 03 16 0f 	lsr	r3,r7,0xf
80001526:	28 93       	sub	r3,-119
80001528:	c0 a8       	rjmp	8000153c <_malloc_r+0xbc>
8000152a:	e0 43 05 54 	cp.w	r3,1364
8000152e:	e0 88 00 04 	brls	80001536 <_malloc_r+0xb6>
80001532:	37 e3       	mov	r3,126
80001534:	c0 48       	rjmp	8000153c <_malloc_r+0xbc>
80001536:	ee 03 16 12 	lsr	r3,r7,0x12
8000153a:	28 43       	sub	r3,-124
8000153c:	4a ba       	lddpc	r10,800015e8 <_malloc_r+0x168>
8000153e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001542:	74 36       	ld.w	r6,r10[0xc]
80001544:	c1 98       	rjmp	80001576 <_malloc_r+0xf6>
80001546:	6c 19       	ld.w	r9,r6[0x4]
80001548:	e0 19 ff fc 	andl	r9,0xfffc
8000154c:	f2 07 01 0b 	sub	r11,r9,r7
80001550:	58 fb       	cp.w	r11,15
80001552:	e0 8a 00 04 	brle	8000155a <_malloc_r+0xda>
80001556:	20 13       	sub	r3,1
80001558:	c1 18       	rjmp	8000157a <_malloc_r+0xfa>
8000155a:	6c 38       	ld.w	r8,r6[0xc]
8000155c:	58 0b       	cp.w	r11,0
8000155e:	c0 b5       	brlt	80001574 <_malloc_r+0xf4>
80001560:	6c 2a       	ld.w	r10,r6[0x8]
80001562:	ec 09 00 09 	add	r9,r6,r9
80001566:	0a 9c       	mov	r12,r5
80001568:	91 2a       	st.w	r8[0x8],r10
8000156a:	95 38       	st.w	r10[0xc],r8
8000156c:	72 18       	ld.w	r8,r9[0x4]
8000156e:	a1 a8       	sbr	r8,0x0
80001570:	93 18       	st.w	r9[0x4],r8
80001572:	cb c8       	rjmp	800016ea <_malloc_r+0x26a>
80001574:	10 96       	mov	r6,r8
80001576:	14 36       	cp.w	r6,r10
80001578:	ce 71       	brne	80001546 <_malloc_r+0xc6>
8000157a:	2f f3       	sub	r3,-1
8000157c:	49 ba       	lddpc	r10,800015e8 <_malloc_r+0x168>
8000157e:	f4 cc ff f8 	sub	r12,r10,-8
80001582:	78 26       	ld.w	r6,r12[0x8]
80001584:	18 36       	cp.w	r6,r12
80001586:	c6 e0       	breq	80001662 <_malloc_r+0x1e2>
80001588:	6c 19       	ld.w	r9,r6[0x4]
8000158a:	e0 19 ff fc 	andl	r9,0xfffc
8000158e:	f2 07 01 08 	sub	r8,r9,r7
80001592:	58 f8       	cp.w	r8,15
80001594:	e0 89 00 90 	brgt	800016b4 <_malloc_r+0x234>
80001598:	99 3c       	st.w	r12[0xc],r12
8000159a:	99 2c       	st.w	r12[0x8],r12
8000159c:	58 08       	cp.w	r8,0
8000159e:	c0 55       	brlt	800015a8 <_malloc_r+0x128>
800015a0:	ec 09 00 09 	add	r9,r6,r9
800015a4:	0a 9c       	mov	r12,r5
800015a6:	ce 3b       	rjmp	8000156c <_malloc_r+0xec>
800015a8:	e0 49 01 ff 	cp.w	r9,511
800015ac:	e0 8b 00 13 	brhi	800015d2 <_malloc_r+0x152>
800015b0:	a3 99       	lsr	r9,0x3
800015b2:	f4 09 00 38 	add	r8,r10,r9<<0x3
800015b6:	70 2b       	ld.w	r11,r8[0x8]
800015b8:	8d 38       	st.w	r6[0xc],r8
800015ba:	8d 2b       	st.w	r6[0x8],r11
800015bc:	97 36       	st.w	r11[0xc],r6
800015be:	91 26       	st.w	r8[0x8],r6
800015c0:	a3 49       	asr	r9,0x2
800015c2:	74 18       	ld.w	r8,r10[0x4]
800015c4:	30 1b       	mov	r11,1
800015c6:	f6 09 09 49 	lsl	r9,r11,r9
800015ca:	f1 e9 10 09 	or	r9,r8,r9
800015ce:	95 19       	st.w	r10[0x4],r9
800015d0:	c4 98       	rjmp	80001662 <_malloc_r+0x1e2>
800015d2:	f2 0a 16 09 	lsr	r10,r9,0x9
800015d6:	58 4a       	cp.w	r10,4
800015d8:	e0 8b 00 0a 	brhi	800015ec <_malloc_r+0x16c>
800015dc:	f2 0a 16 06 	lsr	r10,r9,0x6
800015e0:	2c 8a       	sub	r10,-56
800015e2:	c2 38       	rjmp	80001628 <_malloc_r+0x1a8>
800015e4:	80 00       	ld.sh	r0,r0[0x0]
800015e6:	18 de       	st.w	--r12,lr
800015e8:	00 00       	add	r0,r0
800015ea:	01 04       	ld.w	r4,r0++
800015ec:	59 4a       	cp.w	r10,20
800015ee:	e0 8b 00 04 	brhi	800015f6 <_malloc_r+0x176>
800015f2:	2a 5a       	sub	r10,-91
800015f4:	c1 a8       	rjmp	80001628 <_malloc_r+0x1a8>
800015f6:	e0 4a 00 54 	cp.w	r10,84
800015fa:	e0 8b 00 06 	brhi	80001606 <_malloc_r+0x186>
800015fe:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001602:	29 2a       	sub	r10,-110
80001604:	c1 28       	rjmp	80001628 <_malloc_r+0x1a8>
80001606:	e0 4a 01 54 	cp.w	r10,340
8000160a:	e0 8b 00 06 	brhi	80001616 <_malloc_r+0x196>
8000160e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001612:	28 9a       	sub	r10,-119
80001614:	c0 a8       	rjmp	80001628 <_malloc_r+0x1a8>
80001616:	e0 4a 05 54 	cp.w	r10,1364
8000161a:	e0 88 00 04 	brls	80001622 <_malloc_r+0x1a2>
8000161e:	37 ea       	mov	r10,126
80001620:	c0 48       	rjmp	80001628 <_malloc_r+0x1a8>
80001622:	f2 0a 16 12 	lsr	r10,r9,0x12
80001626:	28 4a       	sub	r10,-124
80001628:	4c 8b       	lddpc	r11,80001748 <_malloc_r+0x2c8>
8000162a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000162e:	68 28       	ld.w	r8,r4[0x8]
80001630:	08 38       	cp.w	r8,r4
80001632:	c0 e1       	brne	8000164e <_malloc_r+0x1ce>
80001634:	76 19       	ld.w	r9,r11[0x4]
80001636:	a3 4a       	asr	r10,0x2
80001638:	30 1e       	mov	lr,1
8000163a:	fc 0a 09 4a 	lsl	r10,lr,r10
8000163e:	f3 ea 10 0a 	or	r10,r9,r10
80001642:	10 99       	mov	r9,r8
80001644:	97 1a       	st.w	r11[0x4],r10
80001646:	c0 a8       	rjmp	8000165a <_malloc_r+0x1da>
80001648:	70 28       	ld.w	r8,r8[0x8]
8000164a:	08 38       	cp.w	r8,r4
8000164c:	c0 60       	breq	80001658 <_malloc_r+0x1d8>
8000164e:	70 1a       	ld.w	r10,r8[0x4]
80001650:	e0 1a ff fc 	andl	r10,0xfffc
80001654:	14 39       	cp.w	r9,r10
80001656:	cf 93       	brcs	80001648 <_malloc_r+0x1c8>
80001658:	70 39       	ld.w	r9,r8[0xc]
8000165a:	8d 39       	st.w	r6[0xc],r9
8000165c:	8d 28       	st.w	r6[0x8],r8
8000165e:	91 36       	st.w	r8[0xc],r6
80001660:	93 26       	st.w	r9[0x8],r6
80001662:	e6 08 14 02 	asr	r8,r3,0x2
80001666:	30 1b       	mov	r11,1
80001668:	4b 84       	lddpc	r4,80001748 <_malloc_r+0x2c8>
8000166a:	f6 08 09 4b 	lsl	r11,r11,r8
8000166e:	68 18       	ld.w	r8,r4[0x4]
80001670:	10 3b       	cp.w	r11,r8
80001672:	e0 8b 00 6f 	brhi	80001750 <_malloc_r+0x2d0>
80001676:	f7 e8 00 09 	and	r9,r11,r8
8000167a:	c0 b1       	brne	80001690 <_malloc_r+0x210>
8000167c:	e0 13 ff fc 	andl	r3,0xfffc
80001680:	a1 7b       	lsl	r11,0x1
80001682:	2f c3       	sub	r3,-4
80001684:	c0 38       	rjmp	8000168a <_malloc_r+0x20a>
80001686:	2f c3       	sub	r3,-4
80001688:	a1 7b       	lsl	r11,0x1
8000168a:	f7 e8 00 09 	and	r9,r11,r8
8000168e:	cf c0       	breq	80001686 <_malloc_r+0x206>
80001690:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001694:	06 92       	mov	r2,r3
80001696:	1c 91       	mov	r1,lr
80001698:	62 36       	ld.w	r6,r1[0xc]
8000169a:	c2 e8       	rjmp	800016f6 <_malloc_r+0x276>
8000169c:	6c 1a       	ld.w	r10,r6[0x4]
8000169e:	e0 1a ff fc 	andl	r10,0xfffc
800016a2:	f4 07 01 08 	sub	r8,r10,r7
800016a6:	58 f8       	cp.w	r8,15
800016a8:	e0 8a 00 15 	brle	800016d2 <_malloc_r+0x252>
800016ac:	6c 3a       	ld.w	r10,r6[0xc]
800016ae:	6c 29       	ld.w	r9,r6[0x8]
800016b0:	95 29       	st.w	r10[0x8],r9
800016b2:	93 3a       	st.w	r9[0xc],r10
800016b4:	0e 99       	mov	r9,r7
800016b6:	ec 07 00 07 	add	r7,r6,r7
800016ba:	a1 a9       	sbr	r9,0x0
800016bc:	99 37       	st.w	r12[0xc],r7
800016be:	99 27       	st.w	r12[0x8],r7
800016c0:	8d 19       	st.w	r6[0x4],r9
800016c2:	ee 08 09 08 	st.w	r7[r8],r8
800016c6:	8f 2c       	st.w	r7[0x8],r12
800016c8:	8f 3c       	st.w	r7[0xc],r12
800016ca:	a1 a8       	sbr	r8,0x0
800016cc:	0a 9c       	mov	r12,r5
800016ce:	8f 18       	st.w	r7[0x4],r8
800016d0:	c0 d8       	rjmp	800016ea <_malloc_r+0x26a>
800016d2:	6c 39       	ld.w	r9,r6[0xc]
800016d4:	58 08       	cp.w	r8,0
800016d6:	c0 f5       	brlt	800016f4 <_malloc_r+0x274>
800016d8:	ec 0a 00 0a 	add	r10,r6,r10
800016dc:	74 18       	ld.w	r8,r10[0x4]
800016de:	a1 a8       	sbr	r8,0x0
800016e0:	0a 9c       	mov	r12,r5
800016e2:	95 18       	st.w	r10[0x4],r8
800016e4:	6c 28       	ld.w	r8,r6[0x8]
800016e6:	93 28       	st.w	r9[0x8],r8
800016e8:	91 39       	st.w	r8[0xc],r9
800016ea:	f0 1f 00 19 	mcall	8000174c <_malloc_r+0x2cc>
800016ee:	ec cc ff f8 	sub	r12,r6,-8
800016f2:	d8 32       	popm	r0-r7,pc
800016f4:	12 96       	mov	r6,r9
800016f6:	02 36       	cp.w	r6,r1
800016f8:	cd 21       	brne	8000169c <_malloc_r+0x21c>
800016fa:	2f f2       	sub	r2,-1
800016fc:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001700:	c0 30       	breq	80001706 <_malloc_r+0x286>
80001702:	2f 81       	sub	r1,-8
80001704:	cc ab       	rjmp	80001698 <_malloc_r+0x218>
80001706:	1c 98       	mov	r8,lr
80001708:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000170c:	c0 81       	brne	8000171c <_malloc_r+0x29c>
8000170e:	68 19       	ld.w	r9,r4[0x4]
80001710:	f6 08 11 ff 	rsub	r8,r11,-1
80001714:	f3 e8 00 08 	and	r8,r9,r8
80001718:	89 18       	st.w	r4[0x4],r8
8000171a:	c0 78       	rjmp	80001728 <_malloc_r+0x2a8>
8000171c:	f0 c9 00 08 	sub	r9,r8,8
80001720:	20 13       	sub	r3,1
80001722:	70 08       	ld.w	r8,r8[0x0]
80001724:	12 38       	cp.w	r8,r9
80001726:	cf 10       	breq	80001708 <_malloc_r+0x288>
80001728:	a1 7b       	lsl	r11,0x1
8000172a:	68 18       	ld.w	r8,r4[0x4]
8000172c:	10 3b       	cp.w	r11,r8
8000172e:	e0 8b 00 11 	brhi	80001750 <_malloc_r+0x2d0>
80001732:	58 0b       	cp.w	r11,0
80001734:	c0 e0       	breq	80001750 <_malloc_r+0x2d0>
80001736:	04 93       	mov	r3,r2
80001738:	c0 38       	rjmp	8000173e <_malloc_r+0x2be>
8000173a:	2f c3       	sub	r3,-4
8000173c:	a1 7b       	lsl	r11,0x1
8000173e:	f7 e8 00 09 	and	r9,r11,r8
80001742:	ca 71       	brne	80001690 <_malloc_r+0x210>
80001744:	cf bb       	rjmp	8000173a <_malloc_r+0x2ba>
80001746:	00 00       	add	r0,r0
80001748:	00 00       	add	r0,r0
8000174a:	01 04       	ld.w	r4,r0++
8000174c:	80 00       	ld.sh	r0,r0[0x0]
8000174e:	18 e0       	st.h	--r12,r0
80001750:	68 23       	ld.w	r3,r4[0x8]
80001752:	66 12       	ld.w	r2,r3[0x4]
80001754:	e0 12 ff fc 	andl	r2,0xfffc
80001758:	0e 32       	cp.w	r2,r7
8000175a:	5f 39       	srlo	r9
8000175c:	e4 07 01 08 	sub	r8,r2,r7
80001760:	58 f8       	cp.w	r8,15
80001762:	5f aa       	srle	r10
80001764:	f5 e9 10 09 	or	r9,r10,r9
80001768:	e0 80 00 a2 	breq	800018ac <_malloc_r+0x42c>
8000176c:	4c 88       	lddpc	r8,8000188c <_malloc_r+0x40c>
8000176e:	70 01       	ld.w	r1,r8[0x0]
80001770:	4c 88       	lddpc	r8,80001890 <_malloc_r+0x410>
80001772:	2f 01       	sub	r1,-16
80001774:	70 08       	ld.w	r8,r8[0x0]
80001776:	0e 01       	add	r1,r7
80001778:	5b f8       	cp.w	r8,-1
8000177a:	c0 40       	breq	80001782 <_malloc_r+0x302>
8000177c:	28 11       	sub	r1,-127
8000177e:	e0 11 ff 80 	andl	r1,0xff80
80001782:	02 9b       	mov	r11,r1
80001784:	0a 9c       	mov	r12,r5
80001786:	f0 1f 00 44 	mcall	80001894 <_malloc_r+0x414>
8000178a:	18 96       	mov	r6,r12
8000178c:	5b fc       	cp.w	r12,-1
8000178e:	c6 e0       	breq	8000186a <_malloc_r+0x3ea>
80001790:	e6 02 00 08 	add	r8,r3,r2
80001794:	10 3c       	cp.w	r12,r8
80001796:	c0 32       	brcc	8000179c <_malloc_r+0x31c>
80001798:	08 33       	cp.w	r3,r4
8000179a:	c6 81       	brne	8000186a <_malloc_r+0x3ea>
8000179c:	4b fa       	lddpc	r10,80001898 <_malloc_r+0x418>
8000179e:	74 09       	ld.w	r9,r10[0x0]
800017a0:	e2 09 00 09 	add	r9,r1,r9
800017a4:	95 09       	st.w	r10[0x0],r9
800017a6:	10 36       	cp.w	r6,r8
800017a8:	c0 a1       	brne	800017bc <_malloc_r+0x33c>
800017aa:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800017ae:	c0 71       	brne	800017bc <_malloc_r+0x33c>
800017b0:	e2 02 00 02 	add	r2,r1,r2
800017b4:	68 28       	ld.w	r8,r4[0x8]
800017b6:	a1 a2       	sbr	r2,0x0
800017b8:	91 12       	st.w	r8[0x4],r2
800017ba:	c4 c8       	rjmp	80001852 <_malloc_r+0x3d2>
800017bc:	4b 5a       	lddpc	r10,80001890 <_malloc_r+0x410>
800017be:	74 0b       	ld.w	r11,r10[0x0]
800017c0:	5b fb       	cp.w	r11,-1
800017c2:	c0 31       	brne	800017c8 <_malloc_r+0x348>
800017c4:	95 06       	st.w	r10[0x0],r6
800017c6:	c0 68       	rjmp	800017d2 <_malloc_r+0x352>
800017c8:	ec 09 00 09 	add	r9,r6,r9
800017cc:	4b 3a       	lddpc	r10,80001898 <_malloc_r+0x418>
800017ce:	10 19       	sub	r9,r8
800017d0:	95 09       	st.w	r10[0x0],r9
800017d2:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800017d6:	f0 09 11 08 	rsub	r9,r8,8
800017da:	58 08       	cp.w	r8,0
800017dc:	f2 08 17 10 	movne	r8,r9
800017e0:	ed d8 e1 06 	addne	r6,r6,r8
800017e4:	28 08       	sub	r8,-128
800017e6:	ec 01 00 01 	add	r1,r6,r1
800017ea:	0a 9c       	mov	r12,r5
800017ec:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800017f0:	f0 01 01 01 	sub	r1,r8,r1
800017f4:	02 9b       	mov	r11,r1
800017f6:	f0 1f 00 28 	mcall	80001894 <_malloc_r+0x414>
800017fa:	4a 88       	lddpc	r8,80001898 <_malloc_r+0x418>
800017fc:	5b fc       	cp.w	r12,-1
800017fe:	ec 0c 17 00 	moveq	r12,r6
80001802:	f9 b1 00 00 	moveq	r1,0
80001806:	70 09       	ld.w	r9,r8[0x0]
80001808:	0c 1c       	sub	r12,r6
8000180a:	89 26       	st.w	r4[0x8],r6
8000180c:	02 0c       	add	r12,r1
8000180e:	12 01       	add	r1,r9
80001810:	a1 ac       	sbr	r12,0x0
80001812:	91 01       	st.w	r8[0x0],r1
80001814:	8d 1c       	st.w	r6[0x4],r12
80001816:	08 33       	cp.w	r3,r4
80001818:	c1 d0       	breq	80001852 <_malloc_r+0x3d2>
8000181a:	58 f2       	cp.w	r2,15
8000181c:	e0 8b 00 05 	brhi	80001826 <_malloc_r+0x3a6>
80001820:	30 18       	mov	r8,1
80001822:	8d 18       	st.w	r6[0x4],r8
80001824:	c2 38       	rjmp	8000186a <_malloc_r+0x3ea>
80001826:	30 59       	mov	r9,5
80001828:	20 c2       	sub	r2,12
8000182a:	e0 12 ff f8 	andl	r2,0xfff8
8000182e:	e6 02 00 08 	add	r8,r3,r2
80001832:	91 29       	st.w	r8[0x8],r9
80001834:	91 19       	st.w	r8[0x4],r9
80001836:	66 18       	ld.w	r8,r3[0x4]
80001838:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000183c:	e5 e8 10 08 	or	r8,r2,r8
80001840:	87 18       	st.w	r3[0x4],r8
80001842:	58 f2       	cp.w	r2,15
80001844:	e0 88 00 07 	brls	80001852 <_malloc_r+0x3d2>
80001848:	e6 cb ff f8 	sub	r11,r3,-8
8000184c:	0a 9c       	mov	r12,r5
8000184e:	f0 1f 00 14 	mcall	8000189c <_malloc_r+0x41c>
80001852:	49 49       	lddpc	r9,800018a0 <_malloc_r+0x420>
80001854:	72 0a       	ld.w	r10,r9[0x0]
80001856:	49 18       	lddpc	r8,80001898 <_malloc_r+0x418>
80001858:	70 08       	ld.w	r8,r8[0x0]
8000185a:	14 38       	cp.w	r8,r10
8000185c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001860:	49 19       	lddpc	r9,800018a4 <_malloc_r+0x424>
80001862:	72 0a       	ld.w	r10,r9[0x0]
80001864:	14 38       	cp.w	r8,r10
80001866:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000186a:	68 28       	ld.w	r8,r4[0x8]
8000186c:	70 18       	ld.w	r8,r8[0x4]
8000186e:	e0 18 ff fc 	andl	r8,0xfffc
80001872:	0e 38       	cp.w	r8,r7
80001874:	5f 39       	srlo	r9
80001876:	0e 18       	sub	r8,r7
80001878:	58 f8       	cp.w	r8,15
8000187a:	5f aa       	srle	r10
8000187c:	f5 e9 10 09 	or	r9,r10,r9
80001880:	c1 60       	breq	800018ac <_malloc_r+0x42c>
80001882:	0a 9c       	mov	r12,r5
80001884:	f0 1f 00 09 	mcall	800018a8 <_malloc_r+0x428>
80001888:	d8 3a       	popm	r0-r7,pc,r12=0
8000188a:	00 00       	add	r0,r0
8000188c:	00 00       	add	r0,r0
8000188e:	05 20       	ld.uh	r0,r2++
80001890:	00 00       	add	r0,r0
80001892:	05 10       	ld.sh	r0,r2++
80001894:	80 00       	ld.sh	r0,r0[0x0]
80001896:	18 e4       	st.h	--r12,r4
80001898:	00 00       	add	r0,r0
8000189a:	05 24       	ld.uh	r4,r2++
8000189c:	80 00       	ld.sh	r0,r0[0x0]
8000189e:	1a 00       	add	r0,sp
800018a0:	00 00       	add	r0,r0
800018a2:	05 1c       	ld.sh	r12,r2++
800018a4:	00 00       	add	r0,r0
800018a6:	05 18       	ld.sh	r8,r2++
800018a8:	80 00       	ld.sh	r0,r0[0x0]
800018aa:	18 e0       	st.h	--r12,r0
800018ac:	68 26       	ld.w	r6,r4[0x8]
800018ae:	a1 a8       	sbr	r8,0x0
800018b0:	0e 99       	mov	r9,r7
800018b2:	a1 a9       	sbr	r9,0x0
800018b4:	8d 19       	st.w	r6[0x4],r9
800018b6:	ec 07 00 07 	add	r7,r6,r7
800018ba:	0a 9c       	mov	r12,r5
800018bc:	89 27       	st.w	r4[0x8],r7
800018be:	8f 18       	st.w	r7[0x4],r8
800018c0:	f0 1f 00 03 	mcall	800018cc <_malloc_r+0x44c>
800018c4:	ec cc ff f8 	sub	r12,r6,-8
800018c8:	d8 32       	popm	r0-r7,pc
800018ca:	00 00       	add	r0,r0
800018cc:	80 00       	ld.sh	r0,r0[0x0]
800018ce:	18 e0       	st.h	--r12,r0

800018d0 <memset>:
800018d0:	18 98       	mov	r8,r12
800018d2:	c0 38       	rjmp	800018d8 <memset+0x8>
800018d4:	10 cb       	st.b	r8++,r11
800018d6:	20 1a       	sub	r10,1
800018d8:	58 0a       	cp.w	r10,0
800018da:	cf d1       	brne	800018d4 <memset+0x4>
800018dc:	5e fc       	retal	r12

800018de <__malloc_lock>:
800018de:	5e fc       	retal	r12

800018e0 <__malloc_unlock>:
800018e0:	5e fc       	retal	r12
800018e2:	d7 03       	nop

800018e4 <_sbrk_r>:
800018e4:	d4 21       	pushm	r4-r7,lr
800018e6:	30 08       	mov	r8,0
800018e8:	18 97       	mov	r7,r12
800018ea:	48 76       	lddpc	r6,80001904 <_sbrk_r+0x20>
800018ec:	16 9c       	mov	r12,r11
800018ee:	8d 08       	st.w	r6[0x0],r8
800018f0:	f0 1f 00 06 	mcall	80001908 <_sbrk_r+0x24>
800018f4:	5b fc       	cp.w	r12,-1
800018f6:	c0 51       	brne	80001900 <_sbrk_r+0x1c>
800018f8:	6c 08       	ld.w	r8,r6[0x0]
800018fa:	58 08       	cp.w	r8,0
800018fc:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001900:	d8 22       	popm	r4-r7,pc
80001902:	00 00       	add	r0,r0
80001904:	00 00       	add	r0,r0
80001906:	06 10       	sub	r0,r3
80001908:	80 00       	ld.sh	r0,r0[0x0]
8000190a:	19 0c       	ld.w	r12,r12++

8000190c <_sbrk>:
8000190c:	d4 01       	pushm	lr
8000190e:	48 c8       	lddpc	r8,8000193c <_sbrk+0x30>
80001910:	70 09       	ld.w	r9,r8[0x0]
80001912:	58 09       	cp.w	r9,0
80001914:	c0 31       	brne	8000191a <_sbrk+0xe>
80001916:	48 b9       	lddpc	r9,80001940 <_sbrk+0x34>
80001918:	91 09       	st.w	r8[0x0],r9
8000191a:	48 99       	lddpc	r9,8000193c <_sbrk+0x30>
8000191c:	48 aa       	lddpc	r10,80001944 <_sbrk+0x38>
8000191e:	72 08       	ld.w	r8,r9[0x0]
80001920:	f0 0c 00 0c 	add	r12,r8,r12
80001924:	14 3c       	cp.w	r12,r10
80001926:	e0 8b 00 04 	brhi	8000192e <_sbrk+0x22>
8000192a:	93 0c       	st.w	r9[0x0],r12
8000192c:	c0 68       	rjmp	80001938 <_sbrk+0x2c>
8000192e:	f0 1f 00 07 	mcall	80001948 <_sbrk+0x3c>
80001932:	30 c8       	mov	r8,12
80001934:	99 08       	st.w	r12[0x0],r8
80001936:	3f f8       	mov	r8,-1
80001938:	10 9c       	mov	r12,r8
8000193a:	d8 02       	popm	pc
8000193c:	00 00       	add	r0,r0
8000193e:	05 4c       	ld.w	r12,--r2
80001940:	00 00       	add	r0,r0
80001942:	06 18       	sub	r8,r3
80001944:	00 00       	add	r0,r0
80001946:	e0 00       	*unknown*
80001948:	80 00       	ld.sh	r0,r0[0x0]
8000194a:	19 4c       	ld.w	r12,--r12

8000194c <__errno>:
8000194c:	48 28       	lddpc	r8,80001954 <__errno+0x8>
8000194e:	70 0c       	ld.w	r12,r8[0x0]
80001950:	2f 4c       	sub	r12,-12
80001952:	5e fc       	retal	r12
80001954:	00 00       	add	r0,r0
80001956:	01 00       	ld.w	r0,r0++

80001958 <_malloc_trim_r>:
80001958:	d4 21       	pushm	r4-r7,lr
8000195a:	16 95       	mov	r5,r11
8000195c:	18 97       	mov	r7,r12
8000195e:	f0 1f 00 23 	mcall	800019e8 <_malloc_trim_r+0x90>
80001962:	4a 34       	lddpc	r4,800019ec <_malloc_trim_r+0x94>
80001964:	68 28       	ld.w	r8,r4[0x8]
80001966:	70 16       	ld.w	r6,r8[0x4]
80001968:	e0 16 ff fc 	andl	r6,0xfffc
8000196c:	ec c8 ff 91 	sub	r8,r6,-111
80001970:	f0 05 01 05 	sub	r5,r8,r5
80001974:	e0 15 ff 80 	andl	r5,0xff80
80001978:	ea c5 00 80 	sub	r5,r5,128
8000197c:	e0 45 00 7f 	cp.w	r5,127
80001980:	e0 8a 00 23 	brle	800019c6 <_malloc_trim_r+0x6e>
80001984:	30 0b       	mov	r11,0
80001986:	0e 9c       	mov	r12,r7
80001988:	f0 1f 00 1a 	mcall	800019f0 <_malloc_trim_r+0x98>
8000198c:	68 28       	ld.w	r8,r4[0x8]
8000198e:	0c 08       	add	r8,r6
80001990:	10 3c       	cp.w	r12,r8
80001992:	c1 a1       	brne	800019c6 <_malloc_trim_r+0x6e>
80001994:	ea 0b 11 00 	rsub	r11,r5,0
80001998:	0e 9c       	mov	r12,r7
8000199a:	f0 1f 00 16 	mcall	800019f0 <_malloc_trim_r+0x98>
8000199e:	5b fc       	cp.w	r12,-1
800019a0:	c1 71       	brne	800019ce <_malloc_trim_r+0x76>
800019a2:	30 0b       	mov	r11,0
800019a4:	0e 9c       	mov	r12,r7
800019a6:	f0 1f 00 13 	mcall	800019f0 <_malloc_trim_r+0x98>
800019aa:	68 28       	ld.w	r8,r4[0x8]
800019ac:	f8 08 01 09 	sub	r9,r12,r8
800019b0:	58 f9       	cp.w	r9,15
800019b2:	e0 8a 00 0a 	brle	800019c6 <_malloc_trim_r+0x6e>
800019b6:	a1 a9       	sbr	r9,0x0
800019b8:	91 19       	st.w	r8[0x4],r9
800019ba:	48 f8       	lddpc	r8,800019f4 <_malloc_trim_r+0x9c>
800019bc:	70 09       	ld.w	r9,r8[0x0]
800019be:	48 f8       	lddpc	r8,800019f8 <_malloc_trim_r+0xa0>
800019c0:	f8 09 01 09 	sub	r9,r12,r9
800019c4:	91 09       	st.w	r8[0x0],r9
800019c6:	0e 9c       	mov	r12,r7
800019c8:	f0 1f 00 0d 	mcall	800019fc <_malloc_trim_r+0xa4>
800019cc:	d8 2a       	popm	r4-r7,pc,r12=0
800019ce:	68 28       	ld.w	r8,r4[0x8]
800019d0:	0a 16       	sub	r6,r5
800019d2:	a1 a6       	sbr	r6,0x0
800019d4:	91 16       	st.w	r8[0x4],r6
800019d6:	48 98       	lddpc	r8,800019f8 <_malloc_trim_r+0xa0>
800019d8:	70 09       	ld.w	r9,r8[0x0]
800019da:	0a 19       	sub	r9,r5
800019dc:	0e 9c       	mov	r12,r7
800019de:	91 09       	st.w	r8[0x0],r9
800019e0:	f0 1f 00 07 	mcall	800019fc <_malloc_trim_r+0xa4>
800019e4:	da 2a       	popm	r4-r7,pc,r12=1
800019e6:	00 00       	add	r0,r0
800019e8:	80 00       	ld.sh	r0,r0[0x0]
800019ea:	18 de       	st.w	--r12,lr
800019ec:	00 00       	add	r0,r0
800019ee:	01 04       	ld.w	r4,r0++
800019f0:	80 00       	ld.sh	r0,r0[0x0]
800019f2:	18 e4       	st.h	--r12,r4
800019f4:	00 00       	add	r0,r0
800019f6:	05 10       	ld.sh	r0,r2++
800019f8:	00 00       	add	r0,r0
800019fa:	05 24       	ld.uh	r4,r2++
800019fc:	80 00       	ld.sh	r0,r0[0x0]
800019fe:	18 e0       	st.h	--r12,r0

80001a00 <_free_r>:
80001a00:	d4 21       	pushm	r4-r7,lr
80001a02:	16 96       	mov	r6,r11
80001a04:	18 97       	mov	r7,r12
80001a06:	58 0b       	cp.w	r11,0
80001a08:	e0 80 00 c8 	breq	80001b98 <_free_r+0x198>
80001a0c:	f0 1f 00 4c 	mcall	80001b3c <_free_r+0x13c>
80001a10:	20 86       	sub	r6,8
80001a12:	4c ca       	lddpc	r10,80001b40 <_free_r+0x140>
80001a14:	6c 18       	ld.w	r8,r6[0x4]
80001a16:	74 2e       	ld.w	lr,r10[0x8]
80001a18:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001a1c:	a1 c8       	cbr	r8,0x0
80001a1e:	ec 08 00 09 	add	r9,r6,r8
80001a22:	72 1b       	ld.w	r11,r9[0x4]
80001a24:	e0 1b ff fc 	andl	r11,0xfffc
80001a28:	1c 39       	cp.w	r9,lr
80001a2a:	c1 d1       	brne	80001a64 <_free_r+0x64>
80001a2c:	f6 08 00 08 	add	r8,r11,r8
80001a30:	58 0c       	cp.w	r12,0
80001a32:	c0 81       	brne	80001a42 <_free_r+0x42>
80001a34:	6c 09       	ld.w	r9,r6[0x0]
80001a36:	12 16       	sub	r6,r9
80001a38:	12 08       	add	r8,r9
80001a3a:	6c 3b       	ld.w	r11,r6[0xc]
80001a3c:	6c 29       	ld.w	r9,r6[0x8]
80001a3e:	97 29       	st.w	r11[0x8],r9
80001a40:	93 3b       	st.w	r9[0xc],r11
80001a42:	10 99       	mov	r9,r8
80001a44:	95 26       	st.w	r10[0x8],r6
80001a46:	a1 a9       	sbr	r9,0x0
80001a48:	8d 19       	st.w	r6[0x4],r9
80001a4a:	4b f9       	lddpc	r9,80001b44 <_free_r+0x144>
80001a4c:	72 09       	ld.w	r9,r9[0x0]
80001a4e:	12 38       	cp.w	r8,r9
80001a50:	c0 63       	brcs	80001a5c <_free_r+0x5c>
80001a52:	4b e8       	lddpc	r8,80001b48 <_free_r+0x148>
80001a54:	0e 9c       	mov	r12,r7
80001a56:	70 0b       	ld.w	r11,r8[0x0]
80001a58:	f0 1f 00 3d 	mcall	80001b4c <_free_r+0x14c>
80001a5c:	0e 9c       	mov	r12,r7
80001a5e:	f0 1f 00 3d 	mcall	80001b50 <_free_r+0x150>
80001a62:	d8 22       	popm	r4-r7,pc
80001a64:	93 1b       	st.w	r9[0x4],r11
80001a66:	58 0c       	cp.w	r12,0
80001a68:	c0 30       	breq	80001a6e <_free_r+0x6e>
80001a6a:	30 0c       	mov	r12,0
80001a6c:	c1 08       	rjmp	80001a8c <_free_r+0x8c>
80001a6e:	6c 0e       	ld.w	lr,r6[0x0]
80001a70:	f4 c5 ff f8 	sub	r5,r10,-8
80001a74:	1c 16       	sub	r6,lr
80001a76:	1c 08       	add	r8,lr
80001a78:	6c 2e       	ld.w	lr,r6[0x8]
80001a7a:	0a 3e       	cp.w	lr,r5
80001a7c:	f9 bc 00 01 	moveq	r12,1
80001a80:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001a84:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001a88:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001a8c:	f2 0b 00 0e 	add	lr,r9,r11
80001a90:	7c 1e       	ld.w	lr,lr[0x4]
80001a92:	ed be 00 00 	bld	lr,0x0
80001a96:	c1 30       	breq	80001abc <_free_r+0xbc>
80001a98:	16 08       	add	r8,r11
80001a9a:	58 0c       	cp.w	r12,0
80001a9c:	c0 c1       	brne	80001ab4 <_free_r+0xb4>
80001a9e:	4a 9e       	lddpc	lr,80001b40 <_free_r+0x140>
80001aa0:	72 2b       	ld.w	r11,r9[0x8]
80001aa2:	2f 8e       	sub	lr,-8
80001aa4:	1c 3b       	cp.w	r11,lr
80001aa6:	c0 71       	brne	80001ab4 <_free_r+0xb4>
80001aa8:	97 36       	st.w	r11[0xc],r6
80001aaa:	97 26       	st.w	r11[0x8],r6
80001aac:	8d 2b       	st.w	r6[0x8],r11
80001aae:	8d 3b       	st.w	r6[0xc],r11
80001ab0:	30 1c       	mov	r12,1
80001ab2:	c0 58       	rjmp	80001abc <_free_r+0xbc>
80001ab4:	72 2b       	ld.w	r11,r9[0x8]
80001ab6:	72 39       	ld.w	r9,r9[0xc]
80001ab8:	93 2b       	st.w	r9[0x8],r11
80001aba:	97 39       	st.w	r11[0xc],r9
80001abc:	10 99       	mov	r9,r8
80001abe:	ec 08 09 08 	st.w	r6[r8],r8
80001ac2:	a1 a9       	sbr	r9,0x0
80001ac4:	8d 19       	st.w	r6[0x4],r9
80001ac6:	58 0c       	cp.w	r12,0
80001ac8:	c6 51       	brne	80001b92 <_free_r+0x192>
80001aca:	e0 48 01 ff 	cp.w	r8,511
80001ace:	e0 8b 00 13 	brhi	80001af4 <_free_r+0xf4>
80001ad2:	a3 98       	lsr	r8,0x3
80001ad4:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001ad8:	72 2b       	ld.w	r11,r9[0x8]
80001ada:	8d 39       	st.w	r6[0xc],r9
80001adc:	8d 2b       	st.w	r6[0x8],r11
80001ade:	97 36       	st.w	r11[0xc],r6
80001ae0:	93 26       	st.w	r9[0x8],r6
80001ae2:	a3 48       	asr	r8,0x2
80001ae4:	74 19       	ld.w	r9,r10[0x4]
80001ae6:	30 1b       	mov	r11,1
80001ae8:	f6 08 09 48 	lsl	r8,r11,r8
80001aec:	f3 e8 10 08 	or	r8,r9,r8
80001af0:	95 18       	st.w	r10[0x4],r8
80001af2:	c5 08       	rjmp	80001b92 <_free_r+0x192>
80001af4:	f0 0b 16 09 	lsr	r11,r8,0x9
80001af8:	58 4b       	cp.w	r11,4
80001afa:	e0 8b 00 06 	brhi	80001b06 <_free_r+0x106>
80001afe:	f0 0b 16 06 	lsr	r11,r8,0x6
80001b02:	2c 8b       	sub	r11,-56
80001b04:	c2 b8       	rjmp	80001b5a <_free_r+0x15a>
80001b06:	59 4b       	cp.w	r11,20
80001b08:	e0 8b 00 04 	brhi	80001b10 <_free_r+0x110>
80001b0c:	2a 5b       	sub	r11,-91
80001b0e:	c2 68       	rjmp	80001b5a <_free_r+0x15a>
80001b10:	e0 4b 00 54 	cp.w	r11,84
80001b14:	e0 8b 00 06 	brhi	80001b20 <_free_r+0x120>
80001b18:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001b1c:	29 2b       	sub	r11,-110
80001b1e:	c1 e8       	rjmp	80001b5a <_free_r+0x15a>
80001b20:	e0 4b 01 54 	cp.w	r11,340
80001b24:	e0 8b 00 06 	brhi	80001b30 <_free_r+0x130>
80001b28:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001b2c:	28 9b       	sub	r11,-119
80001b2e:	c1 68       	rjmp	80001b5a <_free_r+0x15a>
80001b30:	e0 4b 05 54 	cp.w	r11,1364
80001b34:	e0 88 00 10 	brls	80001b54 <_free_r+0x154>
80001b38:	37 eb       	mov	r11,126
80001b3a:	c1 08       	rjmp	80001b5a <_free_r+0x15a>
80001b3c:	80 00       	ld.sh	r0,r0[0x0]
80001b3e:	18 de       	st.w	--r12,lr
80001b40:	00 00       	add	r0,r0
80001b42:	01 04       	ld.w	r4,r0++
80001b44:	00 00       	add	r0,r0
80001b46:	05 0c       	ld.w	r12,r2++
80001b48:	00 00       	add	r0,r0
80001b4a:	05 20       	ld.uh	r0,r2++
80001b4c:	80 00       	ld.sh	r0,r0[0x0]
80001b4e:	19 58       	ld.sh	r8,--r12
80001b50:	80 00       	ld.sh	r0,r0[0x0]
80001b52:	18 e0       	st.h	--r12,r0
80001b54:	f0 0b 16 12 	lsr	r11,r8,0x12
80001b58:	28 4b       	sub	r11,-124
80001b5a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001b5e:	78 29       	ld.w	r9,r12[0x8]
80001b60:	18 39       	cp.w	r9,r12
80001b62:	c0 e1       	brne	80001b7e <_free_r+0x17e>
80001b64:	74 18       	ld.w	r8,r10[0x4]
80001b66:	a3 4b       	asr	r11,0x2
80001b68:	30 1c       	mov	r12,1
80001b6a:	f8 0b 09 4b 	lsl	r11,r12,r11
80001b6e:	f1 eb 10 0b 	or	r11,r8,r11
80001b72:	12 98       	mov	r8,r9
80001b74:	95 1b       	st.w	r10[0x4],r11
80001b76:	c0 a8       	rjmp	80001b8a <_free_r+0x18a>
80001b78:	72 29       	ld.w	r9,r9[0x8]
80001b7a:	18 39       	cp.w	r9,r12
80001b7c:	c0 60       	breq	80001b88 <_free_r+0x188>
80001b7e:	72 1a       	ld.w	r10,r9[0x4]
80001b80:	e0 1a ff fc 	andl	r10,0xfffc
80001b84:	14 38       	cp.w	r8,r10
80001b86:	cf 93       	brcs	80001b78 <_free_r+0x178>
80001b88:	72 38       	ld.w	r8,r9[0xc]
80001b8a:	8d 38       	st.w	r6[0xc],r8
80001b8c:	8d 29       	st.w	r6[0x8],r9
80001b8e:	93 36       	st.w	r9[0xc],r6
80001b90:	91 26       	st.w	r8[0x8],r6
80001b92:	0e 9c       	mov	r12,r7
80001b94:	f0 1f 00 02 	mcall	80001b9c <_free_r+0x19c>
80001b98:	d8 22       	popm	r4-r7,pc
80001b9a:	00 00       	add	r0,r0
80001b9c:	80 00       	ld.sh	r0,r0[0x0]
80001b9e:	18 e0       	st.h	--r12,r0

Disassembly of section .exception:

80001c00 <_evba>:
	...

80001c28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001c28:	c7 a8       	rjmp	80001d1c <privilegedCalls>
	...

80001d00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001d00:	1c 9f       	mov	pc,lr

80001d02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001d02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001d06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001d0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001d0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001d12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001d14:	c0 31       	brne	80001d1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001d16:	4b 9c       	lddpc	r12,80001df8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001d18:	18 9f       	mov	pc,r12

80001d1a <_int0_exit>:
_int0_exit:
	rete
80001d1a:	d6 03       	rete

80001d1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001d1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001d1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001d20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001d22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001d24:	9b 3c       	st.w	sp[0xc],r12

80001d26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001d26:	4b 6c       	lddpc	r12,80001dfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001d28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001d2a:	c0 61       	brne	80001d36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001d2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001d2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001d30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d32:	d3 02       	popm	r11-r12
	rete
80001d34:	d6 03       	rete

80001d36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001d36:	4b 3c       	lddpc	r12,80001e00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001d38:	18 3b       	cp.w	r11,r12
	brne privexception
80001d3a:	c0 61       	brne	80001d46 <privexception>
	ld.w r12,sp[USERSR]
80001d3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001d3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001d40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d42:	d3 02       	popm	r11-r12
	rete
80001d44:	d6 03       	rete

80001d46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001d46:	c0 08       	rjmp	80001d46 <privexception>

80001d48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001d48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001d4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001d4e:	4a ec       	lddpc	r12,80001e04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001d50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001d52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001d54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001d58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001d5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001d60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001d62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001d64:	1c 9f       	mov	pc,lr

80001d66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001d66:	d3 03       	ssrf	0x10
	mov pc,lr
80001d68:	1c 9f       	mov	pc,lr

80001d6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001d6a:	d5 03       	csrf	0x10
	mov pc,lr
80001d6c:	1c 9f       	mov	pc,lr

80001d6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001d6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001d72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001d74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001d78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001d7c:	1c 9f       	mov	pc,lr

80001d7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001d7e:	4a 3c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001d80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001d82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001d84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001d86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001d88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001d8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001d8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001d8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001d90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001d92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001d94:	33 40       	mov	r0,52
	add r0,r12
80001d96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001d98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001d9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001d9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001da2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001da4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001da6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001da8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001daa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001dac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001dae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001db2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001db4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001db6:	1c 9f       	mov	pc,lr

80001db8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001db8:	49 4c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001dba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001dbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001dbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001dc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001dc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001dc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001dc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001dca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001dcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001dce:	33 40       	mov	r0,52
	add r0,r12
80001dd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001dd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001dd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001dd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001dda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001ddc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001dde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001de0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001de2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001de4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001de6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001de8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001dea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001dec:	d4 01       	pushm	lr
	call timerStart
80001dee:	f0 1f 00 08 	mcall	80001e0c <contextRestoreFromISR+0x54>
	popm lr
80001df2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001df4:	1c 9f       	mov	pc,lr
80001df6:	00 00       	add	r0,r0
80001df8:	80 00       	ld.sh	r0,r0[0x0]
80001dfa:	0c a8       	st.w	r6++,r8
80001dfc:	80 00       	ld.sh	r0,r0[0x0]
80001dfe:	1d 66       	ld.uh	r6,--lr
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	1d 6a       	ld.uh	r10,--lr
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1c 00       	add	r0,lr
80001e08:	00 00       	add	r0,r0
80001e0a:	05 f8       	ld.ub	r8,r2[0x7]
80001e0c:	80 00       	ld.sh	r0,r0[0x0]
80001e0e:	12 fe       	st.b	--r9,lr
	...
