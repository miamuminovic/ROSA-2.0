
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002250  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002400  80002400  00002800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002800  80002800  00002c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002884  80002884  00002c84  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002888  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002d94  00003514  2**0
                  ALLOC
  9 .bss          00000098  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da50  000005b0  000005b0  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000668  00000000  00000000  000035b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000c0e  00000000  00000000  00003c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000cac4  00000000  00000000  0000482e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000207d  00000000  00000000  000112f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000456e  00000000  00000000  0001336f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000e3c  00000000  00000000  000178e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001ef3  00000000  00000000  0001871c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001c03  00000000  00000000  0001a60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0053059b  00000000  00000000  0001c212  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000005a8  00000000  00000000  0054c7ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	1a 24       	rsub	r4,sp

Disassembly of section .text:

80000008 <semaphore_insert_after>:
#include "include/kernel/semaphore.h"

int16_t semaphore_insert_after(semaphore * position, semaphore * new_semaphore)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	ef 4b ff f8 	st.w	r7[-8],r11
	new_semaphore->nextsemaphore = position->nextsemaphore;
80000018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000001c:	70 39       	ld.w	r9,r8[0xc]
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	91 39       	st.w	r8[0xc],r9
	new_semaphore->prevsemaphore = position;
80000024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000028:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000002c:	91 49       	st.w	r8[0x10],r9
	
	position->nextsemaphore = new_semaphore;
8000002e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000032:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000036:	91 39       	st.w	r8[0xc],r9
	new_semaphore->nextsemaphore->prevsemaphore = new_semaphore;
80000038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000003c:	70 38       	ld.w	r8,r8[0xc]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	91 49       	st.w	r8[0x10],r9
}
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	d7 03       	nop

8000004c <semaphoreAdd>:

int16_t semaphoreAdd(semaphore * handle)
{
8000004c:	eb cd 40 80 	pushm	r7,lr
80000050:	1a 97       	mov	r7,sp
80000052:	20 2d       	sub	sp,8
80000054:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = -1;
80000058:	3f f8       	mov	r8,-1
8000005a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( SEMAPHORES == NULL )
8000005e:	49 48       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000060:	70 08       	ld.w	r8,r8[0x0]
80000062:	58 08       	cp.w	r8,0
80000064:	c1 31       	brne	8000008a <semaphoreAdd+0x3e>
	{
		SEMAPHORES = handle;
80000066:	49 28       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000068:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000006c:	91 09       	st.w	r8[0x0],r9
		SEMAPHORES->nextsemaphore = SEMAPHORES;
8000006e:	49 08       	lddpc	r8,800000ac <semaphoreAdd+0x60>
80000070:	70 08       	ld.w	r8,r8[0x0]
80000072:	48 f9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
80000074:	72 09       	ld.w	r9,r9[0x0]
80000076:	91 39       	st.w	r8[0xc],r9
		SEMAPHORES->prevsemaphore = SEMAPHORES;
80000078:	48 d8       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000007a:	70 08       	ld.w	r8,r8[0x0]
8000007c:	48 c9       	lddpc	r9,800000ac <semaphoreAdd+0x60>
8000007e:	72 09       	ld.w	r9,r9[0x0]
80000080:	91 49       	st.w	r8[0x10],r9
		
		result = 1;
80000082:	30 18       	mov	r8,1
80000084:	ef 58 ff fe 	st.h	r7[-2],r8
80000088:	c0 c8       	rjmp	800000a0 <semaphoreAdd+0x54>
	}
	else
	{
		semaphore_insert_after(SEMAPHORES->prevsemaphore, handle);
8000008a:	48 98       	lddpc	r8,800000ac <semaphoreAdd+0x60>
8000008c:	70 08       	ld.w	r8,r8[0x0]
8000008e:	70 48       	ld.w	r8,r8[0x10]
80000090:	ee fb ff f8 	ld.w	r11,r7[-8]
80000094:	10 9c       	mov	r12,r8
80000096:	f0 1f 00 07 	mcall	800000b0 <semaphoreAdd+0x64>
		
		result = 1;
8000009a:	30 18       	mov	r8,1
8000009c:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
800000a0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800000a4:	10 9c       	mov	r12,r8
800000a6:	2f ed       	sub	sp,-8
800000a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800000ac:	00 00       	add	r0,r0
800000ae:	05 8c       	ld.ub	r12,r2[0x0]
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	00 08       	add	r8,r0

800000b4 <ROSA_semaphoreCreate>:

int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * handle, uint8_t ceiling)
{
800000b4:	eb cd 40 80 	pushm	r7,lr
800000b8:	1a 97       	mov	r7,sp
800000ba:	20 3d       	sub	sp,12
800000bc:	ef 4c ff f8 	st.w	r7[-8],r12
800000c0:	16 98       	mov	r8,r11
800000c2:	ef 68 ff f4 	st.b	r7[-12],r8
	//interruptDisable();
	int16_t result = -1;
800000c6:	3f f8       	mov	r8,-1
800000c8:	ef 58 ff fe 	st.h	r7[-2],r8
	(*handle) = calloc(1, sizeof(semaphore));
800000cc:	31 4b       	mov	r11,20
800000ce:	30 1c       	mov	r12,1
800000d0:	f0 1f 00 11 	mcall	80000114 <ROSA_semaphoreCreate+0x60>
800000d4:	18 98       	mov	r8,r12
800000d6:	10 99       	mov	r9,r8
800000d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000dc:	91 09       	st.w	r8[0x0],r9
	(*handle)->ceiling = ceiling;
800000de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000e2:	70 09       	ld.w	r9,r8[0x0]
800000e4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800000e8:	b2 88       	st.b	r9[0x0],r8
	result = abs(*handle);
800000ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ee:	70 08       	ld.w	r8,r8[0x0]
800000f0:	10 9c       	mov	r12,r8
800000f2:	f0 1f 00 0a 	mcall	80000118 <ROSA_semaphoreCreate+0x64>
800000f6:	18 98       	mov	r8,r12
800000f8:	ef 58 ff fe 	st.h	r7[-2],r8
	semaphoreAdd(*handle);
800000fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000100:	70 08       	ld.w	r8,r8[0x0]
80000102:	10 9c       	mov	r12,r8
80000104:	f0 1f 00 06 	mcall	8000011c <ROSA_semaphoreCreate+0x68>
	//interruptEnable();
	
	return result;
80000108:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000010c:	10 9c       	mov	r12,r8
8000010e:	2f dd       	sub	sp,-12
80000110:	e3 cd 80 80 	ldm	sp++,r7,pc
80000114:	80 00       	ld.sh	r0,r0[0x0]
80000116:	1a a8       	st.w	sp++,r8
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	1a a4       	st.w	sp++,r4
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	00 4c       	or	r12,r0

80000120 <semaphoreSetCurrentTask>:

int16_t semaphoreSetCurrentTask( semaphore * semaphore_handle, tcb * task_handle )
{
80000120:	eb cd 40 80 	pushm	r7,lr
80000124:	1a 97       	mov	r7,sp
80000126:	20 3d       	sub	sp,12
80000128:	ef 4c ff f8 	st.w	r7[-8],r12
8000012c:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = 0;
80000130:	30 08       	mov	r8,0
80000132:	ef 58 ff fe 	st.h	r7[-2],r8
	
	semaphore_handle->current_task = task_handle;
80000136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000013a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000013e:	91 19       	st.w	r8[0x4],r9
	semaphore_handle->task_priority = task_handle->effective_priority;
80000140:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000144:	f1 38 00 69 	ld.ub	r8,r8[105]
80000148:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000014c:	b2 98       	st.b	r9[0x1],r8
	if( task_handle->effective_priority > semaphore_handle->ceiling )
8000014e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000152:	f1 39 00 69 	ld.ub	r9,r8[105]
80000156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000015a:	11 88       	ld.ub	r8,r8[0x0]
8000015c:	f0 09 18 00 	cp.b	r9,r8
80000160:	e0 88 00 09 	brls	80000172 <semaphoreSetCurrentTask+0x52>
	{
		task_handle->effective_priority = semaphore_handle->ceiling;
80000164:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000168:	11 88       	ld.ub	r8,r8[0x0]
8000016a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000016e:	f3 68 00 69 	st.b	r9[105],r8
	}
	
	return result;
80000172:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000176:	10 9c       	mov	r12,r8
80000178:	2f dd       	sub	sp,-12
8000017a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000017e <semaphoreUnsetCurrentTask>:

int16_t semaphoreUnsetCurrentTask( semaphore * semaphore_handle )
{
8000017e:	eb cd 40 80 	pushm	r7,lr
80000182:	1a 97       	mov	r7,sp
80000184:	20 2d       	sub	sp,8
80000186:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = 0;
8000018a:	30 08       	mov	r8,0
8000018c:	ef 58 ff fe 	st.h	r7[-2],r8
	
	semaphore_handle->current_task->effective_priority = semaphore_handle->task_priority;
80000190:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000194:	70 19       	ld.w	r9,r8[0x4]
80000196:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000019a:	11 98       	ld.ub	r8,r8[0x1]
8000019c:	f3 68 00 69 	st.b	r9[105],r8
	semaphore_handle->current_task = NULL;
800001a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a4:	30 09       	mov	r9,0
800001a6:	91 19       	st.w	r8[0x4],r9
	
	return result;
800001a8:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800001ac:	10 9c       	mov	r12,r8
800001ae:	2f ed       	sub	sp,-8
800001b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800001b4 <semaphoreBlockTask>:

int16_t semaphoreBlockTask( semaphore * semaphore_handle, tcb * new_task )
{
800001b4:	eb cd 40 80 	pushm	r7,lr
800001b8:	1a 97       	mov	r7,sp
800001ba:	20 3d       	sub	sp,12
800001bc:	ef 4c ff f8 	st.w	r7[-8],r12
800001c0:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = -1;
800001c4:	3f f8       	mov	r8,-1
800001c6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	new_task->blocking_semaphore = semaphore_handle;
800001ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800001ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001d2:	f1 49 00 74 	st.w	r8[116],r9
	
	if( semaphore_handle->BLOCKEDLIST == NULL )
800001d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001da:	70 28       	ld.w	r8,r8[0x8]
800001dc:	58 08       	cp.w	r8,0
800001de:	c1 71       	brne	8000020c <semaphoreBlockTask+0x58>
	{
		semaphore_handle->BLOCKEDLIST = new_task;
800001e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800001e8:	91 29       	st.w	r8[0x8],r9
		semaphore_handle->BLOCKEDLIST->nexttcb = new_task;
800001ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ee:	70 28       	ld.w	r8,r8[0x8]
800001f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800001f4:	91 09       	st.w	r8[0x0],r9
		semaphore_handle->BLOCKEDLIST->prevtcb = new_task;
800001f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fa:	70 28       	ld.w	r8,r8[0x8]
800001fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000200:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000204:	30 18       	mov	r8,1
80000206:	ef 58 ff fe 	st.h	r7[-2],r8
8000020a:	c0 d8       	rjmp	80000224 <semaphoreBlockTask+0x70>
	}
	else
	{
		insert_after(semaphore_handle->BLOCKEDLIST->prevtcb, new_task);
8000020c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000210:	70 28       	ld.w	r8,r8[0x8]
80000212:	71 98       	ld.w	r8,r8[0x64]
80000214:	ee fb ff f4 	ld.w	r11,r7[-12]
80000218:	10 9c       	mov	r12,r8
8000021a:	f0 1f 00 06 	mcall	80000230 <semaphoreBlockTask+0x7c>
		
		result = 1;
8000021e:	30 18       	mov	r8,1
80000220:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
80000224:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000228:	10 9c       	mov	r12,r8
8000022a:	2f dd       	sub	sp,-12
8000022c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000230:	80 00       	ld.sh	r0,r0[0x0]
80000232:	09 6c       	ld.uh	r12,--r4

80000234 <semaphoreUnblockTask>:

int16_t semaphoreUnblockTask( semaphore * semaphore_handle, tcb * task_handle )
{
80000234:	eb cd 40 80 	pushm	r7,lr
80000238:	1a 97       	mov	r7,sp
8000023a:	20 3d       	sub	sp,12
8000023c:	ef 4c ff f8 	st.w	r7[-8],r12
80000240:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = 0;
80000244:	30 08       	mov	r8,0
80000246:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// only one blocked task
	if( semaphore_handle->BLOCKEDLIST == semaphore_handle->BLOCKEDLIST->nexttcb )
8000024a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000024e:	70 29       	ld.w	r9,r8[0x8]
80000250:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000254:	70 28       	ld.w	r8,r8[0x8]
80000256:	70 08       	ld.w	r8,r8[0x0]
80000258:	10 39       	cp.w	r9,r8
8000025a:	c0 61       	brne	80000266 <semaphoreUnblockTask+0x32>
	{
		semaphore_handle->BLOCKEDLIST = NULL;
8000025c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000260:	30 09       	mov	r9,0
80000262:	91 29       	st.w	r8[0x8],r9
80000264:	c0 f8       	rjmp	80000282 <semaphoreUnblockTask+0x4e>
	}
	// more than one blocked task
	else if( task_handle == semaphore_handle->BLOCKEDLIST )
80000266:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000026a:	70 29       	ld.w	r9,r8[0x8]
8000026c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000270:	10 39       	cp.w	r9,r8
80000272:	c0 81       	brne	80000282 <semaphoreUnblockTask+0x4e>
	{
		semaphore_handle->BLOCKEDLIST = semaphore_handle->BLOCKEDLIST->nexttcb;
80000274:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000278:	70 28       	ld.w	r8,r8[0x8]
8000027a:	70 09       	ld.w	r9,r8[0x0]
8000027c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000280:	91 29       	st.w	r8[0x8],r9
	}
	
	remove( task_handle );
80000282:	ee fc ff f4 	ld.w	r12,r7[-12]
80000286:	f0 1f 00 07 	mcall	800002a0 <semaphoreUnblockTask+0x6c>
	
	task_handle->blocking_semaphore = NULL;
8000028a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000028e:	30 09       	mov	r9,0
80000290:	f1 49 00 74 	st.w	r8[116],r9
	
	return result;
80000294:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000298:	10 9c       	mov	r12,r8
8000029a:	2f dd       	sub	sp,-12
8000029c:	e3 cd 80 80 	ldm	sp++,r7,pc
800002a0:	80 00       	ld.sh	r0,r0[0x0]
800002a2:	0e 00       	add	r0,r7

800002a4 <ROSA_semaphoreLock>:
{
	return (handle->current_task != NULL);
}

int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t handle)
{
800002a4:	eb cd 40 80 	pushm	r7,lr
800002a8:	1a 97       	mov	r7,sp
800002aa:	20 2d       	sub	sp,8
800002ac:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
800002b0:	f0 1f 00 25 	mcall	80000344 <ROSA_semaphoreLock+0xa0>
	int16_t result = 0;
800002b4:	30 08       	mov	r8,0
800002b6:	ef 58 ff fe 	st.h	r7[-2],r8
	if( handle->current_task == NULL )
800002ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002be:	70 18       	ld.w	r8,r8[0x4]
800002c0:	58 08       	cp.w	r8,0
800002c2:	c1 61       	brne	800002ee <ROSA_semaphoreLock+0x4a>
	{
		// If the semaphore is not locked, executing task can lock it
		// Task inherits the priority ceiling of the semaphore
		// Dynamic priority of the task is changed if priority of the task is lower than the ceiling of the semaphore
		
		taskUninstall(EXECTASK);
800002c4:	4a 18       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002c6:	70 08       	ld.w	r8,r8[0x0]
800002c8:	10 9c       	mov	r12,r8
800002ca:	f0 1f 00 21 	mcall	8000034c <ROSA_semaphoreLock+0xa8>
		semaphoreSetCurrentTask(handle, EXECTASK);
800002ce:	49 f8       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002d0:	70 08       	ld.w	r8,r8[0x0]
800002d2:	10 9b       	mov	r11,r8
800002d4:	ee fc ff f8 	ld.w	r12,r7[-8]
800002d8:	f0 1f 00 1e 	mcall	80000350 <ROSA_semaphoreLock+0xac>
		taskInstall(EXECTASK);
800002dc:	49 b8       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002de:	70 08       	ld.w	r8,r8[0x0]
800002e0:	10 9c       	mov	r12,r8
800002e2:	f0 1f 00 1d 	mcall	80000354 <ROSA_semaphoreLock+0xb0>

		result = 1;
800002e6:	30 18       	mov	r8,1
800002e8:	ef 58 ff fe 	st.h	r7[-2],r8
800002ec:	c2 28       	rjmp	80000330 <ROSA_semaphoreLock+0x8c>
	}
	else if( EXECTASK != handle->current_task )
800002ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002f2:	70 19       	ld.w	r9,r8[0x4]
800002f4:	49 58       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002f6:	70 08       	ld.w	r8,r8[0x0]
800002f8:	10 39       	cp.w	r9,r8
800002fa:	c1 10       	breq	8000031c <ROSA_semaphoreLock+0x78>
	{
		// If the semaphore is locked, executing task cannot lock it
		// Task is put into the waiting queue for the specific semaphore
		// Task is also removed from the ready list
		
		taskUninstall(EXECTASK);
800002fc:	49 38       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
800002fe:	70 08       	ld.w	r8,r8[0x0]
80000300:	10 9c       	mov	r12,r8
80000302:	f0 1f 00 13 	mcall	8000034c <ROSA_semaphoreLock+0xa8>
		semaphoreBlockTask(handle, EXECTASK);
80000306:	49 18       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
80000308:	70 08       	ld.w	r8,r8[0x0]
8000030a:	10 9b       	mov	r11,r8
8000030c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000310:	f0 1f 00 12 	mcall	80000358 <ROSA_semaphoreLock+0xb4>
		
		result = 1;
80000314:	30 18       	mov	r8,1
80000316:	ef 58 ff fe 	st.h	r7[-2],r8
8000031a:	c0 b8       	rjmp	80000330 <ROSA_semaphoreLock+0x8c>
	}
	else if( EXECTASK == handle->current_task)
8000031c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000320:	70 19       	ld.w	r9,r8[0x4]
80000322:	48 a8       	lddpc	r8,80000348 <ROSA_semaphoreLock+0xa4>
80000324:	70 08       	ld.w	r8,r8[0x0]
80000326:	10 39       	cp.w	r9,r8
80000328:	c0 41       	brne	80000330 <ROSA_semaphoreLock+0x8c>
	{
		result = 2;
8000032a:	30 28       	mov	r8,2
8000032c:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	interruptEnable();
80000330:	f0 1f 00 0b 	mcall	8000035c <ROSA_semaphoreLock+0xb8>
	ROSA_yield();
80000334:	f0 1f 00 0b 	mcall	80000360 <ROSA_semaphoreLock+0xbc>
	
	return result;
80000338:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000033c:	10 9c       	mov	r12,r8
8000033e:	2f ed       	sub	sp,-8
80000340:	e3 cd 80 80 	ldm	sp++,r7,pc
80000344:	80 00       	ld.sh	r0,r0[0x0]
80000346:	25 66       	sub	r6,86
80000348:	00 00       	add	r0,r0
8000034a:	05 90       	ld.ub	r0,r2[0x1]
8000034c:	80 00       	ld.sh	r0,r0[0x0]
8000034e:	0c fc       	st.b	--r6,r12
80000350:	80 00       	ld.sh	r0,r0[0x0]
80000352:	01 20       	ld.uh	r0,r0++
80000354:	80 00       	ld.sh	r0,r0[0x0]
80000356:	09 d8       	ld.ub	r8,r4[0x5]
80000358:	80 00       	ld.sh	r0,r0[0x0]
8000035a:	01 b4       	ld.ub	r4,r0[0x3]
8000035c:	80 00       	ld.sh	r0,r0[0x0]
8000035e:	25 6a       	sub	r10,86
80000360:	80 00       	ld.sh	r0,r0[0x0]
80000362:	12 0a       	add	r10,r9

80000364 <ROSA_semaphoreUnlock>:

int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t handle)
{
80000364:	eb cd 40 80 	pushm	r7,lr
80000368:	1a 97       	mov	r7,sp
8000036a:	20 3d       	sub	sp,12
8000036c:	ef 4c ff f4 	st.w	r7[-12],r12
	interruptDisable();
80000370:	f0 1f 00 21 	mcall	800003f4 <ROSA_semaphoreUnlock+0x90>
	int16_t result = 0;
80000374:	30 08       	mov	r8,0
80000376:	ef 58 ff fa 	st.h	r7[-6],r8
	if( handle->current_task == EXECTASK )
8000037a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000037e:	70 19       	ld.w	r9,r8[0x4]
80000380:	49 e8       	lddpc	r8,800003f8 <ROSA_semaphoreUnlock+0x94>
80000382:	70 08       	ld.w	r8,r8[0x0]
80000384:	10 39       	cp.w	r9,r8
80000386:	c2 c1       	brne	800003de <ROSA_semaphoreUnlock+0x7a>
	{
		// If the semaphore is locked, unlock it, change the priority of the task to the last effective priority
		// Set the pointer to the current task to NULL
		
		taskUninstall(EXECTASK);			// take EXECTASK out of TCBLIST
80000388:	49 c8       	lddpc	r8,800003f8 <ROSA_semaphoreUnlock+0x94>
8000038a:	70 08       	ld.w	r8,r8[0x0]
8000038c:	10 9c       	mov	r12,r8
8000038e:	f0 1f 00 1c 	mcall	800003fc <ROSA_semaphoreUnlock+0x98>
		semaphoreUnsetCurrentTask(handle);	// update effective priority and current_task metadata
80000392:	ee fc ff f4 	ld.w	r12,r7[-12]
80000396:	f0 1f 00 1b 	mcall	80000400 <ROSA_semaphoreUnlock+0x9c>
		taskInstall(EXECTASK);				// put EXECTASK back in TCBLIST
8000039a:	49 88       	lddpc	r8,800003f8 <ROSA_semaphoreUnlock+0x94>
8000039c:	70 08       	ld.w	r8,r8[0x0]
8000039e:	10 9c       	mov	r12,r8
800003a0:	f0 1f 00 19 	mcall	80000404 <ROSA_semaphoreUnlock+0xa0>
		
		if(handle->BLOCKEDLIST != NULL)
800003a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003a8:	70 28       	ld.w	r8,r8[0x8]
800003aa:	58 08       	cp.w	r8,0
800003ac:	c1 60       	breq	800003d8 <ROSA_semaphoreUnlock+0x74>
		{
			// If there are still some task waiting to take the semaphore, take the first one from the waiting queue
			// Put the task back to ready list
		
			tcb * temp = handle->BLOCKEDLIST;
800003ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003b2:	70 28       	ld.w	r8,r8[0x8]
800003b4:	ef 48 ff fc 	st.w	r7[-4],r8
			semaphoreUnblockTask( handle, temp );
800003b8:	ee fb ff fc 	ld.w	r11,r7[-4]
800003bc:	ee fc ff f4 	ld.w	r12,r7[-12]
800003c0:	f0 1f 00 12 	mcall	80000408 <ROSA_semaphoreUnlock+0xa4>
			semaphoreSetCurrentTask( handle, temp );
800003c4:	ee fb ff fc 	ld.w	r11,r7[-4]
800003c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800003cc:	f0 1f 00 10 	mcall	8000040c <ROSA_semaphoreUnlock+0xa8>
		
			taskInstall( temp );
800003d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800003d4:	f0 1f 00 0c 	mcall	80000404 <ROSA_semaphoreUnlock+0xa0>
		}

		result = 1;
800003d8:	30 18       	mov	r8,1
800003da:	ef 58 ff fa 	st.h	r7[-6],r8
	}

	interruptEnable();
800003de:	f0 1f 00 0d 	mcall	80000410 <ROSA_semaphoreUnlock+0xac>
	ROSA_yield();
800003e2:	f0 1f 00 0d 	mcall	80000414 <ROSA_semaphoreUnlock+0xb0>
	
	return result;
800003e6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
800003ea:	10 9c       	mov	r12,r8
800003ec:	2f dd       	sub	sp,-12
800003ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800003f2:	00 00       	add	r0,r0
800003f4:	80 00       	ld.sh	r0,r0[0x0]
800003f6:	25 66       	sub	r6,86
800003f8:	00 00       	add	r0,r0
800003fa:	05 90       	ld.ub	r0,r2[0x1]
800003fc:	80 00       	ld.sh	r0,r0[0x0]
800003fe:	0c fc       	st.b	--r6,r12
80000400:	80 00       	ld.sh	r0,r0[0x0]
80000402:	01 7e       	ld.ub	lr,--r0
80000404:	80 00       	ld.sh	r0,r0[0x0]
80000406:	09 d8       	ld.ub	r8,r4[0x5]
80000408:	80 00       	ld.sh	r0,r0[0x0]
8000040a:	02 34       	cp.w	r4,r1
8000040c:	80 00       	ld.sh	r0,r0[0x0]
8000040e:	01 20       	ld.uh	r0,r0++
80000410:	80 00       	ld.sh	r0,r0[0x0]
80000412:	25 6a       	sub	r10,86
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	12 0a       	add	r10,r9

80000418 <semaphoreEvictCurrentTask>:

int16_t semaphoreEvictCurrentTask(ROSA_semaphoreHandle_t handle)
{
80000418:	eb cd 40 80 	pushm	r7,lr
8000041c:	1a 97       	mov	r7,sp
8000041e:	20 3d       	sub	sp,12
80000420:	ef 4c ff f4 	st.w	r7[-12],r12
	int16_t result = 0;
80000424:	30 08       	mov	r8,0
80000426:	ef 58 ff fa 	st.h	r7[-6],r8
	
	tcb * temp;
	
	// if the semaphore exists and has a task is holding it
	if( handle && handle->current_task != NULL )
8000042a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000042e:	58 08       	cp.w	r8,0
80000430:	c2 70       	breq	8000047e <semaphoreEvictCurrentTask+0x66>
80000432:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000436:	70 18       	ld.w	r8,r8[0x4]
80000438:	58 08       	cp.w	r8,0
8000043a:	c2 20       	breq	8000047e <semaphoreEvictCurrentTask+0x66>
	{
		handle->current_task = NULL;
8000043c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000440:	30 09       	mov	r9,0
80000442:	91 19       	st.w	r8[0x4],r9
		
		if( handle->BLOCKEDLIST != NULL )
80000444:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000448:	70 28       	ld.w	r8,r8[0x8]
8000044a:	58 08       	cp.w	r8,0
8000044c:	c1 60       	breq	80000478 <semaphoreEvictCurrentTask+0x60>
		{
			temp = handle->BLOCKEDLIST;
8000044e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000452:	70 28       	ld.w	r8,r8[0x8]
80000454:	ef 48 ff fc 	st.w	r7[-4],r8
			semaphoreUnblockTask(handle, temp);
80000458:	ee fb ff fc 	ld.w	r11,r7[-4]
8000045c:	ee fc ff f4 	ld.w	r12,r7[-12]
80000460:	f0 1f 00 0b 	mcall	8000048c <semaphoreEvictCurrentTask+0x74>
			semaphoreSetCurrentTask(handle, temp);
80000464:	ee fb ff fc 	ld.w	r11,r7[-4]
80000468:	ee fc ff f4 	ld.w	r12,r7[-12]
8000046c:	f0 1f 00 09 	mcall	80000490 <semaphoreEvictCurrentTask+0x78>
			taskInstall(temp);
80000470:	ee fc ff fc 	ld.w	r12,r7[-4]
80000474:	f0 1f 00 08 	mcall	80000494 <semaphoreEvictCurrentTask+0x7c>
		}
		
		result = 1;
80000478:	30 18       	mov	r8,1
8000047a:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	return result;
8000047e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80000482:	10 9c       	mov	r12,r8
80000484:	2f dd       	sub	sp,-12
80000486:	e3 cd 80 80 	ldm	sp++,r7,pc
8000048a:	00 00       	add	r0,r0
8000048c:	80 00       	ld.sh	r0,r0[0x0]
8000048e:	02 34       	cp.w	r4,r1
80000490:	80 00       	ld.sh	r0,r0[0x0]
80000492:	01 20       	ld.uh	r0,r0++
80000494:	80 00       	ld.sh	r0,r0[0x0]
80000496:	09 d8       	ld.ub	r8,r4[0x5]

80000498 <usart_options>:
80000498:	00 00 e1 00 08 04 00 00 00 00 00 00 68 6f 67 53     ............hogS
800004a8:	00 00 00 00 74 73 6b 31 00 00 00 00 74 73 6b 32     ....tsk1....tsk2
800004b8:	00 00 00 00 74 73 6b 33 00 00 00 00 74 73 6b 34     ....tsk3....tsk4
800004c8:	00 00 00 00 61 72 62 74 00 00 00 00                 ....arbt....

800004d4 <hog_semaphores_task>:
ROSA_semaphoreHandle_t S2 = NULL;
ROSA_semaphoreHandle_t S3 = NULL;
ROSA_semaphoreHandle_t S4 = NULL;

void hog_semaphores_task(void)
{
800004d4:	eb cd 40 80 	pushm	r7,lr
800004d8:	1a 97       	mov	r7,sp
	while(1)
	{
		ledOn(LED6_GPIO);
800004da:	33 5c       	mov	r12,53
800004dc:	f0 1f 00 1e 	mcall	80000554 <hog_semaphores_task+0x80>
		ROSA_semaphoreLock(S4);
800004e0:	49 e8       	lddpc	r8,80000558 <hog_semaphores_task+0x84>
800004e2:	70 08       	ld.w	r8,r8[0x0]
800004e4:	10 9c       	mov	r12,r8
800004e6:	f0 1f 00 1e 	mcall	8000055c <hog_semaphores_task+0x88>
		ROSA_delay(300);
800004ea:	e0 6a 01 2c 	mov	r10,300
800004ee:	30 0b       	mov	r11,0
800004f0:	f0 1f 00 1c 	mcall	80000560 <hog_semaphores_task+0x8c>
		ROSA_semaphoreLock(S1);
800004f4:	49 c8       	lddpc	r8,80000564 <hog_semaphores_task+0x90>
800004f6:	70 08       	ld.w	r8,r8[0x0]
800004f8:	10 9c       	mov	r12,r8
800004fa:	f0 1f 00 19 	mcall	8000055c <hog_semaphores_task+0x88>
		ROSA_delay(300);
800004fe:	e0 6a 01 2c 	mov	r10,300
80000502:	30 0b       	mov	r11,0
80000504:	f0 1f 00 17 	mcall	80000560 <hog_semaphores_task+0x8c>
		ROSA_semaphoreLock(S2);
80000508:	49 88       	lddpc	r8,80000568 <hog_semaphores_task+0x94>
8000050a:	70 08       	ld.w	r8,r8[0x0]
8000050c:	10 9c       	mov	r12,r8
8000050e:	f0 1f 00 14 	mcall	8000055c <hog_semaphores_task+0x88>
		ROSA_delay(300);
80000512:	e0 6a 01 2c 	mov	r10,300
80000516:	30 0b       	mov	r11,0
80000518:	f0 1f 00 12 	mcall	80000560 <hog_semaphores_task+0x8c>
		ROSA_semaphoreLock(S3);
8000051c:	49 48       	lddpc	r8,8000056c <hog_semaphores_task+0x98>
8000051e:	70 08       	ld.w	r8,r8[0x0]
80000520:	10 9c       	mov	r12,r8
80000522:	f0 1f 00 0f 	mcall	8000055c <hog_semaphores_task+0x88>
		ROSA_delay(300);
80000526:	e0 6a 01 2c 	mov	r10,300
8000052a:	30 0b       	mov	r11,0
8000052c:	f0 1f 00 0d 	mcall	80000560 <hog_semaphores_task+0x8c>
		
		ROSA_delay(5000);
80000530:	e0 6a 13 88 	mov	r10,5000
80000534:	30 0b       	mov	r11,0
80000536:	f0 1f 00 0b 	mcall	80000560 <hog_semaphores_task+0x8c>
		
		ledOff(LED6_GPIO);
8000053a:	33 5c       	mov	r12,53
8000053c:	f0 1f 00 0d 	mcall	80000570 <hog_semaphores_task+0x9c>
		hog_semaphores_task_handle = NULL;
80000540:	48 d8       	lddpc	r8,80000574 <hog_semaphores_task+0xa0>
80000542:	30 09       	mov	r9,0
80000544:	91 09       	st.w	r8[0x0],r9
		ROSA_taskDelete(hog_semaphores_task_handle);
80000546:	48 c8       	lddpc	r8,80000574 <hog_semaphores_task+0xa0>
80000548:	70 08       	ld.w	r8,r8[0x0]
8000054a:	10 9c       	mov	r12,r8
8000054c:	f0 1f 00 0b 	mcall	80000578 <hog_semaphores_task+0xa4>
	}
80000550:	cc 5b       	rjmp	800004da <hog_semaphores_task+0x6>
80000552:	00 00       	add	r0,r0
80000554:	80 00       	ld.sh	r0,r0[0x0]
80000556:	16 34       	cp.w	r4,r11
80000558:	00 00       	add	r0,r0
8000055a:	05 2c       	ld.uh	r12,r2++
8000055c:	80 00       	ld.sh	r0,r0[0x0]
8000055e:	02 a4       	st.w	r1++,r4
80000560:	80 00       	ld.sh	r0,r0[0x0]
80000562:	0e 68       	and	r8,r7
80000564:	00 00       	add	r0,r0
80000566:	05 20       	ld.uh	r0,r2++
80000568:	00 00       	add	r0,r0
8000056a:	05 24       	ld.uh	r4,r2++
8000056c:	00 00       	add	r0,r0
8000056e:	05 28       	ld.uh	r8,r2++
80000570:	80 00       	ld.sh	r0,r0[0x0]
80000572:	16 54       	eor	r4,r11
80000574:	00 00       	add	r0,r0
80000576:	05 68       	ld.uh	r8,--r2
80000578:	80 00       	ld.sh	r0,r0[0x0]
8000057a:	0e e4       	st.h	--r7,r4

8000057c <task1>:
}

void task1(void)
{
8000057c:	eb cd 40 80 	pushm	r7,lr
80000580:	1a 97       	mov	r7,sp
80000582:	20 2d       	sub	sp,8
	uint64_t time = ROSA_getTickCount();
80000584:	f0 1f 00 0f 	mcall	800005c0 <task1+0x44>
80000588:	14 98       	mov	r8,r10
8000058a:	16 99       	mov	r9,r11
8000058c:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S1);
80000590:	48 d8       	lddpc	r8,800005c4 <task1+0x48>
80000592:	70 08       	ld.w	r8,r8[0x0]
80000594:	10 9c       	mov	r12,r8
80000596:	f0 1f 00 0d 	mcall	800005c8 <task1+0x4c>
		ledToggle(LED0_GPIO);
8000059a:	33 bc       	mov	r12,59
8000059c:	f0 1f 00 0c 	mcall	800005cc <task1+0x50>
		time = ROSA_getTickCount();
800005a0:	f0 1f 00 08 	mcall	800005c0 <task1+0x44>
800005a4:	14 98       	mov	r8,r10
800005a6:	16 99       	mov	r9,r11
800005a8:	ee e9 ff f8 	st.d	r7[-8],r8
		ROSA_delay(100);
800005ac:	36 4a       	mov	r10,100
800005ae:	30 0b       	mov	r11,0
800005b0:	f0 1f 00 08 	mcall	800005d0 <task1+0x54>
		ROSA_semaphoreUnlock(S1);
800005b4:	48 48       	lddpc	r8,800005c4 <task1+0x48>
800005b6:	70 08       	ld.w	r8,r8[0x0]
800005b8:	10 9c       	mov	r12,r8
800005ba:	f0 1f 00 07 	mcall	800005d4 <task1+0x58>
	}
800005be:	ce 9b       	rjmp	80000590 <task1+0x14>
800005c0:	80 00       	ld.sh	r0,r0[0x0]
800005c2:	09 54       	ld.sh	r4,--r4
800005c4:	00 00       	add	r0,r0
800005c6:	05 20       	ld.uh	r0,r2++
800005c8:	80 00       	ld.sh	r0,r0[0x0]
800005ca:	02 a4       	st.w	r1++,r4
800005cc:	80 00       	ld.sh	r0,r0[0x0]
800005ce:	16 74       	tst	r4,r11
800005d0:	80 00       	ld.sh	r0,r0[0x0]
800005d2:	0e 68       	and	r8,r7
800005d4:	80 00       	ld.sh	r0,r0[0x0]
800005d6:	03 64       	ld.uh	r4,--r1

800005d8 <task2>:
}

void task2(void)
{
800005d8:	eb cd 40 80 	pushm	r7,lr
800005dc:	1a 97       	mov	r7,sp
800005de:	20 2d       	sub	sp,8
	ROSA_delay(5);
800005e0:	30 5a       	mov	r10,5
800005e2:	30 0b       	mov	r11,0
800005e4:	f0 1f 00 10 	mcall	80000624 <task2+0x4c>
	uint64_t time = ROSA_getTickCount();
800005e8:	f0 1f 00 10 	mcall	80000628 <task2+0x50>
800005ec:	14 98       	mov	r8,r10
800005ee:	16 99       	mov	r9,r11
800005f0:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S2);
800005f4:	48 e8       	lddpc	r8,8000062c <task2+0x54>
800005f6:	70 08       	ld.w	r8,r8[0x0]
800005f8:	10 9c       	mov	r12,r8
800005fa:	f0 1f 00 0e 	mcall	80000630 <task2+0x58>
		ledToggle(LED1_GPIO);
800005fe:	33 cc       	mov	r12,60
80000600:	f0 1f 00 0d 	mcall	80000634 <task2+0x5c>
		time = ROSA_getTickCount();
80000604:	f0 1f 00 09 	mcall	80000628 <task2+0x50>
80000608:	14 98       	mov	r8,r10
8000060a:	16 99       	mov	r9,r11
8000060c:	ee e9 ff f8 	st.d	r7[-8],r8
		ROSA_delay(100);
80000610:	36 4a       	mov	r10,100
80000612:	30 0b       	mov	r11,0
80000614:	f0 1f 00 04 	mcall	80000624 <task2+0x4c>
		ROSA_semaphoreUnlock(S2);
80000618:	48 58       	lddpc	r8,8000062c <task2+0x54>
8000061a:	70 08       	ld.w	r8,r8[0x0]
8000061c:	10 9c       	mov	r12,r8
8000061e:	f0 1f 00 07 	mcall	80000638 <task2+0x60>
	}
80000622:	ce 9b       	rjmp	800005f4 <task2+0x1c>
80000624:	80 00       	ld.sh	r0,r0[0x0]
80000626:	0e 68       	and	r8,r7
80000628:	80 00       	ld.sh	r0,r0[0x0]
8000062a:	09 54       	ld.sh	r4,--r4
8000062c:	00 00       	add	r0,r0
8000062e:	05 24       	ld.uh	r4,r2++
80000630:	80 00       	ld.sh	r0,r0[0x0]
80000632:	02 a4       	st.w	r1++,r4
80000634:	80 00       	ld.sh	r0,r0[0x0]
80000636:	16 74       	tst	r4,r11
80000638:	80 00       	ld.sh	r0,r0[0x0]
8000063a:	03 64       	ld.uh	r4,--r1

8000063c <task3>:
}

void task3(void)
{
8000063c:	eb cd 40 80 	pushm	r7,lr
80000640:	1a 97       	mov	r7,sp
80000642:	20 2d       	sub	sp,8
	ROSA_delay(10);
80000644:	30 aa       	mov	r10,10
80000646:	30 0b       	mov	r11,0
80000648:	f0 1f 00 10 	mcall	80000688 <task3+0x4c>
	uint64_t time = ROSA_getTickCount();
8000064c:	f0 1f 00 10 	mcall	8000068c <task3+0x50>
80000650:	14 98       	mov	r8,r10
80000652:	16 99       	mov	r9,r11
80000654:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S3);
80000658:	48 e8       	lddpc	r8,80000690 <task3+0x54>
8000065a:	70 08       	ld.w	r8,r8[0x0]
8000065c:	10 9c       	mov	r12,r8
8000065e:	f0 1f 00 0e 	mcall	80000694 <task3+0x58>
		ledToggle(LED2_GPIO);
80000662:	33 dc       	mov	r12,61
80000664:	f0 1f 00 0d 	mcall	80000698 <task3+0x5c>
		time = ROSA_getTickCount();
80000668:	f0 1f 00 09 	mcall	8000068c <task3+0x50>
8000066c:	14 98       	mov	r8,r10
8000066e:	16 99       	mov	r9,r11
80000670:	ee e9 ff f8 	st.d	r7[-8],r8
		ROSA_delay(100);
80000674:	36 4a       	mov	r10,100
80000676:	30 0b       	mov	r11,0
80000678:	f0 1f 00 04 	mcall	80000688 <task3+0x4c>
		ROSA_semaphoreUnlock(S3);
8000067c:	48 58       	lddpc	r8,80000690 <task3+0x54>
8000067e:	70 08       	ld.w	r8,r8[0x0]
80000680:	10 9c       	mov	r12,r8
80000682:	f0 1f 00 07 	mcall	8000069c <task3+0x60>
	}
80000686:	ce 9b       	rjmp	80000658 <task3+0x1c>
80000688:	80 00       	ld.sh	r0,r0[0x0]
8000068a:	0e 68       	and	r8,r7
8000068c:	80 00       	ld.sh	r0,r0[0x0]
8000068e:	09 54       	ld.sh	r4,--r4
80000690:	00 00       	add	r0,r0
80000692:	05 28       	ld.uh	r8,r2++
80000694:	80 00       	ld.sh	r0,r0[0x0]
80000696:	02 a4       	st.w	r1++,r4
80000698:	80 00       	ld.sh	r0,r0[0x0]
8000069a:	16 74       	tst	r4,r11
8000069c:	80 00       	ld.sh	r0,r0[0x0]
8000069e:	03 64       	ld.uh	r4,--r1

800006a0 <task4>:
}

void task4(void)
{
800006a0:	eb cd 40 80 	pushm	r7,lr
800006a4:	1a 97       	mov	r7,sp
800006a6:	20 2d       	sub	sp,8
	ROSA_delay(15);
800006a8:	30 fa       	mov	r10,15
800006aa:	30 0b       	mov	r11,0
800006ac:	f0 1f 00 10 	mcall	800006ec <task4+0x4c>
	uint64_t time = ROSA_getTickCount();
800006b0:	f0 1f 00 10 	mcall	800006f0 <task4+0x50>
800006b4:	14 98       	mov	r8,r10
800006b6:	16 99       	mov	r9,r11
800006b8:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1)
	{
		ROSA_semaphoreLock(S4);
800006bc:	48 e8       	lddpc	r8,800006f4 <task4+0x54>
800006be:	70 08       	ld.w	r8,r8[0x0]
800006c0:	10 9c       	mov	r12,r8
800006c2:	f0 1f 00 0e 	mcall	800006f8 <task4+0x58>
		ledToggle(LED3_GPIO);
800006c6:	33 ec       	mov	r12,62
800006c8:	f0 1f 00 0d 	mcall	800006fc <task4+0x5c>
		time = ROSA_getTickCount();
800006cc:	f0 1f 00 09 	mcall	800006f0 <task4+0x50>
800006d0:	14 98       	mov	r8,r10
800006d2:	16 99       	mov	r9,r11
800006d4:	ee e9 ff f8 	st.d	r7[-8],r8
		ROSA_delay(100);
800006d8:	36 4a       	mov	r10,100
800006da:	30 0b       	mov	r11,0
800006dc:	f0 1f 00 04 	mcall	800006ec <task4+0x4c>
		ROSA_semaphoreUnlock(S4);
800006e0:	48 58       	lddpc	r8,800006f4 <task4+0x54>
800006e2:	70 08       	ld.w	r8,r8[0x0]
800006e4:	10 9c       	mov	r12,r8
800006e6:	f0 1f 00 07 	mcall	80000700 <task4+0x60>
	}
800006ea:	ce 9b       	rjmp	800006bc <task4+0x1c>
800006ec:	80 00       	ld.sh	r0,r0[0x0]
800006ee:	0e 68       	and	r8,r7
800006f0:	80 00       	ld.sh	r0,r0[0x0]
800006f2:	09 54       	ld.sh	r4,--r4
800006f4:	00 00       	add	r0,r0
800006f6:	05 2c       	ld.uh	r12,r2++
800006f8:	80 00       	ld.sh	r0,r0[0x0]
800006fa:	02 a4       	st.w	r1++,r4
800006fc:	80 00       	ld.sh	r0,r0[0x0]
800006fe:	16 74       	tst	r4,r11
80000700:	80 00       	ld.sh	r0,r0[0x0]
80000702:	03 64       	ld.uh	r4,--r1

80000704 <arbiter_task>:
}

void arbiter_task(void)
{
80000704:	eb cd 40 80 	pushm	r7,lr
80000708:	1a 97       	mov	r7,sp
8000070a:	c0 28       	rjmp	8000070e <arbiter_task+0xa>
		ROSA_delay(5000);
		if( hog_semaphores_task_handle == NULL )
		{
			ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 2);
		}
	}
8000070c:	d7 03       	nop

void arbiter_task(void)
{
	while(1)
	{
		ROSA_delay(5000);
8000070e:	e0 6a 13 88 	mov	r10,5000
80000712:	30 0b       	mov	r11,0
80000714:	f0 1f 00 07 	mcall	80000730 <arbiter_task+0x2c>
		if( hog_semaphores_task_handle == NULL )
80000718:	48 78       	lddpc	r8,80000734 <arbiter_task+0x30>
8000071a:	70 08       	ld.w	r8,r8[0x0]
8000071c:	58 08       	cp.w	r8,0
8000071e:	cf 71       	brne	8000070c <arbiter_task+0x8>
		{
			ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 2);
80000720:	30 28       	mov	r8,2
80000722:	34 09       	mov	r9,64
80000724:	48 5a       	lddpc	r10,80000738 <arbiter_task+0x34>
80000726:	48 6b       	lddpc	r11,8000073c <arbiter_task+0x38>
80000728:	48 3c       	lddpc	r12,80000734 <arbiter_task+0x30>
8000072a:	f0 1f 00 06 	mcall	80000740 <arbiter_task+0x3c>
		}
	}
8000072e:	cf 0b       	rjmp	8000070e <arbiter_task+0xa>
80000730:	80 00       	ld.sh	r0,r0[0x0]
80000732:	0e 68       	and	r8,r7
80000734:	00 00       	add	r0,r0
80000736:	05 68       	ld.uh	r8,--r2
80000738:	80 00       	ld.sh	r0,r0[0x0]
8000073a:	04 d4       	st.w	--r2,r4
8000073c:	80 00       	ld.sh	r0,r0[0x0]
8000073e:	04 a4       	st.w	r2++,r4
80000740:	80 00       	ld.sh	r0,r0[0x0]
80000742:	0a d4       	st.w	--r5,r4

80000744 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000744:	eb cd 40 80 	pushm	r7,lr
80000748:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
8000074a:	f0 1f 00 1e 	mcall	800007c0 <main+0x7c>
	
	//ROSA_taskCreate(& hog_semaphores_task_handle, "hogS", hog_semaphores_task, STACK_SIZE, 2);
	ROSA_taskCreate(& task1_handle,					"tsk1", task1, STACK_SIZE, 3);
8000074e:	30 38       	mov	r8,3
80000750:	34 09       	mov	r9,64
80000752:	49 da       	lddpc	r10,800007c4 <main+0x80>
80000754:	49 db       	lddpc	r11,800007c8 <main+0x84>
80000756:	49 ec       	lddpc	r12,800007cc <main+0x88>
80000758:	f0 1f 00 1e 	mcall	800007d0 <main+0x8c>
	ROSA_taskCreate(& task2_handle,					"tsk2", task2, STACK_SIZE, 3);
8000075c:	30 38       	mov	r8,3
8000075e:	34 09       	mov	r9,64
80000760:	49 da       	lddpc	r10,800007d4 <main+0x90>
80000762:	49 eb       	lddpc	r11,800007d8 <main+0x94>
80000764:	49 ec       	lddpc	r12,800007dc <main+0x98>
80000766:	f0 1f 00 1b 	mcall	800007d0 <main+0x8c>
	ROSA_taskCreate(& task3_handle,					"tsk3", task3, STACK_SIZE, 3);
8000076a:	30 38       	mov	r8,3
8000076c:	34 09       	mov	r9,64
8000076e:	49 da       	lddpc	r10,800007e0 <main+0x9c>
80000770:	49 db       	lddpc	r11,800007e4 <main+0xa0>
80000772:	49 ec       	lddpc	r12,800007e8 <main+0xa4>
80000774:	f0 1f 00 17 	mcall	800007d0 <main+0x8c>
	ROSA_taskCreate(& task4_handle,					"tsk4", task4, STACK_SIZE, 3);
80000778:	30 38       	mov	r8,3
8000077a:	34 09       	mov	r9,64
8000077c:	49 ca       	lddpc	r10,800007ec <main+0xa8>
8000077e:	49 db       	lddpc	r11,800007f0 <main+0xac>
80000780:	49 dc       	lddpc	r12,800007f4 <main+0xb0>
80000782:	f0 1f 00 14 	mcall	800007d0 <main+0x8c>
	ROSA_taskCreate(& arbiter_task_handle,			"arbt", arbiter_task, STACK_SIZE, 1);
80000786:	30 18       	mov	r8,1
80000788:	34 09       	mov	r9,64
8000078a:	49 ca       	lddpc	r10,800007f8 <main+0xb4>
8000078c:	49 cb       	lddpc	r11,800007fc <main+0xb8>
8000078e:	49 dc       	lddpc	r12,80000800 <main+0xbc>
80000790:	f0 1f 00 10 	mcall	800007d0 <main+0x8c>
	
	//ROSA_taskCreate(& light1_handle, "lgt1", light1, STACK_SIZE, 1);
	//ROSA_taskCreate(& light2_handle, "lgt2", light2, STACK_SIZE, 1);
	
	ROSA_semaphoreCreate(& S1, 2);
80000794:	30 2b       	mov	r11,2
80000796:	49 cc       	lddpc	r12,80000804 <main+0xc0>
80000798:	f0 1f 00 1c 	mcall	80000808 <main+0xc4>
	ROSA_semaphoreCreate(& S2, 2);
8000079c:	30 2b       	mov	r11,2
8000079e:	49 cc       	lddpc	r12,8000080c <main+0xc8>
800007a0:	f0 1f 00 1a 	mcall	80000808 <main+0xc4>
	ROSA_semaphoreCreate(& S3, 2);
800007a4:	30 2b       	mov	r11,2
800007a6:	49 bc       	lddpc	r12,80000810 <main+0xcc>
800007a8:	f0 1f 00 18 	mcall	80000808 <main+0xc4>
	ROSA_semaphoreCreate(& S4, 1);
800007ac:	30 1b       	mov	r11,1
800007ae:	49 ac       	lddpc	r12,80000814 <main+0xd0>
800007b0:	f0 1f 00 16 	mcall	80000808 <main+0xc4>
	
	timerStart();
800007b4:	f0 1f 00 19 	mcall	80000818 <main+0xd4>
	ROSA_start();
800007b8:	f0 1f 00 19 	mcall	8000081c <main+0xd8>
	/* Execution will never return here */
	while(1);
800007bc:	c0 08       	rjmp	800007bc <main+0x78>
800007be:	00 00       	add	r0,r0
800007c0:	80 00       	ld.sh	r0,r0[0x0]
800007c2:	08 7c       	tst	r12,r4
800007c4:	80 00       	ld.sh	r0,r0[0x0]
800007c6:	05 7c       	ld.ub	r12,--r2
800007c8:	80 00       	ld.sh	r0,r0[0x0]
800007ca:	04 ac       	st.w	r2++,r12
800007cc:	00 00       	add	r0,r0
800007ce:	05 6c       	ld.uh	r12,--r2
800007d0:	80 00       	ld.sh	r0,r0[0x0]
800007d2:	0a d4       	st.w	--r5,r4
800007d4:	80 00       	ld.sh	r0,r0[0x0]
800007d6:	05 d8       	ld.ub	r8,r2[0x5]
800007d8:	80 00       	ld.sh	r0,r0[0x0]
800007da:	04 b4       	st.h	r2++,r4
800007dc:	00 00       	add	r0,r0
800007de:	05 70       	ld.ub	r0,--r2
800007e0:	80 00       	ld.sh	r0,r0[0x0]
800007e2:	06 3c       	cp.w	r12,r3
800007e4:	80 00       	ld.sh	r0,r0[0x0]
800007e6:	04 bc       	st.h	r2++,r12
800007e8:	00 00       	add	r0,r0
800007ea:	05 78       	ld.ub	r8,--r2
800007ec:	80 00       	ld.sh	r0,r0[0x0]
800007ee:	06 a0       	st.w	r3++,r0
800007f0:	80 00       	ld.sh	r0,r0[0x0]
800007f2:	04 c4       	st.b	r2++,r4
800007f4:	00 00       	add	r0,r0
800007f6:	05 7c       	ld.ub	r12,--r2
800007f8:	80 00       	ld.sh	r0,r0[0x0]
800007fa:	07 04       	ld.w	r4,r3++
800007fc:	80 00       	ld.sh	r0,r0[0x0]
800007fe:	04 cc       	st.b	r2++,r12
80000800:	00 00       	add	r0,r0
80000802:	05 74       	ld.ub	r4,--r2
80000804:	00 00       	add	r0,r0
80000806:	05 20       	ld.uh	r0,r2++
80000808:	80 00       	ld.sh	r0,r0[0x0]
8000080a:	00 b4       	st.h	r0++,r4
8000080c:	00 00       	add	r0,r0
8000080e:	05 24       	ld.uh	r4,r2++
80000810:	00 00       	add	r0,r0
80000812:	05 28       	ld.uh	r8,r2++
80000814:	00 00       	add	r0,r0
80000816:	05 2c       	ld.uh	r12,r2++
80000818:	80 00       	ld.sh	r0,r0[0x0]
8000081a:	19 9a       	ld.ub	r10,r12[0x1]
8000081c:	80 00       	ld.sh	r0,r0[0x0]
8000081e:	11 48       	ld.w	r8,--r8

80000820 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000820:	eb cd 40 80 	pushm	r7,lr
80000824:	1a 97       	mov	r7,sp
	interruptDisable;
	contextSaveFromISR();	  //Save the task context
80000826:	f0 1f 00 0c 	mcall	80000854 <ROSA_yieldFromISR+0x34>
	system_ticks ++;
8000082a:	48 c8       	lddpc	r8,80000858 <ROSA_yieldFromISR+0x38>
8000082c:	f0 ea 00 00 	ld.d	r10,r8[0]
80000830:	30 18       	mov	r8,1
80000832:	30 09       	mov	r9,0
80000834:	f4 08 00 08 	add	r8,r10,r8
80000838:	f6 09 00 49 	adc	r9,r11,r9
8000083c:	48 7a       	lddpc	r10,80000858 <ROSA_yieldFromISR+0x38>
8000083e:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
80000842:	f0 1f 00 07 	mcall	8000085c <ROSA_yieldFromISR+0x3c>
	contextRestoreFromISR();  //...and switch over to it.
80000846:	f0 1f 00 07 	mcall	80000860 <ROSA_yieldFromISR+0x40>
	interruptEnable();
8000084a:	f0 1f 00 07 	mcall	80000864 <ROSA_yieldFromISR+0x44>
}
8000084e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000852:	00 00       	add	r0,r0
80000854:	80 00       	ld.sh	r0,r0[0x0]
80000856:	25 7e       	sub	lr,87
80000858:	00 00       	add	r0,r0
8000085a:	05 9c       	ld.ub	r12,r2[0x1]
8000085c:	80 00       	ld.sh	r0,r0[0x0]
8000085e:	12 28       	rsub	r8,r9
80000860:	80 00       	ld.sh	r0,r0[0x0]
80000862:	25 b8       	sub	r8,91
80000864:	80 00       	ld.sh	r0,r0[0x0]
80000866:	25 6a       	sub	r10,86

80000868 <usart_options>:
80000868:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000878:	00 00 00 00                                         ....

8000087c <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
8000087c:	eb cd 40 80 	pushm	r7,lr
80000880:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000882:	f0 1f 00 21 	mcall	80000904 <ROSA_init+0x88>
	buttonInit();								//Buttons
80000886:	f0 1f 00 21 	mcall	80000908 <ROSA_init+0x8c>
	joystickInit();								//Joystick
8000088a:	f0 1f 00 21 	mcall	8000090c <ROSA_init+0x90>
	potInit();									//Potentiometer
8000088e:	f0 1f 00 21 	mcall	80000910 <ROSA_init+0x94>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000892:	e0 6a 1b 00 	mov	r10,6912
80000896:	ea 1a 00 b7 	orh	r10,0xb7
8000089a:	49 fb       	lddpc	r11,80000914 <ROSA_init+0x98>
8000089c:	fe 7c 14 00 	mov	r12,-60416
800008a0:	f0 1f 00 1e 	mcall	80000918 <ROSA_init+0x9c>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST				= NULL;
800008a4:	49 e8       	lddpc	r8,8000091c <ROSA_init+0xa0>
800008a6:	30 09       	mov	r9,0
800008a8:	91 09       	st.w	r8[0x0],r9
	SUSPENDEDLIST		= NULL;
800008aa:	49 e8       	lddpc	r8,80000920 <ROSA_init+0xa4>
800008ac:	30 09       	mov	r9,0
800008ae:	91 09       	st.w	r8[0x0],r9
	EXECTASK			= NULL;
800008b0:	49 d8       	lddpc	r8,80000924 <ROSA_init+0xa8>
800008b2:	30 09       	mov	r9,0
800008b4:	91 09       	st.w	r8[0x0],r9
	ROUNDROBIN_end		= NULL;
800008b6:	49 d8       	lddpc	r8,80000928 <ROSA_init+0xac>
800008b8:	30 09       	mov	r9,0
800008ba:	91 09       	st.w	r8[0x0],r9
	SEMAPHORES			= NULL;
800008bc:	49 c8       	lddpc	r8,8000092c <ROSA_init+0xb0>
800008be:	30 09       	mov	r9,0
800008c0:	91 09       	st.w	r8[0x0],r9
	
#if IDLE_TASK_ENABLED
	IDLETASK = NULL;
800008c2:	49 c8       	lddpc	r8,80000930 <ROSA_init+0xb4>
800008c4:	30 09       	mov	r9,0
800008c6:	91 09       	st.w	r8[0x0],r9
	ROSA_taskCreate(&IDLETASK, "idle", idle, 0x40, 255);
800008c8:	e0 68 00 ff 	mov	r8,255
800008cc:	34 09       	mov	r9,64
800008ce:	49 aa       	lddpc	r10,80000934 <ROSA_init+0xb8>
800008d0:	49 ab       	lddpc	r11,80000938 <ROSA_init+0xbc>
800008d2:	49 8c       	lddpc	r12,80000930 <ROSA_init+0xb4>
800008d4:	f0 1f 00 1a 	mcall	8000093c <ROSA_init+0xc0>
	taskUninstall(IDLETASK);
800008d8:	49 68       	lddpc	r8,80000930 <ROSA_init+0xb4>
800008da:	70 08       	ld.w	r8,r8[0x0]
800008dc:	10 9c       	mov	r12,r8
800008de:	f0 1f 00 19 	mcall	80000940 <ROSA_init+0xc4>
#endif
	
	//initialize system time
	system_ticks = 0;
800008e2:	49 9a       	lddpc	r10,80000944 <ROSA_init+0xc8>
800008e4:	30 08       	mov	r8,0
800008e6:	30 09       	mov	r9,0
800008e8:	f4 e9 00 00 	st.d	r10[0],r8
	round_robin_ticks = 0;
800008ec:	49 7a       	lddpc	r10,80000948 <ROSA_init+0xcc>
800008ee:	30 08       	mov	r8,0
800008f0:	30 09       	mov	r9,0
800008f2:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Initialize the timer to 1 ms period.
	//...
	interruptInit();
800008f6:	f0 1f 00 16 	mcall	8000094c <ROSA_init+0xd0>
	timerInit(1);
800008fa:	30 1c       	mov	r12,1
800008fc:	f0 1f 00 15 	mcall	80000950 <ROSA_init+0xd4>
	//...
}
80000900:	e3 cd 80 80 	ldm	sp++,r7,pc
80000904:	80 00       	ld.sh	r0,r0[0x0]
80000906:	15 a8       	ld.ub	r8,r10[0x2]
80000908:	80 00       	ld.sh	r0,r0[0x0]
8000090a:	13 b0       	ld.ub	r0,r9[0x3]
8000090c:	80 00       	ld.sh	r0,r0[0x0]
8000090e:	13 d8       	ld.ub	r8,r9[0x5]
80000910:	80 00       	ld.sh	r0,r0[0x0]
80000912:	16 94       	mov	r4,r11
80000914:	80 00       	ld.sh	r0,r0[0x0]
80000916:	08 68       	and	r8,r4
80000918:	80 00       	ld.sh	r0,r0[0x0]
8000091a:	18 48       	or	r8,r12
8000091c:	00 00       	add	r0,r0
8000091e:	05 84       	ld.ub	r4,r2[0x0]
80000920:	00 00       	add	r0,r0
80000922:	05 88       	ld.ub	r8,r2[0x0]
80000924:	00 00       	add	r0,r0
80000926:	05 90       	ld.ub	r0,r2[0x1]
80000928:	00 00       	add	r0,r0
8000092a:	05 a4       	ld.ub	r4,r2[0x2]
8000092c:	00 00       	add	r0,r0
8000092e:	05 8c       	ld.ub	r12,r2[0x0]
80000930:	00 00       	add	r0,r0
80000932:	05 80       	ld.ub	r0,r2[0x0]
80000934:	80 00       	ld.sh	r0,r0[0x0]
80000936:	0e dc       	st.w	--r7,r12
80000938:	80 00       	ld.sh	r0,r0[0x0]
8000093a:	08 74       	tst	r4,r4
8000093c:	80 00       	ld.sh	r0,r0[0x0]
8000093e:	0a d4       	st.w	--r5,r4
80000940:	80 00       	ld.sh	r0,r0[0x0]
80000942:	0c fc       	st.b	--r6,r12
80000944:	00 00       	add	r0,r0
80000946:	05 9c       	ld.ub	r12,r2[0x1]
80000948:	00 00       	add	r0,r0
8000094a:	05 94       	ld.ub	r4,r2[0x1]
8000094c:	80 00       	ld.sh	r0,r0[0x0]
8000094e:	25 48       	sub	r8,84
80000950:	80 00       	ld.sh	r0,r0[0x0]
80000952:	19 6c       	ld.uh	r12,--r12

80000954 <ROSA_getTickCount>:

uint64_t ROSA_getTickCount(void)
{
80000954:	eb cd 40 80 	pushm	r7,lr
80000958:	1a 97       	mov	r7,sp
	return system_ticks;
8000095a:	48 48       	lddpc	r8,80000968 <ROSA_getTickCount+0x14>
8000095c:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000960:	10 9a       	mov	r10,r8
80000962:	12 9b       	mov	r11,r9
80000964:	e3 cd 80 80 	ldm	sp++,r7,pc
80000968:	00 00       	add	r0,r0
8000096a:	05 9c       	ld.ub	r12,r2[0x1]

8000096c <insert_after>:
		//ROUNDROBIN_end = NULL;
	//}
//}

uint16_t insert_after( tcb * position, tcb * new_task )
{
8000096c:	eb cd 40 80 	pushm	r7,lr
80000970:	1a 97       	mov	r7,sp
80000972:	20 3d       	sub	sp,12
80000974:	ef 4c ff f8 	st.w	r7[-8],r12
80000978:	ef 4b ff f4 	st.w	r7[-12],r11
	uint16_t result = -1;
8000097c:	3f f8       	mov	r8,-1
8000097e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( position != NULL )
80000982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000986:	58 08       	cp.w	r8,0
80000988:	c2 10       	breq	800009ca <insert_after+0x5e>
	{
		new_task->prevtcb = position;
8000098a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000098e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000992:	f1 49 00 64 	st.w	r8[100],r9
		new_task->nexttcb = position->nexttcb;
80000996:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000099a:	70 09       	ld.w	r9,r8[0x0]
8000099c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009a0:	91 09       	st.w	r8[0x0],r9
		
		position->nexttcb = new_task;
800009a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009aa:	91 09       	st.w	r8[0x0],r9
		if( new_task->nexttcb != NULL )
800009ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009b0:	70 08       	ld.w	r8,r8[0x0]
800009b2:	58 08       	cp.w	r8,0
800009b4:	c0 80       	breq	800009c4 <insert_after+0x58>
		{
			(new_task->nexttcb)->prevtcb = new_task;
800009b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009ba:	70 08       	ld.w	r8,r8[0x0]
800009bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009c0:	f1 49 00 64 	st.w	r8[100],r9
		}
		result = 1;
800009c4:	30 18       	mov	r8,1
800009c6:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	return result;
800009ca:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800009ce:	10 9c       	mov	r12,r8
800009d0:	2f dd       	sub	sp,-12
800009d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800009d6:	d7 03       	nop

800009d8 <taskInstall>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

uint16_t taskInstall(tcb * task)
{
800009d8:	eb cd 40 80 	pushm	r7,lr
800009dc:	1a 97       	mov	r7,sp
800009de:	20 3d       	sub	sp,12
800009e0:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
800009e4:	3f f8       	mov	r8,-1
800009e6:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( TCBLIST == NULL )
800009ea:	4b 98       	lddpc	r8,80000acc <taskInstall+0xf4>
800009ec:	70 08       	ld.w	r8,r8[0x0]
800009ee:	58 08       	cp.w	r8,0
800009f0:	c1 41       	brne	80000a18 <taskInstall+0x40>
	{
		TCBLIST		  = task;
800009f2:	4b 78       	lddpc	r8,80000acc <taskInstall+0xf4>
800009f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009f8:	91 09       	st.w	r8[0x0],r9
		task->nexttcb = task;
800009fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a02:	91 09       	st.w	r8[0x0],r9
		task->prevtcb = task;
80000a04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a08:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a0c:	f1 49 00 64 	st.w	r8[100],r9

#if ROUND_ROBIN_MODE_ENABLED
		ROUNDROBIN_end = NULL; // shouldn't be necessary, but is safer
#endif

		result = 1;
80000a10:	30 18       	mov	r8,1
80000a12:	ef 58 ff fa 	st.h	r7[-6],r8
80000a16:	c5 58       	rjmp	80000ac0 <taskInstall+0xe8>
	}
	//if this task should be inserted before the first task in the list
	else if( task->effective_priority < TCBLIST->effective_priority )
80000a18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a1c:	f1 39 00 69 	ld.ub	r9,r8[105]
80000a20:	4a b8       	lddpc	r8,80000acc <taskInstall+0xf4>
80000a22:	70 08       	ld.w	r8,r8[0x0]
80000a24:	f1 38 00 69 	ld.ub	r8,r8[105]
80000a28:	f0 09 18 00 	cp.b	r9,r8
80000a2c:	c1 12       	brcc	80000a4e <taskInstall+0x76>
	{
		insert_after(TCBLIST->prevtcb, task);
80000a2e:	4a 88       	lddpc	r8,80000acc <taskInstall+0xf4>
80000a30:	70 08       	ld.w	r8,r8[0x0]
80000a32:	71 98       	ld.w	r8,r8[0x64]
80000a34:	ee fb ff f4 	ld.w	r11,r7[-12]
80000a38:	10 9c       	mov	r12,r8
80000a3a:	f0 1f 00 26 	mcall	80000ad0 <taskInstall+0xf8>
		TCBLIST = task;
80000a3e:	4a 48       	lddpc	r8,80000acc <taskInstall+0xf4>
80000a40:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a44:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
80000a46:	30 18       	mov	r8,1
80000a48:	ef 58 ff fa 	st.h	r7[-6],r8
80000a4c:	c3 a8       	rjmp	80000ac0 <taskInstall+0xe8>
	}
	else if( task->effective_priority >= (TCBLIST->prevtcb)->effective_priority )
80000a4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a52:	f1 39 00 69 	ld.ub	r9,r8[105]
80000a56:	49 e8       	lddpc	r8,80000acc <taskInstall+0xf4>
80000a58:	70 08       	ld.w	r8,r8[0x0]
80000a5a:	71 98       	ld.w	r8,r8[0x64]
80000a5c:	f1 38 00 69 	ld.ub	r8,r8[105]
80000a60:	f0 09 18 00 	cp.b	r9,r8
80000a64:	c0 a3       	brcs	80000a78 <taskInstall+0xa0>
	{
		insert_after(TCBLIST->prevtcb, task);
80000a66:	49 a8       	lddpc	r8,80000acc <taskInstall+0xf4>
80000a68:	70 08       	ld.w	r8,r8[0x0]
80000a6a:	71 98       	ld.w	r8,r8[0x64]
80000a6c:	ee fb ff f4 	ld.w	r11,r7[-12]
80000a70:	10 9c       	mov	r12,r8
80000a72:	f0 1f 00 18 	mcall	80000ad0 <taskInstall+0xf8>
80000a76:	c2 58       	rjmp	80000ac0 <taskInstall+0xe8>
	}
	else
	{
		iterator = TCBLIST;
80000a78:	49 58       	lddpc	r8,80000acc <taskInstall+0xf4>
80000a7a:	70 08       	ld.w	r8,r8[0x0]
80000a7c:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->effective_priority >= iterator->effective_priority )
80000a80:	c0 68       	rjmp	80000a8c <taskInstall+0xb4>
		{
			iterator = iterator->nexttcb;
80000a82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a86:	70 08       	ld.w	r8,r8[0x0]
80000a88:	ef 48 ff fc 	st.w	r7[-4],r8
		insert_after(TCBLIST->prevtcb, task);
	}
	else
	{
		iterator = TCBLIST;
		while( iterator && task->effective_priority >= iterator->effective_priority )
80000a8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a90:	58 08       	cp.w	r8,0
80000a92:	c0 c0       	breq	80000aaa <taskInstall+0xd2>
80000a94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a98:	f1 39 00 69 	ld.ub	r9,r8[105]
80000a9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aa0:	f1 38 00 69 	ld.ub	r8,r8[105]
80000aa4:	f0 09 18 00 	cp.b	r9,r8
80000aa8:	ce d2       	brcc	80000a82 <taskInstall+0xaa>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
80000aaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aae:	71 98       	ld.w	r8,r8[0x64]
80000ab0:	ee fb ff f4 	ld.w	r11,r7[-12]
80000ab4:	10 9c       	mov	r12,r8
80000ab6:	f0 1f 00 07 	mcall	80000ad0 <taskInstall+0xf8>
		
		result = 1;
80000aba:	30 18       	mov	r8,1
80000abc:	ef 58 ff fa 	st.h	r7[-6],r8
	{
		ROUNDROBIN_end = task;
	}
#endif

	return result;
80000ac0:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000ac4:	10 9c       	mov	r12,r8
80000ac6:	2f dd       	sub	sp,-12
80000ac8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000acc:	00 00       	add	r0,r0
80000ace:	05 84       	ld.ub	r4,r2[0x0]
80000ad0:	80 00       	ld.sh	r0,r0[0x0]
80000ad2:	09 6c       	ld.uh	r12,--r4

80000ad4 <ROSA_taskCreate>:
	
	return result;
}

uint16_t ROSA_taskCreate(ROSA_taskHandle_t* th, char* id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000ad4:	eb cd 40 80 	pushm	r7,lr
80000ad8:	1a 97       	mov	r7,sp
80000ada:	20 8d       	sub	sp,32
80000adc:	ef 4c ff f0 	st.w	r7[-16],r12
80000ae0:	ef 4b ff ec 	st.w	r7[-20],r11
80000ae4:	ef 4a ff e8 	st.w	r7[-24],r10
80000ae8:	ef 49 ff e4 	st.w	r7[-28],r9
80000aec:	ef 68 ff e0 	st.b	r7[-32],r8
	uint16_t result = 0;
80000af0:	30 08       	mov	r8,0
80000af2:	ef 58 ff f6 	st.h	r7[-10],r8
	
	if(! *th)
80000af6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000afa:	70 08       	ld.w	r8,r8[0x0]
80000afc:	58 08       	cp.w	r8,0
80000afe:	c6 91       	brne	80000bd0 <ROSA_taskCreate+0xfc>
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
80000b00:	37 8b       	mov	r11,120
80000b02:	30 1c       	mov	r12,1
80000b04:	f0 1f 00 36 	mcall	80000bdc <ROSA_taskCreate+0x108>
80000b08:	18 98       	mov	r8,r12
80000b0a:	10 99       	mov	r9,r8
80000b0c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b10:	91 09       	st.w	r8[0x0],r9
		tcb* temp = *th;
80000b12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b16:	70 08       	ld.w	r8,r8[0x0]
80000b18:	ef 48 ff f8 	st.w	r7[-8],r8
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80000b1c:	30 08       	mov	r8,0
80000b1e:	ef 48 ff fc 	st.w	r7[-4],r8
80000b22:	c1 48       	rjmp	80000b4a <ROSA_taskCreate+0x76>
		{
			temp->id[i] = id[i];		//copy task id
80000b24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000b28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b2c:	ee fa ff ec 	ld.w	r10,r7[-20]
80000b30:	f4 08 00 08 	add	r8,r10,r8
80000b34:	11 88       	ld.ub	r8,r8[0x0]
80000b36:	ee fa ff f8 	ld.w	r10,r7[-8]
80000b3a:	f4 09 00 09 	add	r9,r10,r9
80000b3e:	b2 c8       	st.b	r9[0x4],r8
	{
		*th = (tcb*)calloc(1, sizeof(tcb));	//allocate memory for th
		tcb* temp = *th;
		
		int i;
		for(i = 0; i < NAMESIZE; i ++)
80000b40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b44:	2f f8       	sub	r8,-1
80000b46:	ef 48 ff fc 	st.w	r7[-4],r8
80000b4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b4e:	58 38       	cp.w	r8,3
80000b50:	fe 9a ff ea 	brle	80000b24 <ROSA_taskCreate+0x50>
		{
			temp->id[i] = id[i];		//copy task id
		}
		
		temp->staddr = taskFunction;
80000b54:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b5c:	91 29       	st.w	r8[0x8],r9
		temp->retaddr = (int)taskFunction;
80000b5e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b66:	91 99       	st.w	r8[0x24],r9
		
		temp->datasize = stackSize;
80000b68:	ee f9 ff e4 	ld.w	r9,r7[-28]
80000b6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b70:	91 49       	st.w	r8[0x10],r9
		temp->dataarea = (int*)calloc(stackSize, sizeof(int)) + stackSize;
80000b72:	30 4b       	mov	r11,4
80000b74:	ee fc ff e4 	ld.w	r12,r7[-28]
80000b78:	f0 1f 00 19 	mcall	80000bdc <ROSA_taskCreate+0x108>
80000b7c:	18 98       	mov	r8,r12
80000b7e:	10 99       	mov	r9,r8
80000b80:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b84:	a3 68       	lsl	r8,0x2
80000b86:	10 09       	add	r9,r8
80000b88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b8c:	91 39       	st.w	r8[0xc],r9
		temp->saveusp = temp->dataarea;
80000b8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b92:	70 39       	ld.w	r9,r8[0xc]
80000b94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b98:	91 59       	st.w	r8[0x14],r9
		
		temp->savesr = ROSA_INITIALSR;
80000b9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b9e:	fc 19 00 1c 	movh	r9,0x1c
80000ba2:	91 89       	st.w	r8[0x20],r9
		
		temp->priority = priority;
80000ba4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ba8:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000bac:	f3 68 00 68 	st.b	r9[104],r8
		temp->effective_priority = priority;
80000bb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bb4:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000bb8:	f3 68 00 69 	st.b	r9[105],r8
		
		contextInit(temp);
80000bbc:	ee fc ff f8 	ld.w	r12,r7[-8]
80000bc0:	f0 1f 00 08 	mcall	80000be0 <ROSA_taskCreate+0x10c>
		
		taskInstall(* th);
80000bc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000bc8:	70 08       	ld.w	r8,r8[0x0]
80000bca:	10 9c       	mov	r12,r8
80000bcc:	f0 1f 00 06 	mcall	80000be4 <ROSA_taskCreate+0x110>
	}
	return result;
80000bd0:	ef 08 ff f6 	ld.sh	r8,r7[-10]
}
80000bd4:	10 9c       	mov	r12,r8
80000bd6:	2f 8d       	sub	sp,-32
80000bd8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bdc:	80 00       	ld.sh	r0,r0[0x0]
80000bde:	1a a8       	st.w	sp++,r8
80000be0:	80 00       	ld.sh	r0,r0[0x0]
80000be2:	11 7e       	ld.ub	lr,--r8
80000be4:	80 00       	ld.sh	r0,r0[0x0]
80000be6:	09 d8       	ld.ub	r8,r4[0x5]

80000be8 <taskSuspend>:

uint16_t taskSuspend(tcb * task)
{
80000be8:	eb cd 40 80 	pushm	r7,lr
80000bec:	1a 97       	mov	r7,sp
80000bee:	20 3d       	sub	sp,12
80000bf0:	ef 4c ff f4 	st.w	r7[-12],r12
	uint16_t result = -1;
80000bf4:	3f f8       	mov	r8,-1
80000bf6:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator;
	
	//if there are no tasks in the list
	if( SUSPENDEDLIST == NULL )
80000bfa:	4b f8       	lddpc	r8,80000cf4 <taskSuspend+0x10c>
80000bfc:	70 08       	ld.w	r8,r8[0x0]
80000bfe:	58 08       	cp.w	r8,0
80000c00:	c1 41       	brne	80000c28 <taskSuspend+0x40>
	{
		SUSPENDEDLIST		= task;
80000c02:	4b d8       	lddpc	r8,80000cf4 <taskSuspend+0x10c>
80000c04:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000c08:	91 09       	st.w	r8[0x0],r9
		task->nexttcb		= task;
80000c0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000c12:	91 09       	st.w	r8[0x0],r9
		task->prevtcb		= task;
80000c14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c18:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000c1c:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000c20:	30 18       	mov	r8,1
80000c22:	ef 58 ff fa 	st.h	r7[-6],r8
80000c26:	c6 18       	rjmp	80000ce8 <taskSuspend+0x100>
	}
	//if this task should be inserted before the first task in the list
	else if( task->back_online_time < SUSPENDEDLIST->back_online_time )
80000c28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c2c:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000c30:	4b 18       	lddpc	r8,80000cf4 <taskSuspend+0x10c>
80000c32:	70 08       	ld.w	r8,r8[0x0]
80000c34:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000c38:	10 3a       	cp.w	r10,r8
80000c3a:	f2 0b 13 00 	cpc	r11,r9
80000c3e:	c1 12       	brcc	80000c60 <taskSuspend+0x78>
	{
		insert_after(SUSPENDEDLIST->prevtcb, task);
80000c40:	4a d8       	lddpc	r8,80000cf4 <taskSuspend+0x10c>
80000c42:	70 08       	ld.w	r8,r8[0x0]
80000c44:	71 98       	ld.w	r8,r8[0x64]
80000c46:	ee fb ff f4 	ld.w	r11,r7[-12]
80000c4a:	10 9c       	mov	r12,r8
80000c4c:	f0 1f 00 2b 	mcall	80000cf8 <taskSuspend+0x110>
		SUSPENDEDLIST = task;
80000c50:	4a 98       	lddpc	r8,80000cf4 <taskSuspend+0x10c>
80000c52:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000c56:	91 09       	st.w	r8[0x0],r9
		
		result = 1;
80000c58:	30 18       	mov	r8,1
80000c5a:	ef 58 ff fa 	st.h	r7[-6],r8
80000c5e:	c4 58       	rjmp	80000ce8 <taskSuspend+0x100>
	}
	//if this task should be inserted after the last task in the list
	else if( task->back_online_time >= (SUSPENDEDLIST->prevtcb)->back_online_time )
80000c60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c64:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000c68:	4a 38       	lddpc	r8,80000cf4 <taskSuspend+0x10c>
80000c6a:	70 08       	ld.w	r8,r8[0x0]
80000c6c:	71 98       	ld.w	r8,r8[0x64]
80000c6e:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000c72:	10 3a       	cp.w	r10,r8
80000c74:	f2 0b 13 00 	cpc	r11,r9
80000c78:	c1 33       	brcs	80000c9e <taskSuspend+0xb6>
	{
		insert_after(SUSPENDEDLIST->prevtcb, task);
80000c7a:	49 f8       	lddpc	r8,80000cf4 <taskSuspend+0x10c>
80000c7c:	70 08       	ld.w	r8,r8[0x0]
80000c7e:	71 98       	ld.w	r8,r8[0x64]
80000c80:	ee fb ff f4 	ld.w	r11,r7[-12]
80000c84:	10 9c       	mov	r12,r8
80000c86:	f0 1f 00 1d 	mcall	80000cf8 <taskSuspend+0x110>
		SUSPENDEDLIST->prevtcb = task;
80000c8a:	49 b8       	lddpc	r8,80000cf4 <taskSuspend+0x10c>
80000c8c:	70 08       	ld.w	r8,r8[0x0]
80000c8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000c92:	f1 49 00 64 	st.w	r8[100],r9
		
		result = 1;
80000c96:	30 18       	mov	r8,1
80000c98:	ef 58 ff fa 	st.h	r7[-6],r8
80000c9c:	c2 68       	rjmp	80000ce8 <taskSuspend+0x100>
	}
	//if this task should be inserted somewhere in the middle of the list
	else
	{
		iterator = SUSPENDEDLIST;
80000c9e:	49 68       	lddpc	r8,80000cf4 <taskSuspend+0x10c>
80000ca0:	70 08       	ld.w	r8,r8[0x0]
80000ca2:	ef 48 ff fc 	st.w	r7[-4],r8
		while( iterator && task->back_online_time >= iterator->back_online_time )
80000ca6:	c0 68       	rjmp	80000cb2 <taskSuspend+0xca>
		{
			iterator = iterator->nexttcb;
80000ca8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cac:	70 08       	ld.w	r8,r8[0x0]
80000cae:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	//if this task should be inserted somewhere in the middle of the list
	else
	{
		iterator = SUSPENDEDLIST;
		while( iterator && task->back_online_time >= iterator->back_online_time )
80000cb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cb6:	58 08       	cp.w	r8,0
80000cb8:	c0 d0       	breq	80000cd2 <taskSuspend+0xea>
80000cba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000cbe:	f0 ea 00 6c 	ld.d	r10,r8[108]
80000cc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cc6:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000cca:	10 3a       	cp.w	r10,r8
80000ccc:	f2 0b 13 00 	cpc	r11,r9
80000cd0:	ce c2       	brcc	80000ca8 <taskSuspend+0xc0>
		{
			iterator = iterator->nexttcb;
		}
		insert_after(iterator->prevtcb, task);
80000cd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cd6:	71 98       	ld.w	r8,r8[0x64]
80000cd8:	ee fb ff f4 	ld.w	r11,r7[-12]
80000cdc:	10 9c       	mov	r12,r8
80000cde:	f0 1f 00 07 	mcall	80000cf8 <taskSuspend+0x110>
		
		result = 1;
80000ce2:	30 18       	mov	r8,1
80000ce4:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	return result;
80000ce8:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000cec:	10 9c       	mov	r12,r8
80000cee:	2f dd       	sub	sp,-12
80000cf0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cf4:	00 00       	add	r0,r0
80000cf6:	05 88       	ld.ub	r8,r2[0x0]
80000cf8:	80 00       	ld.sh	r0,r0[0x0]
80000cfa:	09 6c       	ld.uh	r12,--r4

80000cfc <taskUninstall>:

uint16_t taskUninstall( tcb * task )
{
80000cfc:	eb cd 40 80 	pushm	r7,lr
80000d00:	1a 97       	mov	r7,sp
80000d02:	20 2d       	sub	sp,8
80000d04:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000d08:	3f f8       	mov	r8,-1
80000d0a:	ef 58 ff fe 	st.h	r7[-2],r8
		}
	}
#endif
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
80000d0e:	49 78       	lddpc	r8,80000d68 <taskUninstall+0x6c>
80000d10:	70 09       	ld.w	r9,r8[0x0]
80000d12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d16:	10 39       	cp.w	r9,r8
80000d18:	c0 c1       	brne	80000d30 <taskUninstall+0x34>
80000d1a:	49 48       	lddpc	r8,80000d68 <taskUninstall+0x6c>
80000d1c:	70 08       	ld.w	r8,r8[0x0]
80000d1e:	71 99       	ld.w	r9,r8[0x64]
80000d20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d24:	10 39       	cp.w	r9,r8
80000d26:	c0 51       	brne	80000d30 <taskUninstall+0x34>
	{
		TCBLIST	= NULL;
80000d28:	49 08       	lddpc	r8,80000d68 <taskUninstall+0x6c>
80000d2a:	30 09       	mov	r9,0
80000d2c:	91 09       	st.w	r8[0x0],r9
		}
	}
#endif
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == task && (TCBLIST->prevtcb) == task )
80000d2e:	c0 c8       	rjmp	80000d46 <taskUninstall+0x4a>
	{
		TCBLIST	= NULL;
	}
	else if( TCBLIST == task )
80000d30:	48 e8       	lddpc	r8,80000d68 <taskUninstall+0x6c>
80000d32:	70 09       	ld.w	r9,r8[0x0]
80000d34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d38:	10 39       	cp.w	r9,r8
80000d3a:	c0 61       	brne	80000d46 <taskUninstall+0x4a>
	{
		TCBLIST = TCBLIST->nexttcb;
80000d3c:	48 b8       	lddpc	r8,80000d68 <taskUninstall+0x6c>
80000d3e:	70 08       	ld.w	r8,r8[0x0]
80000d40:	70 09       	ld.w	r9,r8[0x0]
80000d42:	48 a8       	lddpc	r8,80000d68 <taskUninstall+0x6c>
80000d44:	91 09       	st.w	r8[0x0],r9
	}
	
	result = remove(task);
80000d46:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d4a:	f0 1f 00 09 	mcall	80000d6c <taskUninstall+0x70>
80000d4e:	18 98       	mov	r8,r12
80000d50:	5c 88       	casts.h	r8
80000d52:	ef 58 ff fe 	st.h	r7[-2],r8
	
	result = 1;
80000d56:	30 18       	mov	r8,1
80000d58:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000d5c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000d60:	10 9c       	mov	r12,r8
80000d62:	2f ed       	sub	sp,-8
80000d64:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d68:	00 00       	add	r0,r0
80000d6a:	05 84       	ld.ub	r4,r2[0x0]
80000d6c:	80 00       	ld.sh	r0,r0[0x0]
80000d6e:	0e 00       	add	r0,r7

80000d70 <taskUnsuspend>:

uint16_t taskUnsuspend( tcb * task )
{
80000d70:	eb cd 40 80 	pushm	r7,lr
80000d74:	1a 97       	mov	r7,sp
80000d76:	20 2d       	sub	sp,8
80000d78:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000d7c:	3f f8       	mov	r8,-1
80000d7e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80000d82:	49 e8       	lddpc	r8,80000df8 <taskUnsuspend+0x88>
80000d84:	70 09       	ld.w	r9,r8[0x0]
80000d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d8a:	10 39       	cp.w	r9,r8
80000d8c:	c0 c1       	brne	80000da4 <taskUnsuspend+0x34>
80000d8e:	49 b8       	lddpc	r8,80000df8 <taskUnsuspend+0x88>
80000d90:	70 08       	ld.w	r8,r8[0x0]
80000d92:	71 99       	ld.w	r9,r8[0x64]
80000d94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d98:	10 39       	cp.w	r9,r8
80000d9a:	c0 51       	brne	80000da4 <taskUnsuspend+0x34>
	{
		SUSPENDEDLIST		= NULL;
80000d9c:	49 78       	lddpc	r8,80000df8 <taskUnsuspend+0x88>
80000d9e:	30 09       	mov	r9,0
80000da0:	91 09       	st.w	r8[0x0],r9
uint16_t taskUnsuspend( tcb * task )
{
	uint16_t result = -1;
	
	// change head and tail of SUSPENDEDLIST if necessary
	if( SUSPENDEDLIST == task && SUSPENDEDLIST->prevtcb == task)
80000da2:	c1 c8       	rjmp	80000dda <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST		= NULL;
	}
	else if( SUSPENDEDLIST == task )
80000da4:	49 58       	lddpc	r8,80000df8 <taskUnsuspend+0x88>
80000da6:	70 09       	ld.w	r9,r8[0x0]
80000da8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dac:	10 39       	cp.w	r9,r8
80000dae:	c0 71       	brne	80000dbc <taskUnsuspend+0x4c>
	{
		SUSPENDEDLIST = SUSPENDEDLIST->nexttcb;
80000db0:	49 28       	lddpc	r8,80000df8 <taskUnsuspend+0x88>
80000db2:	70 08       	ld.w	r8,r8[0x0]
80000db4:	70 09       	ld.w	r9,r8[0x0]
80000db6:	49 18       	lddpc	r8,80000df8 <taskUnsuspend+0x88>
80000db8:	91 09       	st.w	r8[0x0],r9
80000dba:	c1 08       	rjmp	80000dda <taskUnsuspend+0x6a>
	}
	else if( SUSPENDEDLIST->prevtcb == task )
80000dbc:	48 f8       	lddpc	r8,80000df8 <taskUnsuspend+0x88>
80000dbe:	70 08       	ld.w	r8,r8[0x0]
80000dc0:	71 99       	ld.w	r9,r8[0x64]
80000dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dc6:	10 39       	cp.w	r9,r8
80000dc8:	c0 91       	brne	80000dda <taskUnsuspend+0x6a>
	{
		SUSPENDEDLIST->prevtcb = (SUSPENDEDLIST->prevtcb)->prevtcb;
80000dca:	48 c8       	lddpc	r8,80000df8 <taskUnsuspend+0x88>
80000dcc:	70 08       	ld.w	r8,r8[0x0]
80000dce:	48 b9       	lddpc	r9,80000df8 <taskUnsuspend+0x88>
80000dd0:	72 09       	ld.w	r9,r9[0x0]
80000dd2:	73 99       	ld.w	r9,r9[0x64]
80000dd4:	73 99       	ld.w	r9,r9[0x64]
80000dd6:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	result = remove(task);
80000dda:	ee fc ff f8 	ld.w	r12,r7[-8]
80000dde:	f0 1f 00 08 	mcall	80000dfc <taskUnsuspend+0x8c>
80000de2:	18 98       	mov	r8,r12
80000de4:	5c 88       	casts.h	r8
80000de6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000dea:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000dee:	10 9c       	mov	r12,r8
80000df0:	2f ed       	sub	sp,-8
80000df2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000df6:	00 00       	add	r0,r0
80000df8:	00 00       	add	r0,r0
80000dfa:	05 88       	ld.ub	r8,r2[0x0]
80000dfc:	80 00       	ld.sh	r0,r0[0x0]
80000dfe:	0e 00       	add	r0,r7

80000e00 <remove>:

uint16_t remove(tcb * removed_task)
{
80000e00:	eb cd 40 80 	pushm	r7,lr
80000e04:	1a 97       	mov	r7,sp
80000e06:	20 2d       	sub	sp,8
80000e08:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000e0c:	3f f8       	mov	r8,-1
80000e0e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	if( removed_task->prevtcb != NULL )
80000e12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e16:	71 98       	ld.w	r8,r8[0x64]
80000e18:	58 08       	cp.w	r8,0
80000e1a:	c0 80       	breq	80000e2a <remove+0x2a>
	{
		(removed_task->prevtcb)->nexttcb = removed_task->nexttcb;
80000e1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e20:	71 98       	ld.w	r8,r8[0x64]
80000e22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e26:	72 09       	ld.w	r9,r9[0x0]
80000e28:	91 09       	st.w	r8[0x0],r9
	}
	
	if( removed_task->nexttcb != NULL )
80000e2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e2e:	70 08       	ld.w	r8,r8[0x0]
80000e30:	58 08       	cp.w	r8,0
80000e32:	c0 90       	breq	80000e44 <remove+0x44>
	{
		(removed_task->nexttcb)->prevtcb = removed_task->prevtcb;
80000e34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e38:	70 08       	ld.w	r8,r8[0x0]
80000e3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e3e:	73 99       	ld.w	r9,r9[0x64]
80000e40:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	// nullify pointers
	removed_task->prevtcb = NULL;
80000e44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e48:	30 09       	mov	r9,0
80000e4a:	f1 49 00 64 	st.w	r8[100],r9
	removed_task->nexttcb = NULL;
80000e4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e52:	30 09       	mov	r9,0
80000e54:	91 09       	st.w	r8[0x0],r9
		
	result = 1;
80000e56:	30 18       	mov	r8,1
80000e58:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80000e5c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000e60:	10 9c       	mov	r12,r8
80000e62:	2f ed       	sub	sp,-8
80000e64:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e68 <ROSA_delay>:

uint16_t ROSA_delay( uint64_t ticks )
{
80000e68:	eb cd 40 c0 	pushm	r6-r7,lr
80000e6c:	1a 97       	mov	r7,sp
80000e6e:	20 3d       	sub	sp,12
80000e70:	ee eb ff f4 	st.d	r7[-12],r10
	interruptDisable;
	uint16_t result = -1;
80000e74:	3f f8       	mov	r8,-1
80000e76:	ef 58 ff fe 	st.h	r7[-2],r8
	
	taskUninstall(EXECTASK);
80000e7a:	49 38       	lddpc	r8,80000ec4 <ROSA_delay+0x5c>
80000e7c:	70 08       	ld.w	r8,r8[0x0]
80000e7e:	10 9c       	mov	r12,r8
80000e80:	f0 1f 00 12 	mcall	80000ec8 <ROSA_delay+0x60>
	EXECTASK->back_online_time = ROSA_getTickCount() + ticks;
80000e84:	49 08       	lddpc	r8,80000ec4 <ROSA_delay+0x5c>
80000e86:	70 06       	ld.w	r6,r8[0x0]
80000e88:	f0 1f 00 11 	mcall	80000ecc <ROSA_delay+0x64>
80000e8c:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000e90:	f4 08 00 08 	add	r8,r10,r8
80000e94:	f6 09 00 49 	adc	r9,r11,r9
80000e98:	ec e9 00 6c 	st.d	r6[108],r8
	taskSuspend(EXECTASK);
80000e9c:	48 a8       	lddpc	r8,80000ec4 <ROSA_delay+0x5c>
80000e9e:	70 08       	ld.w	r8,r8[0x0]
80000ea0:	10 9c       	mov	r12,r8
80000ea2:	f0 1f 00 0c 	mcall	80000ed0 <ROSA_delay+0x68>
	
	result = ticks;
80000ea6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000eaa:	ef 58 ff fe 	st.h	r7[-2],r8
	
	interruptEnable();
80000eae:	f0 1f 00 0a 	mcall	80000ed4 <ROSA_delay+0x6c>
	ROSA_yield();
80000eb2:	f0 1f 00 0a 	mcall	80000ed8 <ROSA_delay+0x70>
	return result;
80000eb6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000eba:	10 9c       	mov	r12,r8
80000ebc:	2f dd       	sub	sp,-12
80000ebe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000ec2:	00 00       	add	r0,r0
80000ec4:	00 00       	add	r0,r0
80000ec6:	05 90       	ld.ub	r0,r2[0x1]
80000ec8:	80 00       	ld.sh	r0,r0[0x0]
80000eca:	0c fc       	st.b	--r6,r12
80000ecc:	80 00       	ld.sh	r0,r0[0x0]
80000ece:	09 54       	ld.sh	r4,--r4
80000ed0:	80 00       	ld.sh	r0,r0[0x0]
80000ed2:	0b e8       	ld.ub	r8,r5[0x6]
80000ed4:	80 00       	ld.sh	r0,r0[0x0]
80000ed6:	25 6a       	sub	r10,86
80000ed8:	80 00       	ld.sh	r0,r0[0x0]
80000eda:	12 0a       	add	r10,r9

80000edc <idle>:
	return result;
}

#if IDLE_TASK_ENABLED
void idle(void)
{
80000edc:	eb cd 40 80 	pushm	r7,lr
80000ee0:	1a 97       	mov	r7,sp
	while(1);
80000ee2:	c0 08       	rjmp	80000ee2 <idle+0x6>

80000ee4 <ROSA_taskDelete>:
}
#endif

uint16_t ROSA_taskDelete(ROSA_taskHandle_t th)
{
80000ee4:	eb cd 40 80 	pushm	r7,lr
80000ee8:	1a 97       	mov	r7,sp
80000eea:	20 2d       	sub	sp,8
80000eec:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
80000ef0:	f0 1f 00 0d 	mcall	80000f24 <ROSA_taskDelete+0x40>
	
	uint16_t result = ROSA_taskDelete_noncritical(th);
80000ef4:	ee fc ff f8 	ld.w	r12,r7[-8]
80000ef8:	f0 1f 00 0c 	mcall	80000f28 <ROSA_taskDelete+0x44>
80000efc:	18 98       	mov	r8,r12
80000efe:	5c 88       	casts.h	r8
80000f00:	ef 58 ff fe 	st.h	r7[-2],r8
	interruptEnable();
80000f04:	f0 1f 00 0a 	mcall	80000f2c <ROSA_taskDelete+0x48>
	
	// if we have just deleted EXECTASK
	if( result == 10 )
80000f08:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80000f0c:	30 a8       	mov	r8,10
80000f0e:	f0 09 19 00 	cp.h	r9,r8
80000f12:	c0 31       	brne	80000f18 <ROSA_taskDelete+0x34>
	{
		ROSA_yield();
80000f14:	f0 1f 00 07 	mcall	80000f30 <ROSA_taskDelete+0x4c>
	}
	
	return result;
80000f18:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000f1c:	10 9c       	mov	r12,r8
80000f1e:	2f ed       	sub	sp,-8
80000f20:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f24:	80 00       	ld.sh	r0,r0[0x0]
80000f26:	25 66       	sub	r6,86
80000f28:	80 00       	ld.sh	r0,r0[0x0]
80000f2a:	0f 34       	ld.ub	r4,r7++
80000f2c:	80 00       	ld.sh	r0,r0[0x0]
80000f2e:	25 6a       	sub	r10,86
80000f30:	80 00       	ld.sh	r0,r0[0x0]
80000f32:	12 0a       	add	r10,r9

80000f34 <ROSA_taskDelete_noncritical>:

uint16_t ROSA_taskDelete_noncritical(ROSA_taskHandle_t th)
{
80000f34:	eb cd 40 80 	pushm	r7,lr
80000f38:	1a 97       	mov	r7,sp
80000f3a:	20 4d       	sub	sp,16
80000f3c:	ef 4c ff f0 	st.w	r7[-16],r12
	int deleting_active_task = 0;
80000f40:	30 08       	mov	r8,0
80000f42:	ef 48 ff f4 	st.w	r7[-12],r8
	if( th == NULL )
80000f46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f4a:	58 08       	cp.w	r8,0
80000f4c:	c0 81       	brne	80000f5c <ROSA_taskDelete_noncritical+0x28>
	{
		th = EXECTASK;
80000f4e:	4b 78       	lddpc	r8,80001028 <ROSA_taskDelete_noncritical+0xf4>
80000f50:	70 08       	ld.w	r8,r8[0x0]
80000f52:	ef 48 ff f0 	st.w	r7[-16],r8
		deleting_active_task = 1;
80000f56:	30 18       	mov	r8,1
80000f58:	ef 48 ff f4 	st.w	r7[-12],r8
	}
	
	uint16_t result = -1;
80000f5c:	3f f8       	mov	r8,-1
80000f5e:	ef 58 ff fa 	st.h	r7[-6],r8

// semaphore protections
/**********************************************************************/
#if SEMAPHORE_PROTECTIONS
	semaphore * iterator = SEMAPHORES;
80000f62:	4b 38       	lddpc	r8,8000102c <ROSA_taskDelete_noncritical+0xf8>
80000f64:	70 08       	ld.w	r8,r8[0x0]
80000f66:	ef 48 ff fc 	st.w	r7[-4],r8
	while( iterator != NULL )
80000f6a:	c1 c8       	rjmp	80000fa2 <ROSA_taskDelete_noncritical+0x6e>
	{
		if( iterator->current_task == th )
80000f6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f70:	70 19       	ld.w	r9,r8[0x4]
80000f72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f76:	10 39       	cp.w	r9,r8
80000f78:	c0 51       	brne	80000f82 <ROSA_taskDelete_noncritical+0x4e>
		{
			semaphoreEvictCurrentTask( iterator );
80000f7a:	ee fc ff fc 	ld.w	r12,r7[-4]
80000f7e:	f0 1f 00 2d 	mcall	80001030 <ROSA_taskDelete_noncritical+0xfc>
		}
	
		if( iterator->nextsemaphore == SEMAPHORES )
80000f82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f86:	70 39       	ld.w	r9,r8[0xc]
80000f88:	4a 98       	lddpc	r8,8000102c <ROSA_taskDelete_noncritical+0xf8>
80000f8a:	70 08       	ld.w	r8,r8[0x0]
80000f8c:	10 39       	cp.w	r9,r8
80000f8e:	c0 51       	brne	80000f98 <ROSA_taskDelete_noncritical+0x64>
		{
			iterator = NULL;
80000f90:	30 08       	mov	r8,0
80000f92:	ef 48 ff fc 	st.w	r7[-4],r8
80000f96:	c0 68       	rjmp	80000fa2 <ROSA_taskDelete_noncritical+0x6e>
		}
		else
		{
			iterator = iterator->nextsemaphore;
80000f98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f9c:	70 38       	ld.w	r8,r8[0xc]
80000f9e:	ef 48 ff fc 	st.w	r7[-4],r8

// semaphore protections
/**********************************************************************/
#if SEMAPHORE_PROTECTIONS
	semaphore * iterator = SEMAPHORES;
	while( iterator != NULL )
80000fa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fa6:	58 08       	cp.w	r8,0
80000fa8:	ce 21       	brne	80000f6c <ROSA_taskDelete_noncritical+0x38>
		{
			iterator = iterator->nextsemaphore;
		}
	}

	if( th->blocking_semaphore != NULL )
80000faa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fae:	71 d8       	ld.w	r8,r8[0x74]
80000fb0:	58 08       	cp.w	r8,0
80000fb2:	c0 90       	breq	80000fc4 <ROSA_taskDelete_noncritical+0x90>
	{
		semaphoreUnblockTask(th->blocking_semaphore, th);
80000fb4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fb8:	71 d8       	ld.w	r8,r8[0x74]
80000fba:	ee fb ff f0 	ld.w	r11,r7[-16]
80000fbe:	10 9c       	mov	r12,r8
80000fc0:	f0 1f 00 1d 	mcall	80001034 <ROSA_taskDelete_noncritical+0x100>
#endif
/**********************************************************************/
	
	// Tasks can be deleted both from the TCBLIST and from the SUSPENDEDLIST
	//result = taskUninstall(th);
	result = remove_from_all(th);
80000fc4:	ee fc ff f0 	ld.w	r12,r7[-16]
80000fc8:	f0 1f 00 1c 	mcall	80001038 <ROSA_taskDelete_noncritical+0x104>
80000fcc:	18 98       	mov	r8,r12
80000fce:	5c 88       	casts.h	r8
80000fd0:	ef 58 ff fa 	st.h	r7[-6],r8
	
	if(result == 1)
80000fd4:	ef 09 ff fa 	ld.sh	r9,r7[-6]
80000fd8:	30 18       	mov	r8,1
80000fda:	f0 09 19 00 	cp.h	r9,r8
80000fde:	c1 f1       	brne	8000101c <ROSA_taskDelete_noncritical+0xe8>
	{
		free(th->dataarea - th->datasize);
80000fe0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fe4:	70 39       	ld.w	r9,r8[0xc]
80000fe6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fea:	70 48       	ld.w	r8,r8[0x10]
80000fec:	a3 68       	lsl	r8,0x2
80000fee:	5c 38       	neg	r8
80000ff0:	f2 08 00 08 	add	r8,r9,r8
80000ff4:	10 9c       	mov	r12,r8
80000ff6:	f0 1f 00 12 	mcall	8000103c <ROSA_taskDelete_noncritical+0x108>
		memset(th, 0, sizeof(tcb));
80000ffa:	37 8a       	mov	r10,120
80000ffc:	30 0b       	mov	r11,0
80000ffe:	ee fc ff f0 	ld.w	r12,r7[-16]
80001002:	f0 1f 00 10 	mcall	80001040 <ROSA_taskDelete_noncritical+0x10c>
		free(th);
80001006:	ee fc ff f0 	ld.w	r12,r7[-16]
8000100a:	f0 1f 00 0d 	mcall	8000103c <ROSA_taskDelete_noncritical+0x108>
		
		if( deleting_active_task )
8000100e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001012:	58 08       	cp.w	r8,0
80001014:	c0 40       	breq	8000101c <ROSA_taskDelete_noncritical+0xe8>
		{
			result = 10;
80001016:	30 a8       	mov	r8,10
80001018:	ef 58 ff fa 	st.h	r7[-6],r8
		}
	}
	
	return result;
8000101c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80001020:	10 9c       	mov	r12,r8
80001022:	2f cd       	sub	sp,-16
80001024:	e3 cd 80 80 	ldm	sp++,r7,pc
80001028:	00 00       	add	r0,r0
8000102a:	05 90       	ld.ub	r0,r2[0x1]
8000102c:	00 00       	add	r0,r0
8000102e:	05 8c       	ld.ub	r12,r2[0x0]
80001030:	80 00       	ld.sh	r0,r0[0x0]
80001032:	04 18       	sub	r8,r2
80001034:	80 00       	ld.sh	r0,r0[0x0]
80001036:	02 34       	cp.w	r4,r1
80001038:	80 00       	ld.sh	r0,r0[0x0]
8000103a:	10 44       	or	r4,r8
8000103c:	80 00       	ld.sh	r0,r0[0x0]
8000103e:	1b 20       	ld.uh	r0,sp++
80001040:	80 00       	ld.sh	r0,r0[0x0]
80001042:	1f 88       	ld.ub	r8,pc[0x0]

80001044 <remove_from_all>:

uint16_t remove_from_all( tcb * removed_task )
{
80001044:	eb cd 40 80 	pushm	r7,lr
80001048:	1a 97       	mov	r7,sp
8000104a:	20 2d       	sub	sp,8
8000104c:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80001050:	3f f8       	mov	r8,-1
80001052:	ef 58 ff fe 	st.h	r7[-2],r8
		}
	}
#endif
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == removed_task && (TCBLIST->prevtcb) == removed_task )
80001056:	4b b8       	lddpc	r8,80001140 <remove_from_all+0xfc>
80001058:	70 09       	ld.w	r9,r8[0x0]
8000105a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000105e:	10 39       	cp.w	r9,r8
80001060:	c0 c1       	brne	80001078 <remove_from_all+0x34>
80001062:	4b 88       	lddpc	r8,80001140 <remove_from_all+0xfc>
80001064:	70 08       	ld.w	r8,r8[0x0]
80001066:	71 99       	ld.w	r9,r8[0x64]
80001068:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000106c:	10 39       	cp.w	r9,r8
8000106e:	c0 51       	brne	80001078 <remove_from_all+0x34>
	{
		TCBLIST	= NULL;
80001070:	4b 48       	lddpc	r8,80001140 <remove_from_all+0xfc>
80001072:	30 09       	mov	r9,0
80001074:	91 09       	st.w	r8[0x0],r9
		}
	}
#endif
	
	// change head and tail of TCBLIST if necessary
	if( TCBLIST == removed_task && (TCBLIST->prevtcb) == removed_task )
80001076:	c3 98       	rjmp	800010e8 <remove_from_all+0xa4>
	{
		TCBLIST	= NULL;
	}
	else if( TCBLIST == removed_task )
80001078:	4b 28       	lddpc	r8,80001140 <remove_from_all+0xfc>
8000107a:	70 09       	ld.w	r9,r8[0x0]
8000107c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001080:	10 39       	cp.w	r9,r8
80001082:	c0 71       	brne	80001090 <remove_from_all+0x4c>
	{
		TCBLIST = TCBLIST->nexttcb;
80001084:	4a f8       	lddpc	r8,80001140 <remove_from_all+0xfc>
80001086:	70 08       	ld.w	r8,r8[0x0]
80001088:	70 09       	ld.w	r9,r8[0x0]
8000108a:	4a e8       	lddpc	r8,80001140 <remove_from_all+0xfc>
8000108c:	91 09       	st.w	r8[0x0],r9
8000108e:	c2 d8       	rjmp	800010e8 <remove_from_all+0xa4>
	}
	// change head and tail of SUSPENDEDLIST if necessary
	else if( SUSPENDEDLIST == removed_task && SUSPENDEDLIST->prevtcb == removed_task)
80001090:	4a d8       	lddpc	r8,80001144 <remove_from_all+0x100>
80001092:	70 09       	ld.w	r9,r8[0x0]
80001094:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001098:	10 39       	cp.w	r9,r8
8000109a:	c0 c1       	brne	800010b2 <remove_from_all+0x6e>
8000109c:	4a a8       	lddpc	r8,80001144 <remove_from_all+0x100>
8000109e:	70 08       	ld.w	r8,r8[0x0]
800010a0:	71 99       	ld.w	r9,r8[0x64]
800010a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010a6:	10 39       	cp.w	r9,r8
800010a8:	c0 51       	brne	800010b2 <remove_from_all+0x6e>
	{
		SUSPENDEDLIST		= NULL;
800010aa:	4a 78       	lddpc	r8,80001144 <remove_from_all+0x100>
800010ac:	30 09       	mov	r9,0
800010ae:	91 09       	st.w	r8[0x0],r9
	else if( TCBLIST == removed_task )
	{
		TCBLIST = TCBLIST->nexttcb;
	}
	// change head and tail of SUSPENDEDLIST if necessary
	else if( SUSPENDEDLIST == removed_task && SUSPENDEDLIST->prevtcb == removed_task)
800010b0:	c1 c8       	rjmp	800010e8 <remove_from_all+0xa4>
	{
		SUSPENDEDLIST		= NULL;
	}
	else if( SUSPENDEDLIST == removed_task )
800010b2:	4a 58       	lddpc	r8,80001144 <remove_from_all+0x100>
800010b4:	70 09       	ld.w	r9,r8[0x0]
800010b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ba:	10 39       	cp.w	r9,r8
800010bc:	c0 71       	brne	800010ca <remove_from_all+0x86>
	{
		SUSPENDEDLIST = SUSPENDEDLIST->nexttcb;
800010be:	4a 28       	lddpc	r8,80001144 <remove_from_all+0x100>
800010c0:	70 08       	ld.w	r8,r8[0x0]
800010c2:	70 09       	ld.w	r9,r8[0x0]
800010c4:	4a 08       	lddpc	r8,80001144 <remove_from_all+0x100>
800010c6:	91 09       	st.w	r8[0x0],r9
800010c8:	c1 08       	rjmp	800010e8 <remove_from_all+0xa4>
	}
	else if( SUSPENDEDLIST->prevtcb == removed_task )
800010ca:	49 f8       	lddpc	r8,80001144 <remove_from_all+0x100>
800010cc:	70 08       	ld.w	r8,r8[0x0]
800010ce:	71 99       	ld.w	r9,r8[0x64]
800010d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010d4:	10 39       	cp.w	r9,r8
800010d6:	c0 91       	brne	800010e8 <remove_from_all+0xa4>
	{
		SUSPENDEDLIST->prevtcb = (SUSPENDEDLIST->prevtcb)->prevtcb;
800010d8:	49 b8       	lddpc	r8,80001144 <remove_from_all+0x100>
800010da:	70 08       	ld.w	r8,r8[0x0]
800010dc:	49 a9       	lddpc	r9,80001144 <remove_from_all+0x100>
800010de:	72 09       	ld.w	r9,r9[0x0]
800010e0:	73 99       	ld.w	r9,r9[0x64]
800010e2:	73 99       	ld.w	r9,r9[0x64]
800010e4:	f1 49 00 64 	st.w	r8[100],r9
	}

	if( removed_task->prevtcb != NULL )
800010e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ec:	71 98       	ld.w	r8,r8[0x64]
800010ee:	58 08       	cp.w	r8,0
800010f0:	c0 80       	breq	80001100 <remove_from_all+0xbc>
	{
		(removed_task->prevtcb)->nexttcb = removed_task->nexttcb;
800010f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010f6:	71 98       	ld.w	r8,r8[0x64]
800010f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800010fc:	72 09       	ld.w	r9,r9[0x0]
800010fe:	91 09       	st.w	r8[0x0],r9
	}
	
	if( removed_task->nexttcb != NULL )
80001100:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001104:	70 08       	ld.w	r8,r8[0x0]
80001106:	58 08       	cp.w	r8,0
80001108:	c0 90       	breq	8000111a <remove_from_all+0xd6>
	{
		(removed_task->nexttcb)->prevtcb = removed_task->prevtcb;
8000110a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000110e:	70 08       	ld.w	r8,r8[0x0]
80001110:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001114:	73 99       	ld.w	r9,r9[0x64]
80001116:	f1 49 00 64 	st.w	r8[100],r9
	}
	
	// nullify pointers
	removed_task->prevtcb = NULL;
8000111a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000111e:	30 09       	mov	r9,0
80001120:	f1 49 00 64 	st.w	r8[100],r9
	removed_task->nexttcb = NULL;
80001124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001128:	30 09       	mov	r9,0
8000112a:	91 09       	st.w	r8[0x0],r9
		
	result = 1;
8000112c:	30 18       	mov	r8,1
8000112e:	ef 58 ff fe 	st.h	r7[-2],r8
	
	return result;
80001132:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80001136:	10 9c       	mov	r12,r8
80001138:	2f ed       	sub	sp,-8
8000113a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000113e:	00 00       	add	r0,r0
80001140:	00 00       	add	r0,r0
80001142:	05 84       	ld.ub	r4,r2[0x0]
80001144:	00 00       	add	r0,r0
80001146:	05 88       	ld.ub	r8,r2[0x0]

80001148 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80001148:	4b 5c       	lddpc	r12,8000121c <_yield+0xa>
	lda.w r11,EXECTASK
8000114a:	4b 6b       	lddpc	r11,80001220 <_yield+0xe>
	ld.w r12,r12[0x0]
8000114c:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
8000114e:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80001150:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001152:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001154:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80001158:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
8000115a:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
8000115c:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
8000115e:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80001162:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80001164:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80001166:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80001168:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
8000116a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
8000116c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
8000116e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80001170:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80001172:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80001174:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80001176:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80001178:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000117a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
8000117c:	1c 9f       	mov	pc,lr

8000117e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000117e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80001180:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80001182:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80001184:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80001188:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
8000118c:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80001190:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80001194:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80001198:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
8000119c:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
800011a0:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
800011a4:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
800011a8:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
800011aa:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
800011ac:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
800011ae:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
800011b0:	1c 9f       	mov	pc,lr

800011b2 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
800011b2:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
800011b4:	49 bc       	lddpc	r12,80001220 <_yield+0xe>
	ld.w r12,r12[0x0]
800011b6:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
800011b8:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
800011ba:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
800011bc:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
800011be:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800011c0:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800011c2:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800011c4:	33 40       	mov	r0,52
	add r0,r12
800011c6:	18 00       	add	r0,r12
	stmts r0,r0-r11
800011c8:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
800011cc:	1a 90       	mov	r0,sp
	st.w --sp,r0
800011ce:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800011d0:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800011d4:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800011d6:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800011d8:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800011da:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800011dc:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800011de:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
800011e0:	1c 9f       	mov	pc,lr

800011e2 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800011e2:	49 0c       	lddpc	r12,80001220 <_yield+0xe>
	ld.w r12,r12[0x0]
800011e4:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
800011e6:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
800011e8:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
800011ea:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
800011ee:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
800011f0:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800011f2:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
800011f4:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800011f6:	33 40       	mov	r0,52
	add r0,r12
800011f8:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800011fa:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800011fe:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80001200:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001202:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80001204:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80001206:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80001208:	d6 13       	rets

8000120a <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
8000120a:	d4 01       	pushm	lr
	lda.w lr,_yield
8000120c:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80001210:	d7 33       	scall

80001212 <_yield>:
_yield:
	call contextSave
80001212:	cd 0f       	rcall	800011b2 <contextSave>
	call scheduler
80001214:	f0 1f 00 04 	mcall	80001224 <_yield+0x12>
	call contextRestore
80001218:	ce 5f       	rcall	800011e2 <contextRestore>
8000121a:	00 00       	add	r0,r0
8000121c:	00 00       	add	r0,r0
8000121e:	05 84       	ld.ub	r4,r2[0x0]
80001220:	00 00       	add	r0,r0
80001222:	05 90       	ld.ub	r0,r2[0x1]
80001224:	80 00       	ld.sh	r0,r0[0x0]
80001226:	12 28       	rsub	r8,r9

80001228 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80001228:	eb cd 40 80 	pushm	r7,lr
8000122c:	1a 97       	mov	r7,sp
8000122e:	20 2d       	sub	sp,8
	
	if( system_ticks >= 12444 )
80001230:	49 e8       	lddpc	r8,800012a8 <scheduler+0x80>
80001232:	f0 e8 00 00 	ld.d	r8,r8[0]
80001236:	e0 48 30 9b 	cp.w	r8,12443
8000123a:	5c 29       	cpc	r9
8000123c:	e0 88 00 05 	brls	80001246 <scheduler+0x1e>
	{
		int i = 0;
80001240:	30 08       	mov	r8,0
80001242:	ef 48 ff fc 	st.w	r7[-4],r8
		}
	}
#endif
/*******************************************************************/

	tcb * iterator = SUSPENDEDLIST;
80001246:	49 a8       	lddpc	r8,800012ac <scheduler+0x84>
80001248:	70 08       	ld.w	r8,r8[0x0]
8000124a:	ef 48 ff f8 	st.w	r7[-8],r8
	while( iterator && iterator->back_online_time <= system_ticks )
8000124e:	c0 d8       	rjmp	80001268 <scheduler+0x40>
	{
		taskUnsuspend(iterator);
80001250:	ee fc ff f8 	ld.w	r12,r7[-8]
80001254:	f0 1f 00 17 	mcall	800012b0 <scheduler+0x88>
		taskInstall(iterator);
80001258:	ee fc ff f8 	ld.w	r12,r7[-8]
8000125c:	f0 1f 00 16 	mcall	800012b4 <scheduler+0x8c>
		iterator = SUSPENDEDLIST;
80001260:	49 38       	lddpc	r8,800012ac <scheduler+0x84>
80001262:	70 08       	ld.w	r8,r8[0x0]
80001264:	ef 48 ff f8 	st.w	r7[-8],r8
	}
#endif
/*******************************************************************/

	tcb * iterator = SUSPENDEDLIST;
	while( iterator && iterator->back_online_time <= system_ticks )
80001268:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000126c:	58 08       	cp.w	r8,0
8000126e:	c0 d0       	breq	80001288 <scheduler+0x60>
80001270:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001274:	f0 ea 00 6c 	ld.d	r10,r8[108]
80001278:	48 c8       	lddpc	r8,800012a8 <scheduler+0x80>
8000127a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000127e:	10 3a       	cp.w	r10,r8
80001280:	f2 0b 13 00 	cpc	r11,r9
80001284:	fe 98 ff e6 	brls	80001250 <scheduler+0x28>
		iterator = SUSPENDEDLIST;
	}
	
#if IDLE_TASK_ENABLED
	// if no tasks are ready, run the idle task
	if( TCBLIST == NULL )
80001288:	48 c8       	lddpc	r8,800012b8 <scheduler+0x90>
8000128a:	70 08       	ld.w	r8,r8[0x0]
8000128c:	58 08       	cp.w	r8,0
8000128e:	c0 61       	brne	8000129a <scheduler+0x72>
	{
		EXECTASK = IDLETASK;
80001290:	48 b8       	lddpc	r8,800012bc <scheduler+0x94>
80001292:	70 09       	ld.w	r9,r8[0x0]
80001294:	48 b8       	lddpc	r8,800012c0 <scheduler+0x98>
80001296:	91 09       	st.w	r8[0x0],r9
80001298:	c0 58       	rjmp	800012a2 <scheduler+0x7a>
	}
	// if at least one task is ready, run the highest priority task
	else
	{
		EXECTASK = TCBLIST;
8000129a:	48 88       	lddpc	r8,800012b8 <scheduler+0x90>
8000129c:	70 09       	ld.w	r9,r8[0x0]
8000129e:	48 98       	lddpc	r8,800012c0 <scheduler+0x98>
800012a0:	91 09       	st.w	r8[0x0],r9
	}
#else
	EXECTASK = TCBLIST;
#endif

}
800012a2:	2f ed       	sub	sp,-8
800012a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800012a8:	00 00       	add	r0,r0
800012aa:	05 9c       	ld.ub	r12,r2[0x1]
800012ac:	00 00       	add	r0,r0
800012ae:	05 88       	ld.ub	r8,r2[0x0]
800012b0:	80 00       	ld.sh	r0,r0[0x0]
800012b2:	0d 70       	ld.ub	r0,--r6
800012b4:	80 00       	ld.sh	r0,r0[0x0]
800012b6:	09 d8       	ld.ub	r8,r4[0x5]
800012b8:	00 00       	add	r0,r0
800012ba:	05 84       	ld.ub	r4,r2[0x0]
800012bc:	00 00       	add	r0,r0
800012be:	05 80       	ld.ub	r0,r2[0x0]
800012c0:	00 00       	add	r0,r0
800012c2:	05 90       	ld.ub	r0,r2[0x1]

800012c4 <C.0.9446>:
800012c4:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

800012d4 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
800012d4:	eb cd 40 80 	pushm	r7,lr
800012d8:	1a 97       	mov	r7,sp
800012da:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
800012dc:	fe 78 38 00 	mov	r8,-51200
800012e0:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
800012e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012e8:	70 88       	ld.w	r8,r8[0x20]
800012ea:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
800012ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012f2:	e2 18 00 10 	andl	r8,0x10,COH
800012f6:	c0 30       	breq	800012fc <timerISR+0x28>
		ROSA_yieldFromISR();
800012f8:	f0 1f 00 03 	mcall	80001304 <timerISR+0x30>
}
800012fc:	2f ed       	sub	sp,-8
800012fe:	e3 cd 40 80 	ldm	sp++,r7,lr
80001302:	d6 03       	rete
80001304:	80 00       	ld.sh	r0,r0[0x0]
80001306:	08 20       	rsub	r0,r4

80001308 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80001308:	eb cd 40 80 	pushm	r7,lr
8000130c:	1a 97       	mov	r7,sp
8000130e:	20 7d       	sub	sp,28
80001310:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80001314:	4a 48       	lddpc	r8,800013a4 <timerPeriodSet+0x9c>
80001316:	ee ca 00 18 	sub	r10,r7,24
8000131a:	10 9b       	mov	r11,r8
8000131c:	f6 e8 00 00 	ld.d	r8,r11[0]
80001320:	f4 e9 00 00 	st.d	r10[0],r8
80001324:	f6 e8 00 08 	ld.d	r8,r11[8]
80001328:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
8000132c:	30 48       	mov	r8,4
8000132e:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80001332:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001336:	20 18       	sub	r8,1
80001338:	a3 68       	lsl	r8,0x2
8000133a:	ee 08 00 08 	add	r8,r7,r8
8000133e:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80001342:	e0 68 1b 00 	mov	r8,6912
80001346:	ea 18 00 b7 	orh	r8,0xb7
8000134a:	f0 09 0c 08 	divs	r8,r8,r9
8000134e:	10 99       	mov	r9,r8
80001350:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001354:	b1 39       	mul	r9,r8
80001356:	e0 68 4d d3 	mov	r8,19923
8000135a:	ea 18 10 62 	orh	r8,0x1062
8000135e:	f2 08 06 48 	mulu.d	r8,r9,r8
80001362:	f2 08 16 06 	lsr	r8,r9,0x6
80001366:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
8000136a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000136e:	f0 1f 00 0f 	mcall	800013a8 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80001372:	ee fc ff f8 	ld.w	r12,r7[-8]
80001376:	f0 1f 00 0e 	mcall	800013ac <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
8000137a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000137e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001382:	f2 08 02 4a 	mul	r10,r9,r8
80001386:	e0 68 9f 81 	mov	r8,40833
8000138a:	ea 18 16 5e 	orh	r8,0x165e
8000138e:	f4 08 04 48 	muls.d	r8,r10,r8
80001392:	b5 49       	asr	r9,0x14
80001394:	f4 08 14 1f 	asr	r8,r10,0x1f
80001398:	f2 08 01 08 	sub	r8,r9,r8
8000139c:	10 9c       	mov	r12,r8
8000139e:	2f 9d       	sub	sp,-28
800013a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800013a4:	80 00       	ld.sh	r0,r0[0x0]
800013a6:	12 c4       	st.b	r9++,r4
800013a8:	80 00       	ld.sh	r0,r0[0x0]
800013aa:	19 e0       	ld.ub	r0,r12[0x6]
800013ac:	80 00       	ld.sh	r0,r0[0x0]
800013ae:	19 ca       	ld.ub	r10,r12[0x4]

800013b0 <buttonInit>:
800013b0:	eb cd 40 80 	pushm	r7,lr
800013b4:	1a 97       	mov	r7,sp
800013b6:	30 1b       	mov	r11,1
800013b8:	35 8c       	mov	r12,88
800013ba:	f0 1f 00 07 	mcall	800013d4 <buttonInit+0x24>
800013be:	30 1b       	mov	r11,1
800013c0:	35 5c       	mov	r12,85
800013c2:	f0 1f 00 05 	mcall	800013d4 <buttonInit+0x24>
800013c6:	30 1b       	mov	r11,1
800013c8:	35 2c       	mov	r12,82
800013ca:	f0 1f 00 03 	mcall	800013d4 <buttonInit+0x24>
800013ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800013d2:	00 00       	add	r0,r0
800013d4:	80 00       	ld.sh	r0,r0[0x0]
800013d6:	14 10       	sub	r0,r10

800013d8 <joystickInit>:
800013d8:	eb cd 40 80 	pushm	r7,lr
800013dc:	1a 97       	mov	r7,sp
800013de:	30 1b       	mov	r11,1
800013e0:	31 bc       	mov	r12,27
800013e2:	f0 1f 00 0b 	mcall	8000140c <joystickInit+0x34>
800013e6:	30 1b       	mov	r11,1
800013e8:	31 9c       	mov	r12,25
800013ea:	f0 1f 00 09 	mcall	8000140c <joystickInit+0x34>
800013ee:	30 1b       	mov	r11,1
800013f0:	31 cc       	mov	r12,28
800013f2:	f0 1f 00 07 	mcall	8000140c <joystickInit+0x34>
800013f6:	30 1b       	mov	r11,1
800013f8:	31 4c       	mov	r12,20
800013fa:	f0 1f 00 05 	mcall	8000140c <joystickInit+0x34>
800013fe:	30 1b       	mov	r11,1
80001400:	31 ac       	mov	r12,26
80001402:	f0 1f 00 03 	mcall	8000140c <joystickInit+0x34>
80001406:	e3 cd 80 80 	ldm	sp++,r7,pc
8000140a:	00 00       	add	r0,r0
8000140c:	80 00       	ld.sh	r0,r0[0x0]
8000140e:	14 10       	sub	r0,r10

80001410 <gpioInit>:
80001410:	eb cd 40 80 	pushm	r7,lr
80001414:	1a 97       	mov	r7,sp
80001416:	20 7d       	sub	sp,28
80001418:	ef 4c ff ec 	st.w	r7[-20],r12
8000141c:	ef 4b ff e8 	st.w	r7[-24],r11
80001420:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001424:	a5 58       	asr	r8,0x5
80001426:	ef 48 ff f4 	st.w	r7[-12],r8
8000142a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000142e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001432:	ef 48 ff fc 	st.w	r7[-4],r8
80001436:	30 19       	mov	r9,1
80001438:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000143c:	f2 08 09 48 	lsl	r8,r9,r8
80001440:	ef 48 ff f8 	st.w	r7[-8],r8
80001444:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001448:	a9 68       	lsl	r8,0x8
8000144a:	e0 28 f0 00 	sub	r8,61440
8000144e:	ef 48 ff f0 	st.w	r7[-16],r8
80001452:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001456:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000145a:	91 19       	st.w	r8[0x4],r9
8000145c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001460:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001464:	91 69       	st.w	r8[0x18],r9
80001466:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000146a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000146e:	91 a9       	st.w	r8[0x28],r9
80001470:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001474:	ef 48 ff e4 	st.w	r7[-28],r8
80001478:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000147c:	58 08       	cp.w	r8,0
8000147e:	c0 60       	breq	8000148a <gpioInit+0x7a>
80001480:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001484:	58 18       	cp.w	r8,1
80001486:	c0 90       	breq	80001498 <gpioInit+0x88>
80001488:	c0 f8       	rjmp	800014a6 <gpioInit+0x96>
8000148a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000148e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001492:	f1 49 00 44 	st.w	r8[68],r9
80001496:	c0 e8       	rjmp	800014b2 <gpioInit+0xa2>
80001498:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000149c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800014a0:	f1 49 00 48 	st.w	r8[72],r9
800014a4:	c0 78       	rjmp	800014b2 <gpioInit+0xa2>
800014a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800014ae:	f1 49 00 48 	st.w	r8[72],r9
800014b2:	2f 9d       	sub	sp,-28
800014b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800014b8 <gpioClear>:
800014b8:	eb cd 40 80 	pushm	r7,lr
800014bc:	1a 97       	mov	r7,sp
800014be:	20 5d       	sub	sp,20
800014c0:	ef 4c ff ec 	st.w	r7[-20],r12
800014c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800014c8:	a5 58       	asr	r8,0x5
800014ca:	ef 48 ff f4 	st.w	r7[-12],r8
800014ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800014d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800014d6:	ef 48 ff fc 	st.w	r7[-4],r8
800014da:	30 19       	mov	r9,1
800014dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014e0:	f2 08 09 48 	lsl	r8,r9,r8
800014e4:	ef 48 ff f8 	st.w	r7[-8],r8
800014e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800014ec:	a9 68       	lsl	r8,0x8
800014ee:	e0 28 f0 00 	sub	r8,61440
800014f2:	ef 48 ff f0 	st.w	r7[-16],r8
800014f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800014fe:	f1 49 00 58 	st.w	r8[88],r9
80001502:	2f bd       	sub	sp,-20
80001504:	e3 cd 80 80 	ldm	sp++,r7,pc

80001508 <gpioSet>:
80001508:	eb cd 40 80 	pushm	r7,lr
8000150c:	1a 97       	mov	r7,sp
8000150e:	20 5d       	sub	sp,20
80001510:	ef 4c ff ec 	st.w	r7[-20],r12
80001514:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001518:	a5 58       	asr	r8,0x5
8000151a:	ef 48 ff f4 	st.w	r7[-12],r8
8000151e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001522:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001526:	ef 48 ff fc 	st.w	r7[-4],r8
8000152a:	30 19       	mov	r9,1
8000152c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001530:	f2 08 09 48 	lsl	r8,r9,r8
80001534:	ef 48 ff f8 	st.w	r7[-8],r8
80001538:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000153c:	a9 68       	lsl	r8,0x8
8000153e:	e0 28 f0 00 	sub	r8,61440
80001542:	ef 48 ff f0 	st.w	r7[-16],r8
80001546:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000154a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000154e:	f1 49 00 54 	st.w	r8[84],r9
80001552:	2f bd       	sub	sp,-20
80001554:	e3 cd 80 80 	ldm	sp++,r7,pc

80001558 <gpioToggle>:
80001558:	eb cd 40 80 	pushm	r7,lr
8000155c:	1a 97       	mov	r7,sp
8000155e:	20 5d       	sub	sp,20
80001560:	ef 4c ff ec 	st.w	r7[-20],r12
80001564:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001568:	a5 58       	asr	r8,0x5
8000156a:	ef 48 ff f4 	st.w	r7[-12],r8
8000156e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001572:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001576:	ef 48 ff fc 	st.w	r7[-4],r8
8000157a:	30 19       	mov	r9,1
8000157c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001580:	f2 08 09 48 	lsl	r8,r9,r8
80001584:	ef 48 ff f8 	st.w	r7[-8],r8
80001588:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000158c:	a9 68       	lsl	r8,0x8
8000158e:	e0 28 f0 00 	sub	r8,61440
80001592:	ef 48 ff f0 	st.w	r7[-16],r8
80001596:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000159a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000159e:	f1 49 00 5c 	st.w	r8[92],r9
800015a2:	2f bd       	sub	sp,-20
800015a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800015a8 <ledInit>:
800015a8:	eb cd 40 80 	pushm	r7,lr
800015ac:	1a 97       	mov	r7,sp
800015ae:	20 9d       	sub	sp,36
800015b0:	49 e8       	lddpc	r8,80001628 <ledInit+0x80>
800015b2:	ee cb 00 24 	sub	r11,r7,36
800015b6:	10 9a       	mov	r10,r8
800015b8:	f4 e8 00 00 	ld.d	r8,r10[0]
800015bc:	f6 e9 00 00 	st.d	r11[0],r8
800015c0:	f4 e8 00 08 	ld.d	r8,r10[8]
800015c4:	f6 e9 00 08 	st.d	r11[8],r8
800015c8:	f4 e8 00 10 	ld.d	r8,r10[16]
800015cc:	f6 e9 00 10 	st.d	r11[16],r8
800015d0:	f4 e8 00 18 	ld.d	r8,r10[24]
800015d4:	f6 e9 00 18 	st.d	r11[24],r8
800015d8:	30 08       	mov	r8,0
800015da:	ef 48 ff fc 	st.w	r7[-4],r8
800015de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015e2:	a3 68       	lsl	r8,0x2
800015e4:	ee 08 00 08 	add	r8,r7,r8
800015e8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800015ec:	10 9c       	mov	r12,r8
800015ee:	f0 1f 00 10 	mcall	8000162c <ledInit+0x84>
800015f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015f6:	a3 68       	lsl	r8,0x2
800015f8:	ee 08 00 08 	add	r8,r7,r8
800015fc:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001600:	30 0b       	mov	r11,0
80001602:	10 9c       	mov	r12,r8
80001604:	f0 1f 00 0b 	mcall	80001630 <ledInit+0x88>
80001608:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000160c:	58 78       	cp.w	r8,7
8000160e:	5f 18       	srne	r8
80001610:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80001614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001618:	2f f8       	sub	r8,-1
8000161a:	ef 48 ff fc 	st.w	r7[-4],r8
8000161e:	58 09       	cp.w	r9,0
80001620:	cd f1       	brne	800015de <ledInit+0x36>
80001622:	2f 7d       	sub	sp,-36
80001624:	e3 cd 80 80 	ldm	sp++,r7,pc
80001628:	80 00       	ld.sh	r0,r0[0x0]
8000162a:	28 00       	sub	r0,-128
8000162c:	80 00       	ld.sh	r0,r0[0x0]
8000162e:	16 54       	eor	r4,r11
80001630:	80 00       	ld.sh	r0,r0[0x0]
80001632:	14 10       	sub	r0,r10

80001634 <ledOn>:
80001634:	eb cd 40 80 	pushm	r7,lr
80001638:	1a 97       	mov	r7,sp
8000163a:	20 1d       	sub	sp,4
8000163c:	ef 4c ff fc 	st.w	r7[-4],r12
80001640:	ee fc ff fc 	ld.w	r12,r7[-4]
80001644:	f0 1f 00 03 	mcall	80001650 <ledOn+0x1c>
80001648:	2f fd       	sub	sp,-4
8000164a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000164e:	00 00       	add	r0,r0
80001650:	80 00       	ld.sh	r0,r0[0x0]
80001652:	14 b8       	st.h	r10++,r8

80001654 <ledOff>:
80001654:	eb cd 40 80 	pushm	r7,lr
80001658:	1a 97       	mov	r7,sp
8000165a:	20 1d       	sub	sp,4
8000165c:	ef 4c ff fc 	st.w	r7[-4],r12
80001660:	ee fc ff fc 	ld.w	r12,r7[-4]
80001664:	f0 1f 00 03 	mcall	80001670 <ledOff+0x1c>
80001668:	2f fd       	sub	sp,-4
8000166a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000166e:	00 00       	add	r0,r0
80001670:	80 00       	ld.sh	r0,r0[0x0]
80001672:	15 08       	ld.w	r8,r10++

80001674 <ledToggle>:
80001674:	eb cd 40 80 	pushm	r7,lr
80001678:	1a 97       	mov	r7,sp
8000167a:	20 1d       	sub	sp,4
8000167c:	ef 4c ff fc 	st.w	r7[-4],r12
80001680:	ee fc ff fc 	ld.w	r12,r7[-4]
80001684:	f0 1f 00 03 	mcall	80001690 <ledToggle+0x1c>
80001688:	2f fd       	sub	sp,-4
8000168a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000168e:	00 00       	add	r0,r0
80001690:	80 00       	ld.sh	r0,r0[0x0]
80001692:	15 58       	ld.sh	r8,--r10

80001694 <potInit>:
80001694:	d3 01       	pushm	r11-r12
80001696:	e0 6c 10 00 	mov	r12,4096
8000169a:	ea 1c ff ff 	orh	r12,0xffff
8000169e:	31 6b       	mov	r11,22
800016a0:	99 2b       	st.w	r12[0x8],r11
800016a2:	99 6b       	st.w	r12[0x18],r11
800016a4:	99 6b       	st.w	r12[0x18],r11
800016a6:	e0 6c 3c 00 	mov	r12,15360
800016aa:	ea 1c ff ff 	orh	r12,0xffff
800016ae:	30 1b       	mov	r11,1
800016b0:	99 0b       	st.w	r12[0x0],r11
800016b2:	e0 6b 0f 1f 	mov	r11,3871
800016b6:	b1 6b       	lsl	r11,0x10
800016b8:	99 1b       	st.w	r12[0x4],r11
800016ba:	30 2b       	mov	r11,2
800016bc:	99 4b       	st.w	r12[0x10],r11
800016be:	d3 02       	popm	r11-r12
800016c0:	1c 9f       	mov	pc,lr

800016c2 <potGetValue>:
800016c2:	d1 81       	pushm	r10-r11
800016c4:	e0 6c 3c 00 	mov	r12,15360
800016c8:	ea 1c ff ff 	orh	r12,0xffff
800016cc:	30 2b       	mov	r11,2
800016ce:	99 0b       	st.w	r12[0x0],r11

800016d0 <a1>:
800016d0:	78 7a       	ld.w	r10,r12[0x1c]
800016d2:	16 7a       	tst	r10,r11
800016d4:	cf e0       	breq	800016d0 <a1>
800016d6:	78 dc       	ld.w	r12,r12[0x34]
800016d8:	d1 82       	popm	r10-r11
800016da:	1c 9f       	mov	pc,lr

800016dc <usartReset>:
800016dc:	eb cd 40 80 	pushm	r7,lr
800016e0:	1a 97       	mov	r7,sp
800016e2:	20 3d       	sub	sp,12
800016e4:	ef 4c ff f8 	st.w	r7[-8],r12
800016e8:	f0 1f 00 16 	mcall	80001740 <usartReset+0x64>
800016ec:	18 98       	mov	r8,r12
800016ee:	ef 48 ff fc 	st.w	r7[-4],r8
800016f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800016f6:	58 08       	cp.w	r8,0
800016f8:	c0 30       	breq	800016fe <usartReset+0x22>
800016fa:	f0 1f 00 13 	mcall	80001744 <usartReset+0x68>
800016fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001702:	3f f8       	mov	r8,-1
80001704:	93 38       	st.w	r9[0xc],r8
80001706:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000170a:	70 58       	ld.w	r8,r8[0x14]
8000170c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001710:	58 08       	cp.w	r8,0
80001712:	c0 30       	breq	80001718 <usartReset+0x3c>
80001714:	f0 1f 00 0d 	mcall	80001748 <usartReset+0x6c>
80001718:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000171c:	30 08       	mov	r8,0
8000171e:	93 18       	st.w	r9[0x4],r8
80001720:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001724:	30 08       	mov	r8,0
80001726:	93 98       	st.w	r9[0x24],r8
80001728:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000172c:	30 08       	mov	r8,0
8000172e:	93 a8       	st.w	r9[0x28],r8
80001730:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001734:	ea 68 61 0c 	mov	r8,680204
80001738:	93 08       	st.w	r9[0x0],r8
8000173a:	2f dd       	sub	sp,-12
8000173c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001740:	80 00       	ld.sh	r0,r0[0x0]
80001742:	25 6e       	sub	lr,86
80001744:	80 00       	ld.sh	r0,r0[0x0]
80001746:	25 66       	sub	r6,86
80001748:	80 00       	ld.sh	r0,r0[0x0]
8000174a:	25 6a       	sub	r10,86

8000174c <usartSetBaudrate>:
8000174c:	eb cd 40 80 	pushm	r7,lr
80001750:	1a 97       	mov	r7,sp
80001752:	20 bd       	sub	sp,44
80001754:	ef 4c ff ec 	st.w	r7[-20],r12
80001758:	ef 4b ff e8 	st.w	r7[-24],r11
8000175c:	ef 4a ff e4 	st.w	r7[-28],r10
80001760:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001764:	f0 09 15 04 	lsl	r9,r8,0x4
80001768:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000176c:	10 39       	cp.w	r9,r8
8000176e:	e0 8b 00 06 	brhi	8000177a <usartSetBaudrate+0x2e>
80001772:	31 09       	mov	r9,16
80001774:	ef 49 ff d4 	st.w	r7[-44],r9
80001778:	c0 48       	rjmp	80001780 <usartSetBaudrate+0x34>
8000177a:	30 88       	mov	r8,8
8000177c:	ef 48 ff d4 	st.w	r7[-44],r8
80001780:	ee f9 ff d4 	ld.w	r9,r7[-44]
80001784:	ef 49 ff f0 	st.w	r7[-16],r9
80001788:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000178c:	f0 0a 15 03 	lsl	r10,r8,0x3
80001790:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001794:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001798:	f2 08 02 48 	mul	r8,r9,r8
8000179c:	a1 98       	lsr	r8,0x1
8000179e:	10 0a       	add	r10,r8
800017a0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800017a4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800017a8:	f2 08 02 48 	mul	r8,r9,r8
800017ac:	f4 08 0d 08 	divu	r8,r10,r8
800017b0:	ef 48 ff f4 	st.w	r7[-12],r8
800017b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800017b8:	a3 98       	lsr	r8,0x3
800017ba:	ef 48 ff f8 	st.w	r7[-8],r8
800017be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800017c2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800017c6:	ef 48 ff fc 	st.w	r7[-4],r8
800017ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017ce:	58 08       	cp.w	r8,0
800017d0:	c0 70       	breq	800017de <usartSetBaudrate+0x92>
800017d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017d6:	e0 48 ff ff 	cp.w	r8,65535
800017da:	e0 88 00 06 	brls	800017e6 <usartSetBaudrate+0x9a>
800017de:	30 18       	mov	r8,1
800017e0:	ef 48 ff d8 	st.w	r7[-40],r8
800017e4:	c2 c8       	rjmp	8000183c <usartSetBaudrate+0xf0>
800017e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800017ea:	70 18       	ld.w	r8,r8[0x4]
800017ec:	10 99       	mov	r9,r8
800017ee:	e4 19 ff f7 	andh	r9,0xfff7
800017f2:	e0 19 fe cf 	andl	r9,0xfecf
800017f6:	ef 49 ff dc 	st.w	r7[-36],r9
800017fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800017fe:	59 08       	cp.w	r8,16
80001800:	c0 60       	breq	8000180c <usartSetBaudrate+0xc0>
80001802:	e8 68 00 00 	mov	r8,524288
80001806:	ef 48 ff e0 	st.w	r7[-32],r8
8000180a:	c0 48       	rjmp	80001812 <usartSetBaudrate+0xc6>
8000180c:	30 09       	mov	r9,0
8000180e:	ef 49 ff e0 	st.w	r7[-32],r9
80001812:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001816:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000181a:	10 49       	or	r9,r8
8000181c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001820:	91 19       	st.w	r8[0x4],r9
80001822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001826:	f0 09 15 10 	lsl	r9,r8,0x10
8000182a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000182e:	10 49       	or	r9,r8
80001830:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001834:	91 89       	st.w	r8[0x20],r9
80001836:	30 09       	mov	r9,0
80001838:	ef 49 ff d8 	st.w	r7[-40],r9
8000183c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001840:	10 9c       	mov	r12,r8
80001842:	2f 5d       	sub	sp,-44
80001844:	e3 cd 80 80 	ldm	sp++,r7,pc

80001848 <usartInit>:
80001848:	eb cd 40 80 	pushm	r7,lr
8000184c:	1a 97       	mov	r7,sp
8000184e:	20 4d       	sub	sp,16
80001850:	ef 4c ff f8 	st.w	r7[-8],r12
80001854:	ef 4b ff f4 	st.w	r7[-12],r11
80001858:	ef 4a ff f0 	st.w	r7[-16],r10
8000185c:	fe 78 10 00 	mov	r8,-61440
80001860:	ef 48 ff fc 	st.w	r7[-4],r8
80001864:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001868:	30 18       	mov	r8,1
8000186a:	93 28       	st.w	r9[0x8],r8
8000186c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001870:	30 28       	mov	r8,2
80001872:	93 28       	st.w	r9[0x8],r8
80001874:	ee fc ff f8 	ld.w	r12,r7[-8]
80001878:	f0 1f 00 3b 	mcall	80001964 <usartInit+0x11c>
8000187c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001880:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001884:	70 08       	ld.w	r8,r8[0x0]
80001886:	12 9a       	mov	r10,r9
80001888:	10 9b       	mov	r11,r8
8000188a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000188e:	f0 1f 00 37 	mcall	80001968 <usartInit+0x120>
80001892:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001896:	11 c9       	ld.ub	r9,r8[0x4]
80001898:	30 98       	mov	r8,9
8000189a:	f0 09 18 00 	cp.b	r9,r8
8000189e:	c0 a1       	brne	800018b2 <usartInit+0x6a>
800018a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800018a4:	70 18       	ld.w	r8,r8[0x4]
800018a6:	10 99       	mov	r9,r8
800018a8:	b1 b9       	sbr	r9,0x11
800018aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800018ae:	91 19       	st.w	r8[0x4],r9
800018b0:	c0 d8       	rjmp	800018ca <usartInit+0x82>
800018b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800018b6:	70 19       	ld.w	r9,r8[0x4]
800018b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800018bc:	11 c8       	ld.ub	r8,r8[0x4]
800018be:	20 58       	sub	r8,5
800018c0:	a7 68       	lsl	r8,0x6
800018c2:	10 49       	or	r9,r8
800018c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800018c8:	91 19       	st.w	r8[0x4],r9
800018ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800018ce:	70 1a       	ld.w	r10,r8[0x4]
800018d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800018d4:	11 d8       	ld.ub	r8,r8[0x5]
800018d6:	f0 09 15 09 	lsl	r9,r8,0x9
800018da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800018de:	f1 38 00 08 	ld.ub	r8,r8[8]
800018e2:	af 68       	lsl	r8,0xe
800018e4:	f3 e8 10 08 	or	r8,r9,r8
800018e8:	f5 e8 10 09 	or	r9,r10,r8
800018ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800018f0:	91 19       	st.w	r8[0x4],r9
800018f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800018f6:	90 39       	ld.sh	r9,r8[0x6]
800018f8:	30 28       	mov	r8,2
800018fa:	f0 09 19 00 	cp.h	r9,r8
800018fe:	e0 88 00 14 	brls	80001926 <usartInit+0xde>
80001902:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001906:	70 18       	ld.w	r8,r8[0x4]
80001908:	10 99       	mov	r9,r8
8000190a:	ad b9       	sbr	r9,0xd
8000190c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001910:	91 19       	st.w	r8[0x4],r9
80001912:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001916:	90 38       	ld.sh	r8,r8[0x6]
80001918:	5c 78       	castu.h	r8
8000191a:	20 28       	sub	r8,2
8000191c:	10 99       	mov	r9,r8
8000191e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001922:	91 a9       	st.w	r8[0x28],r9
80001924:	c0 d8       	rjmp	8000193e <usartInit+0xf6>
80001926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000192a:	70 19       	ld.w	r9,r8[0x4]
8000192c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001930:	90 38       	ld.sh	r8,r8[0x6]
80001932:	5c 78       	castu.h	r8
80001934:	ad 68       	lsl	r8,0xc
80001936:	10 49       	or	r9,r8
80001938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000193c:	91 19       	st.w	r8[0x4],r9
8000193e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001942:	70 18       	ld.w	r8,r8[0x4]
80001944:	10 99       	mov	r9,r8
80001946:	e0 19 ff f0 	andl	r9,0xfff0
8000194a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000194e:	91 19       	st.w	r8[0x4],r9
80001950:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001954:	35 08       	mov	r8,80
80001956:	93 08       	st.w	r9[0x0],r8
80001958:	30 08       	mov	r8,0
8000195a:	10 9c       	mov	r12,r8
8000195c:	2f cd       	sub	sp,-16
8000195e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001962:	00 00       	add	r0,r0
80001964:	80 00       	ld.sh	r0,r0[0x0]
80001966:	16 dc       	st.w	--r11,r12
80001968:	80 00       	ld.sh	r0,r0[0x0]
8000196a:	17 4c       	ld.w	r12,--r11

8000196c <timerInit>:
8000196c:	d5 01       	pushm	r11,lr
8000196e:	d2 01       	pushm	r12
80001970:	f0 1f 00 28 	mcall	80001a10 <timerClearInterrupt+0x10>
80001974:	f0 1f 00 28 	mcall	80001a14 <timerClearInterrupt+0x14>
80001978:	e0 6c 38 00 	mov	r12,14336
8000197c:	ea 1c ff ff 	orh	r12,0xffff
80001980:	e0 6b c0 00 	mov	r11,49152
80001984:	ea 1b 00 00 	orh	r11,0x0
80001988:	99 1b       	st.w	r12[0x4],r11
8000198a:	30 1b       	mov	r11,1
8000198c:	a5 6b       	lsl	r11,0x4
8000198e:	99 9b       	st.w	r12[0x24],r11
80001990:	d2 02       	popm	r12
80001992:	f0 1f 00 22 	mcall	80001a18 <timerClearInterrupt+0x18>
80001996:	d5 02       	popm	r11,lr
80001998:	1c 9f       	mov	pc,lr

8000199a <timerReset>:
8000199a:	d3 01       	pushm	r11-r12
8000199c:	e0 6c 38 00 	mov	r12,14336
800019a0:	ea 1c ff ff 	orh	r12,0xffff
800019a4:	30 5b       	mov	r11,5
800019a6:	99 0b       	st.w	r12[0x0],r11
800019a8:	e0 6b 00 08 	mov	r11,8
800019ac:	ea 1b 00 00 	orh	r11,0x0
800019b0:	76 0b       	ld.w	r11,r11[0x0]
800019b2:	99 7b       	st.w	r12[0x1c],r11
800019b4:	d3 02       	popm	r11-r12
800019b6:	1c 9f       	mov	pc,lr

800019b8 <timerStop>:
800019b8:	d3 01       	pushm	r11-r12
800019ba:	e0 6c 38 00 	mov	r12,14336
800019be:	ea 1c ff ff 	orh	r12,0xffff
800019c2:	30 2b       	mov	r11,2
800019c4:	99 0b       	st.w	r12[0x0],r11
800019c6:	d3 02       	popm	r11-r12
800019c8:	1c 9f       	mov	pc,lr

800019ca <timerRCSet>:
800019ca:	d3 01       	pushm	r11-r12
800019cc:	49 4b       	lddpc	r11,80001a1c <timerClearInterrupt+0x1c>
800019ce:	97 0c       	st.w	r11[0x0],r12
800019d0:	e0 6c 38 00 	mov	r12,14336
800019d4:	ea 1c ff ff 	orh	r12,0xffff
800019d8:	76 0b       	ld.w	r11,r11[0x0]
800019da:	99 7b       	st.w	r12[0x1c],r11
800019dc:	d3 02       	popm	r11-r12
800019de:	1c 9f       	mov	pc,lr

800019e0 <timerPrescaleSet>:
800019e0:	d3 81       	pushm	r10-r12
800019e2:	49 0b       	lddpc	r11,80001a20 <timerClearInterrupt+0x20>
800019e4:	97 0c       	st.w	r11[0x0],r12
800019e6:	e0 6c 38 00 	mov	r12,14336
800019ea:	ea 1c ff ff 	orh	r12,0xffff
800019ee:	78 1a       	ld.w	r10,r12[0x4]
800019f0:	3f 8b       	mov	r11,-8
800019f2:	16 6a       	and	r10,r11
800019f4:	48 bb       	lddpc	r11,80001a20 <timerClearInterrupt+0x20>
800019f6:	76 0b       	ld.w	r11,r11[0x0]
800019f8:	14 4b       	or	r11,r10
800019fa:	99 1b       	st.w	r12[0x4],r11
800019fc:	d3 82       	popm	r10-r12
800019fe:	1c 9f       	mov	pc,lr

80001a00 <timerClearInterrupt>:
80001a00:	d2 01       	pushm	r12
80001a02:	e0 6c 38 00 	mov	r12,14336
80001a06:	ea 1c ff ff 	orh	r12,0xffff
80001a0a:	78 8c       	ld.w	r12,r12[0x20]
80001a0c:	d2 02       	popm	r12
80001a0e:	1c 9f       	mov	pc,lr
80001a10:	80 00       	ld.sh	r0,r0[0x0]
80001a12:	25 66       	sub	r6,86
80001a14:	80 00       	ld.sh	r0,r0[0x0]
80001a16:	1a 00       	add	r0,sp
80001a18:	80 00       	ld.sh	r0,r0[0x0]
80001a1a:	13 08       	ld.w	r8,r9++
80001a1c:	00 00       	add	r0,r0
80001a1e:	00 08       	add	r8,r0
80001a20:	00 00       	add	r0,r0
80001a22:	00 0c       	add	r12,r0

80001a24 <_stext>:
80001a24:	49 7d       	lddpc	sp,80001a80 <udata_end+0x4>
80001a26:	49 80       	lddpc	r0,80001a84 <udata_end+0x8>
80001a28:	1a d0       	st.w	--sp,r0
80001a2a:	e5 cd 20 00 	ldmts	sp,sp
80001a2e:	1b 00       	ld.w	r0,sp++
80001a30:	49 60       	lddpc	r0,80001a88 <udata_end+0xc>
80001a32:	e3 b0 00 01 	mtsr	0x4,r0
80001a36:	d5 53       	csrf	0x15
80001a38:	e0 6c 0c 00 	mov	r12,3072
80001a3c:	ea 1c ff ff 	orh	r12,0xffff
80001a40:	e0 6b 01 07 	mov	r11,263
80001a44:	99 ab       	st.w	r12[0x28],r11
80001a46:	30 4b       	mov	r11,4
80001a48:	99 0b       	st.w	r12[0x0],r11
80001a4a:	e0 6a 00 80 	mov	r10,128

80001a4e <xw8>:
80001a4e:	79 5b       	ld.w	r11,r12[0x54]
80001a50:	14 7b       	tst	r11,r10
80001a52:	cf e0       	breq	80001a4e <xw8>
80001a54:	30 5b       	mov	r11,5
80001a56:	99 0b       	st.w	r12[0x0],r11

80001a58 <idata_>:
80001a58:	48 d0       	lddpc	r0,80001a8c <udata_end+0x10>
80001a5a:	48 e1       	lddpc	r1,80001a90 <udata_end+0x14>
80001a5c:	02 30       	cp.w	r0,r1
80001a5e:	c0 62       	brcc	80001a6a <idata_end>
80001a60:	48 d2       	lddpc	r2,80001a94 <udata_end+0x18>

80001a62 <idata_loop>:
80001a62:	05 04       	ld.w	r4,r2++
80001a64:	00 a4       	st.w	r0++,r4
80001a66:	02 30       	cp.w	r0,r1
80001a68:	cf d3       	brcs	80001a62 <idata_loop>

80001a6a <idata_end>:
80001a6a:	48 c0       	lddpc	r0,80001a98 <udata_end+0x1c>
80001a6c:	48 c1       	lddpc	r1,80001a9c <udata_end+0x20>
80001a6e:	02 30       	cp.w	r0,r1
80001a70:	c0 62       	brcc	80001a7c <udata_end>
80001a72:	30 02       	mov	r2,0
80001a74:	30 03       	mov	r3,0

80001a76 <udata_loop>:
80001a76:	00 a2       	st.w	r0++,r2
80001a78:	02 30       	cp.w	r0,r1
80001a7a:	cf e3       	brcs	80001a76 <udata_loop>

80001a7c <udata_end>:
80001a7c:	48 9f       	lddpc	pc,80001aa0 <udata_end+0x24>
80001a7e:	00 00       	add	r0,r0
80001a80:	00 01       	add	r1,r0
80001a82:	00 00       	add	r0,r0
80001a84:	00 00       	add	r0,r0
80001a86:	f0 00       	*unknown*
80001a88:	80 00       	ld.sh	r0,r0[0x0]
80001a8a:	24 00       	sub	r0,64
80001a8c:	00 00       	add	r0,r0
80001a8e:	00 08       	add	r8,r0
80001a90:	00 00       	add	r0,r0
80001a92:	05 18       	ld.sh	r8,r2++
80001a94:	80 00       	ld.sh	r0,r0[0x0]
80001a96:	28 88       	sub	r8,-120
80001a98:	00 00       	add	r0,r0
80001a9a:	05 18       	ld.sh	r8,r2++
80001a9c:	00 00       	add	r0,r0
80001a9e:	05 b0       	ld.ub	r0,r2[0x3]
80001aa0:	80 00       	ld.sh	r0,r0[0x0]
80001aa2:	07 44       	ld.w	r4,--r3

80001aa4 <abs>:
80001aa4:	5c 4c       	abs	r12
80001aa6:	5e fc       	retal	r12

80001aa8 <calloc>:
80001aa8:	d4 01       	pushm	lr
80001aaa:	48 48       	lddpc	r8,80001ab8 <calloc+0x10>
80001aac:	16 9a       	mov	r10,r11
80001aae:	18 9b       	mov	r11,r12
80001ab0:	70 0c       	ld.w	r12,r8[0x0]
80001ab2:	f0 1f 00 03 	mcall	80001abc <calloc+0x14>
80001ab6:	d8 02       	popm	pc
80001ab8:	00 00       	add	r0,r0
80001aba:	01 00       	ld.w	r0,r0++
80001abc:	80 00       	ld.sh	r0,r0[0x0]
80001abe:	1a c0       	st.b	sp++,r0

80001ac0 <_calloc_r>:
80001ac0:	d4 21       	pushm	r4-r7,lr
80001ac2:	f4 0b 02 4b 	mul	r11,r10,r11
80001ac6:	f0 1f 00 15 	mcall	80001b18 <_calloc_r+0x58>
80001aca:	18 97       	mov	r7,r12
80001acc:	c2 30       	breq	80001b12 <_calloc_r+0x52>
80001ace:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001ad2:	e0 1a ff fc 	andl	r10,0xfffc
80001ad6:	20 4a       	sub	r10,4
80001ad8:	e0 4a 00 24 	cp.w	r10,36
80001adc:	e0 8b 00 18 	brhi	80001b0c <_calloc_r+0x4c>
80001ae0:	18 98       	mov	r8,r12
80001ae2:	59 3a       	cp.w	r10,19
80001ae4:	e0 88 00 0f 	brls	80001b02 <_calloc_r+0x42>
80001ae8:	30 09       	mov	r9,0
80001aea:	10 a9       	st.w	r8++,r9
80001aec:	10 a9       	st.w	r8++,r9
80001aee:	59 ba       	cp.w	r10,27
80001af0:	e0 88 00 09 	brls	80001b02 <_calloc_r+0x42>
80001af4:	10 a9       	st.w	r8++,r9
80001af6:	10 a9       	st.w	r8++,r9
80001af8:	e0 4a 00 24 	cp.w	r10,36
80001afc:	c0 31       	brne	80001b02 <_calloc_r+0x42>
80001afe:	10 a9       	st.w	r8++,r9
80001b00:	10 a9       	st.w	r8++,r9
80001b02:	30 09       	mov	r9,0
80001b04:	10 a9       	st.w	r8++,r9
80001b06:	91 19       	st.w	r8[0x4],r9
80001b08:	91 09       	st.w	r8[0x0],r9
80001b0a:	c0 48       	rjmp	80001b12 <_calloc_r+0x52>
80001b0c:	30 0b       	mov	r11,0
80001b0e:	f0 1f 00 04 	mcall	80001b1c <_calloc_r+0x5c>
80001b12:	0e 9c       	mov	r12,r7
80001b14:	d8 22       	popm	r4-r7,pc
80001b16:	00 00       	add	r0,r0
80001b18:	80 00       	ld.sh	r0,r0[0x0]
80001b1a:	1b 38       	ld.ub	r8,sp++
80001b1c:	80 00       	ld.sh	r0,r0[0x0]
80001b1e:	1f 88       	ld.ub	r8,pc[0x0]

80001b20 <free>:
80001b20:	d4 01       	pushm	lr
80001b22:	48 48       	lddpc	r8,80001b30 <free+0x10>
80001b24:	18 9b       	mov	r11,r12
80001b26:	70 0c       	ld.w	r12,r8[0x0]
80001b28:	f0 1f 00 03 	mcall	80001b34 <free+0x14>
80001b2c:	d8 02       	popm	pc
80001b2e:	00 00       	add	r0,r0
80001b30:	00 00       	add	r0,r0
80001b32:	01 00       	ld.w	r0,r0++
80001b34:	80 00       	ld.sh	r0,r0[0x0]
80001b36:	20 b8       	sub	r8,11

80001b38 <_malloc_r>:
80001b38:	d4 31       	pushm	r0-r7,lr
80001b3a:	f6 c8 ff f5 	sub	r8,r11,-11
80001b3e:	18 95       	mov	r5,r12
80001b40:	10 97       	mov	r7,r8
80001b42:	e0 17 ff f8 	andl	r7,0xfff8
80001b46:	59 68       	cp.w	r8,22
80001b48:	f9 b7 08 10 	movls	r7,16
80001b4c:	16 37       	cp.w	r7,r11
80001b4e:	5f 38       	srlo	r8
80001b50:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001b54:	c0 50       	breq	80001b5e <_malloc_r+0x26>
80001b56:	30 c8       	mov	r8,12
80001b58:	99 38       	st.w	r12[0xc],r8
80001b5a:	e0 8f 01 f3 	bral	80001f40 <_malloc_r+0x408>
80001b5e:	f0 1f 00 50 	mcall	80001c9c <_malloc_r+0x164>
80001b62:	e0 47 01 f7 	cp.w	r7,503
80001b66:	e0 8b 00 1c 	brhi	80001b9e <_malloc_r+0x66>
80001b6a:	ee 03 16 03 	lsr	r3,r7,0x3
80001b6e:	4c d8       	lddpc	r8,80001ca0 <_malloc_r+0x168>
80001b70:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001b74:	70 36       	ld.w	r6,r8[0xc]
80001b76:	10 36       	cp.w	r6,r8
80001b78:	c0 61       	brne	80001b84 <_malloc_r+0x4c>
80001b7a:	ec c8 ff f8 	sub	r8,r6,-8
80001b7e:	70 36       	ld.w	r6,r8[0xc]
80001b80:	10 36       	cp.w	r6,r8
80001b82:	c0 c0       	breq	80001b9a <_malloc_r+0x62>
80001b84:	6c 18       	ld.w	r8,r6[0x4]
80001b86:	e0 18 ff fc 	andl	r8,0xfffc
80001b8a:	6c 3a       	ld.w	r10,r6[0xc]
80001b8c:	ec 08 00 09 	add	r9,r6,r8
80001b90:	0a 9c       	mov	r12,r5
80001b92:	6c 28       	ld.w	r8,r6[0x8]
80001b94:	95 28       	st.w	r10[0x8],r8
80001b96:	91 3a       	st.w	r8[0xc],r10
80001b98:	c4 68       	rjmp	80001c24 <_malloc_r+0xec>
80001b9a:	2f e3       	sub	r3,-2
80001b9c:	c4 c8       	rjmp	80001c34 <_malloc_r+0xfc>
80001b9e:	ee 03 16 09 	lsr	r3,r7,0x9
80001ba2:	c0 41       	brne	80001baa <_malloc_r+0x72>
80001ba4:	ee 03 16 03 	lsr	r3,r7,0x3
80001ba8:	c2 68       	rjmp	80001bf4 <_malloc_r+0xbc>
80001baa:	58 43       	cp.w	r3,4
80001bac:	e0 8b 00 06 	brhi	80001bb8 <_malloc_r+0x80>
80001bb0:	ee 03 16 06 	lsr	r3,r7,0x6
80001bb4:	2c 83       	sub	r3,-56
80001bb6:	c1 f8       	rjmp	80001bf4 <_malloc_r+0xbc>
80001bb8:	59 43       	cp.w	r3,20
80001bba:	e0 8b 00 04 	brhi	80001bc2 <_malloc_r+0x8a>
80001bbe:	2a 53       	sub	r3,-91
80001bc0:	c1 a8       	rjmp	80001bf4 <_malloc_r+0xbc>
80001bc2:	e0 43 00 54 	cp.w	r3,84
80001bc6:	e0 8b 00 06 	brhi	80001bd2 <_malloc_r+0x9a>
80001bca:	ee 03 16 0c 	lsr	r3,r7,0xc
80001bce:	29 23       	sub	r3,-110
80001bd0:	c1 28       	rjmp	80001bf4 <_malloc_r+0xbc>
80001bd2:	e0 43 01 54 	cp.w	r3,340
80001bd6:	e0 8b 00 06 	brhi	80001be2 <_malloc_r+0xaa>
80001bda:	ee 03 16 0f 	lsr	r3,r7,0xf
80001bde:	28 93       	sub	r3,-119
80001be0:	c0 a8       	rjmp	80001bf4 <_malloc_r+0xbc>
80001be2:	e0 43 05 54 	cp.w	r3,1364
80001be6:	e0 88 00 04 	brls	80001bee <_malloc_r+0xb6>
80001bea:	37 e3       	mov	r3,126
80001bec:	c0 48       	rjmp	80001bf4 <_malloc_r+0xbc>
80001bee:	ee 03 16 12 	lsr	r3,r7,0x12
80001bf2:	28 43       	sub	r3,-124
80001bf4:	4a ba       	lddpc	r10,80001ca0 <_malloc_r+0x168>
80001bf6:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001bfa:	74 36       	ld.w	r6,r10[0xc]
80001bfc:	c1 98       	rjmp	80001c2e <_malloc_r+0xf6>
80001bfe:	6c 19       	ld.w	r9,r6[0x4]
80001c00:	e0 19 ff fc 	andl	r9,0xfffc
80001c04:	f2 07 01 0b 	sub	r11,r9,r7
80001c08:	58 fb       	cp.w	r11,15
80001c0a:	e0 8a 00 04 	brle	80001c12 <_malloc_r+0xda>
80001c0e:	20 13       	sub	r3,1
80001c10:	c1 18       	rjmp	80001c32 <_malloc_r+0xfa>
80001c12:	6c 38       	ld.w	r8,r6[0xc]
80001c14:	58 0b       	cp.w	r11,0
80001c16:	c0 b5       	brlt	80001c2c <_malloc_r+0xf4>
80001c18:	6c 2a       	ld.w	r10,r6[0x8]
80001c1a:	ec 09 00 09 	add	r9,r6,r9
80001c1e:	0a 9c       	mov	r12,r5
80001c20:	91 2a       	st.w	r8[0x8],r10
80001c22:	95 38       	st.w	r10[0xc],r8
80001c24:	72 18       	ld.w	r8,r9[0x4]
80001c26:	a1 a8       	sbr	r8,0x0
80001c28:	93 18       	st.w	r9[0x4],r8
80001c2a:	cb c8       	rjmp	80001da2 <_malloc_r+0x26a>
80001c2c:	10 96       	mov	r6,r8
80001c2e:	14 36       	cp.w	r6,r10
80001c30:	ce 71       	brne	80001bfe <_malloc_r+0xc6>
80001c32:	2f f3       	sub	r3,-1
80001c34:	49 ba       	lddpc	r10,80001ca0 <_malloc_r+0x168>
80001c36:	f4 cc ff f8 	sub	r12,r10,-8
80001c3a:	78 26       	ld.w	r6,r12[0x8]
80001c3c:	18 36       	cp.w	r6,r12
80001c3e:	c6 e0       	breq	80001d1a <_malloc_r+0x1e2>
80001c40:	6c 19       	ld.w	r9,r6[0x4]
80001c42:	e0 19 ff fc 	andl	r9,0xfffc
80001c46:	f2 07 01 08 	sub	r8,r9,r7
80001c4a:	58 f8       	cp.w	r8,15
80001c4c:	e0 89 00 90 	brgt	80001d6c <_malloc_r+0x234>
80001c50:	99 3c       	st.w	r12[0xc],r12
80001c52:	99 2c       	st.w	r12[0x8],r12
80001c54:	58 08       	cp.w	r8,0
80001c56:	c0 55       	brlt	80001c60 <_malloc_r+0x128>
80001c58:	ec 09 00 09 	add	r9,r6,r9
80001c5c:	0a 9c       	mov	r12,r5
80001c5e:	ce 3b       	rjmp	80001c24 <_malloc_r+0xec>
80001c60:	e0 49 01 ff 	cp.w	r9,511
80001c64:	e0 8b 00 13 	brhi	80001c8a <_malloc_r+0x152>
80001c68:	a3 99       	lsr	r9,0x3
80001c6a:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001c6e:	70 2b       	ld.w	r11,r8[0x8]
80001c70:	8d 38       	st.w	r6[0xc],r8
80001c72:	8d 2b       	st.w	r6[0x8],r11
80001c74:	97 36       	st.w	r11[0xc],r6
80001c76:	91 26       	st.w	r8[0x8],r6
80001c78:	a3 49       	asr	r9,0x2
80001c7a:	74 18       	ld.w	r8,r10[0x4]
80001c7c:	30 1b       	mov	r11,1
80001c7e:	f6 09 09 49 	lsl	r9,r11,r9
80001c82:	f1 e9 10 09 	or	r9,r8,r9
80001c86:	95 19       	st.w	r10[0x4],r9
80001c88:	c4 98       	rjmp	80001d1a <_malloc_r+0x1e2>
80001c8a:	f2 0a 16 09 	lsr	r10,r9,0x9
80001c8e:	58 4a       	cp.w	r10,4
80001c90:	e0 8b 00 0a 	brhi	80001ca4 <_malloc_r+0x16c>
80001c94:	f2 0a 16 06 	lsr	r10,r9,0x6
80001c98:	2c 8a       	sub	r10,-56
80001c9a:	c2 38       	rjmp	80001ce0 <_malloc_r+0x1a8>
80001c9c:	80 00       	ld.sh	r0,r0[0x0]
80001c9e:	1f 96       	ld.ub	r6,pc[0x1]
80001ca0:	00 00       	add	r0,r0
80001ca2:	01 04       	ld.w	r4,r0++
80001ca4:	59 4a       	cp.w	r10,20
80001ca6:	e0 8b 00 04 	brhi	80001cae <_malloc_r+0x176>
80001caa:	2a 5a       	sub	r10,-91
80001cac:	c1 a8       	rjmp	80001ce0 <_malloc_r+0x1a8>
80001cae:	e0 4a 00 54 	cp.w	r10,84
80001cb2:	e0 8b 00 06 	brhi	80001cbe <_malloc_r+0x186>
80001cb6:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001cba:	29 2a       	sub	r10,-110
80001cbc:	c1 28       	rjmp	80001ce0 <_malloc_r+0x1a8>
80001cbe:	e0 4a 01 54 	cp.w	r10,340
80001cc2:	e0 8b 00 06 	brhi	80001cce <_malloc_r+0x196>
80001cc6:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001cca:	28 9a       	sub	r10,-119
80001ccc:	c0 a8       	rjmp	80001ce0 <_malloc_r+0x1a8>
80001cce:	e0 4a 05 54 	cp.w	r10,1364
80001cd2:	e0 88 00 04 	brls	80001cda <_malloc_r+0x1a2>
80001cd6:	37 ea       	mov	r10,126
80001cd8:	c0 48       	rjmp	80001ce0 <_malloc_r+0x1a8>
80001cda:	f2 0a 16 12 	lsr	r10,r9,0x12
80001cde:	28 4a       	sub	r10,-124
80001ce0:	4c 8b       	lddpc	r11,80001e00 <_malloc_r+0x2c8>
80001ce2:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001ce6:	68 28       	ld.w	r8,r4[0x8]
80001ce8:	08 38       	cp.w	r8,r4
80001cea:	c0 e1       	brne	80001d06 <_malloc_r+0x1ce>
80001cec:	76 19       	ld.w	r9,r11[0x4]
80001cee:	a3 4a       	asr	r10,0x2
80001cf0:	30 1e       	mov	lr,1
80001cf2:	fc 0a 09 4a 	lsl	r10,lr,r10
80001cf6:	f3 ea 10 0a 	or	r10,r9,r10
80001cfa:	10 99       	mov	r9,r8
80001cfc:	97 1a       	st.w	r11[0x4],r10
80001cfe:	c0 a8       	rjmp	80001d12 <_malloc_r+0x1da>
80001d00:	70 28       	ld.w	r8,r8[0x8]
80001d02:	08 38       	cp.w	r8,r4
80001d04:	c0 60       	breq	80001d10 <_malloc_r+0x1d8>
80001d06:	70 1a       	ld.w	r10,r8[0x4]
80001d08:	e0 1a ff fc 	andl	r10,0xfffc
80001d0c:	14 39       	cp.w	r9,r10
80001d0e:	cf 93       	brcs	80001d00 <_malloc_r+0x1c8>
80001d10:	70 39       	ld.w	r9,r8[0xc]
80001d12:	8d 39       	st.w	r6[0xc],r9
80001d14:	8d 28       	st.w	r6[0x8],r8
80001d16:	91 36       	st.w	r8[0xc],r6
80001d18:	93 26       	st.w	r9[0x8],r6
80001d1a:	e6 08 14 02 	asr	r8,r3,0x2
80001d1e:	30 1b       	mov	r11,1
80001d20:	4b 84       	lddpc	r4,80001e00 <_malloc_r+0x2c8>
80001d22:	f6 08 09 4b 	lsl	r11,r11,r8
80001d26:	68 18       	ld.w	r8,r4[0x4]
80001d28:	10 3b       	cp.w	r11,r8
80001d2a:	e0 8b 00 6f 	brhi	80001e08 <_malloc_r+0x2d0>
80001d2e:	f7 e8 00 09 	and	r9,r11,r8
80001d32:	c0 b1       	brne	80001d48 <_malloc_r+0x210>
80001d34:	e0 13 ff fc 	andl	r3,0xfffc
80001d38:	a1 7b       	lsl	r11,0x1
80001d3a:	2f c3       	sub	r3,-4
80001d3c:	c0 38       	rjmp	80001d42 <_malloc_r+0x20a>
80001d3e:	2f c3       	sub	r3,-4
80001d40:	a1 7b       	lsl	r11,0x1
80001d42:	f7 e8 00 09 	and	r9,r11,r8
80001d46:	cf c0       	breq	80001d3e <_malloc_r+0x206>
80001d48:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001d4c:	06 92       	mov	r2,r3
80001d4e:	1c 91       	mov	r1,lr
80001d50:	62 36       	ld.w	r6,r1[0xc]
80001d52:	c2 e8       	rjmp	80001dae <_malloc_r+0x276>
80001d54:	6c 1a       	ld.w	r10,r6[0x4]
80001d56:	e0 1a ff fc 	andl	r10,0xfffc
80001d5a:	f4 07 01 08 	sub	r8,r10,r7
80001d5e:	58 f8       	cp.w	r8,15
80001d60:	e0 8a 00 15 	brle	80001d8a <_malloc_r+0x252>
80001d64:	6c 3a       	ld.w	r10,r6[0xc]
80001d66:	6c 29       	ld.w	r9,r6[0x8]
80001d68:	95 29       	st.w	r10[0x8],r9
80001d6a:	93 3a       	st.w	r9[0xc],r10
80001d6c:	0e 99       	mov	r9,r7
80001d6e:	ec 07 00 07 	add	r7,r6,r7
80001d72:	a1 a9       	sbr	r9,0x0
80001d74:	99 37       	st.w	r12[0xc],r7
80001d76:	99 27       	st.w	r12[0x8],r7
80001d78:	8d 19       	st.w	r6[0x4],r9
80001d7a:	ee 08 09 08 	st.w	r7[r8],r8
80001d7e:	8f 2c       	st.w	r7[0x8],r12
80001d80:	8f 3c       	st.w	r7[0xc],r12
80001d82:	a1 a8       	sbr	r8,0x0
80001d84:	0a 9c       	mov	r12,r5
80001d86:	8f 18       	st.w	r7[0x4],r8
80001d88:	c0 d8       	rjmp	80001da2 <_malloc_r+0x26a>
80001d8a:	6c 39       	ld.w	r9,r6[0xc]
80001d8c:	58 08       	cp.w	r8,0
80001d8e:	c0 f5       	brlt	80001dac <_malloc_r+0x274>
80001d90:	ec 0a 00 0a 	add	r10,r6,r10
80001d94:	74 18       	ld.w	r8,r10[0x4]
80001d96:	a1 a8       	sbr	r8,0x0
80001d98:	0a 9c       	mov	r12,r5
80001d9a:	95 18       	st.w	r10[0x4],r8
80001d9c:	6c 28       	ld.w	r8,r6[0x8]
80001d9e:	93 28       	st.w	r9[0x8],r8
80001da0:	91 39       	st.w	r8[0xc],r9
80001da2:	f0 1f 00 19 	mcall	80001e04 <_malloc_r+0x2cc>
80001da6:	ec cc ff f8 	sub	r12,r6,-8
80001daa:	d8 32       	popm	r0-r7,pc
80001dac:	12 96       	mov	r6,r9
80001dae:	02 36       	cp.w	r6,r1
80001db0:	cd 21       	brne	80001d54 <_malloc_r+0x21c>
80001db2:	2f f2       	sub	r2,-1
80001db4:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001db8:	c0 30       	breq	80001dbe <_malloc_r+0x286>
80001dba:	2f 81       	sub	r1,-8
80001dbc:	cc ab       	rjmp	80001d50 <_malloc_r+0x218>
80001dbe:	1c 98       	mov	r8,lr
80001dc0:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001dc4:	c0 81       	brne	80001dd4 <_malloc_r+0x29c>
80001dc6:	68 19       	ld.w	r9,r4[0x4]
80001dc8:	f6 08 11 ff 	rsub	r8,r11,-1
80001dcc:	f3 e8 00 08 	and	r8,r9,r8
80001dd0:	89 18       	st.w	r4[0x4],r8
80001dd2:	c0 78       	rjmp	80001de0 <_malloc_r+0x2a8>
80001dd4:	f0 c9 00 08 	sub	r9,r8,8
80001dd8:	20 13       	sub	r3,1
80001dda:	70 08       	ld.w	r8,r8[0x0]
80001ddc:	12 38       	cp.w	r8,r9
80001dde:	cf 10       	breq	80001dc0 <_malloc_r+0x288>
80001de0:	a1 7b       	lsl	r11,0x1
80001de2:	68 18       	ld.w	r8,r4[0x4]
80001de4:	10 3b       	cp.w	r11,r8
80001de6:	e0 8b 00 11 	brhi	80001e08 <_malloc_r+0x2d0>
80001dea:	58 0b       	cp.w	r11,0
80001dec:	c0 e0       	breq	80001e08 <_malloc_r+0x2d0>
80001dee:	04 93       	mov	r3,r2
80001df0:	c0 38       	rjmp	80001df6 <_malloc_r+0x2be>
80001df2:	2f c3       	sub	r3,-4
80001df4:	a1 7b       	lsl	r11,0x1
80001df6:	f7 e8 00 09 	and	r9,r11,r8
80001dfa:	ca 71       	brne	80001d48 <_malloc_r+0x210>
80001dfc:	cf bb       	rjmp	80001df2 <_malloc_r+0x2ba>
80001dfe:	00 00       	add	r0,r0
80001e00:	00 00       	add	r0,r0
80001e02:	01 04       	ld.w	r4,r0++
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1f 98       	ld.ub	r8,pc[0x1]
80001e08:	68 23       	ld.w	r3,r4[0x8]
80001e0a:	66 12       	ld.w	r2,r3[0x4]
80001e0c:	e0 12 ff fc 	andl	r2,0xfffc
80001e10:	0e 32       	cp.w	r2,r7
80001e12:	5f 39       	srlo	r9
80001e14:	e4 07 01 08 	sub	r8,r2,r7
80001e18:	58 f8       	cp.w	r8,15
80001e1a:	5f aa       	srle	r10
80001e1c:	f5 e9 10 09 	or	r9,r10,r9
80001e20:	e0 80 00 a2 	breq	80001f64 <_malloc_r+0x42c>
80001e24:	4c 88       	lddpc	r8,80001f44 <_malloc_r+0x40c>
80001e26:	70 01       	ld.w	r1,r8[0x0]
80001e28:	4c 88       	lddpc	r8,80001f48 <_malloc_r+0x410>
80001e2a:	2f 01       	sub	r1,-16
80001e2c:	70 08       	ld.w	r8,r8[0x0]
80001e2e:	0e 01       	add	r1,r7
80001e30:	5b f8       	cp.w	r8,-1
80001e32:	c0 40       	breq	80001e3a <_malloc_r+0x302>
80001e34:	28 11       	sub	r1,-127
80001e36:	e0 11 ff 80 	andl	r1,0xff80
80001e3a:	02 9b       	mov	r11,r1
80001e3c:	0a 9c       	mov	r12,r5
80001e3e:	f0 1f 00 44 	mcall	80001f4c <_malloc_r+0x414>
80001e42:	18 96       	mov	r6,r12
80001e44:	5b fc       	cp.w	r12,-1
80001e46:	c6 e0       	breq	80001f22 <_malloc_r+0x3ea>
80001e48:	e6 02 00 08 	add	r8,r3,r2
80001e4c:	10 3c       	cp.w	r12,r8
80001e4e:	c0 32       	brcc	80001e54 <_malloc_r+0x31c>
80001e50:	08 33       	cp.w	r3,r4
80001e52:	c6 81       	brne	80001f22 <_malloc_r+0x3ea>
80001e54:	4b fa       	lddpc	r10,80001f50 <_malloc_r+0x418>
80001e56:	74 09       	ld.w	r9,r10[0x0]
80001e58:	e2 09 00 09 	add	r9,r1,r9
80001e5c:	95 09       	st.w	r10[0x0],r9
80001e5e:	10 36       	cp.w	r6,r8
80001e60:	c0 a1       	brne	80001e74 <_malloc_r+0x33c>
80001e62:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001e66:	c0 71       	brne	80001e74 <_malloc_r+0x33c>
80001e68:	e2 02 00 02 	add	r2,r1,r2
80001e6c:	68 28       	ld.w	r8,r4[0x8]
80001e6e:	a1 a2       	sbr	r2,0x0
80001e70:	91 12       	st.w	r8[0x4],r2
80001e72:	c4 c8       	rjmp	80001f0a <_malloc_r+0x3d2>
80001e74:	4b 5a       	lddpc	r10,80001f48 <_malloc_r+0x410>
80001e76:	74 0b       	ld.w	r11,r10[0x0]
80001e78:	5b fb       	cp.w	r11,-1
80001e7a:	c0 31       	brne	80001e80 <_malloc_r+0x348>
80001e7c:	95 06       	st.w	r10[0x0],r6
80001e7e:	c0 68       	rjmp	80001e8a <_malloc_r+0x352>
80001e80:	ec 09 00 09 	add	r9,r6,r9
80001e84:	4b 3a       	lddpc	r10,80001f50 <_malloc_r+0x418>
80001e86:	10 19       	sub	r9,r8
80001e88:	95 09       	st.w	r10[0x0],r9
80001e8a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001e8e:	f0 09 11 08 	rsub	r9,r8,8
80001e92:	58 08       	cp.w	r8,0
80001e94:	f2 08 17 10 	movne	r8,r9
80001e98:	ed d8 e1 06 	addne	r6,r6,r8
80001e9c:	28 08       	sub	r8,-128
80001e9e:	ec 01 00 01 	add	r1,r6,r1
80001ea2:	0a 9c       	mov	r12,r5
80001ea4:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001ea8:	f0 01 01 01 	sub	r1,r8,r1
80001eac:	02 9b       	mov	r11,r1
80001eae:	f0 1f 00 28 	mcall	80001f4c <_malloc_r+0x414>
80001eb2:	4a 88       	lddpc	r8,80001f50 <_malloc_r+0x418>
80001eb4:	5b fc       	cp.w	r12,-1
80001eb6:	ec 0c 17 00 	moveq	r12,r6
80001eba:	f9 b1 00 00 	moveq	r1,0
80001ebe:	70 09       	ld.w	r9,r8[0x0]
80001ec0:	0c 1c       	sub	r12,r6
80001ec2:	89 26       	st.w	r4[0x8],r6
80001ec4:	02 0c       	add	r12,r1
80001ec6:	12 01       	add	r1,r9
80001ec8:	a1 ac       	sbr	r12,0x0
80001eca:	91 01       	st.w	r8[0x0],r1
80001ecc:	8d 1c       	st.w	r6[0x4],r12
80001ece:	08 33       	cp.w	r3,r4
80001ed0:	c1 d0       	breq	80001f0a <_malloc_r+0x3d2>
80001ed2:	58 f2       	cp.w	r2,15
80001ed4:	e0 8b 00 05 	brhi	80001ede <_malloc_r+0x3a6>
80001ed8:	30 18       	mov	r8,1
80001eda:	8d 18       	st.w	r6[0x4],r8
80001edc:	c2 38       	rjmp	80001f22 <_malloc_r+0x3ea>
80001ede:	30 59       	mov	r9,5
80001ee0:	20 c2       	sub	r2,12
80001ee2:	e0 12 ff f8 	andl	r2,0xfff8
80001ee6:	e6 02 00 08 	add	r8,r3,r2
80001eea:	91 29       	st.w	r8[0x8],r9
80001eec:	91 19       	st.w	r8[0x4],r9
80001eee:	66 18       	ld.w	r8,r3[0x4]
80001ef0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001ef4:	e5 e8 10 08 	or	r8,r2,r8
80001ef8:	87 18       	st.w	r3[0x4],r8
80001efa:	58 f2       	cp.w	r2,15
80001efc:	e0 88 00 07 	brls	80001f0a <_malloc_r+0x3d2>
80001f00:	e6 cb ff f8 	sub	r11,r3,-8
80001f04:	0a 9c       	mov	r12,r5
80001f06:	f0 1f 00 14 	mcall	80001f54 <_malloc_r+0x41c>
80001f0a:	49 49       	lddpc	r9,80001f58 <_malloc_r+0x420>
80001f0c:	72 0a       	ld.w	r10,r9[0x0]
80001f0e:	49 18       	lddpc	r8,80001f50 <_malloc_r+0x418>
80001f10:	70 08       	ld.w	r8,r8[0x0]
80001f12:	14 38       	cp.w	r8,r10
80001f14:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001f18:	49 19       	lddpc	r9,80001f5c <_malloc_r+0x424>
80001f1a:	72 0a       	ld.w	r10,r9[0x0]
80001f1c:	14 38       	cp.w	r8,r10
80001f1e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001f22:	68 28       	ld.w	r8,r4[0x8]
80001f24:	70 18       	ld.w	r8,r8[0x4]
80001f26:	e0 18 ff fc 	andl	r8,0xfffc
80001f2a:	0e 38       	cp.w	r8,r7
80001f2c:	5f 39       	srlo	r9
80001f2e:	0e 18       	sub	r8,r7
80001f30:	58 f8       	cp.w	r8,15
80001f32:	5f aa       	srle	r10
80001f34:	f5 e9 10 09 	or	r9,r10,r9
80001f38:	c1 60       	breq	80001f64 <_malloc_r+0x42c>
80001f3a:	0a 9c       	mov	r12,r5
80001f3c:	f0 1f 00 09 	mcall	80001f60 <_malloc_r+0x428>
80001f40:	d8 3a       	popm	r0-r7,pc,r12=0
80001f42:	00 00       	add	r0,r0
80001f44:	00 00       	add	r0,r0
80001f46:	05 38       	ld.ub	r8,r2++
80001f48:	00 00       	add	r0,r0
80001f4a:	05 10       	ld.sh	r0,r2++
80001f4c:	80 00       	ld.sh	r0,r0[0x0]
80001f4e:	1f 9c       	ld.ub	r12,pc[0x1]
80001f50:	00 00       	add	r0,r0
80001f52:	05 3c       	ld.ub	r12,r2++
80001f54:	80 00       	ld.sh	r0,r0[0x0]
80001f56:	20 b8       	sub	r8,11
80001f58:	00 00       	add	r0,r0
80001f5a:	05 34       	ld.ub	r4,r2++
80001f5c:	00 00       	add	r0,r0
80001f5e:	05 30       	ld.ub	r0,r2++
80001f60:	80 00       	ld.sh	r0,r0[0x0]
80001f62:	1f 98       	ld.ub	r8,pc[0x1]
80001f64:	68 26       	ld.w	r6,r4[0x8]
80001f66:	a1 a8       	sbr	r8,0x0
80001f68:	0e 99       	mov	r9,r7
80001f6a:	a1 a9       	sbr	r9,0x0
80001f6c:	8d 19       	st.w	r6[0x4],r9
80001f6e:	ec 07 00 07 	add	r7,r6,r7
80001f72:	0a 9c       	mov	r12,r5
80001f74:	89 27       	st.w	r4[0x8],r7
80001f76:	8f 18       	st.w	r7[0x4],r8
80001f78:	f0 1f 00 03 	mcall	80001f84 <_malloc_r+0x44c>
80001f7c:	ec cc ff f8 	sub	r12,r6,-8
80001f80:	d8 32       	popm	r0-r7,pc
80001f82:	00 00       	add	r0,r0
80001f84:	80 00       	ld.sh	r0,r0[0x0]
80001f86:	1f 98       	ld.ub	r8,pc[0x1]

80001f88 <memset>:
80001f88:	18 98       	mov	r8,r12
80001f8a:	c0 38       	rjmp	80001f90 <memset+0x8>
80001f8c:	10 cb       	st.b	r8++,r11
80001f8e:	20 1a       	sub	r10,1
80001f90:	58 0a       	cp.w	r10,0
80001f92:	cf d1       	brne	80001f8c <memset+0x4>
80001f94:	5e fc       	retal	r12

80001f96 <__malloc_lock>:
80001f96:	5e fc       	retal	r12

80001f98 <__malloc_unlock>:
80001f98:	5e fc       	retal	r12
80001f9a:	d7 03       	nop

80001f9c <_sbrk_r>:
80001f9c:	d4 21       	pushm	r4-r7,lr
80001f9e:	30 08       	mov	r8,0
80001fa0:	18 97       	mov	r7,r12
80001fa2:	48 76       	lddpc	r6,80001fbc <_sbrk_r+0x20>
80001fa4:	16 9c       	mov	r12,r11
80001fa6:	8d 08       	st.w	r6[0x0],r8
80001fa8:	f0 1f 00 06 	mcall	80001fc0 <_sbrk_r+0x24>
80001fac:	5b fc       	cp.w	r12,-1
80001fae:	c0 51       	brne	80001fb8 <_sbrk_r+0x1c>
80001fb0:	6c 08       	ld.w	r8,r6[0x0]
80001fb2:	58 08       	cp.w	r8,0
80001fb4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001fb8:	d8 22       	popm	r4-r7,pc
80001fba:	00 00       	add	r0,r0
80001fbc:	00 00       	add	r0,r0
80001fbe:	05 a8       	ld.ub	r8,r2[0x2]
80001fc0:	80 00       	ld.sh	r0,r0[0x0]
80001fc2:	1f c4       	ld.ub	r4,pc[0x4]

80001fc4 <_sbrk>:
80001fc4:	d4 01       	pushm	lr
80001fc6:	48 c8       	lddpc	r8,80001ff4 <_sbrk+0x30>
80001fc8:	70 09       	ld.w	r9,r8[0x0]
80001fca:	58 09       	cp.w	r9,0
80001fcc:	c0 31       	brne	80001fd2 <_sbrk+0xe>
80001fce:	48 b9       	lddpc	r9,80001ff8 <_sbrk+0x34>
80001fd0:	91 09       	st.w	r8[0x0],r9
80001fd2:	48 99       	lddpc	r9,80001ff4 <_sbrk+0x30>
80001fd4:	48 aa       	lddpc	r10,80001ffc <_sbrk+0x38>
80001fd6:	72 08       	ld.w	r8,r9[0x0]
80001fd8:	f0 0c 00 0c 	add	r12,r8,r12
80001fdc:	14 3c       	cp.w	r12,r10
80001fde:	e0 8b 00 04 	brhi	80001fe6 <_sbrk+0x22>
80001fe2:	93 0c       	st.w	r9[0x0],r12
80001fe4:	c0 68       	rjmp	80001ff0 <_sbrk+0x2c>
80001fe6:	f0 1f 00 07 	mcall	80002000 <_sbrk+0x3c>
80001fea:	30 c8       	mov	r8,12
80001fec:	99 08       	st.w	r12[0x0],r8
80001fee:	3f f8       	mov	r8,-1
80001ff0:	10 9c       	mov	r12,r8
80001ff2:	d8 02       	popm	pc
80001ff4:	00 00       	add	r0,r0
80001ff6:	05 64       	ld.uh	r4,--r2
80001ff8:	00 00       	add	r0,r0
80001ffa:	05 b0       	ld.ub	r0,r2[0x3]
80001ffc:	00 00       	add	r0,r0
80001ffe:	e0 00       	*unknown*
80002000:	80 00       	ld.sh	r0,r0[0x0]
80002002:	20 04       	sub	r4,0

80002004 <__errno>:
80002004:	48 28       	lddpc	r8,8000200c <__errno+0x8>
80002006:	70 0c       	ld.w	r12,r8[0x0]
80002008:	2f 4c       	sub	r12,-12
8000200a:	5e fc       	retal	r12
8000200c:	00 00       	add	r0,r0
8000200e:	01 00       	ld.w	r0,r0++

80002010 <_malloc_trim_r>:
80002010:	d4 21       	pushm	r4-r7,lr
80002012:	16 95       	mov	r5,r11
80002014:	18 97       	mov	r7,r12
80002016:	f0 1f 00 23 	mcall	800020a0 <_malloc_trim_r+0x90>
8000201a:	4a 34       	lddpc	r4,800020a4 <_malloc_trim_r+0x94>
8000201c:	68 28       	ld.w	r8,r4[0x8]
8000201e:	70 16       	ld.w	r6,r8[0x4]
80002020:	e0 16 ff fc 	andl	r6,0xfffc
80002024:	ec c8 ff 91 	sub	r8,r6,-111
80002028:	f0 05 01 05 	sub	r5,r8,r5
8000202c:	e0 15 ff 80 	andl	r5,0xff80
80002030:	ea c5 00 80 	sub	r5,r5,128
80002034:	e0 45 00 7f 	cp.w	r5,127
80002038:	e0 8a 00 23 	brle	8000207e <_malloc_trim_r+0x6e>
8000203c:	30 0b       	mov	r11,0
8000203e:	0e 9c       	mov	r12,r7
80002040:	f0 1f 00 1a 	mcall	800020a8 <_malloc_trim_r+0x98>
80002044:	68 28       	ld.w	r8,r4[0x8]
80002046:	0c 08       	add	r8,r6
80002048:	10 3c       	cp.w	r12,r8
8000204a:	c1 a1       	brne	8000207e <_malloc_trim_r+0x6e>
8000204c:	ea 0b 11 00 	rsub	r11,r5,0
80002050:	0e 9c       	mov	r12,r7
80002052:	f0 1f 00 16 	mcall	800020a8 <_malloc_trim_r+0x98>
80002056:	5b fc       	cp.w	r12,-1
80002058:	c1 71       	brne	80002086 <_malloc_trim_r+0x76>
8000205a:	30 0b       	mov	r11,0
8000205c:	0e 9c       	mov	r12,r7
8000205e:	f0 1f 00 13 	mcall	800020a8 <_malloc_trim_r+0x98>
80002062:	68 28       	ld.w	r8,r4[0x8]
80002064:	f8 08 01 09 	sub	r9,r12,r8
80002068:	58 f9       	cp.w	r9,15
8000206a:	e0 8a 00 0a 	brle	8000207e <_malloc_trim_r+0x6e>
8000206e:	a1 a9       	sbr	r9,0x0
80002070:	91 19       	st.w	r8[0x4],r9
80002072:	48 f8       	lddpc	r8,800020ac <_malloc_trim_r+0x9c>
80002074:	70 09       	ld.w	r9,r8[0x0]
80002076:	48 f8       	lddpc	r8,800020b0 <_malloc_trim_r+0xa0>
80002078:	f8 09 01 09 	sub	r9,r12,r9
8000207c:	91 09       	st.w	r8[0x0],r9
8000207e:	0e 9c       	mov	r12,r7
80002080:	f0 1f 00 0d 	mcall	800020b4 <_malloc_trim_r+0xa4>
80002084:	d8 2a       	popm	r4-r7,pc,r12=0
80002086:	68 28       	ld.w	r8,r4[0x8]
80002088:	0a 16       	sub	r6,r5
8000208a:	a1 a6       	sbr	r6,0x0
8000208c:	91 16       	st.w	r8[0x4],r6
8000208e:	48 98       	lddpc	r8,800020b0 <_malloc_trim_r+0xa0>
80002090:	70 09       	ld.w	r9,r8[0x0]
80002092:	0a 19       	sub	r9,r5
80002094:	0e 9c       	mov	r12,r7
80002096:	91 09       	st.w	r8[0x0],r9
80002098:	f0 1f 00 07 	mcall	800020b4 <_malloc_trim_r+0xa4>
8000209c:	da 2a       	popm	r4-r7,pc,r12=1
8000209e:	00 00       	add	r0,r0
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	1f 96       	ld.ub	r6,pc[0x1]
800020a4:	00 00       	add	r0,r0
800020a6:	01 04       	ld.w	r4,r0++
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	1f 9c       	ld.ub	r12,pc[0x1]
800020ac:	00 00       	add	r0,r0
800020ae:	05 10       	ld.sh	r0,r2++
800020b0:	00 00       	add	r0,r0
800020b2:	05 3c       	ld.ub	r12,r2++
800020b4:	80 00       	ld.sh	r0,r0[0x0]
800020b6:	1f 98       	ld.ub	r8,pc[0x1]

800020b8 <_free_r>:
800020b8:	d4 21       	pushm	r4-r7,lr
800020ba:	16 96       	mov	r6,r11
800020bc:	18 97       	mov	r7,r12
800020be:	58 0b       	cp.w	r11,0
800020c0:	e0 80 00 c8 	breq	80002250 <_free_r+0x198>
800020c4:	f0 1f 00 4c 	mcall	800021f4 <_free_r+0x13c>
800020c8:	20 86       	sub	r6,8
800020ca:	4c ca       	lddpc	r10,800021f8 <_free_r+0x140>
800020cc:	6c 18       	ld.w	r8,r6[0x4]
800020ce:	74 2e       	ld.w	lr,r10[0x8]
800020d0:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800020d4:	a1 c8       	cbr	r8,0x0
800020d6:	ec 08 00 09 	add	r9,r6,r8
800020da:	72 1b       	ld.w	r11,r9[0x4]
800020dc:	e0 1b ff fc 	andl	r11,0xfffc
800020e0:	1c 39       	cp.w	r9,lr
800020e2:	c1 d1       	brne	8000211c <_free_r+0x64>
800020e4:	f6 08 00 08 	add	r8,r11,r8
800020e8:	58 0c       	cp.w	r12,0
800020ea:	c0 81       	brne	800020fa <_free_r+0x42>
800020ec:	6c 09       	ld.w	r9,r6[0x0]
800020ee:	12 16       	sub	r6,r9
800020f0:	12 08       	add	r8,r9
800020f2:	6c 3b       	ld.w	r11,r6[0xc]
800020f4:	6c 29       	ld.w	r9,r6[0x8]
800020f6:	97 29       	st.w	r11[0x8],r9
800020f8:	93 3b       	st.w	r9[0xc],r11
800020fa:	10 99       	mov	r9,r8
800020fc:	95 26       	st.w	r10[0x8],r6
800020fe:	a1 a9       	sbr	r9,0x0
80002100:	8d 19       	st.w	r6[0x4],r9
80002102:	4b f9       	lddpc	r9,800021fc <_free_r+0x144>
80002104:	72 09       	ld.w	r9,r9[0x0]
80002106:	12 38       	cp.w	r8,r9
80002108:	c0 63       	brcs	80002114 <_free_r+0x5c>
8000210a:	4b e8       	lddpc	r8,80002200 <_free_r+0x148>
8000210c:	0e 9c       	mov	r12,r7
8000210e:	70 0b       	ld.w	r11,r8[0x0]
80002110:	f0 1f 00 3d 	mcall	80002204 <_free_r+0x14c>
80002114:	0e 9c       	mov	r12,r7
80002116:	f0 1f 00 3d 	mcall	80002208 <_free_r+0x150>
8000211a:	d8 22       	popm	r4-r7,pc
8000211c:	93 1b       	st.w	r9[0x4],r11
8000211e:	58 0c       	cp.w	r12,0
80002120:	c0 30       	breq	80002126 <_free_r+0x6e>
80002122:	30 0c       	mov	r12,0
80002124:	c1 08       	rjmp	80002144 <_free_r+0x8c>
80002126:	6c 0e       	ld.w	lr,r6[0x0]
80002128:	f4 c5 ff f8 	sub	r5,r10,-8
8000212c:	1c 16       	sub	r6,lr
8000212e:	1c 08       	add	r8,lr
80002130:	6c 2e       	ld.w	lr,r6[0x8]
80002132:	0a 3e       	cp.w	lr,r5
80002134:	f9 bc 00 01 	moveq	r12,1
80002138:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000213c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80002140:	fd f5 1a 03 	st.wne	lr[0xc],r5
80002144:	f2 0b 00 0e 	add	lr,r9,r11
80002148:	7c 1e       	ld.w	lr,lr[0x4]
8000214a:	ed be 00 00 	bld	lr,0x0
8000214e:	c1 30       	breq	80002174 <_free_r+0xbc>
80002150:	16 08       	add	r8,r11
80002152:	58 0c       	cp.w	r12,0
80002154:	c0 c1       	brne	8000216c <_free_r+0xb4>
80002156:	4a 9e       	lddpc	lr,800021f8 <_free_r+0x140>
80002158:	72 2b       	ld.w	r11,r9[0x8]
8000215a:	2f 8e       	sub	lr,-8
8000215c:	1c 3b       	cp.w	r11,lr
8000215e:	c0 71       	brne	8000216c <_free_r+0xb4>
80002160:	97 36       	st.w	r11[0xc],r6
80002162:	97 26       	st.w	r11[0x8],r6
80002164:	8d 2b       	st.w	r6[0x8],r11
80002166:	8d 3b       	st.w	r6[0xc],r11
80002168:	30 1c       	mov	r12,1
8000216a:	c0 58       	rjmp	80002174 <_free_r+0xbc>
8000216c:	72 2b       	ld.w	r11,r9[0x8]
8000216e:	72 39       	ld.w	r9,r9[0xc]
80002170:	93 2b       	st.w	r9[0x8],r11
80002172:	97 39       	st.w	r11[0xc],r9
80002174:	10 99       	mov	r9,r8
80002176:	ec 08 09 08 	st.w	r6[r8],r8
8000217a:	a1 a9       	sbr	r9,0x0
8000217c:	8d 19       	st.w	r6[0x4],r9
8000217e:	58 0c       	cp.w	r12,0
80002180:	c6 51       	brne	8000224a <_free_r+0x192>
80002182:	e0 48 01 ff 	cp.w	r8,511
80002186:	e0 8b 00 13 	brhi	800021ac <_free_r+0xf4>
8000218a:	a3 98       	lsr	r8,0x3
8000218c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80002190:	72 2b       	ld.w	r11,r9[0x8]
80002192:	8d 39       	st.w	r6[0xc],r9
80002194:	8d 2b       	st.w	r6[0x8],r11
80002196:	97 36       	st.w	r11[0xc],r6
80002198:	93 26       	st.w	r9[0x8],r6
8000219a:	a3 48       	asr	r8,0x2
8000219c:	74 19       	ld.w	r9,r10[0x4]
8000219e:	30 1b       	mov	r11,1
800021a0:	f6 08 09 48 	lsl	r8,r11,r8
800021a4:	f3 e8 10 08 	or	r8,r9,r8
800021a8:	95 18       	st.w	r10[0x4],r8
800021aa:	c5 08       	rjmp	8000224a <_free_r+0x192>
800021ac:	f0 0b 16 09 	lsr	r11,r8,0x9
800021b0:	58 4b       	cp.w	r11,4
800021b2:	e0 8b 00 06 	brhi	800021be <_free_r+0x106>
800021b6:	f0 0b 16 06 	lsr	r11,r8,0x6
800021ba:	2c 8b       	sub	r11,-56
800021bc:	c2 b8       	rjmp	80002212 <_free_r+0x15a>
800021be:	59 4b       	cp.w	r11,20
800021c0:	e0 8b 00 04 	brhi	800021c8 <_free_r+0x110>
800021c4:	2a 5b       	sub	r11,-91
800021c6:	c2 68       	rjmp	80002212 <_free_r+0x15a>
800021c8:	e0 4b 00 54 	cp.w	r11,84
800021cc:	e0 8b 00 06 	brhi	800021d8 <_free_r+0x120>
800021d0:	f0 0b 16 0c 	lsr	r11,r8,0xc
800021d4:	29 2b       	sub	r11,-110
800021d6:	c1 e8       	rjmp	80002212 <_free_r+0x15a>
800021d8:	e0 4b 01 54 	cp.w	r11,340
800021dc:	e0 8b 00 06 	brhi	800021e8 <_free_r+0x130>
800021e0:	f0 0b 16 0f 	lsr	r11,r8,0xf
800021e4:	28 9b       	sub	r11,-119
800021e6:	c1 68       	rjmp	80002212 <_free_r+0x15a>
800021e8:	e0 4b 05 54 	cp.w	r11,1364
800021ec:	e0 88 00 10 	brls	8000220c <_free_r+0x154>
800021f0:	37 eb       	mov	r11,126
800021f2:	c1 08       	rjmp	80002212 <_free_r+0x15a>
800021f4:	80 00       	ld.sh	r0,r0[0x0]
800021f6:	1f 96       	ld.ub	r6,pc[0x1]
800021f8:	00 00       	add	r0,r0
800021fa:	01 04       	ld.w	r4,r0++
800021fc:	00 00       	add	r0,r0
800021fe:	05 0c       	ld.w	r12,r2++
80002200:	00 00       	add	r0,r0
80002202:	05 38       	ld.ub	r8,r2++
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 10       	sub	r0,1
80002208:	80 00       	ld.sh	r0,r0[0x0]
8000220a:	1f 98       	ld.ub	r8,pc[0x1]
8000220c:	f0 0b 16 12 	lsr	r11,r8,0x12
80002210:	28 4b       	sub	r11,-124
80002212:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80002216:	78 29       	ld.w	r9,r12[0x8]
80002218:	18 39       	cp.w	r9,r12
8000221a:	c0 e1       	brne	80002236 <_free_r+0x17e>
8000221c:	74 18       	ld.w	r8,r10[0x4]
8000221e:	a3 4b       	asr	r11,0x2
80002220:	30 1c       	mov	r12,1
80002222:	f8 0b 09 4b 	lsl	r11,r12,r11
80002226:	f1 eb 10 0b 	or	r11,r8,r11
8000222a:	12 98       	mov	r8,r9
8000222c:	95 1b       	st.w	r10[0x4],r11
8000222e:	c0 a8       	rjmp	80002242 <_free_r+0x18a>
80002230:	72 29       	ld.w	r9,r9[0x8]
80002232:	18 39       	cp.w	r9,r12
80002234:	c0 60       	breq	80002240 <_free_r+0x188>
80002236:	72 1a       	ld.w	r10,r9[0x4]
80002238:	e0 1a ff fc 	andl	r10,0xfffc
8000223c:	14 38       	cp.w	r8,r10
8000223e:	cf 93       	brcs	80002230 <_free_r+0x178>
80002240:	72 38       	ld.w	r8,r9[0xc]
80002242:	8d 38       	st.w	r6[0xc],r8
80002244:	8d 29       	st.w	r6[0x8],r9
80002246:	93 36       	st.w	r9[0xc],r6
80002248:	91 26       	st.w	r8[0x8],r6
8000224a:	0e 9c       	mov	r12,r7
8000224c:	f0 1f 00 02 	mcall	80002254 <_free_r+0x19c>
80002250:	d8 22       	popm	r4-r7,pc
80002252:	00 00       	add	r0,r0
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	1f 98       	ld.ub	r8,pc[0x1]

Disassembly of section .exception:

80002400 <_evba>:
	...

80002428 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002428:	c7 a8       	rjmp	8000251c <privilegedCalls>
	...

80002500 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002500:	1c 9f       	mov	pc,lr

80002502 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002502:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002506:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000250a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000250e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002512:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002514:	c0 31       	brne	8000251a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002516:	4b 9c       	lddpc	r12,800025f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002518:	18 9f       	mov	pc,r12

8000251a <_int0_exit>:
_int0_exit:
	rete
8000251a:	d6 03       	rete

8000251c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000251c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000251e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002520:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002522:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002524:	9b 3c       	st.w	sp[0xc],r12

80002526 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002526:	4b 6c       	lddpc	r12,800025fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002528:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000252a:	c0 61       	brne	80002536 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000252c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000252e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002530:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002532:	d3 02       	popm	r11-r12
	rete
80002534:	d6 03       	rete

80002536 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002536:	4b 3c       	lddpc	r12,80002600 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002538:	18 3b       	cp.w	r11,r12
	brne privexception
8000253a:	c0 61       	brne	80002546 <privexception>
	ld.w r12,sp[USERSR]
8000253c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000253e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002540:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002542:	d3 02       	popm	r11-r12
	rete
80002544:	d6 03       	rete

80002546 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002546:	c0 08       	rjmp	80002546 <privexception>

80002548 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002548:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000254a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000254e:	4a ec       	lddpc	r12,80002604 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002550:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002552:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002554:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002558:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000255c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002560:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002562:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002564:	1c 9f       	mov	pc,lr

80002566 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002566:	d3 03       	ssrf	0x10
	mov pc,lr
80002568:	1c 9f       	mov	pc,lr

8000256a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000256a:	d5 03       	csrf	0x10
	mov pc,lr
8000256c:	1c 9f       	mov	pc,lr

8000256e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000256e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002572:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002574:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002578:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000257c:	1c 9f       	mov	pc,lr

8000257e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000257e:	4a 3c       	lddpc	r12,80002608 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002580:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002582:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002584:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002586:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002588:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000258a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000258c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000258e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002590:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002592:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002594:	33 40       	mov	r0,52
	add r0,r12
80002596:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002598:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000259c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000259e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800025a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800025a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800025a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800025a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800025aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800025ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800025ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800025b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800025b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800025b6:	1c 9f       	mov	pc,lr

800025b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800025b8:	49 4c       	lddpc	r12,80002608 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800025ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800025bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800025be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800025c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800025c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800025c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800025c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800025ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800025cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800025ce:	33 40       	mov	r0,52
	add r0,r12
800025d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800025d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800025d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800025d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800025da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800025dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800025de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800025e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800025e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800025e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800025e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800025e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800025ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800025ec:	d4 01       	pushm	lr
	call timerStart
800025ee:	f0 1f 00 08 	mcall	8000260c <contextRestoreFromISR+0x54>
	popm lr
800025f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800025f4:	1c 9f       	mov	pc,lr
800025f6:	00 00       	add	r0,r0
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	12 d4       	st.w	--r9,r4
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	25 66       	sub	r6,86
80002600:	80 00       	ld.sh	r0,r0[0x0]
80002602:	25 6a       	sub	r10,86
80002604:	80 00       	ld.sh	r0,r0[0x0]
80002606:	24 00       	sub	r0,64
80002608:	00 00       	add	r0,r0
8000260a:	05 90       	ld.ub	r0,r2[0x1]
8000260c:	80 00       	ld.sh	r0,r0[0x0]
8000260e:	19 9a       	ld.ub	r10,r12[0x1]
	...
